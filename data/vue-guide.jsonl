{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Introduction is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Introduction in vue-guide.\n\n# Introduction\n\nYou are reading the documentation for Vue 3!Here's a quick rundown of what this is about:\n\n## What is Vue?\n\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required.\n\n## The Progressive Framework\n\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\n\n## Single-File Components\n\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\n\n## API Styles\n\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar.\n\n## Still Got Questions?\n\nCheck out our [FAQ](https://vuejs.org/about/faq).\n\n## Pick Your Learning Path\n\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is vue? in vue-guide?\n\nAssistant: To what is vue? in vue-guide, here's what you do:\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the progressive framework in vue-guide?\n\nAssistant: To the progressive framework in vue-guide, here's what you do:\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I single-file components in vue-guide?\n\nAssistant: To single-file components in vue-guide, here's what you do:\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I api styles in vue-guide?\n\nAssistant: To api styles in vue-guide, here's what you do:\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I still got questions? in vue-guide?\n\nAssistant: To still got questions? in vue-guide, here's what you do:\nCheck out our [FAQ](https://vuejs.org/about/faq)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I pick your learning path in vue-guide?\n\nAssistant: To pick your learning path in vue-guide, here's what you do:\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Introduction in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Minimal Example with Options API**:\n\n```yaml\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with options api, which is an important aspect of introduction.\n\n**Minimal Example with Composition API**:\n\n```yaml\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with composition api, which is an important aspect of introduction.\n\n**Single-File Component Example with Options API**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with options api, which is an important aspect of introduction.\n\n**Single-File Component Example with Composition API**:\n\n```yaml\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with composition api, which is an important aspect of introduction.\n\n**Options API Example**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to options api example, which is an important aspect of introduction.\n\n**Composition API Example**:\n\n```yaml\n<script setup>\nimport { ref, onMounted } from 'vue'\nconst count = ref(0)\nfunction increment() {\n  count.value++\n}\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to composition api example, which is an important aspect of introduction.\n\n", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Introduction in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\nFor production use, go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\nFor production use, go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 00:56:10", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "scrapeId": "b4673885-a64a-4c6c-b967-dbe5cfb2c600", "sourceURL": "https://vuejs.org/guide", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Accessibility is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Accessibility in vue-guide.\n\n# Accessibility\n\nWeb accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.Here's a quick rundown of what this is about:\n\n## Skip link\n\nYou should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages.\n\nTypically this is done on the top of `App.vue` as it will be the first focusable element on all your pages:\n\n```template\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nTo hide the link unless it is focused, you can add the following style:\n\n```css\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nOnce a user changes route, bring focus back to the very beginning of the page, right before the skip link. This can be achieved by calling focus on the `backToTop` template ref (assuming usage of `vue-router`):\n\n```vue\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>\n```\n\n## Content Structure\n\nOne of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application.\n\n### Headings\n\nUsers can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:\n\n- Nest headings in their ranking order: `<h1>` - `<h6>`\n- Don‚Äôt skip headings within a section\n- Use actual heading tags instead of styling text to give the visual appearance of headings\n\n```template\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```\n\n## Landmarks\n\n[Landmarks](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) provide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can use [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to help you achieve this.\n\n| HTML | ARIA Role | Landmark Purpose |\n| --- | --- | --- |\n| header | role=\"banner\" | Prime heading: title of the page |\n| nav | role=\"navigation\" | Collection of links suitable for use when navigating the document or related documents |\n| main | role=\"main\" | The main or central content of the document. |\n| footer | role=\"contentinfo\" | Information about the parent document: footnotes/copyrights/links to privacy statement |\n| aside | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content |\n| search | role=\"search\" | This section contains the search functionality for the application |\n| form | role=\"form\" | Collection of form-associated elements |\n| section | role=\"region\" | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\n\n[Read more about landmarks](https://www.w3.org/TR/wai-aria-1.2/#landmark_roles)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I skip link in vue-guide?\n\nAssistant: To skip link in vue-guide, here's what you do:\nYou should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages.\n\nTypically this is done on the top of `App.vue` as it will be the first focusable element on all your pages:\n\n```template\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nTo hide the link unless it is focused, you can add the following style:\n\n```css\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nOnce a user changes route, bring focus back to the very beginning of the page, right before the skip link. This can be achieved by calling focus on the `backToTop` template ref (assuming usage of `vue-router`):\n\n```vue\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I content structure in vue-guide?\n\nAssistant: To content structure in vue-guide, here's what you do:\nOne of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application.\n\n### Headings\n\nUsers can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:\n\n- Nest headings in their ranking order: `<h1>` - `<h6>`\n- Don‚Äôt skip headings within a section\n- Use actual heading tags instead of styling text to give the visual appearance of headings\n\n```template\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I landmarks in vue-guide?\n\nAssistant: To landmarks in vue-guide, here's what you do:\n[Landmarks](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) provide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can use [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to help you achieve this.\n\n| HTML | ARIA Role | Landmark Purpose |\n| --- | --- | --- |\n| header | role=\"banner\" | Prime heading: title of the page |\n| nav | role=\"navigation\" | Collection of links suitable for use when navigating the document or related documents |\n| main | role=\"main\" | The main or central content of the document. |\n| footer | role=\"contentinfo\" | Information about the parent document: footnotes/copyrights/links to privacy statement |\n| aside | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content |\n| search | role=\"search\" | This section contains the search functionality for the application |\n| form | role=\"form\" | Collection of form-associated elements |\n| section | role=\"region\" | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\n\n[Read more about landmarks](https://www.w3.org/TR/wai-aria-1.2/#landmark_roles).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Accessibility in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Skip Link Template**:\n\n```yaml\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nThis snippet shows you how to skip link template, which is an important aspect of accessibility.\n\n**Skip Link CSS**:\n\n```yaml\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nThis snippet shows you how to skip link css, which is an important aspect of accessibility.\n\n**Focus on Route Change**:\n\n```yaml\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\nThis snippet shows you how to focus on route change, which is an important aspect of accessibility.\n\n**Headings Template**:\n\n```yaml\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```\n\nThis snippet shows you how to headings template, which is an important aspect of accessibility.\n\n**Landmarks Table**:\n\n```yaml\n| HTML | ARIA Role | Landmark Purpose |\n| --- | --- | --- |\n| header | role=\"banner\" | Prime heading: title of the page |\n| nav | role=\"navigation\" | Collection of links suitable for use when navigating the document or related documents |\n| main | role=\"main\" | The main or central content of the document. |\n| footer | role=\"contentinfo\" | Information about the parent document: footnotes/copyrights/links to privacy statement |\n| aside | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content |\n| search | role=\"search\" | This section contains the search functionality for the application |\n| form | role=\"form\" | Collection of form-associated elements |\n| section | role=\"region\" | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\n```\n\nThis snippet shows you how to landmarks table, which is an important aspect of accessibility.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Accessibility in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdd a skip link at the top of each page to allow users to skip repeated content.\n\nUse descriptive headings for every section to aid navigation.\n\nNest headings in their ranking order and avoid skipping headings within a section.\n\nUse actual heading tags instead of styling text to appear as headings.\n\nProvide labels for all form controls and link them correctly using `for` and `id`.\n\nAvoid using placeholders in input fields as they can confuse users.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility.html", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:44", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Accessibility | Vue.js", "ogUrl": "https://vuejs.org/", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:type": "website", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "76394978-76e9-4851-9ce4-e9746b00ce60", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility.html", "url": "https://vuejs.org/guide/best-practices/accessibility.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Performance is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Performance in vue-guide.\n\n# Performance\n\nThis page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.Here's a quick rundown of what this is about:\n\n## Overview\n\nVue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application.\n\nFirst, let's discuss the two major aspects of web performance:\n\n- **Page Load Performance**: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics like [Largest Contentful Paint (LCP)](https://web.dev/lcp/) and [Interaction to Next Paint](https://web.dev/articles/inp).\n\n- **Update Performance**: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA).\n\nWhile it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:\n\n- Consult [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue) to see how you can leverage Vue in different ways.\n- Jason Miller discusses the types of web applications and their respective ideal implementation / delivery in [Application Holotypes](https://jasonformat.com/application-holotypes/).\n\n## Profiling Options\n\nTo improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:\n\nFor profiling load performance of production deployments:\n\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n\nFor profiling performance during local development:\n\n- [Chrome DevTools Performance Panel](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n  - [`app.config.performance`](https://vuejs.org/api/application#app-config-performance) enables Vue-specific performance markers in Chrome DevTools' performance timeline.\n- [Vue DevTools Extension](https://vuejs.org/guide/scaling-up/tooling#browser-devtools) also provides a performance profiling feature.\n\n## Page Load Optimizations\n\nThere are many framework-agnostic aspects for optimizing page load performance - check out [this web.dev guide](https://web.dev/fast/) for a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue.\n\n### Choosing the Right Architecture\nIf your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated with [Server-Side Rendering (SSR)](https://vuejs.org/guide/extras/ways-of-using-vue#fullstack-ssr) or [Static Site Generation (SSG)](https://vuejs.org/guide/extras/ways-of-using-vue#jamstack-ssg). Check out the [SSR Guide](https://vuejs.org/guide/scaling-up/ssr) to learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client.\n\nIf your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG.\n\n### Bundle Size and Tree-shaking\nOne of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:\n\n- Use a build step if possible.\n  - Many of Vue's APIs are [\"tree-shakable\"](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) if bundled via a modern build tool. For example, if you don't use the built-in `<Transition>` component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.\n  - When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves **14kb** min+gzipped JavaScript and avoids the runtime compilation cost.\n- Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.\n  - If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer `lodash-es` over `lodash`.\n  - Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools like [bundlejs.com](https://bundlejs.com/) can be used for quick checks, but measuring with your actual build setup will always be the most accurate.\n- If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider using [petite-vue](https://github.com/vuejs/petite-vue) (only **6kb**) instead.\n\n### Code Splitting\nCode splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance.\n\nBundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:\n\n```js\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nLazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue's [Async Component](https://vuejs.org/guide/components/async) feature to create split chunks for component trees:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))\n```\n\nFor applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate from `defineAsyncComponent`. See [Lazy Loading Routes](https://router.vuejs.org/guide/advanced/lazy-loading.html) for more details.\n\n## Update Optimizations\n\n### Props Stability\nIn Vue, a child component only updates when at least one of its received props has changed. Consider the following example:\n\n```html\ntemplate\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />\n```\n\nInside the `<ListItem>` component, it uses its `id` and `activeId` props to determine whether it is the currently active item. While this works, the problem is that whenever `activeId` changes, **every** `<ListItem>` in the list has to update!\n\nIdeally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make `<ListItem>` directly accept an `active` prop instead:\n\n```html\ntemplate\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\nNow, for most components the `active` prop will remain the same when `activeId` changes, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible.\n\n### `v-once`\n`v-once` is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-once) for more details.\n\n### `v-memo`\n`v-memo` is a built-in directive that can be used to conditionally skip the update of large sub-trees or `v-for` lists. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-memo) for more details.\n\n### Computed Stability\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the following `isEven` computed only triggers effects if the returned value has changed from `true` to `false`, or vice-versa:\n\n```js\nconst count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4\n```\n\nThis reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:\n\n```js\nconst computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})\n```\n\nBecause a new object is created each time, the new value is technically always different from the old value. Even if the `isEven` property remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it.\n\nInstead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:\n\n```js\nconst computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})\n```\n\n[Try it in the playground](https://play.vuejs.org/#eNqVVMtu2zAQ/JUFgSZK4UpuczMkow/40AJ9IC3aQ9mDIlG2EokUyKVt1PC/d0lKtoEminMQQC1nZ4c7S+7Yu66L11awGUtNoesOwQi03ZzLuu2URtiBFtUECtV2FkU5gU2OxWpRVaJA2EOlVQuXxHDJJZeFkgYJayVC5hKj6dUxLnzSjZXmV40rZfFrh3Vb/82xVrLH//5DCQNNKPkweNiNVFP+zBsrIJvDjksgGrRahjVAbRZrIWdBVLz2yBfwBrIsg6mD7LncPyryfIVnywupUmz68HOEEqqCI+XFBQzrOKR79MDdx66GCn1jhpQDZx8f0oZ+nBgdRVcH/aMuBt1xZ80qGvGvh/X6nlXwnGpPl6qsLLxTtitzFFTNl0oSN/79AKOCHHQuS5pw4XorbXsr9ImHZN7nHFdx1SilI78MeOJ7Ca+nbvgd+GgomQOv6CNjSQqXaRJuHd03+kHRdg3JoT+A3a7XsfcmpbcWkQS/LZq6uM84C8o5m4fFuOg0CemeOXXX2w2E6ylsgj2gTgeYio/f1l5UEqj+Z3yC7lGuNDlpApswNNTrql7Gd0ZJeqW8TZw5t+tGaMdDXnA2G4acs7xp1OaTj6G2YjLEi5Uo7h+I35mti3H2TQsj9Jp6etjDXC8Fhu3F9y9iS+vDZqtK2xB6ZPNGGNVYpzHA3ltZkuwTnFf70b+1tVz+MIstCmmGQzmh/p56PGf00H4YOfpR7nV8PTxubP8P2GAP9Q==)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I overview in vue-guide?\n\nAssistant: To overview in vue-guide, here's what you do:\nVue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application.\n\nFirst, let's discuss the two major aspects of web performance:\n\n- **Page Load Performance**: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics like [Largest Contentful Paint (LCP)](https://web.dev/lcp/) and [Interaction to Next Paint](https://web.dev/articles/inp).\n\n- **Update Performance**: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA).\n\nWhile it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:\n\n- Consult [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue) to see how you can leverage Vue in different ways.\n- Jason Miller discusses the types of web applications and their respective ideal implementation / delivery in [Application Holotypes](https://jasonformat.com/application-holotypes/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I profiling options in vue-guide?\n\nAssistant: To profiling options in vue-guide, here's what you do:\nTo improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:\n\nFor profiling load performance of production deployments:\n\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n\nFor profiling performance during local development:\n\n- [Chrome DevTools Performance Panel](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n  - [`app.config.performance`](https://vuejs.org/api/application#app-config-performance) enables Vue-specific performance markers in Chrome DevTools' performance timeline.\n- [Vue DevTools Extension](https://vuejs.org/guide/scaling-up/tooling#browser-devtools) also provides a performance profiling feature..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I page load optimizations in vue-guide?\n\nAssistant: To page load optimizations in vue-guide, here's what you do:\nThere are many framework-agnostic aspects for optimizing page load performance - check out [this web.dev guide](https://web.dev/fast/) for a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue.\n\n### Choosing the Right Architecture\nIf your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated with [Server-Side Rendering (SSR)](https://vuejs.org/guide/extras/ways-of-using-vue#fullstack-ssr) or [Static Site Generation (SSG)](https://vuejs.org/guide/extras/ways-of-using-vue#jamstack-ssg). Check out the [SSR Guide](https://vuejs.org/guide/scaling-up/ssr) to learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client.\n\nIf your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG.\n\n### Bundle Size and Tree-shaking\nOne of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:\n\n- Use a build step if possible.\n  - Many of Vue's APIs are [\"tree-shakable\"](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) if bundled via a modern build tool. For example, if you don't use the built-in `<Transition>` component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.\n  - When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves **14kb** min+gzipped JavaScript and avoids the runtime compilation cost.\n- Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.\n  - If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer `lodash-es` over `lodash`.\n  - Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools like [bundlejs.com](https://bundlejs.com/) can be used for quick checks, but measuring with your actual build setup will always be the most accurate.\n- If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider using [petite-vue](https://github.com/vuejs/petite-vue) (only **6kb**) instead.\n\n### Code Splitting\nCode splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance.\n\nBundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:\n\n```js\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nLazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue's [Async Component](https://vuejs.org/guide/components/async) feature to create split chunks for component trees:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))\n```\n\nFor applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate from `defineAsyncComponent`. See [Lazy Loading Routes](https://router.vuejs.org/guide/advanced/lazy-loading.html) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I update optimizations in vue-guide?\n\nAssistant: To update optimizations in vue-guide, here's what you do:\n### Props Stability\nIn Vue, a child component only updates when at least one of its received props has changed. Consider the following example:\n\n```html\ntemplate\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />\n```\n\nInside the `<ListItem>` component, it uses its `id` and `activeId` props to determine whether it is the currently active item. While this works, the problem is that whenever `activeId` changes, **every** `<ListItem>` in the list has to update!\n\nIdeally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make `<ListItem>` directly accept an `active` prop instead:\n\n```html\ntemplate\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\nNow, for most components the `active` prop will remain the same when `activeId` changes, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible.\n\n### `v-once`\n`v-once` is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-once) for more details.\n\n### `v-memo`\n`v-memo` is a built-in directive that can be used to conditionally skip the update of large sub-trees or `v-for` lists. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-memo) for more details.\n\n### Computed Stability\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the following `isEven` computed only triggers effects if the returned value has changed from `true` to `false`, or vice-versa:\n\n```js\nconst count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4\n```\n\nThis reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:\n\n```js\nconst computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})\n```\n\nBecause a new object is created each time, the new value is technically always different from the old value. Even if the `isEven` property remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it.\n\nInstead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:\n\n```js\nconst computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})\n```\n\n[Try it in the playground](https://play.vuejs.org/#eNqVVMtu2zAQ/JUFgSZK4UpuczMkow/40AJ9IC3aQ9mDIlG2EokUyKVt1PC/d0lKtoEminMQQC1nZ4c7S+7Yu66L11awGUtNoesOwQi03ZzLuu2URtiBFtUECtV2FkU5gU2OxWpRVaJA2EOlVQuXxHDJJZeFkgYJayVC5hKj6dUxLnzSjZXmV40rZfFrh3Vb/82xVrLH//5DCQNNKPkweNiNVFP+zBsrIJvDjksgGrRahjVAbRZrIWdBVLz2yBfwBrIsg6mD7LncPyryfIVnywupUmz68HOEEqqCI+XFBQzrOKR79MDdx66GCn1jhpQDZx8f0oZ+nBgdRVcH/aMuBt1xZ80qGvGvh/X6nlXwnGpPl6qsLLxTtitzFFTNl0oSN/79AKOCHHQuS5pw4XorbXsr9ImHZN7nHFdx1SilI78MeOJ7Ca+nbvgd+GgomQOv6CNjSQqXaRJuHd03+kHRdg3JoT+A3a7XsfcmpbcWkQS/LZq6uM84C8o5m4fFuOg0CemeOXXX2w2E6ylsgj2gTgeYio/f1l5UEqj+Z3yC7lGuNDlpApswNNTrql7Gd0ZJeqW8TZw5t+tGaMdDXnA2G4acs7xp1OaTj6G2YjLEi5Uo7h+I35mti3H2TQsj9Jp6etjDXC8Fhu3F9y9iS+vDZqtK2xB6ZPNGGNVYpzHA3ltZkuwTnFf70b+1tVz+MIstCmmGQzmh/p56PGf00H4YOfpR7nV8PTxubP8P2GAP9Q==).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Performance in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Code Splitting Example**:\n\n```yaml\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nThis snippet shows you how to code splitting example, which is an important aspect of performance.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Performance in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsult Ways of Using Vue to see how you can leverage Vue in different ways.\n\nBe cautious of size when introducing new dependencies!\n\nIf using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly.\n\nCheck a dependency's size and evaluate whether it is worth the functionality it provides.\n\nConsider using petite-vue (only 6kb) instead if you prefer to avoid a build step.\n\nUse lazy loading for features that are not immediately needed after initial page load.\n\nKeep the props passed to child components as stable as possible.\n\nUse v-once to render content that relies on runtime data but never needs to update.\n\nUse v-memo to conditionally skip the update of large sub-trees or v-for lists.\n\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance.html", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:21", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "title": "Performance | Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "62add239-ca06-4624-a16d-77a80ac62e14", "sourceURL": "https://vuejs.org/guide/best-practices/performance.html", "url": "https://vuejs.org/guide/best-practices/performance.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Production Deployment is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Production Deployment in vue-guide.\n\n# Production Deployment\n\nBest practices for deploying Vue applications in production environments.Here's a quick rundown of what this is about:\n\n## Development vs. Production\n\nDuring development, Vue provides a number of features to improve the development experience:\n\n- Warning for common errors and pitfalls\n- Props / events validation\n- Reactivity debugging hooks\n- Devtools integration\n\nHowever, these features become useless in production. Some of the warning checks can also incur a small amount of performance overhead. When deploying to production, we should drop all the unused, development-only code branches for smaller payload size and better performance.\n\n## Without Build Tools\n\nIf you are using Vue without a build tool by loading it from a CDN or self-hosted script, make sure to use the production build (dist files that end in `.prod.js`) when deploying to production. Production builds are pre-minified with all development-only code branches removed.\n\n- If using global build (accessing via the `Vue` global): use `vue.global.prod.js`.\n- If using ESM build (accessing via native ESM imports): use `vue.esm-browser.prod.js`.\n\nConsult the dist file guide for more details.\n\n## With Build Tools\n\nProjects scaffolded via `create-vue` (based on Vite) or Vue CLI (based on webpack) are pre-configured for production builds.\n\nIf using a custom setup, make sure that:\n\n1. `vue` resolves to `vue.runtime.esm-bundler.js`.\n2. The compile time feature flags are properly configured.\n3. `process.env.NODE_ENV` is replaced with \"production\" during build.\n\nAdditional references:\n\n- Vite production build guide\n- Vite deployment guide\n- Vue CLI deployment guide.\n\n## Tracking Runtime Errors\n\nThe app-level error handler can be used to report errors to tracking services:\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}\n```\n\nServices such as Sentry and Bugsnag also provide official integrations for Vue.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I development vs. production in vue-guide?\n\nAssistant: To development vs. production in vue-guide, here's what you do:\nDuring development, Vue provides a number of features to improve the development experience:\n\n- Warning for common errors and pitfalls\n- Props / events validation\n- Reactivity debugging hooks\n- Devtools integration\n\nHowever, these features become useless in production. Some of the warning checks can also incur a small amount of performance overhead. When deploying to production, we should drop all the unused, development-only code branches for smaller payload size and better performance..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I without build tools in vue-guide?\n\nAssistant: To without build tools in vue-guide, here's what you do:\nIf you are using Vue without a build tool by loading it from a CDN or self-hosted script, make sure to use the production build (dist files that end in `.prod.js`) when deploying to production. Production builds are pre-minified with all development-only code branches removed.\n\n- If using global build (accessing via the `Vue` global): use `vue.global.prod.js`.\n- If using ESM build (accessing via native ESM imports): use `vue.esm-browser.prod.js`.\n\nConsult the dist file guide for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I with build tools in vue-guide?\n\nAssistant: To with build tools in vue-guide, here's what you do:\nProjects scaffolded via `create-vue` (based on Vite) or Vue CLI (based on webpack) are pre-configured for production builds.\n\nIf using a custom setup, make sure that:\n\n1. `vue` resolves to `vue.runtime.esm-bundler.js`.\n2. The compile time feature flags are properly configured.\n3. `process.env.NODE_ENV` is replaced with \"production\" during build.\n\nAdditional references:\n\n- Vite production build guide\n- Vite deployment guide\n- Vue CLI deployment guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I tracking runtime errors in vue-guide?\n\nAssistant: To tracking runtime errors in vue-guide, here's what you do:\nThe app-level error handler can be used to report errors to tracking services:\n\n```javascript\nimport { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}\n```\n\nServices such as Sentry and Bugsnag also provide official integrations for Vue..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Production Deployment in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Error Handling Example**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}\n```\n\nThis snippet shows you how to error handling example, which is an important aspect of production deployment.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Production Deployment in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse production builds for better performance and smaller payloads.\n\nEnsure that development-only code is removed in production builds.\n\nConfigure error tracking services to monitor runtime errors.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/production-deployment.html", "title": "Production Deployment", "description": "Best practices for deploying Vue applications in production environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:58:35", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:type": "website", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Production Deployment | Vue.js", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "scrapeId": "a25a0a88-ed34-46bf-b959-f2e48f3ffe78", "sourceURL": "https://vuejs.org/guide/best-practices/production-deployment.html", "url": "https://vuejs.org/guide/best-practices/production-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Security is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Security in vue-guide.\n\n# Security\n\nBest practices for ensuring security when using Vue.Here's a quick rundown of what this is about:\n\n## Reporting Vulnerabilities\n\nWhen a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please email security@vuejs.org.\n\nWhile the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible.\n\n## Rule No.1: Never Use Non-trusted Templates\n\nThe most fundamental security rule when using Vue is **never use non-trusted content as your component template**. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:\n\n```js\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nVue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you.\n\n## What Vue Does to Protect You\n\n### HTML content\nWhether using templates or render functions, content is automatically escaped. That means in this template:\n\n```template\n<h1>{{ userProvidedString }}</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'<script>alert(\"hi\")</script>'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\n```\n\nthus preventing the script injection. This escaping is done using native browser APIs, like `textContent`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n### Attribute bindings\nSimilarly, dynamic attribute bindings are also automatically escaped. That means in this template:\n\n```template\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'\" onclick=\"alert(\\'hi\\')'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&quot; onclick=&quot;alert('hi')\n```\n\nthus preventing the close of the `title` attribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, like `setAttribute`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n## Potential Dangers\n\nIn any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though.\n\nFor example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables.\n\n### HTML Injection\nAs you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However, **in cases where you know the HTML is safe**, you can explicitly render HTML content:\n\n- Using a template:\n\n```template\n<div v-html=\"userProvidedHtml\"></div>\n```\n- Using a render function:\n\n```js\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n- Using a render function with JSX:\n\n```jsx\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nWARNING\n\nUser-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers.\n\n## URL Injection\n\nIn a URL like this:\n\n```template\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThere's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution using `javascript:`. There are libraries such as [sanitize-url](https://www.npmjs.com/package/@braintree/sanitize-url) to help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue. **User-provided URLs should always be sanitized by your backend before even being saved to a database.** Then the problem is avoided for _every_ client connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations.\n\n## Style Injection\n\nLooking at this example:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nLet's assume that `sanitizedUrl` has been sanitized, so that it's definitely a real URL and not JavaScript. With the `userProvidedStyles`, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then if `https://user-controlled-website.com/` is built to resemble the login page of your application, they might have just captured a user's real login information.\n\nYou may be able to imagine how allowing user-provided content for a `<style>` element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:\n\n```template\n<style>{{ userProvidedStyles }}</style>\n```\n\nTo keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using its [object syntax](https://vuejs.org/guide/essentials/class-and-style#binding-to-objects-1) and only allowing users to provide values for specific properties it's safe for them to control, like this:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>\n```\n\n## JavaScript Injection\n\nWe strongly discourage ever rendering a `<script>` element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime.\n\nEvery HTML element has attributes with values accepting strings of JavaScript, such as `onclick`, `onfocus`, and `onmouseenter`. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided.\n\nWARNING\n\nUser-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it.\n\nSometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:\n\n1. The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.\n2. The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is to **never mount Vue on nodes that may contain server-rendered and user-provided content**.\n\n## Best Practices\n\nThe general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework.\n\nBeyond the recommendations made above for [Potential Dangers](https://vuejs.org/guide/best-practices/security.html#potential-dangers), we also recommend familiarizing yourself with these resources:\n\n- [HTML5 Security Cheat Sheet](https://html5sec.org/)\n- [OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\nThen use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM.\n\n## Backend Coordination\n\nHTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions.\n\n## Server-Side Rendering (SSR)\n\nThere are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughout [our SSR documentation](https://vuejs.org/guide/scaling-up/ssr) to avoid vulnerabilities.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "overview", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reporting vulnerabilities in vue-guide?\n\nAssistant: To reporting vulnerabilities in vue-guide, here's what you do:\nWhen a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please email security@vuejs.org.\n\nWhile the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I rule no.1: never use non-trusted templates in vue-guide?\n\nAssistant: To rule no.1: never use non-trusted templates in vue-guide, here's what you do:\nThe most fundamental security rule when using Vue is **never use non-trusted content as your component template**. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:\n\n```js\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nVue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what vue does to protect you in vue-guide?\n\nAssistant: To what vue does to protect you in vue-guide, here's what you do:\n### HTML content\nWhether using templates or render functions, content is automatically escaped. That means in this template:\n\n```template\n<h1>{{ userProvidedString }}</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'<script>alert(\"hi\")</script>'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\n```\n\nthus preventing the script injection. This escaping is done using native browser APIs, like `textContent`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n### Attribute bindings\nSimilarly, dynamic attribute bindings are also automatically escaped. That means in this template:\n\n```template\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'\" onclick=\"alert(\\'hi\\')'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&quot; onclick=&quot;alert('hi')\n```\n\nthus preventing the close of the `title` attribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, like `setAttribute`, so a vulnerability can only exist if the browser itself is vulnerable..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I potential dangers in vue-guide?\n\nAssistant: To potential dangers in vue-guide, here's what you do:\nIn any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though.\n\nFor example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables.\n\n### HTML Injection\nAs you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However, **in cases where you know the HTML is safe**, you can explicitly render HTML content:\n\n- Using a template:\n\n```template\n<div v-html=\"userProvidedHtml\"></div>\n```\n- Using a render function:\n\n```js\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n- Using a render function with JSX:\n\n```jsx\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nWARNING\n\nUser-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I url injection in vue-guide?\n\nAssistant: To url injection in vue-guide, here's what you do:\nIn a URL like this:\n\n```template\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThere's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution using `javascript:`. There are libraries such as [sanitize-url](https://www.npmjs.com/package/@braintree/sanitize-url) to help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue. **User-provided URLs should always be sanitized by your backend before even being saved to a database.** Then the problem is avoided for _every_ client connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I style injection in vue-guide?\n\nAssistant: To style injection in vue-guide, here's what you do:\nLooking at this example:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nLet's assume that `sanitizedUrl` has been sanitized, so that it's definitely a real URL and not JavaScript. With the `userProvidedStyles`, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then if `https://user-controlled-website.com/` is built to resemble the login page of your application, they might have just captured a user's real login information.\n\nYou may be able to imagine how allowing user-provided content for a `<style>` element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:\n\n```template\n<style>{{ userProvidedStyles }}</style>\n```\n\nTo keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using its [object syntax](https://vuejs.org/guide/essentials/class-and-style#binding-to-objects-1) and only allowing users to provide values for specific properties it's safe for them to control, like this:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I javascript injection in vue-guide?\n\nAssistant: To javascript injection in vue-guide, here's what you do:\nWe strongly discourage ever rendering a `<script>` element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime.\n\nEvery HTML element has attributes with values accepting strings of JavaScript, such as `onclick`, `onfocus`, and `onmouseenter`. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided.\n\nWARNING\n\nUser-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it.\n\nSometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:\n\n1. The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.\n2. The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is to **never mount Vue on nodes that may contain server-rendered and user-provided content**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I best practices in vue-guide?\n\nAssistant: To best practices in vue-guide, here's what you do:\nThe general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework.\n\nBeyond the recommendations made above for [Potential Dangers](https://vuejs.org/guide/best-practices/security.html#potential-dangers), we also recommend familiarizing yourself with these resources:\n\n- [HTML5 Security Cheat Sheet](https://html5sec.org/)\n- [OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\nThen use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I backend coordination in vue-guide?\n\nAssistant: To backend coordination in vue-guide, here's what you do:\nHTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I server-side rendering (ssr) in vue-guide?\n\nAssistant: To server-side rendering (ssr) in vue-guide, here's what you do:\nThere are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughout [our SSR documentation](https://vuejs.org/guide/scaling-up/ssr) to avoid vulnerabilities..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "section_detail", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Security in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Non-trusted Template Example**:\n\n```yaml\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nThis snippet shows you how to non-trusted template example, which is an important aspect of security.\n\n**HTML Escaping Example**:\n\n```yaml\n<h1>{{ userProvidedString }}</h1>\n```\n\nThis snippet shows you how to html escaping example, which is an important aspect of security.\n\n**Attribute Binding Example**:\n\n```yaml\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nThis snippet shows you how to attribute binding example, which is an important aspect of security.\n\n**HTML Injection Example (Template)**:\n\n```yaml\n<div v-html=\"userProvidedHtml\"></div>\n```\n\nThis snippet shows you how to html injection example (template), which is an important aspect of security.\n\n**HTML Injection Example (Render Function)**:\n\n```yaml\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n\nThis snippet shows you how to html injection example (render function), which is an important aspect of security.\n\n**HTML Injection Example (JSX)**:\n\n```yaml\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nThis snippet shows you how to html injection example (jsx), which is an important aspect of security.\n\n**URL Binding Example**:\n\n```yaml\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThis snippet shows you how to url binding example, which is an important aspect of security.\n\n**Style Binding Example**:\n\n```yaml\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nThis snippet shows you how to style binding example, which is an important aspect of security.\n\n**JavaScript Injection Warning**:\n\n```yaml\n<script>{{ userProvidedJavaScript }}</script>\n```\n\nThis snippet shows you how to javascript injection warning, which is an important aspect of security.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "code_examples", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Security in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways use the latest versions of Vue and its official companion libraries.\n\nNever use non-trusted content as your component template.\n\nUser-provided URLs should always be sanitized by your backend before being saved to a database.\n\nNever mount Vue on nodes that may contain server-rendered and user-provided content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security.html", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 00:59:11", "type": "best_practices", "page_metadata": {"title": "Security | Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "language": "en-US", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "twitter:card": "summary", "scrapeId": "12673493-2973-4f8e-9152-1c02fec282f6", "sourceURL": "https://vuejs.org/guide/best-practices/security.html", "url": "https://vuejs.org/guide/best-practices/security.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what KeepAlive is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain KeepAlive in vue-guide.\n\n# KeepAlive\n\n<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nIn the Component Basics chapter, we introduced the syntax for Dynamic Components, using the <component> special element:\n\n```\n<component :is=\"activeComponent\" />\n```\n\nBy default, an active component instance will be unmounted when switching away from it. This will cause any changed state it holds to be lost. When this component is displayed again, a new instance will be created with only the initial state.\n\nIn the example below, we have two stateful components - A contains a counter, while B contains a message synced with an input via v-model. Try updating the state of one of them, switch away, and then switch back to it:\n\nA B\n\nCurrent component: A\n\nCount: 0+\n\nYou'll notice that when switched back, the previous changed state would have been reset.\n\nCreating fresh component instance on switch is normally useful behavior, but in this case, we'd really like the two component instances to be preserved even when they are inactive. To solve this problem, we can wrap our dynamic component with the <KeepAlive> built-in component:\n\n```\n<!-- Inactive components will be cached! -->\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\nNow, the state will be persisted across component switches:\n\nA B\n\nCurrent component: A\n\nCount: 0+\n\n[Try it in the Playground](https://play.vuejs.org/#eNqtUsFOwzAM/RWrl4IGC+cqq2h3RFw495K12YhIk6hJi1DVf8dJSllBaAJxi+2XZz8/j0lhzHboeZIl1NadMA4sd73JKyVaozsHI9hnJqV+feJHmODY6RZS/JEuiL1uTTEXtiREnnINKFeAcgZUqtbKOqj7ruPKwe6s2VVguq4UJXEynAkDx1sjmeMYAdBGDFBLZu2uShre6ioJeaxIduAyp0KZ3oF7MxwRHWsEQmC4bXXDJWbmxpjLBiZ7DwptMUFyKCiJNP/BWUbO8gvnA+emkGKIgkKqRrRWfh+Z8MIWwpySpfbxn6wJKMGV4IuSs0UlN1HVJae7bxYvBuk+2IOIq7sLnph8P9u5DJv5VfpWWLaGqTzwZTCOM/M0IaMvBMihd04ruK+lqF/8Ajxms8EFbCiJxR8khsP6ncQosLWnWV6a/kUf2nqu75Fby04chA0iPftaYryhz6NBRLjdtajpHZTWPio=)\n\n[Try it in the Playground](https://play.vuejs.org/#eNqtU8tugzAQ/JUVl7RKWveMXFTIseofcHHAiawasPxArRD/3rVNSEhbpVUrIWB3x7PM7jAkuVL3veNJmlBTaaFsVraiUZ22sO0alcNedw2s7kmIPHS1ABQLQDEBAMqWvwVQzffMSQuDz1aI6VreWpPCEBtsJppx4wE1s+zmNoIBNLdOt8cIjzut8XAKq3A0NAIY/QNveFEyi8DA8kZJZjlGALQWPVSSGfNYJjVvujIJeaxItuMyo6JVzoJ9VxwRmtUCIdDfNV3NJWam5j7HpPOY8BEYkwxySiLLP1AWkbK4oHzmXOVS9FFOSM3jhFR4WTNfRslcO54nSwJKcCD4RsnZmJJNFPXJEl8t88quOuc39fCrHalsGyWcnJL62apYNoq12UQ8DLEFjCMy+kKA7Jy1XQtPlRTVqx+Jx6zXOJI1JbH4jejg3T+KbswBzXnFlz9Tjes/V/3CjWEHDsL/OYNvdCE8Wu3kLUQEhy+ljh+brFFu)\n\nTIP\n\nWhen used in in-DOM templates, it should be referenced as <keep-alive>.\n\n## Include / Exclude\n\nBy default, <KeepAlive> will cache any component instance inside. We can customize this behavior via the include and exclude props. Both props can be a comma-delimited string, a RegExp, or an array containing either types:\n\n```\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\nThe match is checked against the component's name option, so components that need to be conditionally cached by KeepAlive must explicitly declare a name option.\n\nTIP\n\nSince version 3.2.34, a single-file component using <script setup> will automatically infer its name option based on the filename, removing the need to manually declare the name.\n\n## Max Cached Instances\n\nWe can limit the maximum number of component instances that can be cached via the max prop. When max is specified, <KeepAlive> behaves like an LRU cache: if the number of cached instances is about to exceed the specified max count, the least recently accessed cached instance will be destroyed to make room for the new one.\n\n```\n<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\n## Lifecycle of Cached Instance\n\nWhen a component instance is removed from the DOM but is part of a component tree cached by <KeepAlive>, it goes into a deactivated state instead of being unmounted. When a component instance is inserted into the DOM as part of a cached tree, it is activated.\n\nA kept-alive component can register lifecycle hooks for these two states using onActivated() and onDeactivated():\n\n```\n<script setup>\nimport { onActivated, onDeactivated } from 'vue'\n\nonActivated(() => {\n  // called on initial mount\n  // and every time it is re-inserted from the cache\n})\n\nonDeactivated(() => {\n  // called when removed from the DOM into the cache\n  // and also when unmounted\n})\n</script>\n```\n\nA kept-alive component can register lifecycle hooks for these two states using activated and deactivated hooks:\n\n```\nexport default {\n  activated() {\n    // called on initial mount\n    // and every time it is re-inserted from the cache\n  },\n  deactivated() {\n    // called when removed from the DOM into the cache\n    // and also when unmounted\n  }\n}\n```\n\nNote that:\n\n- onActivated activated is also called on mount, and onDeactivated deactivated on unmount.\n\n- Both hooks work for not only the root component cached by <KeepAlive>, but also the descendant components in the cached tree.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nIn the Component Basics chapter, we introduced the syntax for Dynamic Components, using the <component> special element:\n\n```\n<component :is=\"activeComponent\" />\n```\n\nBy default, an active component instance will be unmounted when switching away from it. This will cause any changed state it holds to be lost. When this component is displayed again, a new instance will be created with only the initial state.\n\nIn the example below, we have two stateful components - A contains a counter, while B contains a message synced with an input via v-model. Try updating the state of one of them, switch away, and then switch back to it:\n\nA B\n\nCurrent component: A\n\nCount: 0+\n\nYou'll notice that when switched back, the previous changed state would have been reset.\n\nCreating fresh component instance on switch is normally useful behavior, but in this case, we'd really like the two component instances to be preserved even when they are inactive. To solve this problem, we can wrap our dynamic component with the <KeepAlive> built-in component:\n\n```\n<!-- Inactive components will be cached! -->\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\nNow, the state will be persisted across component switches:\n\nA B\n\nCurrent component: A\n\nCount: 0+\n\n[Try it in the Playground](https://play.vuejs.org/#eNqtUsFOwzAM/RWrl4IGC+cqq2h3RFw495K12YhIk6hJi1DVf8dJSllBaAJxi+2XZz8/j0lhzHboeZIl1NadMA4sd73JKyVaozsHI9hnJqV+feJHmODY6RZS/JEuiL1uTTEXtiREnnINKFeAcgZUqtbKOqj7ruPKwe6s2VVguq4UJXEynAkDx1sjmeMYAdBGDFBLZu2uShre6ioJeaxIduAyp0KZ3oF7MxwRHWsEQmC4bXXDJWbmxpjLBiZ7DwptMUFyKCiJNP/BWUbO8gvnA+emkGKIgkKqRrRWfh+Z8MIWwpySpfbxn6wJKMGV4IuSs0UlN1HVJae7bxYvBuk+2IOIq7sLnph8P9u5DJv5VfpWWLaGqTzwZTCOM/M0IaMvBMihd04ruK+lqF/8Ajxms8EFbCiJxR8khsP6ncQosLWnWV6a/kUf2nqu75Fby04chA0iPftaYryhz6NBRLjdtajpHZTWPio=)\n\n[Try it in the Playground](https://play.vuejs.org/#eNqtU8tugzAQ/JUVl7RKWveMXFTIseofcHHAiawasPxArRD/3rVNSEhbpVUrIWB3x7PM7jAkuVL3veNJmlBTaaFsVraiUZ22sO0alcNedw2s7kmIPHS1ABQLQDEBAMqWvwVQzffMSQuDz1aI6VreWpPCEBtsJppx4wE1s+zmNoIBNLdOt8cIjzut8XAKq3A0NAIY/QNveFEyi8DA8kZJZjlGALQWPVSSGfNYJjVvujIJeaxItuMyo6JVzoJ9VxwRmtUCIdDfNV3NJWam5j7HpPOY8BEYkwxySiLLP1AWkbK4oHzmXOVS9FFOSM3jhFR4WTNfRslcO54nSwJKcCD4RsnZmJJNFPXJEl8t88quOuc39fCrHalsGyWcnJL62apYNoq12UQ8DLEFjCMy+kKA7Jy1XQtPlRTVqx+Jx6zXOJI1JbH4jejg3T+KbswBzXnFlz9Tjes/V/3CjWEHDsL/OYNvdCE8Wu3kLUQEhy+ljh+brFFu)\n\nTIP\n\nWhen used in in-DOM templates, it should be referenced as <keep-alive>..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I include / exclude in vue-guide?\n\nAssistant: To include / exclude in vue-guide, here's what you do:\nBy default, <KeepAlive> will cache any component instance inside. We can customize this behavior via the include and exclude props. Both props can be a comma-delimited string, a RegExp, or an array containing either types:\n\n```\n<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\nThe match is checked against the component's name option, so components that need to be conditionally cached by KeepAlive must explicitly declare a name option.\n\nTIP\n\nSince version 3.2.34, a single-file component using <script setup> will automatically infer its name option based on the filename, removing the need to manually declare the name..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I max cached instances in vue-guide?\n\nAssistant: To max cached instances in vue-guide, here's what you do:\nWe can limit the maximum number of component instances that can be cached via the max prop. When max is specified, <KeepAlive> behaves like an LRU cache: if the number of cached instances is about to exceed the specified max count, the least recently accessed cached instance will be destroyed to make room for the new one.\n\n```\n<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lifecycle of cached instance in vue-guide?\n\nAssistant: To lifecycle of cached instance in vue-guide, here's what you do:\nWhen a component instance is removed from the DOM but is part of a component tree cached by <KeepAlive>, it goes into a deactivated state instead of being unmounted. When a component instance is inserted into the DOM as part of a cached tree, it is activated.\n\nA kept-alive component can register lifecycle hooks for these two states using onActivated() and onDeactivated():\n\n```\n<script setup>\nimport { onActivated, onDeactivated } from 'vue'\n\nonActivated(() => {\n  // called on initial mount\n  // and every time it is re-inserted from the cache\n})\n\nonDeactivated(() => {\n  // called when removed from the DOM into the cache\n  // and also when unmounted\n})\n</script>\n```\n\nA kept-alive component can register lifecycle hooks for these two states using activated and deactivated hooks:\n\n```\nexport default {\n  activated() {\n    // called on initial mount\n    // and every time it is re-inserted from the cache\n  },\n  deactivated() {\n    // called when removed from the DOM into the cache\n    // and also when unmounted\n  }\n}\n```\n\nNote that:\n\n- onActivated activated is also called on mount, and onDeactivated deactivated on unmount.\n\n- Both hooks work for not only the root component cached by <KeepAlive>, but also the descendant components in the cached tree..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for KeepAlive in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\n<component :is=\"activeComponent\" />\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of keepalive.\n\n**KeepAlive Example**:\n\n```yaml\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\nThis snippet shows you how to keepalive example, which is an important aspect of keepalive.\n\n**Include / Exclude Example**:\n\n```yaml\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>\n```\n\nThis snippet shows you how to include / exclude example, which is an important aspect of keepalive.\n\n**Max Cached Instances Example**:\n\n```yaml\n<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>\n```\n\nThis snippet shows you how to max cached instances example, which is an important aspect of keepalive.\n\n**Lifecycle Hooks Example**:\n\n```yaml\n<script setup>\nimport { onActivated, onDeactivated } from 'vue'\n\nonActivated(() => {\n  // called on initial mount\n  // and every time it is re-inserted from the cache\n})\n\nonDeactivated(() => {\n  // called when removed from the DOM into the cache\n  // and also when unmounted\n})\n</script>\n\nexport default {\n  activated() {\n    // called on initial mount\n    // and every time it is re-inserted from the cache\n  },\n  deactivated() {\n    // called when removed from the DOM into the cache\n    // and also when unmounted\n  }\n}\n```\n\nThis snippet shows you how to lifecycle hooks example, which is an important aspect of keepalive.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "code_examples", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using KeepAlive in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen used in in-DOM templates, it should be referenced as <keep-alive>.\n\nSince version 3.2.34, a single-file component using <script setup> will automatically infer its name option based on the filename, removing the need to manually declare the name.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/keep-alive.html", "title": "KeepAlive", "description": "<KeepAlive> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:50", "type": "best_practices", "page_metadata": {"theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "title": "KeepAlive | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "b5084bb3-6450-4e1a-a6cb-9964121483fe", "sourceURL": "https://vuejs.org/guide/built-ins/keep-alive.html", "url": "https://vuejs.org/guide/built-ins/keep-alive.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Suspense is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Suspense in vue-guide.\n\n# Suspense\n\n<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.Here's a quick rundown of what this is about:\n\n## Async Dependencies\n\nTo explain the problem <Suspense> is trying to solve and how it interacts with these async dependencies, let's imagine a component hierarchy like the following:\n\n```\n<Suspense>\n‚îî‚îÄ <Dashboard>\n   ‚îú‚îÄ <Profile>\n   ‚îÇ  ‚îî‚îÄ <FriendStatus> (component with async setup())\n   ‚îî‚îÄ <Content>\n      ‚îú‚îÄ <ActivityFeed> (async component)\n      ‚îî‚îÄ <Stats> (async component)\n```\n\nIn the component tree there are multiple nested components whose rendering depends on some async resource to be resolved first. Without <Suspense>, each of them will need to handle its own loading / error and loaded states. In the worst case scenario, we may see three loading spinners on the page, with content displayed at different times.\n\nThe <Suspense> component gives us the ability to display top-level loading / error states while we wait on these nested async dependencies to be resolved.\n\nThere are two types of async dependencies that <Suspense> can wait on:\n\n1. Components with an async `setup()` hook. This includes components using `<script setup>` with top-level `await` expressions.\n2. [Async Components](https://vuejs.org/guide/components/async).\n\n## async setup()\n\nA Composition API component's `setup()` hook can be async:\n\njs\n\n```\nexport default {\n  async setup() {\n    const res = await fetch(...)\n    const posts = await res.json()\n    return {\n      posts\n    }\n  }\n}\n```\n\nIf using `<script setup>`, the presence of top-level `await` expressions automatically makes the component an async dependency:\n\nvue\n\n```\n<script setup>\nconst res = await fetch(...)\nconst posts = await res.json()\n</script>\n\n<template>\n  {{ posts }}\n</template>\n```\n\n## Async Components\n\nAsync components are **\"suspensible\"** by default. This means that if it has a `<Suspense>` in the parent chain, it will be treated as an async dependency of that `<Suspense>`. In this case, the loading state will be controlled by the `<Suspense>`, and the component's own loading, error, delay and timeout options will be ignored.\n\nThe async component can opt-out of `Suspense` control and let the component always control its own loading state by specifying `suspensible: false` in its options.\n\n## Loading State\n\nThe `<Suspense>` component has two slots: `#default` and `#fallback`. Both slots only allow for **one** immediate child node. The node in the default slot is shown if possible. If not, the node in the fallback slot will be shown instead.\n\ntemplate\n\n```\n<Suspense>\n  <!-- component with nested async dependencies -->\n  <Dashboard />\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>\n```\n\nOn initial render, `<Suspense>` will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter a **pending** state. During the pending state, the fallback content will be displayed. When all encountered async dependencies have been resolved, `<Suspense>` enters a **resolved** state and the resolved default slot content is displayed.\n\nIf no async dependencies were encountered during the initial render, `<Suspense>` will directly go into a resolved state.\n\nOnce in a resolved state, `<Suspense>` will only revert to a pending state if the root node of the `#default` slot is replaced. New async dependencies nested deeper in the tree will **not** cause the `<Suspense>` to revert to a pending state.\n\nWhen a revert happens, fallback content will not be immediately displayed. Instead, `<Suspense>` will display the previous `#default` content while waiting for the new content and its async dependencies to be resolved. This behavior can be configured with the `timeout` prop: `<Suspense>` will switch to fallback content if it takes longer than `timeout` to render the new default content. A `timeout` value of `0` will cause the fallback content to be displayed immediately when default content is replaced.\n\n## Events\n\nThe `<Suspense>` component emits 3 events: `pending`, `resolve` and `fallback`. The `pending` event occurs when entering a pending state. The `resolve` event is emitted when new content has finished resolving in the `default` slot. The `fallback` event is fired when the contents of the `fallback` slot are shown.\n\nThe events could be used, for example, to show a loading indicator in front of the old DOM while new components are loading.\n\n## Error Handling\n\n`<Suspense>` currently does not provide error handling via the component itself - however, you can use the [`errorCaptured`](https://vuejs.org/api/options-lifecycle#errorcaptured) option or the [`onErrorCaptured()`](https://vuejs.org/api/composition-api-lifecycle#onerrorcaptured) hook to capture and handle async errors in the parent component of `<Suspense>`.\n\n## Combining with Other Components\n\nIt is common to want to use `<Suspense>` in combination with the [`<Transition>`](https://vuejs.org/guide/built-ins/transition) and [`<KeepAlive>`](https://vuejs.org/guide/built-ins/keep-alive) components. The nesting order of these components is important to get them all working correctly.\n\nIn addition, these components are often used in conjunction with the `<RouterView>` component from [Vue Router](https://router.vuejs.org/).\n\nThe following example shows how to nest these components so that they all behave as expected. For simpler combinations you can remove the components that you don't need:\ntemplate\n\n```\n<RouterView v-slot=\"{ Component }\">\n  <template v-if=\"Component\">\n    <Transition mode=\"out-in\">\n      <KeepAlive>\n        <Suspense>\n          <!-- main content -->\n          <component :is=\"Component\"></component>\n\n          <!-- loading state -->\n          <template #fallback>\n            Loading...\n          </template>\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </template>\n</RouterView>\n```\n\nVue Router has built-in support for [lazily loading components](https://router.vuejs.org/guide/advanced/lazy-loading.html) using dynamic imports. These are distinct from async components and currently they will not trigger `<Suspense>`. However, they can still have async components as descendants and those can trigger `<Suspense>` in the usual way.\n\n## Nested Suspense\n\n- Only supported in 3.3+\n\nWhen we have multiple async components (common for nested or layout-based routes) like this:\ntemplate\n\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <component :is=\"DynamicAsyncInner\" />\n  </component>\n</Suspense>\n```\n\n`<Suspense>` creates a boundary that will resolve all the async components down the tree, as expected. However, when we change `DynamicAsyncOuter`, `<Suspense>` awaits it correctly, but when we change `DynamicAsyncInner`, the nested `DynamicAsyncInner` renders an empty node until it has been resolved (instead of the previous one or fallback slot).\n\nIn order to solve that, we could have a nested suspense to handle the patch for the nested component, like:\ntemplate\n\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <Suspense suspensible> <!-- this -->\n      <component :is=\"DynamicAsyncInner\" />\n    </Suspense>\n  </component>\n</Suspense>\n```\n\nIf you don't set the `suspensible` prop, the inner `<Suspense>` will be treated like a sync component by the parent `<Suspense>`. That means that it has its own fallback slot and if both `Dynamic` components change at the same time, there might be empty nodes and multiple patching cycles while the child `<Suspense>` is loading its own dependency tree, which might not be desirable. When it's set, all the async dependency handling is given to the parent `<Suspense>` (including the events emitted) and the inner `<Suspense>` serves solely as another boundary for the dependency resolution and patching.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "overview", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I async dependencies in vue-guide?\n\nAssistant: To async dependencies in vue-guide, here's what you do:\nTo explain the problem <Suspense> is trying to solve and how it interacts with these async dependencies, let's imagine a component hierarchy like the following:\n\n```\n<Suspense>\n‚îî‚îÄ <Dashboard>\n   ‚îú‚îÄ <Profile>\n   ‚îÇ  ‚îî‚îÄ <FriendStatus> (component with async setup())\n   ‚îî‚îÄ <Content>\n      ‚îú‚îÄ <ActivityFeed> (async component)\n      ‚îî‚îÄ <Stats> (async component)\n```\n\nIn the component tree there are multiple nested components whose rendering depends on some async resource to be resolved first. Without <Suspense>, each of them will need to handle its own loading / error and loaded states. In the worst case scenario, we may see three loading spinners on the page, with content displayed at different times.\n\nThe <Suspense> component gives us the ability to display top-level loading / error states while we wait on these nested async dependencies to be resolved.\n\nThere are two types of async dependencies that <Suspense> can wait on:\n\n1. Components with an async `setup()` hook. This includes components using `<script setup>` with top-level `await` expressions.\n2. [Async Components](https://vuejs.org/guide/components/async)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I async setup() in vue-guide?\n\nAssistant: To async setup() in vue-guide, here's what you do:\nA Composition API component's `setup()` hook can be async:\n\njs\n\n```\nexport default {\n  async setup() {\n    const res = await fetch(...)\n    const posts = await res.json()\n    return {\n      posts\n    }\n  }\n}\n```\n\nIf using `<script setup>`, the presence of top-level `await` expressions automatically makes the component an async dependency:\n\nvue\n\n```\n<script setup>\nconst res = await fetch(...)\nconst posts = await res.json()\n</script>\n\n<template>\n  {{ posts }}\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I async components in vue-guide?\n\nAssistant: To async components in vue-guide, here's what you do:\nAsync components are **\"suspensible\"** by default. This means that if it has a `<Suspense>` in the parent chain, it will be treated as an async dependency of that `<Suspense>`. In this case, the loading state will be controlled by the `<Suspense>`, and the component's own loading, error, delay and timeout options will be ignored.\n\nThe async component can opt-out of `Suspense` control and let the component always control its own loading state by specifying `suspensible: false` in its options..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I loading state in vue-guide?\n\nAssistant: To loading state in vue-guide, here's what you do:\nThe `<Suspense>` component has two slots: `#default` and `#fallback`. Both slots only allow for **one** immediate child node. The node in the default slot is shown if possible. If not, the node in the fallback slot will be shown instead.\n\ntemplate\n\n```\n<Suspense>\n  <!-- component with nested async dependencies -->\n  <Dashboard />\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>\n```\n\nOn initial render, `<Suspense>` will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter a **pending** state. During the pending state, the fallback content will be displayed. When all encountered async dependencies have been resolved, `<Suspense>` enters a **resolved** state and the resolved default slot content is displayed.\n\nIf no async dependencies were encountered during the initial render, `<Suspense>` will directly go into a resolved state.\n\nOnce in a resolved state, `<Suspense>` will only revert to a pending state if the root node of the `#default` slot is replaced. New async dependencies nested deeper in the tree will **not** cause the `<Suspense>` to revert to a pending state.\n\nWhen a revert happens, fallback content will not be immediately displayed. Instead, `<Suspense>` will display the previous `#default` content while waiting for the new content and its async dependencies to be resolved. This behavior can be configured with the `timeout` prop: `<Suspense>` will switch to fallback content if it takes longer than `timeout` to render the new default content. A `timeout` value of `0` will cause the fallback content to be displayed immediately when default content is replaced..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I events in vue-guide?\n\nAssistant: To events in vue-guide, here's what you do:\nThe `<Suspense>` component emits 3 events: `pending`, `resolve` and `fallback`. The `pending` event occurs when entering a pending state. The `resolve` event is emitted when new content has finished resolving in the `default` slot. The `fallback` event is fired when the contents of the `fallback` slot are shown.\n\nThe events could be used, for example, to show a loading indicator in front of the old DOM while new components are loading..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I error handling in vue-guide?\n\nAssistant: To error handling in vue-guide, here's what you do:\n`<Suspense>` currently does not provide error handling via the component itself - however, you can use the [`errorCaptured`](https://vuejs.org/api/options-lifecycle#errorcaptured) option or the [`onErrorCaptured()`](https://vuejs.org/api/composition-api-lifecycle#onerrorcaptured) hook to capture and handle async errors in the parent component of `<Suspense>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I combining with other components in vue-guide?\n\nAssistant: To combining with other components in vue-guide, here's what you do:\nIt is common to want to use `<Suspense>` in combination with the [`<Transition>`](https://vuejs.org/guide/built-ins/transition) and [`<KeepAlive>`](https://vuejs.org/guide/built-ins/keep-alive) components. The nesting order of these components is important to get them all working correctly.\n\nIn addition, these components are often used in conjunction with the `<RouterView>` component from [Vue Router](https://router.vuejs.org/).\n\nThe following example shows how to nest these components so that they all behave as expected. For simpler combinations you can remove the components that you don't need:\ntemplate\n\n```\n<RouterView v-slot=\"{ Component }\">\n  <template v-if=\"Component\">\n    <Transition mode=\"out-in\">\n      <KeepAlive>\n        <Suspense>\n          <!-- main content -->\n          <component :is=\"Component\"></component>\n\n          <!-- loading state -->\n          <template #fallback>\n            Loading...\n          </template>\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </template>\n</RouterView>\n```\n\nVue Router has built-in support for [lazily loading components](https://router.vuejs.org/guide/advanced/lazy-loading.html) using dynamic imports. These are distinct from async components and currently they will not trigger `<Suspense>`. However, they can still have async components as descendants and those can trigger `<Suspense>` in the usual way..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I nested suspense in vue-guide?\n\nAssistant: To nested suspense in vue-guide, here's what you do:\n- Only supported in 3.3+\n\nWhen we have multiple async components (common for nested or layout-based routes) like this:\ntemplate\n\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <component :is=\"DynamicAsyncInner\" />\n  </component>\n</Suspense>\n```\n\n`<Suspense>` creates a boundary that will resolve all the async components down the tree, as expected. However, when we change `DynamicAsyncOuter`, `<Suspense>` awaits it correctly, but when we change `DynamicAsyncInner`, the nested `DynamicAsyncInner` renders an empty node until it has been resolved (instead of the previous one or fallback slot).\n\nIn order to solve that, we could have a nested suspense to handle the patch for the nested component, like:\ntemplate\n\n```\n<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <Suspense suspensible> <!-- this -->\n      <component :is=\"DynamicAsyncInner\" />\n    </Suspense>\n  </component>\n</Suspense>\n```\n\nIf you don't set the `suspensible` prop, the inner `<Suspense>` will be treated like a sync component by the parent `<Suspense>`. That means that it has its own fallback slot and if both `Dynamic` components change at the same time, there might be empty nodes and multiple patching cycles while the child `<Suspense>` is loading its own dependency tree, which might not be desirable. When it's set, all the async dependency handling is given to the parent `<Suspense>` (including the events emitted) and the inner `<Suspense>` serves solely as another boundary for the dependency resolution and patching..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Suspense in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Async setup example**:\n\n```yaml\nexport default {\n  async setup() {\n    const res = await fetch(...)\n    const posts = await res.json()\n    return {\n      posts\n    }\n  }\n}\n```\n\nThis snippet shows you how to async setup example, which is an important aspect of suspense.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "code_examples", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Suspense in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse <Suspense> to manage loading states for nested async components effectively.\n\nConsider using the timeout prop to control how long to wait before showing fallback content.\n\nUtilize events emitted by <Suspense> to manage loading indicators in your UI.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/suspense.html", "title": "Suspense", "description": "<Suspense> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:02:28", "type": "best_practices", "page_metadata": {"language": "en-US", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "twitter:card": "summary", "title": "Suspense | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "428a45b4-6533-43cc-91e2-da899be2fe19", "sourceURL": "https://vuejs.org/guide/built-ins/suspense.html", "url": "https://vuejs.org/guide/built-ins/suspense.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Teleport is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Teleport in vue-guide.\n\n# Teleport\n\n<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nSometimes a part of a component's template belongs to it logically, but from a visual standpoint, it should be displayed somewhere else in the DOM, perhaps even outside of the Vue application.\n\nThe most common example of this is when building a full-screen modal. Ideally, we want the code for the modal's button and the modal itself to be written within the same single-file component, since they are both related to the open / close state of the modal. But that means the modal will be rendered alongside the button, deeply nested in the application's DOM hierarchy. This can create some tricky issues when positioning the modal via CSS.\n\nConsider the following HTML structure.\n\ntemplate\n\n```\n<div class=\"outer\">\n  <h3>Vue Teleport Example</h3>\n  <div>\n    <MyModal />\n  </div>\n</div>\n```\n\nAnd here is the implementation of `<MyModal>`:\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      open: false\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\nThe component contains a `<button>` to trigger the opening of the modal, and a `<div>` with a class of `.modal`, which will contain the modal's content and a button to self-close.\n\nWhen using this component inside the initial HTML structure, there are a number of potential issues:\n\n- `position: fixed` only places the element relative to the viewport when no ancestor element has `transform`, `perspective` or `filter` property set. If, for example, we intend to animate the ancestor `<div class=\"outer\">` with a CSS transform, it would break the modal layout!\n\n- The modal's `z-index` is constrained by its containing elements. If there is another element that overlaps with `<div class=\"outer\">` and has a higher `z-index`, it would cover our modal.\n\n`<Teleport>` provides a clean way to work around these, by allowing us to break out of the nested DOM structure. Let's modify `<MyModal>` to use `<Teleport>`:\n\ntemplate\n\n```\n<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>\n```\n\nThe `to` target of `<Teleport>` expects a CSS selector string or an actual DOM node. Here, we are essentially telling Vue to \" **teleport** this template fragment **to** the **`body`** tag\".\n\nYou can click the button below and inspect the `<body>` tag via your browser's devtools:\n\nOpen Modal\n\nYou can combine `<Teleport>` with [`<Transition>`](https://vuejs.org/guide/built-ins/transition) to create animated modals - see [Example here](https://vuejs.org/examples/#modal).\n\nTIP\n\nThe teleport `to` target must be already in the DOM when the `<Teleport>` component is mounted. Ideally, this should be an element outside the entire Vue application. If targeting another element rendered by Vue, you need to make sure that element is mounted before the `<Teleport>`.\n\n## Using with Components\n\n`<Teleport>` only alters the rendered DOM structure - it does not affect the logical hierarchy of the components. That is to say, if `<Teleport>` contains a component, that component will remain a logical child of the parent component containing the `<Teleport>`. Props passing and event emitting will continue to work the same way.\n\nThis also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to.\n\n## Disabling Teleport\n\nIn some cases, we may want to conditionally disable `<Teleport>`. For example, we may want to render a component as an overlay for desktop, but inline on mobile. `<Teleport>` supports the `disabled` prop which can be dynamically toggled:\n\ntemplate\n\n```\n<Teleport :disabled=\"isMobile\">\n  ...\n</Teleport>\n```\n\nWe could then dynamically update `isMobile`.\n\n## Multiple Teleports on the Same Target\n\nA common use case would be a reusable `<Modal>` component, with the potential for multiple instances to be active at the same time. For this kind of scenario, multiple `<Teleport>` components can mount their content to the same target element. The order will be a simple append, with later mounts located after earlier ones, but all within the target element.\n\nGiven the following usage:\n\ntemplate\n\n```\n<Teleport to=\"#modals\">\n  <div>A</div>\n</Teleport>\n<Teleport to=\"#modals\">\n  <div>B</div>\n</Teleport>\n```\n\nThe rendered result would be:\n\nhtml\n\n```\n<div id=\"modals\">\n  <div>A</div>\n  <div>B</div>\n</div>\n```\n\n## Deferred Teleport\n\nIn Vue 3.5 and above, we can use the `defer` prop to defer the target resolving of a Teleport until other parts of the application have mounted. This allows the Teleport to target a container element that is rendered by Vue, but in a later part of the component tree:\n\ntemplate\n\n```\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\nNote that the target element must be rendered in the same mount / update tick with the Teleport - i.e. if the `<div>` is only mounted a second later, the Teleport will still report an error. The defer works similarly to the `mounted` lifecycle hook.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "overview", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nSometimes a part of a component's template belongs to it logically, but from a visual standpoint, it should be displayed somewhere else in the DOM, perhaps even outside of the Vue application.\n\nThe most common example of this is when building a full-screen modal. Ideally, we want the code for the modal's button and the modal itself to be written within the same single-file component, since they are both related to the open / close state of the modal. But that means the modal will be rendered alongside the button, deeply nested in the application's DOM hierarchy. This can create some tricky issues when positioning the modal via CSS.\n\nConsider the following HTML structure.\n\ntemplate\n\n```\n<div class=\"outer\">\n  <h3>Vue Teleport Example</h3>\n  <div>\n    <MyModal />\n  </div>\n</div>\n```\n\nAnd here is the implementation of `<MyModal>`:\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      open: false\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\nThe component contains a `<button>` to trigger the opening of the modal, and a `<div>` with a class of `.modal`, which will contain the modal's content and a button to self-close.\n\nWhen using this component inside the initial HTML structure, there are a number of potential issues:\n\n- `position: fixed` only places the element relative to the viewport when no ancestor element has `transform`, `perspective` or `filter` property set. If, for example, we intend to animate the ancestor `<div class=\"outer\">` with a CSS transform, it would break the modal layout!\n\n- The modal's `z-index` is constrained by its containing elements. If there is another element that overlaps with `<div class=\"outer\">` and has a higher `z-index`, it would cover our modal.\n\n`<Teleport>` provides a clean way to work around these, by allowing us to break out of the nested DOM structure. Let's modify `<MyModal>` to use `<Teleport>`:\n\ntemplate\n\n```\n<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>\n```\n\nThe `to` target of `<Teleport>` expects a CSS selector string or an actual DOM node. Here, we are essentially telling Vue to \" **teleport** this template fragment **to** the **`body`** tag\".\n\nYou can click the button below and inspect the `<body>` tag via your browser's devtools:\n\nOpen Modal\n\nYou can combine `<Teleport>` with [`<Transition>`](https://vuejs.org/guide/built-ins/transition) to create animated modals - see [Example here](https://vuejs.org/examples/#modal).\n\nTIP\n\nThe teleport `to` target must be already in the DOM when the `<Teleport>` component is mounted. Ideally, this should be an element outside the entire Vue application. If targeting another element rendered by Vue, you need to make sure that element is mounted before the `<Teleport>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "section_detail", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using with components in vue-guide?\n\nAssistant: To using with components in vue-guide, here's what you do:\n`<Teleport>` only alters the rendered DOM structure - it does not affect the logical hierarchy of the components. That is to say, if `<Teleport>` contains a component, that component will remain a logical child of the parent component containing the `<Teleport>`. Props passing and event emitting will continue to work the same way.\n\nThis also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "section_detail", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I disabling teleport in vue-guide?\n\nAssistant: To disabling teleport in vue-guide, here's what you do:\nIn some cases, we may want to conditionally disable `<Teleport>`. For example, we may want to render a component as an overlay for desktop, but inline on mobile. `<Teleport>` supports the `disabled` prop which can be dynamically toggled:\n\ntemplate\n\n```\n<Teleport :disabled=\"isMobile\">\n  ...\n</Teleport>\n```\n\nWe could then dynamically update `isMobile`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "section_detail", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I multiple teleports on the same target in vue-guide?\n\nAssistant: To multiple teleports on the same target in vue-guide, here's what you do:\nA common use case would be a reusable `<Modal>` component, with the potential for multiple instances to be active at the same time. For this kind of scenario, multiple `<Teleport>` components can mount their content to the same target element. The order will be a simple append, with later mounts located after earlier ones, but all within the target element.\n\nGiven the following usage:\n\ntemplate\n\n```\n<Teleport to=\"#modals\">\n  <div>A</div>\n</Teleport>\n<Teleport to=\"#modals\">\n  <div>B</div>\n</Teleport>\n```\n\nThe rendered result would be:\n\nhtml\n\n```\n<div id=\"modals\">\n  <div>A</div>\n  <div>B</div>\n</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "section_detail", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I deferred teleport in vue-guide?\n\nAssistant: To deferred teleport in vue-guide, here's what you do:\nIn Vue 3.5 and above, we can use the `defer` prop to defer the target resolving of a Teleport until other parts of the application have mounted. This allows the Teleport to target a container element that is rendered by Vue, but in a later part of the component tree:\n\ntemplate\n\n```\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n```\n\nNote that the target element must be rendered in the same mount / update tick with the Teleport - i.e. if the `<div>` is only mounted a second later, the Teleport will still report an error. The defer works similarly to the `mounted` lifecycle hook..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "section_detail", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Teleport in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Modal Implementation**:\n\n```yaml\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>\n```\n\nThis snippet shows you how to basic modal implementation, which is an important aspect of teleport.\n\n**Using Teleport for Modal**:\n\n```yaml\n<template>\n<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>\n</template>\n```\n\nThis snippet shows you how to using teleport for modal, which is an important aspect of teleport.\n\n**Disabling Teleport Example**:\n\n```yaml\n<template>\n<Teleport :disabled=\"isMobile\">\n  ...\n</Teleport>\n</template>\n```\n\nThis snippet shows you how to disabling teleport example, which is an important aspect of teleport.\n\n**Multiple Teleports Example**:\n\n```yaml\n<template>\n<Teleport to=\"#modals\">\n  <div>A</div>\n</Teleport>\n<Teleport to=\"#modals\">\n  <div>B</div>\n</Teleport>\n</template>\n```\n\nThis snippet shows you how to multiple teleports example, which is an important aspect of teleport.\n\n**Deferred Teleport Example**:\n\n```yaml\n<template>\n<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>\n</template>\n```\n\nThis snippet shows you how to deferred teleport example, which is an important aspect of teleport.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "code_examples", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Teleport in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe teleport `to` target must be already in the DOM when the `<Teleport>` component is mounted. Ideally, this should be an element outside the entire Vue application. If targeting another element rendered by Vue, you need to make sure that element is mounted before the `<Teleport>.\n\nIn Vue 3.5 and above, we can use the `defer` prop to defer the target resolving of a Teleport until other parts of the application have mounted.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/teleport.html", "title": "Teleport", "description": "<Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:10", "type": "best_practices", "page_metadata": {"title": "Teleport | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "language": "en-US", "og:url": "https://vuejs.org/", "scrapeId": "16752960-2fd7-4f78-a4f4-1af20db112f3", "sourceURL": "https://vuejs.org/guide/built-ins/teleport.html", "url": "https://vuejs.org/guide/built-ins/teleport.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what TransitionGroup is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain TransitionGroup in vue-guide.\n\n# TransitionGroup\n\n<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.Here's a quick rundown of what this is about:\n\n## Differences from `<Transition>`\n\n`<TransitionGroup>` supports the same props, CSS transition classes, and JavaScript hook listeners as `<Transition>`, with the following differences:\n\n- By default, it doesn't render a wrapper element. But you can specify an element to be rendered with the `tag` prop.\n\n- [Transition modes](https://vuejs.org/guide/built-ins/transition#transition-modes) are not available, because we are no longer alternating between mutually exclusive elements.\n\n- Elements inside are **always required** to have a unique `key` attribute.\n\n- CSS transition classes will be applied to individual elements in the list, **not** to the group / container itself.\n\nTIP\n\nWhen used in [in-DOM templates](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats), it should be referenced as `<transition-group>`.\n\n## Enter / Leave Transitions\n\nHere is an example of applying enter / leave transitions to a `v-for` list using `<TransitionGroup>`:\n\ntemplate\n\n```\n<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>\n```\n\ncss\n\n```\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n```\n\n## Move Transitions\n\nThe above demo has some obvious flaws: when an item is inserted or removed, its surrounding items instantly \"jump\" into place instead of moving smoothly. We can fix this by adding a few additional CSS rules:\n\ncss\n\n```\n.list-move, /* apply transition to moving elements */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n/* ensure leaving items are taken out of layout flow so that moving\n   animations can be calculated correctly. */\n.list-leave-active {\n  position: absolute;\n}\n```\n\n## Custom TransitionGroup classes\n\nYou can also specify custom transition classes for the moving element by passing the `moveClass` prop to `<TransitionGroup>`, just like [custom transition classes on `<Transition>`](https://vuejs.org/guide/built-ins/transition#custom-transition-classes).\n\n## Staggering List Transitions\n\nBy communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list. First, we render the index of an item as a data attribute on the DOM element:\n\ntemplate\n\n```\n<TransitionGroup\n  tag=\"ul\"\n  :css=\"false\"\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @leave=\"onLeave\"\n>\n  <li\n    v-for=\"(item, index) in computedList\"\n    :key=\"item.msg\"\n    :data-index=\"index\"\n  >\n    {{ item.msg }}\n  </li>\n</TransitionGroup>\n```\n\nThen, in JavaScript hooks, we animate the element with a delay based on the data attribute. This example is using the [GSAP library](https://gsap.com/) to perform the animation:\n\njs\n\n```\nfunction onEnter(el, done) {\n  gsap.to(el, {\n    opacity: 1,\n    height: '1.6em',\n    delay: el.dataset.index * 0.15,\n    onComplete: done\n  })\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "overview", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I differences from `<transition>` in vue-guide?\n\nAssistant: To differences from `<transition>` in vue-guide, here's what you do:\n`<TransitionGroup>` supports the same props, CSS transition classes, and JavaScript hook listeners as `<Transition>`, with the following differences:\n\n- By default, it doesn't render a wrapper element. But you can specify an element to be rendered with the `tag` prop.\n\n- [Transition modes](https://vuejs.org/guide/built-ins/transition#transition-modes) are not available, because we are no longer alternating between mutually exclusive elements.\n\n- Elements inside are **always required** to have a unique `key` attribute.\n\n- CSS transition classes will be applied to individual elements in the list, **not** to the group / container itself.\n\nTIP\n\nWhen used in [in-DOM templates](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats), it should be referenced as `<transition-group>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I enter / leave transitions in vue-guide?\n\nAssistant: To enter / leave transitions in vue-guide, here's what you do:\nHere is an example of applying enter / leave transitions to a `v-for` list using `<TransitionGroup>`:\n\ntemplate\n\n```\n<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>\n```\n\ncss\n\n```\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I move transitions in vue-guide?\n\nAssistant: To move transitions in vue-guide, here's what you do:\nThe above demo has some obvious flaws: when an item is inserted or removed, its surrounding items instantly \"jump\" into place instead of moving smoothly. We can fix this by adding a few additional CSS rules:\n\ncss\n\n```\n.list-move, /* apply transition to moving elements */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n/* ensure leaving items are taken out of layout flow so that moving\n   animations can be calculated correctly. */\n.list-leave-active {\n  position: absolute;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I custom transitiongroup classes in vue-guide?\n\nAssistant: To custom transitiongroup classes in vue-guide, here's what you do:\nYou can also specify custom transition classes for the moving element by passing the `moveClass` prop to `<TransitionGroup>`, just like [custom transition classes on `<Transition>`](https://vuejs.org/guide/built-ins/transition#custom-transition-classes)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I staggering list transitions in vue-guide?\n\nAssistant: To staggering list transitions in vue-guide, here's what you do:\nBy communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list. First, we render the index of an item as a data attribute on the DOM element:\n\ntemplate\n\n```\n<TransitionGroup\n  tag=\"ul\"\n  :css=\"false\"\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @leave=\"onLeave\"\n>\n  <li\n    v-for=\"(item, index) in computedList\"\n    :key=\"item.msg\"\n    :data-index=\"index\"\n  >\n    {{ item.msg }}\n  </li>\n</TransitionGroup>\n```\n\nThen, in JavaScript hooks, we animate the element with a delay based on the data attribute. This example is using the [GSAP library](https://gsap.com/) to perform the animation:\n\njs\n\n```\nfunction onEnter(el, done) {\n  gsap.to(el, {\n    opacity: 1,\n    height: '1.6em',\n    delay: el.dataset.index * 0.15,\n    onComplete: done\n  })\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for TransitionGroup in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Enter / Leave Transitions Example**:\n\n```yaml\n<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>\n\n```\n\nThis snippet shows you how to enter / leave transitions example, which is an important aspect of transitiongroup.\n\n**Enter / Leave CSS**:\n\n```yaml\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n```\n\nThis snippet shows you how to enter / leave css, which is an important aspect of transitiongroup.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "code_examples", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using TransitionGroup in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen used in in-DOM templates, it should be referenced as `<transition-group>`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition-group.html", "title": "TransitionGroup", "description": "<TransitionGroup> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:04:36", "type": "best_practices", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TransitionGroup | Vue.js", "theme-color": "#3c8772", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "31dc446d-4178-49b3-bc91-adc1770e87bd", "sourceURL": "https://vuejs.org/guide/built-ins/transition-group.html", "url": "https://vuejs.org/guide/built-ins/transition-group.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Async Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Async Components in vue-guide.\n\n# Async Components\n\nThis page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has a `defineAsyncComponent` function:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component\n```\n\nAs you can see, `defineAsyncComponent` accepts a loader function that returns a Promise. The Promise's `resolve` callback should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed.\n\n[ES module dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) also returns a Promise, so most of the time we will use it in combination with `defineAsyncComponent`. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThe resulting `AsyncComp` is a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading.\n\nAs with normal components, async components can be [registered globally](https://vuejs.org/guide/components/registration#global-registration) using `app.component()`:\n\n```js\napp.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))\n```\n\nYou can also use `defineAsyncComponent` when [registering a component locally](https://vuejs.org/guide/components/registration#local-registration):\n\n```vue\n<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\nThey can also be defined directly inside their parent component:\n\n```vue\n<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\n## Loading and Error States\n\nAsynchronous operations inevitably involve loading and error states - `defineAsyncComponent()` supports handling these states via advanced options:\n\n```js\nconst AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})\n```\n\nIf a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker.\n\nIf an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long.\n\n## Lazy Hydration\n\nThis section only applies if you are using [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\n\nIn Vue 3.5+, async components can control when they are hydrated by providing a hydration strategy.\n\n- Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used.\n\n- The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt).\n\n### Hydrate on Idle\nHydrates via `requestIdleCallback`:\n\n```js\nimport { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})\n```\n\n### Hydrate on Visible\nHydrate when element(s) become visible via `IntersectionObserver`.\n\n```js\nimport { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n```\n\nCan optionally pass in an options object value for the observer:\n\n```js\nhydrateOnVisible({ rootMargin: '100px' })\n```\n\n### Hydrate on Media Query\nHydrates when the specified media query matches.\n\n```js\nimport { defineAsyncComponent, hydrateOnMediaQuery } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n```\n\n### Hydrate on Interaction\nHydrates when specified event(s) are triggered on the component element(s). The event that triggered the hydration will also be replayed once hydration is complete.\n\n```js\nimport { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})\n```\n\nCan also be a list of multiple event types:\n\n```js\nhydrateOnInteraction(['wheel', 'mouseover'])\n```\n\n### Custom Strategy\n```ts\nimport { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})\n```\n\n## Using with Suspense\n\nAsync components can be used with the `<Suspense>` built-in component. The interaction between `<Suspense>` and async components is documented in the [dedicated chapter for `<Suspense>`](https://vuejs.org/guide/built-ins/suspense).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has a `defineAsyncComponent` function:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component\n```\n\nAs you can see, `defineAsyncComponent` accepts a loader function that returns a Promise. The Promise's `resolve` callback should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed.\n\n[ES module dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) also returns a Promise, so most of the time we will use it in combination with `defineAsyncComponent`. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThe resulting `AsyncComp` is a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading.\n\nAs with normal components, async components can be [registered globally](https://vuejs.org/guide/components/registration#global-registration) using `app.component()`:\n\n```js\napp.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))\n```\n\nYou can also use `defineAsyncComponent` when [registering a component locally](https://vuejs.org/guide/components/registration#local-registration):\n\n```vue\n<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\nThey can also be defined directly inside their parent component:\n\n```vue\n<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I loading and error states in vue-guide?\n\nAssistant: To loading and error states in vue-guide, here's what you do:\nAsynchronous operations inevitably involve loading and error states - `defineAsyncComponent()` supports handling these states via advanced options:\n\n```js\nconst AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})\n```\n\nIf a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker.\n\nIf an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lazy hydration in vue-guide?\n\nAssistant: To lazy hydration in vue-guide, here's what you do:\nThis section only applies if you are using [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\n\nIn Vue 3.5+, async components can control when they are hydrated by providing a hydration strategy.\n\n- Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used.\n\n- The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt).\n\n### Hydrate on Idle\nHydrates via `requestIdleCallback`:\n\n```js\nimport { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})\n```\n\n### Hydrate on Visible\nHydrate when element(s) become visible via `IntersectionObserver`.\n\n```js\nimport { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n```\n\nCan optionally pass in an options object value for the observer:\n\n```js\nhydrateOnVisible({ rootMargin: '100px' })\n```\n\n### Hydrate on Media Query\nHydrates when the specified media query matches.\n\n```js\nimport { defineAsyncComponent, hydrateOnMediaQuery } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n```\n\n### Hydrate on Interaction\nHydrates when specified event(s) are triggered on the component element(s). The event that triggered the hydration will also be replayed once hydration is complete.\n\n```js\nimport { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})\n```\n\nCan also be a list of multiple event types:\n\n```js\nhydrateOnInteraction(['wheel', 'mouseover'])\n```\n\n### Custom Strategy\n```ts\nimport { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using with suspense in vue-guide?\n\nAssistant: To using with suspense in vue-guide, here's what you do:\nAsync components can be used with the `<Suspense>` built-in component. The interaction between `<Suspense>` and async components is documented in the [dedicated chapter for `<Suspense>`](https://vuejs.org/guide/built-ins/suspense)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Async Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of async components.\n\n**Using ES Module Dynamic Import**:\n\n```yaml\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThis snippet shows you how to using es module dynamic import, which is an important aspect of async components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Async Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `defineAsyncComponent` to load components only when needed, improving performance in large applications.\n\nHandle loading and error states by providing `loadingComponent` and `errorComponent` options.\n\nConsider using hydration strategies to control when async components are hydrated, especially in server-side rendering scenarios.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/async.html", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:09:21", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "title": "Async Components | Vue.js", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "scrapeId": "10f272f4-4293-44ab-b2eb-051c778dd171", "sourceURL": "https://vuejs.org/guide/components/async.html", "url": "https://vuejs.org/guide/components/async.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Fallthrough Attributes is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Fallthrough Attributes in vue-guide.\n\n# Fallthrough Attributes\n\nThis page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.Here's a quick rundown of what this is about:\n\n## Attribute Inheritance\n\nA \"fallthrough attribute\" is an attribute or `v-on` event listener that is passed to a component, but is not explicitly declared in the receiving component's [props](https://vuejs.org/guide/components/props) or [emits](https://vuejs.org/guide/components/events#declaring-emitted-events). Common examples of this include `class`, `style`, and `id` attributes.\n\nWhen a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a `<MyButton>` component with the following template:\n\n```\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\nAnd a parent using this component with:\n\n```\n<MyButton class=\"large\" />\n```\n\nThe final rendered DOM would be:\n\n```\n<button class=\"large\">Click Me</button>\n```\n\nHere, `<MyButton>` did not declare `class` as an accepted prop. Therefore, `class` is treated as a fallthrough attribute and automatically added to `<MyButton>`'s root element.\n\n## `class` and `style` Merging\n\nIf the child component's root element already has existing `class` or `style` attributes, it will be merged with the `class` and `style` values that are inherited from the parent. Suppose we change the template of `<MyButton>` in the previous example to:\n\n```\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\nThen the final rendered DOM would now become:\n\n```\n<button class=\"btn large\">Click Me</button>\n```\n\n## `v-on` Listener Inheritance\n\nThe same rule applies to `v-on` event listeners:\n\n```\n<MyButton @click=\"onClick\" />\n```\n\nThe `click` listener will be added to the root element of `<MyButton>`, i.e. the native `<button>` element. When the native `<button>` is clicked, it will trigger the `onClick` method of the parent component. If the native `<button>` already has a `click` listener bound with `v-on`, then both listeners will trigger.\n\n## Nested Component Inheritance\n\nIf a component renders another component as its root node, for example, we refactored `<MyButton>` to render a `<BaseButton>` as its root:\n\n```\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\nThen the fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>`.\n\nNote that:\n\n1. Forwarded attributes do not include any attributes that are declared as props, or `v-on` listeners of declared events by `<MyButton>` \\- in other words, the declared props and listeners have been \"consumed\" by `<MyButton>`.\n\n2. Forwarded attributes may be accepted as props by `<BaseButton>`, if declared by it.\n\n## Disabling Attribute Inheritance\n\nIf you do **not** want a component to automatically inherit attributes, you can set `inheritAttrs: false` in the component's options.\n\nSince 3.3 you can also use [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) directly in `<script setup>`:\n\n```\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\nThe common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the `inheritAttrs` option to `false`, you can take full control over where the fallthrough attributes should be applied.\n\nThese fallthrough attributes can be accessed directly in template expressions as `$attrs`:\n\n```\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\nThe `$attrs` object includes all attributes that are not declared by the component's `props` or `emits` options (e.g., `class`, `style`, `v-on` listeners, etc.).\n\nSome notes:\n\n- Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like `foo-bar` needs to be accessed as `$attrs['foo-bar']`.\n\n- A `v-on` event listener like `@click` will be exposed on the object as a function under `$attrs.onClick`.\n\n## Attribute Inheritance on Multiple Root Nodes\n\nUnlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If `$attrs` are not bound explicitly, a runtime warning will be issued.\n\n```\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\n```\n\nIf `<CustomLayout>` has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:\n\n```\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\nThe warning will be suppressed if `$attrs` is explicitly bound:\n\n```\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```\n\n## Accessing Fallthrough Attributes in JavaScript\n\nIf needed, you can access a component's fallthrough attributes in `<script setup>` using the `useAttrs()` API:\n\n```\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\nIf not using `<script setup>`, `attrs` will be exposed as a property of the `setup()` context:\n\n```\nexport default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}\n```\n\nNote that although the `attrs` object here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use `onUpdated()` to perform side effects with the latest `attrs` on each update.\n\nIf needed, you can access a component's fallthrough attributes via the `$attrs` instance property:\n\n```\nexport default {\n  created() {\n    console.log(this.$attrs)\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute inheritance in vue-guide?\n\nAssistant: To attribute inheritance in vue-guide, here's what you do:\nA \"fallthrough attribute\" is an attribute or `v-on` event listener that is passed to a component, but is not explicitly declared in the receiving component's [props](https://vuejs.org/guide/components/props) or [emits](https://vuejs.org/guide/components/events#declaring-emitted-events). Common examples of this include `class`, `style`, and `id` attributes.\n\nWhen a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a `<MyButton>` component with the following template:\n\n```\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\nAnd a parent using this component with:\n\n```\n<MyButton class=\"large\" />\n```\n\nThe final rendered DOM would be:\n\n```\n<button class=\"large\">Click Me</button>\n```\n\nHere, `<MyButton>` did not declare `class` as an accepted prop. Therefore, `class` is treated as a fallthrough attribute and automatically added to `<MyButton>`'s root element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `class` and `style` merging in vue-guide?\n\nAssistant: To `class` and `style` merging in vue-guide, here's what you do:\nIf the child component's root element already has existing `class` or `style` attributes, it will be merged with the `class` and `style` values that are inherited from the parent. Suppose we change the template of `<MyButton>` in the previous example to:\n\n```\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\nThen the final rendered DOM would now become:\n\n```\n<button class=\"btn large\">Click Me</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-on` listener inheritance in vue-guide?\n\nAssistant: To `v-on` listener inheritance in vue-guide, here's what you do:\nThe same rule applies to `v-on` event listeners:\n\n```\n<MyButton @click=\"onClick\" />\n```\n\nThe `click` listener will be added to the root element of `<MyButton>`, i.e. the native `<button>` element. When the native `<button>` is clicked, it will trigger the `onClick` method of the parent component. If the native `<button>` already has a `click` listener bound with `v-on`, then both listeners will trigger..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I nested component inheritance in vue-guide?\n\nAssistant: To nested component inheritance in vue-guide, here's what you do:\nIf a component renders another component as its root node, for example, we refactored `<MyButton>` to render a `<BaseButton>` as its root:\n\n```\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\nThen the fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>`.\n\nNote that:\n\n1. Forwarded attributes do not include any attributes that are declared as props, or `v-on` listeners of declared events by `<MyButton>` \\- in other words, the declared props and listeners have been \"consumed\" by `<MyButton>`.\n\n2. Forwarded attributes may be accepted as props by `<BaseButton>`, if declared by it..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I disabling attribute inheritance in vue-guide?\n\nAssistant: To disabling attribute inheritance in vue-guide, here's what you do:\nIf you do **not** want a component to automatically inherit attributes, you can set `inheritAttrs: false` in the component's options.\n\nSince 3.3 you can also use [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) directly in `<script setup>`:\n\n```\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\nThe common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the `inheritAttrs` option to `false`, you can take full control over where the fallthrough attributes should be applied.\n\nThese fallthrough attributes can be accessed directly in template expressions as `$attrs`:\n\n```\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\nThe `$attrs` object includes all attributes that are not declared by the component's `props` or `emits` options (e.g., `class`, `style`, `v-on` listeners, etc.).\n\nSome notes:\n\n- Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like `foo-bar` needs to be accessed as `$attrs['foo-bar']`.\n\n- A `v-on` event listener like `@click` will be exposed on the object as a function under `$attrs.onClick`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute inheritance on multiple root nodes in vue-guide?\n\nAssistant: To attribute inheritance on multiple root nodes in vue-guide, here's what you do:\nUnlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If `$attrs` are not bound explicitly, a runtime warning will be issued.\n\n```\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\n```\n\nIf `<CustomLayout>` has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:\n\n```\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\nThe warning will be suppressed if `$attrs` is explicitly bound:\n\n```\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing fallthrough attributes in javascript in vue-guide?\n\nAssistant: To accessing fallthrough attributes in javascript in vue-guide, here's what you do:\nIf needed, you can access a component's fallthrough attributes in `<script setup>` using the `useAttrs()` API:\n\n```\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\nIf not using `<script setup>`, `attrs` will be exposed as a property of the `setup()` context:\n\n```\nexport default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}\n```\n\nNote that although the `attrs` object here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use `onUpdated()` to perform side effects with the latest `attrs` on each update.\n\nIf needed, you can access a component's fallthrough attributes via the `$attrs` instance property:\n\n```\nexport default {\n  created() {\n    console.log(this.$attrs)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Fallthrough Attributes in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Fallthrough Example**:\n\n```yaml\n<MyButton class=\"large\" />\n<button class=\"large\">Click Me</button>\n```\n\nThis snippet shows you how to basic fallthrough example, which is an important aspect of fallthrough attributes.\n\n**Class and Style Merging Example**:\n\n```yaml\n<button class=\"btn large\">Click Me</button>\n```\n\nThis snippet shows you how to class and style merging example, which is an important aspect of fallthrough attributes.\n\n**Disabling Inheritance Example**:\n\n```yaml\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n</script>\n```\n\nThis snippet shows you how to disabling inheritance example, which is an important aspect of fallthrough attributes.\n\n**Accessing Fallthrough Attributes Example**:\n\n```yaml\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\nThis snippet shows you how to accessing fallthrough attributes example, which is an important aspect of fallthrough attributes.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Fallthrough Attributes in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `inheritAttrs: false` when you need to control where fallthrough attributes are applied.\n\nAccess fallthrough attributes using `$attrs` in templates or `useAttrs()` in `<script setup>`.\n\nBe cautious with components that have multiple root nodes, as they require explicit binding of `$attrs`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs.html", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to manage them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:00", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "title": "Fallthrough Attributes | Vue.js", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "scrapeId": "4fe6147a-d1e8-438a-b282-158e557bb15a", "sourceURL": "https://vuejs.org/guide/components/attrs.html", "url": "https://vuejs.org/guide/components/attrs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Component Events is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Component Events in vue-guide.\n\n# Component Events\n\nThis page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.Here's a quick rundown of what this is about:\n\n## Emitting and Listening to Events\n\nA component can emit custom events directly in template expressions (e.g. in a `v-on` handler) using the built-in `$emit` method:\n\ntemplate\n\n```\n<!-- MyComponent -->\n<button @click=\"$emit('someEvent')\">Click Me</button>\n```\n\nThe `$emit()` method is also available on the component instance as `this.$emit()`:\n\njs\n\n```\nexport default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}\n```\n\nThe parent can then listen to it using `v-on`:\n\ntemplate\n\n```\n<MyComponent @some-event=\"callback\" />\n```\n\nThe `.once` modifier is also supported on component event listeners:\n\ntemplate\n\n```\n<MyComponent @some-event.once=\"callback\" />\n```\n\nLike components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As with [props casing](https://vuejs.org/guide/components/props#prop-name-casing), we recommend using kebab-cased event listeners in templates.\n\nTIP\n\nUnlike native DOM events, component emitted events do **not** bubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or a [global state management solution](https://vuejs.org/guide/scaling-up/state-management).\n\n## Event Arguments\n\nIt's sometimes useful to emit a specific value with an event. For example, we may want the `<BlogPost>` component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to `$emit` to provide this value:\n\ntemplate\n\n```\n<button @click=\"$emit('increaseBy', 1)\">\n  Increase by 1\n</button>\n```\n\nThen, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:\n\ntemplate\n\n```\n<MyButton @increase-by=\"(n) => count += n\" />\n```\n\nOr, if the event handler is a method:\n\ntemplate\n\n```\n<MyButton @increase-by=\"increaseCount\" />\n```\n\nThen the value will be passed as the first parameter of that method:\n\njs\n\n```\nmethods: {\n  increaseCount(n) {\n    this.count += n\n  }\n}\n```\n\njs\n\n```\nfunction increaseCount(n) {\n  count.value += n\n}\n```\n\nTIP\n\nAll extra arguments passed to `$emit()` after the event name will be forwarded to the listener. For example, with `$emit('foo', 1, 2, 3)` the listener function will receive three arguments.\n\n## Declaring Emitted Events\n\nA component can explicitly declare the events it will emit using the [`defineEmits()`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro[`emits`](https://vuejs.org/api/options-state#emits) option:\n\nvue\n\n```\n<script setup>\ndefineEmits(['inFocus', 'submit'])\n</script>\n```\n\nThe `$emit` method that we used in the `<template>` isn't accessible within the `<script setup>` section of a component, but `defineEmits()` returns an equivalent function that we can use instead:\n\nvue\n\n```\n<script setup>\nconst emit = defineEmits(['inFocus', 'submit'])\n\nfunction buttonClick() {\n  emit('submit')\n}\n</script>\n```\n\nThe `defineEmits()` macro **cannot** be used inside a function, it must be placed directly within `<script setup>`, as in the example above.\n\nIf you're using an explicit `setup` function instead of `<script setup>`, events should be declared using the [`emits`](https://vuejs.org/api/options-state#emits) option, and the `emit` function is exposed on the `setup()` context:\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, ctx) {\n    ctx.emit('submit')\n  }\n}\n```\n\nAs with other properties of the `setup()` context, `emit` can safely be destructured:\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, { emit }) {\n    emit('submit')\n  }\n}\n```\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit']\n}\n```\n\nThe `emits` option and `defineEmits()` macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:\n\nvue\n\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits({\n  submit(payload: { email: string, password: string }) {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>\n```\n\nIf you are using TypeScript with `<script setup>`, it's also possible to declare emitted events using pure type annotations:\n\nvue\n\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>\n```\n\nMore details: [Typing Component Emits](https://vuejs.org/guide/typescript/composition-api#typing-component-emits)\n\njs\n\n```\nexport default {\n  emits: {\n    submit(payload: { email: string, password: string }) {\n      // return `true` or `false` to indicate\n      // validation pass / fail\n    }\n  }\n}\n```\n\nSee also: [Typing Component Emits](https://vuejs.org/guide/typescript/options-api#typing-component-emits)\n\nAlthough optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners from [fallthrough attributes](https://vuejs.org/guide/components/attrs#v-on-listener-inheritance), avoiding edge cases caused by DOM events manually dispatched by 3rd party code.\n\nTIP\n\nIf a native event (e.g., `click`) is defined in the `emits` option, the listener will now only listen to component-emitted `click` events and no longer respond to native `click` events.\n\n## Events Validation\n\nSimilar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax.\n\nTo add validation, the event is assigned a function that receives the arguments passed to the `this.$emit``emit` call and returns a boolean to indicate whether the event is valid or not.\n\nvue\n\n```\n<script setup>\nconst emit = defineEmits({\n  // No validation\n  click: null,\n\n  // Validate submit event\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false\n    }\n  }\n})\n\nfunction submitForm(email, password) {\n  emit('submit', { email, password })\n}\n</script>\n```\n\njs\n\n```\nexport default {\n  emits: {\n    // No validation\n    click: null,\n\n    // Validate submit event\n    submit: ({ email, password }) => {\n      if (email && password) {\n        return true\n      } else {\n        console.warn('Invalid submit event payload!')\n        return false\n      }\n    }\n  },\n  methods: {\n    submitForm(email, password) {\n      this.$emit('submit', { email, password })\n    }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I emitting and listening to events in vue-guide?\n\nAssistant: To emitting and listening to events in vue-guide, here's what you do:\nA component can emit custom events directly in template expressions (e.g. in a `v-on` handler) using the built-in `$emit` method:\n\ntemplate\n\n```\n<!-- MyComponent -->\n<button @click=\"$emit('someEvent')\">Click Me</button>\n```\n\nThe `$emit()` method is also available on the component instance as `this.$emit()`:\n\njs\n\n```\nexport default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}\n```\n\nThe parent can then listen to it using `v-on`:\n\ntemplate\n\n```\n<MyComponent @some-event=\"callback\" />\n```\n\nThe `.once` modifier is also supported on component event listeners:\n\ntemplate\n\n```\n<MyComponent @some-event.once=\"callback\" />\n```\n\nLike components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As with [props casing](https://vuejs.org/guide/components/props#prop-name-casing), we recommend using kebab-cased event listeners in templates.\n\nTIP\n\nUnlike native DOM events, component emitted events do **not** bubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or a [global state management solution](https://vuejs.org/guide/scaling-up/state-management)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I event arguments in vue-guide?\n\nAssistant: To event arguments in vue-guide, here's what you do:\nIt's sometimes useful to emit a specific value with an event. For example, we may want the `<BlogPost>` component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to `$emit` to provide this value:\n\ntemplate\n\n```\n<button @click=\"$emit('increaseBy', 1)\">\n  Increase by 1\n</button>\n```\n\nThen, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:\n\ntemplate\n\n```\n<MyButton @increase-by=\"(n) => count += n\" />\n```\n\nOr, if the event handler is a method:\n\ntemplate\n\n```\n<MyButton @increase-by=\"increaseCount\" />\n```\n\nThen the value will be passed as the first parameter of that method:\n\njs\n\n```\nmethods: {\n  increaseCount(n) {\n    this.count += n\n  }\n}\n```\n\njs\n\n```\nfunction increaseCount(n) {\n  count.value += n\n}\n```\n\nTIP\n\nAll extra arguments passed to `$emit()` after the event name will be forwarded to the listener. For example, with `$emit('foo', 1, 2, 3)` the listener function will receive three arguments..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring emitted events in vue-guide?\n\nAssistant: To declaring emitted events in vue-guide, here's what you do:\nA component can explicitly declare the events it will emit using the [`defineEmits()`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro[`emits`](https://vuejs.org/api/options-state#emits) option:\n\nvue\n\n```\n<script setup>\ndefineEmits(['inFocus', 'submit'])\n</script>\n```\n\nThe `$emit` method that we used in the `<template>` isn't accessible within the `<script setup>` section of a component, but `defineEmits()` returns an equivalent function that we can use instead:\n\nvue\n\n```\n<script setup>\nconst emit = defineEmits(['inFocus', 'submit'])\n\nfunction buttonClick() {\n  emit('submit')\n}\n</script>\n```\n\nThe `defineEmits()` macro **cannot** be used inside a function, it must be placed directly within `<script setup>`, as in the example above.\n\nIf you're using an explicit `setup` function instead of `<script setup>`, events should be declared using the [`emits`](https://vuejs.org/api/options-state#emits) option, and the `emit` function is exposed on the `setup()` context:\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, ctx) {\n    ctx.emit('submit')\n  }\n}\n```\n\nAs with other properties of the `setup()` context, `emit` can safely be destructured:\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit'],\n  setup(props, { emit }) {\n    emit('submit')\n  }\n}\n```\n\njs\n\n```\nexport default {\n  emits: ['inFocus', 'submit']\n}\n```\n\nThe `emits` option and `defineEmits()` macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:\n\nvue\n\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits({\n  submit(payload: { email: string, password: string }) {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>\n```\n\nIf you are using TypeScript with `<script setup>`, it's also possible to declare emitted events using pure type annotations:\n\nvue\n\n```\n<script setup lang=\"ts\">\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>\n```\n\nMore details: [Typing Component Emits](https://vuejs.org/guide/typescript/composition-api#typing-component-emits)\n\njs\n\n```\nexport default {\n  emits: {\n    submit(payload: { email: string, password: string }) {\n      // return `true` or `false` to indicate\n      // validation pass / fail\n    }\n  }\n}\n```\n\nSee also: [Typing Component Emits](https://vuejs.org/guide/typescript/options-api#typing-component-emits)\n\nAlthough optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners from [fallthrough attributes](https://vuejs.org/guide/components/attrs#v-on-listener-inheritance), avoiding edge cases caused by DOM events manually dispatched by 3rd party code.\n\nTIP\n\nIf a native event (e.g., `click`) is defined in the `emits` option, the listener will now only listen to component-emitted `click` events and no longer respond to native `click` events..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I events validation in vue-guide?\n\nAssistant: To events validation in vue-guide, here's what you do:\nSimilar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax.\n\nTo add validation, the event is assigned a function that receives the arguments passed to the `this.$emit``emit` call and returns a boolean to indicate whether the event is valid or not.\n\nvue\n\n```\n<script setup>\nconst emit = defineEmits({\n  // No validation\n  click: null,\n\n  // Validate submit event\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false\n    }\n  }\n})\n\nfunction submitForm(email, password) {\n  emit('submit', { email, password })\n}\n</script>\n```\n\njs\n\n```\nexport default {\n  emits: {\n    // No validation\n    click: null,\n\n    // Validate submit event\n    submit: ({ email, password }) => {\n      if (email && password) {\n        return true\n      } else {\n        console.warn('Invalid submit event payload!')\n        return false\n      }\n    }\n  },\n  methods: {\n    submitForm(email, password) {\n      this.$emit('submit', { email, password })\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Component Events in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Emitting an Event in Template**:\n\n```yaml\n<!-- MyComponent -->\n<button @click=\"$emit('someEvent')\">Click Me</button\n```\n\nThis snippet shows you how to emitting an event in template, which is an important aspect of component events.\n\n**Using $emit in Component Method**:\n\n```yaml\nexport default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}\n```\n\nThis snippet shows you how to using $emit in component method, which is an important aspect of component events.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Component Events in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUnlike native DOM events, component emitted events do not bubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or a global state management solution.\n\nAll extra arguments passed to $emit() after the event name will be forwarded to the listener.\n\nIf a native event (e.g., click) is defined in the emits option, the listener will now only listen to component-emitted click events and no longer respond to native click events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/events.html", "title": "Component Events", "description": "This page covers how to emit and listen to custom events in Vue components, including event arguments, declaring emitted events, and event validation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:12:53", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "title": "Component Events | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "scrapeId": "418e4d97-9cdc-4dde-a4c2-7e25862b8c28", "sourceURL": "https://vuejs.org/guide/components/events.html", "url": "https://vuejs.org/guide/components/events.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Props is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Props in vue-guide.\n\n# Props\n\nThis page covers the declaration, validation, and usage of props in Vue components.Here's a quick rundown of what this is about:\n\n## Props Declaration\n\nVue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in its dedicated section). In SFCs using `<script setup>`, props can be declared using the `defineProps()` macro:\n\n```vue\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nIn non- `<script setup>` components, props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nNotice the argument passed to `defineProps()` is the same as the value provided to the `props` options: the same props options API is shared between the two declaration styles. Props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}\n}\n```\n\nIn addition to declaring props using an array of strings, we can also use the object syntax:\n\n```js\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\n```js\n// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n```\n\n```js\n// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\nFor each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type. This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about prop validation further down this page.\n\n## Reactive Props Destructure\n\nVue's reactivity system tracks state usage based on property access. E.g. when you access `props.foo` in a computed getter or a watcher, the `foo` prop gets tracked as a dependency.\n\nSo, given the following code:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```\n\nIn version 3.4 and below, `foo` is an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`. Therefore the code above becomes equivalent to the following:\n\n```js\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n```\n\nIn addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:\n\n```ts\nconst { foo = 'hello' } = defineProps<{ foo?: string }>()\n```\n\n## Passing Destructured Props into Functions\n\nWhen we pass a destructured prop into a function, e.g.:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatch(foo, /* ... */)\n```\n\nThis will not work as expected because it is equivalent to `watch(props.foo, ...)` - we are passing a value instead of a reactive data source to `watch`. In fact, Vue's compiler will catch such cases and throw a warning.\n\nSimilar to how we can watch a normal prop with `watch(() => props.foo, ...)`, we can watch a destructured prop also by wrapping it in a getter:\n\n```js\nwatch(() => foo, /* ... */)\n```\n\nIn addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:\n\n```js\nuseComposable(() => foo)\n```\n\nThe external function can call the getter (or normalize it with `toValue`) when it needs to track changes of the provided prop, e.g. in a computed or watcher getter.\n\n## Prop Passing Details\n\n### Prop Name Casing\n\nWe declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:\n\n```js\ndefineProps({\n  greetingMessage: String\n})\n```\n\n```js\nexport default {\n  props: {\n    greetingMessage: String\n  }\n}\n```\n\ntemplate\n\n```html\n<span>{{ greetingMessage }}</span>\n```\n\nTechnically, you can also use camelCase when passing props to a child component (except in in-DOM templates). However, the convention is using kebab-case in all cases to align with HTML attributes:\n\n```html\n<MyComponent greeting-message=\"hello\" />\n```\n\nWe use PascalCase for component tags when possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions.\n\n## One-Way Data Flow\n\nAll props form a **one-way-down binding** between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand.\n\nIn addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:\n\n```js\nconst props = defineProps(['foo'])\n\n// ‚ùå warning, props are readonly!\nprops.foo = 'bar'\n```\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // ‚ùå warning, props are readonly!\n    this.foo = 'bar'\n  }\n}\n```\n\nThere are usually two cases where it's tempting to mutate a prop:\n\n1. **The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.** In this case, it's best to define a local data property that uses the prop as its initial value:\n\n```js\nconst props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)\n```\n\n```js\nexport default {\n     props: ['initialCounter'],\n     data() {\n       return {\n         // counter only uses this.initialCounter as the initial value;\n         // it is disconnected from future prop updates.\n         counter: this.initialCounter\n       }\n     }\n}\n```\n\n2. **The prop is passed in as a raw value that needs to be transformed.** In this case, it's best to define a computed property using the prop's value:\n\n```js\nconst props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())\n```\n\n```js\nexport default {\n     props: ['size'],\n     computed: {\n       // computed property that auto-updates when the prop changes\n       normalizedSize() {\n         return this.size.trim().toLowerCase()\n       }\n     }\n}\n```\n\n## Prop Validation\n\nComponents can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others.\n\nTo specify prop validations, you can provide an object with validation requirements to the `defineProps()` macro`props` option, instead of an array of strings. For example:\n\n```js\ndefineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "overview", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I props declaration in vue-guide?\n\nAssistant: To props declaration in vue-guide, here's what you do:\nVue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in its dedicated section). In SFCs using `<script setup>`, props can be declared using the `defineProps()` macro:\n\n```vue\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nIn non- `<script setup>` components, props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nNotice the argument passed to `defineProps()` is the same as the value provided to the `props` options: the same props options API is shared between the two declaration styles. Props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}\n}\n```\n\nIn addition to declaring props using an array of strings, we can also use the object syntax:\n\n```js\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\n```js\n// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n```\n\n```js\n// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\nFor each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type. This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about prop validation further down this page..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reactive props destructure in vue-guide?\n\nAssistant: To reactive props destructure in vue-guide, here's what you do:\nVue's reactivity system tracks state usage based on property access. E.g. when you access `props.foo` in a computed getter or a watcher, the `foo` prop gets tracked as a dependency.\n\nSo, given the following code:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```\n\nIn version 3.4 and below, `foo` is an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`. Therefore the code above becomes equivalent to the following:\n\n```js\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n```\n\nIn addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:\n\n```ts\nconst { foo = 'hello' } = defineProps<{ foo?: string }>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing destructured props into functions in vue-guide?\n\nAssistant: To passing destructured props into functions in vue-guide, here's what you do:\nWhen we pass a destructured prop into a function, e.g.:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatch(foo, /* ... */)\n```\n\nThis will not work as expected because it is equivalent to `watch(props.foo, ...)` - we are passing a value instead of a reactive data source to `watch`. In fact, Vue's compiler will catch such cases and throw a warning.\n\nSimilar to how we can watch a normal prop with `watch(() => props.foo, ...)`, we can watch a destructured prop also by wrapping it in a getter:\n\n```js\nwatch(() => foo, /* ... */)\n```\n\nIn addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:\n\n```js\nuseComposable(() => foo)\n```\n\nThe external function can call the getter (or normalize it with `toValue`) when it needs to track changes of the provided prop, e.g. in a computed or watcher getter..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop passing details in vue-guide?\n\nAssistant: To prop passing details in vue-guide, here's what you do:\n### Prop Name Casing\n\nWe declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:\n\n```js\ndefineProps({\n  greetingMessage: String\n})\n```\n\n```js\nexport default {\n  props: {\n    greetingMessage: String\n  }\n}\n```\n\ntemplate\n\n```html\n<span>{{ greetingMessage }}</span>\n```\n\nTechnically, you can also use camelCase when passing props to a child component (except in in-DOM templates). However, the convention is using kebab-case in all cases to align with HTML attributes:\n\n```html\n<MyComponent greeting-message=\"hello\" />\n```\n\nWe use PascalCase for component tags when possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I one-way data flow in vue-guide?\n\nAssistant: To one-way data flow in vue-guide, here's what you do:\nAll props form a **one-way-down binding** between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand.\n\nIn addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:\n\n```js\nconst props = defineProps(['foo'])\n\n// ‚ùå warning, props are readonly!\nprops.foo = 'bar'\n```\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // ‚ùå warning, props are readonly!\n    this.foo = 'bar'\n  }\n}\n```\n\nThere are usually two cases where it's tempting to mutate a prop:\n\n1. **The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.** In this case, it's best to define a local data property that uses the prop as its initial value:\n\n```js\nconst props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)\n```\n\n```js\nexport default {\n     props: ['initialCounter'],\n     data() {\n       return {\n         // counter only uses this.initialCounter as the initial value;\n         // it is disconnected from future prop updates.\n         counter: this.initialCounter\n       }\n     }\n}\n```\n\n2. **The prop is passed in as a raw value that needs to be transformed.** In this case, it's best to define a computed property using the prop's value:\n\n```js\nconst props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())\n```\n\n```js\nexport default {\n     props: ['size'],\n     computed: {\n       // computed property that auto-updates when the prop changes\n       normalizedSize() {\n         return this.size.trim().toLowerCase()\n       }\n     }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop validation in vue-guide?\n\nAssistant: To prop validation in vue-guide, here's what you do:\nComponents can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others.\n\nTo specify prop validations, you can provide an object with validation requirements to the `defineProps()` macro`props` option, instead of an array of strings. For example:\n\n```js\ndefineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Props in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Props Declaration in <script setup>**:\n\n```yaml\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nThis snippet shows you how to props declaration in <script setup>, which is an important aspect of props.\n\n**Props Declaration in Non-<script setup>**:\n\n```yaml\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nThis snippet shows you how to props declaration in non-<script setup>, which is an important aspect of props.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "code_examples", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Props in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse camelCase for prop names to avoid quotes in property keys.\n\nAvoid mutating props directly in child components to maintain one-way data flow.\n\nUse computed properties for transforming prop values instead of mutating them.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/props.html", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:13:38", "type": "best_practices", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Props | Vue.js", "og:title": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1340b89d-e994-4c61-8ae7-5d89e856ecc9", "sourceURL": "https://vuejs.org/guide/components/props.html", "url": "https://vuejs.org/guide/components/props.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Provide / Inject is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Provide / Inject in vue-guide.\n\n# Provide / Inject\n\nThis page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.Here's a quick rundown of what this is about:\n\n## Prop Drilling\n\nUsually, when we need to pass data from the parent to a child component, we use props. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain:\n\n![prop drilling diagram](https://vuejs.org/assets/prop-drilling.XJXa8UE-.png)\n\nNotice although the `<Footer>` component may not care about these props at all, it still needs to declare and pass them along just so `<DeepChild>` can access them. If there is a longer parent chain, more components would be affected along the way. This is called \"props drilling\" and definitely isn't fun to deal with.\n\nWe can solve props drilling with `provide` and `inject`. A parent component can serve as a dependency provider for all its descendants. Any component in the descendant tree, regardless of how deep it is, can inject dependencies provided by components up in its parent chain.\n\n![Provide/inject scheme](https://vuejs.org/assets/provide-inject.C0gAIfVn.png)\n\n## Provide\n\nTo provide data to a component's descendants, use the [`provide()`](https://vuejs.org/api/composition-api-dependency-injection#provide) function:\n\n```vue\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\nIf not using `<script setup>`, make sure `provide()` is called synchronously inside `setup()`:\n\n```js\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\nThe `provide()` function accepts two arguments. The first argument is called the **injection key**, which can be a string or a `Symbol`. The injection key is used by descendant components to lookup the desired value to inject. A single component can call `provide()` multiple times with different injection keys to provide different values.\n\nThe second argument is the provided value. The value can be of any type, including reactive state such as refs:\n\n```js\nimport { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)\n```\n\nProviding reactive values allows the descendant components using the provided value to establish a reactive connection to the provider component.\n\nTo provide data to a component's descendants, use the [`provide`](https://vuejs.org/api/options-composition#provide) option:\n\n```js\nexport default {\n  provide: {\n    message: 'hello!'\n  }\n}\n```\n\nFor each property in the `provide` object, the key is used by child components to locate the correct value to inject, while the value is what ends up being injected.\n\nIf we need to provide per-instance state, for example data declared via the `data()`, then `provide` must use a function value:\n\n```js\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    // use function syntax so that we can access `this`\n    return {\n      message: this.message\n    }\n  }\n}\n```\n\nHowever, do note this does **not** make the injection reactive. We will discuss [making injections reactive](https://vuejs.org/guide/components/provide-inject.html#working-with-reactivity) below.\n\n## App-level Provide\n\nIn addition to providing data in a component, we can also provide at the app level:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n\nApp-level provides are available to all components rendered in the app. This is especially useful when writing [plugins](https://vuejs.org/guide/reusability/plugins), as plugins typically wouldn't be able to provide values using components.\n\n## Inject\n\nTo inject data provided by an ancestor component, use the [`inject()`](https://vuejs.org/api/composition-api-dependency-injection#inject) function:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n\nIf the provided value is a ref, it will be injected as-is and will **not** be automatically unwrapped. This allows the injector component to retain the reactivity connection to the provider component.\n\nTo inject data provided by an ancestor component, use the [`inject`](https://vuejs.org/api/options-composition#inject) option:\n\n```js\nexport default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // injected value\n  }\n}\n```\n\nInjections are resolved **before** the component's own state, so you can access injected properties in `data()`:\n\n```js\nexport default {\n  inject: ['message'],\n  data() {\n    return {\n      // initial data based on injected value\n      fullMessage: this.message\n    }\n  }\n}\n```\n\nIf multiple parents provide data with the same key, inject will resolve to the first parent in its parent chain.\n\n## Injection Aliasing\n\nWhen using the array syntax for `inject`, the injected properties are exposed on the component instance using the same key. In the example above, the property was provided under the key \"message\", and injected as `this.message`. The local key is the same as the injection key.\n\nIf we want to inject the property using a different local key, we need to use the object syntax for the `inject` option:\n\n```js\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```\n\nHere, the component will locate a property provided with the key \"message\", and then expose it as `this.localMessage`.\n\n## Injection Default Values\n\nBy default, `inject` assumes that the injected key is provided somewhere in the parent chain. In the case where the key is not provided, there will be a runtime warning.\n\nIf we want to make an injected property work with optional providers, we need to declare a default value, similar to props:\n\n```js\n// `value` will be \"default value\"\n// if no data matching \"message\" was provided\nconst value = inject('message', 'default value')\n```\n\nIn some cases, the default value may need to be created by calling a function or instantiating a new class. To avoid unnecessary computation or side effects in case the optional value is not used, we can use a factory function for creating the default value:\n\n```js\nconst value = inject('key', () => new ExpensiveClass(), true)\n```\n\nThe third parameter indicates the default value should be treated as a factory function.\n\n```js\nexport default {\n  // object syntax is required\n  // when declaring default values for injections\n  inject: {\n    message: {\n      from: 'message', // this is optional if using the same key for injection\n      default: 'default value'\n    },\n    user: {\n      // use a factory function for non-primitive values that are expensive\n      // to create, or ones that should be unique per component instance.\n      default: () => ({ name: 'John' })\n    }\n  }\n}\n```\n\n## Working with Reactivity\n\nWhen using reactive provide / inject values, **it is recommended to keep any mutations to reactive state inside of the _provider_ whenever possible**. This ensures that the provided state and its possible mutations are co-located in the same component, making it easier to maintain in the future.\n\nThere may be times when we need to update the data from an injector component. In such cases, we recommend providing a function that is responsible for mutating the state:\n\n```vue\n<!-- inside provider component -->\n<script setup>\nimport { provide, ref } from 'vue'\n\nconst location = ref('North Pole')\n\nfunction updateLocation() {\n  location.value = 'South Pole'\n}\n\nprovide('location', {\n  location,\n  updateLocation\n})\n</script>\n```\n\n```vue\n<!-- in injector component -->\n<script setup>\nimport { inject } from 'vue'\n\nconst { location, updateLocation } = inject('location')\n</script>\n\n<template>\n  <button @click=\"updateLocation\">{{ location }}</button>\n</template>\n```\n\nFinally, you can wrap the provided value with [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) if you want to ensure that the data passed through `provide` cannot be mutated by the injector component.\n\n```vue\n<script setup>\nimport { ref, provide, readonly } from 'vue'\n\nconst count = ref(0)\nprovide('read-only-count', readonly(count))\n</script>\n```\n\nIn order to make injections reactively linked to the provider, we need to provide a computed property using the [computed()](https://vuejs.org/api/reactivity-core#computed) function:\n\n```js\nimport { computed } from 'vue'\n\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    return {\n      // explicitly provide a computed property\n      message: computed(() => this.message)\n    }\n  }\n}\n```\n\n## Working with Symbol Keys\n\nSo far, we have been using string injection keys in the examples. If you are working in a large application with many dependency providers, or you are authoring components that are going to be used by other developers, it is best to use Symbol injection keys to avoid potential collisions.\n\nIt's recommended to export the Symbols in a dedicated file:\n\n```js\n// keys.js\nexport const myInjectionKey = Symbol()\n```\n\n```js\n// in provider component\nimport { provide } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nprovide(myInjectionKey, {\n  /* data to provide */\n})\n```\n\n```js\n// in injector component\nimport { inject } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nconst injected = inject(myInjectionKey)\n```\n\nSee also: [Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject)\n\n```js\n// in provider component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  provide() {\n    return {\n      [myInjectionKey]: {\n        /* data to provide */\n      }\n    }\n  }\n}\n```\n\n```js\n// in injector component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  inject: {\n    injected: { from: myInjectionKey }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop drilling in vue-guide?\n\nAssistant: To prop drilling in vue-guide, here's what you do:\nUsually, when we need to pass data from the parent to a child component, we use props. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain:\n\n![prop drilling diagram](https://vuejs.org/assets/prop-drilling.XJXa8UE-.png)\n\nNotice although the `<Footer>` component may not care about these props at all, it still needs to declare and pass them along just so `<DeepChild>` can access them. If there is a longer parent chain, more components would be affected along the way. This is called \"props drilling\" and definitely isn't fun to deal with.\n\nWe can solve props drilling with `provide` and `inject`. A parent component can serve as a dependency provider for all its descendants. Any component in the descendant tree, regardless of how deep it is, can inject dependencies provided by components up in its parent chain.\n\n![Provide/inject scheme](https://vuejs.org/assets/provide-inject.C0gAIfVn.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide in vue-guide?\n\nAssistant: To provide in vue-guide, here's what you do:\nTo provide data to a component's descendants, use the [`provide()`](https://vuejs.org/api/composition-api-dependency-injection#provide) function:\n\n```vue\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\nIf not using `<script setup>`, make sure `provide()` is called synchronously inside `setup()`:\n\n```js\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\nThe `provide()` function accepts two arguments. The first argument is called the **injection key**, which can be a string or a `Symbol`. The injection key is used by descendant components to lookup the desired value to inject. A single component can call `provide()` multiple times with different injection keys to provide different values.\n\nThe second argument is the provided value. The value can be of any type, including reactive state such as refs:\n\n```js\nimport { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)\n```\n\nProviding reactive values allows the descendant components using the provided value to establish a reactive connection to the provider component.\n\nTo provide data to a component's descendants, use the [`provide`](https://vuejs.org/api/options-composition#provide) option:\n\n```js\nexport default {\n  provide: {\n    message: 'hello!'\n  }\n}\n```\n\nFor each property in the `provide` object, the key is used by child components to locate the correct value to inject, while the value is what ends up being injected.\n\nIf we need to provide per-instance state, for example data declared via the `data()`, then `provide` must use a function value:\n\n```js\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    // use function syntax so that we can access `this`\n    return {\n      message: this.message\n    }\n  }\n}\n```\n\nHowever, do note this does **not** make the injection reactive. We will discuss [making injections reactive](https://vuejs.org/guide/components/provide-inject.html#working-with-reactivity) below..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app-level provide in vue-guide?\n\nAssistant: To app-level provide in vue-guide, here's what you do:\nIn addition to providing data in a component, we can also provide at the app level:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n\nApp-level provides are available to all components rendered in the app. This is especially useful when writing [plugins](https://vuejs.org/guide/reusability/plugins), as plugins typically wouldn't be able to provide values using components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I inject in vue-guide?\n\nAssistant: To inject in vue-guide, here's what you do:\nTo inject data provided by an ancestor component, use the [`inject()`](https://vuejs.org/api/composition-api-dependency-injection#inject) function:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n\nIf the provided value is a ref, it will be injected as-is and will **not** be automatically unwrapped. This allows the injector component to retain the reactivity connection to the provider component.\n\nTo inject data provided by an ancestor component, use the [`inject`](https://vuejs.org/api/options-composition#inject) option:\n\n```js\nexport default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // injected value\n  }\n}\n```\n\nInjections are resolved **before** the component's own state, so you can access injected properties in `data()`:\n\n```js\nexport default {\n  inject: ['message'],\n  data() {\n    return {\n      // initial data based on injected value\n      fullMessage: this.message\n    }\n  }\n}\n```\n\nIf multiple parents provide data with the same key, inject will resolve to the first parent in its parent chain..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I injection aliasing in vue-guide?\n\nAssistant: To injection aliasing in vue-guide, here's what you do:\nWhen using the array syntax for `inject`, the injected properties are exposed on the component instance using the same key. In the example above, the property was provided under the key \"message\", and injected as `this.message`. The local key is the same as the injection key.\n\nIf we want to inject the property using a different local key, we need to use the object syntax for the `inject` option:\n\n```js\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```\n\nHere, the component will locate a property provided with the key \"message\", and then expose it as `this.localMessage`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I injection default values in vue-guide?\n\nAssistant: To injection default values in vue-guide, here's what you do:\nBy default, `inject` assumes that the injected key is provided somewhere in the parent chain. In the case where the key is not provided, there will be a runtime warning.\n\nIf we want to make an injected property work with optional providers, we need to declare a default value, similar to props:\n\n```js\n// `value` will be \"default value\"\n// if no data matching \"message\" was provided\nconst value = inject('message', 'default value')\n```\n\nIn some cases, the default value may need to be created by calling a function or instantiating a new class. To avoid unnecessary computation or side effects in case the optional value is not used, we can use a factory function for creating the default value:\n\n```js\nconst value = inject('key', () => new ExpensiveClass(), true)\n```\n\nThe third parameter indicates the default value should be treated as a factory function.\n\n```js\nexport default {\n  // object syntax is required\n  // when declaring default values for injections\n  inject: {\n    message: {\n      from: 'message', // this is optional if using the same key for injection\n      default: 'default value'\n    },\n    user: {\n      // use a factory function for non-primitive values that are expensive\n      // to create, or ones that should be unique per component instance.\n      default: () => ({ name: 'John' })\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I working with reactivity in vue-guide?\n\nAssistant: To working with reactivity in vue-guide, here's what you do:\nWhen using reactive provide / inject values, **it is recommended to keep any mutations to reactive state inside of the _provider_ whenever possible**. This ensures that the provided state and its possible mutations are co-located in the same component, making it easier to maintain in the future.\n\nThere may be times when we need to update the data from an injector component. In such cases, we recommend providing a function that is responsible for mutating the state:\n\n```vue\n<!-- inside provider component -->\n<script setup>\nimport { provide, ref } from 'vue'\n\nconst location = ref('North Pole')\n\nfunction updateLocation() {\n  location.value = 'South Pole'\n}\n\nprovide('location', {\n  location,\n  updateLocation\n})\n</script>\n```\n\n```vue\n<!-- in injector component -->\n<script setup>\nimport { inject } from 'vue'\n\nconst { location, updateLocation } = inject('location')\n</script>\n\n<template>\n  <button @click=\"updateLocation\">{{ location }}</button>\n</template>\n```\n\nFinally, you can wrap the provided value with [`readonly()`](https://vuejs.org/api/reactivity-core#readonly) if you want to ensure that the data passed through `provide` cannot be mutated by the injector component.\n\n```vue\n<script setup>\nimport { ref, provide, readonly } from 'vue'\n\nconst count = ref(0)\nprovide('read-only-count', readonly(count))\n</script>\n```\n\nIn order to make injections reactively linked to the provider, we need to provide a computed property using the [computed()](https://vuejs.org/api/reactivity-core#computed) function:\n\n```js\nimport { computed } from 'vue'\n\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    return {\n      // explicitly provide a computed property\n      message: computed(() => this.message)\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I working with symbol keys in vue-guide?\n\nAssistant: To working with symbol keys in vue-guide, here's what you do:\nSo far, we have been using string injection keys in the examples. If you are working in a large application with many dependency providers, or you are authoring components that are going to be used by other developers, it is best to use Symbol injection keys to avoid potential collisions.\n\nIt's recommended to export the Symbols in a dedicated file:\n\n```js\n// keys.js\nexport const myInjectionKey = Symbol()\n```\n\n```js\n// in provider component\nimport { provide } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nprovide(myInjectionKey, {\n  /* data to provide */\n})\n```\n\n```js\n// in injector component\nimport { inject } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nconst injected = inject(myInjectionKey)\n```\n\nSee also: [Typing Provide / Inject](https://vuejs.org/guide/typescript/composition-api#typing-provide-inject)\n\n```js\n// in provider component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  provide() {\n    return {\n      [myInjectionKey]: {\n        /* data to provide */\n      }\n    }\n  }\n}\n```\n\n```js\n// in injector component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  inject: {\n    injected: { from: myInjectionKey }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Provide / Inject in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Provide Example with <script setup>**:\n\n```yaml\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\nThis snippet shows you how to provide example with <script setup>, which is an important aspect of provide / inject.\n\n**Provide Example without <script setup>**:\n\n```yaml\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\nThis snippet shows you how to provide example without <script setup>, which is an important aspect of provide / inject.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Provide / Inject in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKeep mutations to reactive state inside of the provider component whenever possible.\n\nUse Symbol injection keys to avoid potential collisions in large applications.\n\nWrap provided values with readonly() to prevent mutations by injector components.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject.html", "title": "Provide / Inject", "description": "This page covers how to use the provide and inject features in Vue.js to manage dependencies between components, avoiding prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:14:35", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "title": "Provide / Inject | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "ogTitle": "Vue.js", "scrapeId": "2277c948-99df-4bd7-b022-b4814850f6be", "sourceURL": "https://vuejs.org/guide/components/provide-inject.html", "url": "https://vuejs.org/guide/components/provide-inject.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Component Registration is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Component Registration in vue-guide.\n\n# Component Registration\n\nThis page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.Here's a quick rundown of what this is about:\n\n## Global Registration\n\nWe can make components available globally in the current Vue application using the `.component()` method:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)\n```\n\nIf using SFCs, you will be registering the imported `.vue` files:\n\n```js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)\n```\n\nThe `.component()` method can be chained:\n\n```js\napp\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)\n```\n\nGlobally registered components can be used in the template of any component within this application:\n\n```template\n<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>\n```\n\nThis even applies to all subcomponents, meaning all three of these components will also be available inside each other.\n\n## Local Registration\n\nWhile convenient, global registration has a few drawbacks:\n\n1. Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.\n\n2. Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables.\n\nLocal registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly.\n\nWhen using SFC with `<script setup>`, imported components can be locally used without registration:\n\n```vue\n<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nIn non- `<script setup>`, you will need to use the `components` option:\n\n```js\nimport ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}\n```\n\nLocal registration is done using the `components` option:\n\n```vue\n<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nFor each property in the `components` object, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:\n\n```js\nexport default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}\n```\n\nNote that locally registered components are _not_ also available in descendant components. In this case, `ComponentA` will be made available to the current component only, not any of its child or descendant components.\n\n## Component Name Casing\n\nThroughout the guide, we are using PascalCase names when registering components. This is because:\n\n1. PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.\n\n2. `<PascalCase />` makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).\n\nThis is the recommended style when working with SFC or string templates. However, as discussed in in-DOM Template Parsing Caveats, PascalCase tags are not usable in in-DOM templates.\n\nLuckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as `MyComponent` can be referenced inside a Vue template (or inside an HTML element rendered by Vue) via both `<MyComponent>` and `<my-component>`. This allows us to use the same JavaScript component registration code regardless of template source.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "overview", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I global registration in vue-guide?\n\nAssistant: To global registration in vue-guide, here's what you do:\nWe can make components available globally in the current Vue application using the `.component()` method:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)\n```\n\nIf using SFCs, you will be registering the imported `.vue` files:\n\n```js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)\n```\n\nThe `.component()` method can be chained:\n\n```js\napp\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)\n```\n\nGlobally registered components can be used in the template of any component within this application:\n\n```template\n<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>\n```\n\nThis even applies to all subcomponents, meaning all three of these components will also be available inside each other..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I local registration in vue-guide?\n\nAssistant: To local registration in vue-guide, here's what you do:\nWhile convenient, global registration has a few drawbacks:\n\n1. Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.\n\n2. Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables.\n\nLocal registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly.\n\nWhen using SFC with `<script setup>`, imported components can be locally used without registration:\n\n```vue\n<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nIn non- `<script setup>`, you will need to use the `components` option:\n\n```js\nimport ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}\n```\n\nLocal registration is done using the `components` option:\n\n```vue\n<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nFor each property in the `components` object, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:\n\n```js\nexport default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}\n```\n\nNote that locally registered components are _not_ also available in descendant components. In this case, `ComponentA` will be made available to the current component only, not any of its child or descendant components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I component name casing in vue-guide?\n\nAssistant: To component name casing in vue-guide, here's what you do:\nThroughout the guide, we are using PascalCase names when registering components. This is because:\n\n1. PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.\n\n2. `<PascalCase />` makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).\n\nThis is the recommended style when working with SFC or string templates. However, as discussed in in-DOM Template Parsing Caveats, PascalCase tags are not usable in in-DOM templates.\n\nLuckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as `MyComponent` can be referenced inside a Vue template (or inside an HTML element rendered by Vue) via both `<MyComponent>` and `<my-component>`. This allows us to use the same JavaScript component registration code regardless of template source..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Component Registration in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Global Component Registration Example**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  'MyComponent',\n  {\n    /* ... */\n  }\n)\n```\n\nThis snippet shows you how to global component registration example, which is an important aspect of component registration.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Component Registration in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse PascalCase for component names to differentiate them from native HTML elements.\n\nBe cautious with global registration to avoid unused components in the final bundle.\n\nPrefer local registration for better maintainability and tree-shaking support.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/registration.html", "title": "Component Registration", "description": "This page assumes you've already read the Components Basics. Read that first if you are new to components. A Vue component needs to be 'registered' so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:16", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "title": "Component Registration | Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "scrapeId": "a4f4d77d-f474-4f59-8dc7-d469f7bec055", "sourceURL": "https://vuejs.org/guide/components/registration.html", "url": "https://vuejs.org/guide/components/registration.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Slots is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Slots in vue-guide.\n\n# Slots\n\nThis page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.Here's a quick rundown of what this is about:\n\n## Slot Content and Outlet\n\nWe have learned that components can accept props, which can be JavaScript values of any type. But how about template content? In some cases, we may want to pass a template fragment to a child component, and let the child component render the fragment within its own template.\n\nFor example, we may have a `<FancyButton>` component that supports usage like this:\n\n```html\n<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>\n```\n\nThe template of `<FancyButton>` looks like this:\n\n```html\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>\n```\n\nThe `<slot>` element is a **slot outlet** that indicates where the parent-provided **slot content** should be rendered.\n\nAnd the final rendered DOM:\n\n```html\n<button class=\"fancy-btn\">Click me!</button>\n```\n\nWith slots, the `<FancyButton>` is responsible for rendering the outer `<button>` (and its fancy styling), while the inner content is provided by the parent component.\n\n## Render Scope\n\nSlot content has access to the data scope of the parent component, because it is defined in the parent. For example:\n\n```html\n<span>{{ message }}</span>\n<FancyButton>{{ message }}</FancyButton>\n```\n\nHere both `{{ message }}` interpolations will render the same content.\n\nSlot content does **not** have access to the child component's data. Expressions in Vue templates can only access the scope it is defined in, consistent with JavaScript's lexical scoping.\n\n## Fallback Content\n\nThere are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a `<SubmitButton>` component:\n\n```html\n<button type=\"submit\">\n  <slot></slot>\n</button>\n```\n\nWe might want the text \"Submit\" to be rendered inside the `<button>` if the parent didn't provide any slot content. To make \"Submit\" the fallback content, we can place it in between the `<slot>` tags:\n\n```html\n<button type=\"submit\">\n  <slot>\n    Submit <!-- fallback content -->\n  </slot>\n</button>\n```\n\nNow when we use `<SubmitButton>` in a parent component, providing no content for the slot:\n\n```html\n<SubmitButton />\n```\n\nThis will render the fallback content, \"Submit\":\n\n```html\n<button type=\"submit\">Submit</button>\n```\n\nBut if we provide content:\n\n```html\n<SubmitButton>Save</SubmitButton>\n```\n\nThen the provided content will be rendered instead:\n\n```html\n<button type=\"submit\">Save</button>\n```\n\n## Named Slots\n\nThere are times when it's useful to have multiple slot outlets in a single component. For example, in a `<BaseLayout>` component with the following template:\n\n```html\n<div class=\"container\">\n  <header>\n    <!-- We want header content here -->\n  </header>\n  <main>\n    <!-- We want main content here -->\n  </main>\n  <footer>\n    <!-- We want footer content here -->\n  </footer>\n</div>\n```\n\nFor these cases, the `<slot>` element has a special attribute, `name`, which can be used to assign a unique ID to different slots so you can determine where content should be rendered:\n\n```html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\nA `<slot>` outlet without `name` implicitly has the name \"default\".\n\n## Conditional Slots\n\nSometimes you want to render something based on whether or not content has been passed to a slot.\n\nYou can use the [$slots](https://vuejs.org/api/component-instance#slots) property in combination with a [v-if](https://vuejs.org/guide/essentials/conditional#v-if) to achieve this.\n\nIn the example below we define a Card component with three conditional slots: `header`, `footer` and the `default` one. When content for the header / footer / default is present, we want to wrap it to provide additional styling:\n\n```html\n<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n\n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n\n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n```\n\n## Dynamic Slot Names\n\n[Dynamic directive arguments](https://vuejs.org/guide/essentials/template-syntax#dynamic-arguments) also work on `v-slot`, allowing the definition of dynamic slot names:\n\n```html\n<base-layout>\n  <template v-slot:[dynamicSlotName]>\n    ...\n  </template>\n\n  <!-- with shorthand -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>\n```\n\n## Scoped Slots\n\nAs discussed in [Render Scope](https://vuejs.org/guide/components/slots.html#render-scope), slot content does not have access to state in the child component.\n\nHowever, there are cases where it could be useful if a slot's content can make use of data from both the parent scope and the child scope. To achieve that, we need a way for the child to pass data to a slot when rendering it.\n\nIn fact, we can do exactly that - we can pass attributes to a slot outlet just like passing props to a component:\n\n```html\n<!-- <MyComponent> template -->\n<div>\n  <slot :text=\"greetingMessage\" :count=\"1\"></slot>\n</div>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I slot content and outlet in vue-guide?\n\nAssistant: To slot content and outlet in vue-guide, here's what you do:\nWe have learned that components can accept props, which can be JavaScript values of any type. But how about template content? In some cases, we may want to pass a template fragment to a child component, and let the child component render the fragment within its own template.\n\nFor example, we may have a `<FancyButton>` component that supports usage like this:\n\n```html\n<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>\n```\n\nThe template of `<FancyButton>` looks like this:\n\n```html\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>\n```\n\nThe `<slot>` element is a **slot outlet** that indicates where the parent-provided **slot content** should be rendered.\n\nAnd the final rendered DOM:\n\n```html\n<button class=\"fancy-btn\">Click me!</button>\n```\n\nWith slots, the `<FancyButton>` is responsible for rendering the outer `<button>` (and its fancy styling), while the inner content is provided by the parent component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I render scope in vue-guide?\n\nAssistant: To render scope in vue-guide, here's what you do:\nSlot content has access to the data scope of the parent component, because it is defined in the parent. For example:\n\n```html\n<span>{{ message }}</span>\n<FancyButton>{{ message }}</FancyButton>\n```\n\nHere both `{{ message }}` interpolations will render the same content.\n\nSlot content does **not** have access to the child component's data. Expressions in Vue templates can only access the scope it is defined in, consistent with JavaScript's lexical scoping..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I fallback content in vue-guide?\n\nAssistant: To fallback content in vue-guide, here's what you do:\nThere are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a `<SubmitButton>` component:\n\n```html\n<button type=\"submit\">\n  <slot></slot>\n</button>\n```\n\nWe might want the text \"Submit\" to be rendered inside the `<button>` if the parent didn't provide any slot content. To make \"Submit\" the fallback content, we can place it in between the `<slot>` tags:\n\n```html\n<button type=\"submit\">\n  <slot>\n    Submit <!-- fallback content -->\n  </slot>\n</button>\n```\n\nNow when we use `<SubmitButton>` in a parent component, providing no content for the slot:\n\n```html\n<SubmitButton />\n```\n\nThis will render the fallback content, \"Submit\":\n\n```html\n<button type=\"submit\">Submit</button>\n```\n\nBut if we provide content:\n\n```html\n<SubmitButton>Save</SubmitButton>\n```\n\nThen the provided content will be rendered instead:\n\n```html\n<button type=\"submit\">Save</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I named slots in vue-guide?\n\nAssistant: To named slots in vue-guide, here's what you do:\nThere are times when it's useful to have multiple slot outlets in a single component. For example, in a `<BaseLayout>` component with the following template:\n\n```html\n<div class=\"container\">\n  <header>\n    <!-- We want header content here -->\n  </header>\n  <main>\n    <!-- We want main content here -->\n  </main>\n  <footer>\n    <!-- We want footer content here -->\n  </footer>\n</div>\n```\n\nFor these cases, the `<slot>` element has a special attribute, `name`, which can be used to assign a unique ID to different slots so you can determine where content should be rendered:\n\n```html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\nA `<slot>` outlet without `name` implicitly has the name \"default\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I conditional slots in vue-guide?\n\nAssistant: To conditional slots in vue-guide, here's what you do:\nSometimes you want to render something based on whether or not content has been passed to a slot.\n\nYou can use the [$slots](https://vuejs.org/api/component-instance#slots) property in combination with a [v-if](https://vuejs.org/guide/essentials/conditional#v-if) to achieve this.\n\nIn the example below we define a Card component with three conditional slots: `header`, `footer` and the `default` one. When content for the header / footer / default is present, we want to wrap it to provide additional styling:\n\n```html\n<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n\n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n\n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I dynamic slot names in vue-guide?\n\nAssistant: To dynamic slot names in vue-guide, here's what you do:\n[Dynamic directive arguments](https://vuejs.org/guide/essentials/template-syntax#dynamic-arguments) also work on `v-slot`, allowing the definition of dynamic slot names:\n\n```html\n<base-layout>\n  <template v-slot:[dynamicSlotName]>\n    ...\n  </template>\n\n  <!-- with shorthand -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I scoped slots in vue-guide?\n\nAssistant: To scoped slots in vue-guide, here's what you do:\nAs discussed in [Render Scope](https://vuejs.org/guide/components/slots.html#render-scope), slot content does not have access to state in the child component.\n\nHowever, there are cases where it could be useful if a slot's content can make use of data from both the parent scope and the child scope. To achieve that, we need a way for the child to pass data to a slot when rendering it.\n\nIn fact, we can do exactly that - we can pass attributes to a slot outlet just like passing props to a component:\n\n```html\n<!-- <MyComponent> template -->\n<div>\n  <slot :text=\"greetingMessage\" :count=\"1\"></slot>\n</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Slots in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**FancyButton Component**:\n\n```yaml\n<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>\n\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>\n\n<button class=\"fancy-btn\">Click me!</button\n```\n\nThis snippet shows you how to fancybutton component, which is an important aspect of slots.\n\n**SubmitButton Fallback Content**:\n\n```yaml\n<button type=\"submit\">\n  <slot>\n    Submit <!-- fallback content -->\n  </slot>\n</button>\n\n<SubmitButton />\n\n<button type=\"submit\">Submit</button\n\n<SubmitButton>Save</SubmitButton>\n\n<button type=\"submit\">Save</button\n```\n\nThis snippet shows you how to submitbutton fallback content, which is an important aspect of slots.\n\n**BaseLayout with Named Slots**:\n\n```yaml\n<BaseLayout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template v-slot:default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </template>\n\n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>\n\n<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>\n```\n\nThis snippet shows you how to baselayout with named slots, which is an important aspect of slots.\n\n**Card Component with Conditional Slots**:\n\n```yaml\n<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n\n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n\n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n\n```\n\nThis snippet shows you how to card component with conditional slots, which is an important aspect of slots.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Slots in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse fallback content for slots to provide default values when no content is passed.\n\nUtilize named slots for better organization and clarity when dealing with multiple slot outlets.\n\nConsider using scoped slots to allow parent components to access data from child components.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/slots.html", "title": "Slots", "description": "This page covers the concept of slots in Vue.js components, including how to use them, their types, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:15:59", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Slots | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "46d21711-aba5-4ce0-b235-381d9d5efc2d", "sourceURL": "https://vuejs.org/guide/components/slots.html", "url": "https://vuejs.org/guide/components/slots.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Component v-model is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Component v-model in vue-guide.\n\n# Component v-model\n\nThis page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\n`v-model` can be used on a component to implement a two-way binding.\n\nStarting in Vue 3.4, the recommended approach to achieve this is using the [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel) macro:\n\n```vue\n<!-- Child.vue -->\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>\n```\n\nThe parent can then bind a value with `v-model`:\n\n```template\n<!-- Parent.vue -->\n<Child v-model=\"countModel\" />\n```\n\nThe value returned by `defineModel()` is a ref. It can be accessed and mutated like any other ref, except that it acts as a two-way binding between a parent value and a local one:\n\n- Its `.value` is synced with the value bound by the parent `v-model`;\n- When it is mutated by the child, it causes the parent bound value to be updated as well.\n\nThis means you can also bind this ref to a native input element with `v-model`, making it straightforward to wrap native input elements while providing the same `v-model` usage:\n\n```vue\n<script setup>\nconst model = defineModel()\n</script>\n\n<template>\n  <input v-model=\"model\" />\n</template>\n```\n\n## Under the Hood\n\n`defineModel` is a convenience macro. The compiler expands it to the following:\n\n- A prop named `modelValue`, which the local ref's value is synced with;\n- An event named `update:modelValue`, which is emitted when the local ref's value is mutated.\n\nThis is how you would implement the same child component shown above prior to 3.4:\n\n```vue\n<!-- Child.vue -->\n<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\nThen, `v-model=\"foo\"` in the parent component will be compiled to:\n\n```template\n<!-- Parent.vue -->\n<Child\n  :modelValue=\"foo\"\n  @update:modelValue=\"$event => (foo = $event)\"\n/>\n```\n\nAs you can see, it is quite a bit more verbose. However, it is helpful to understand what is happening under the hood.\n\nBecause `defineModel` declares a prop, you can therefore declare the underlying prop's options by passing it to `defineModel`:\n\n```js\n// making the v-model required\nconst model = defineModel({ required: true })\n\n// providing a default value\nconst model = defineModel({ default: 0 })\n```\n\nWARNING\n\nIf you have a `default` value for `defineModel` prop and you don't provide any value for this prop from the parent component, it can cause a de-synchronization between parent and child components. In the example below, the parent's `myRef` is undefined, but the child's `model` is 1:\n\n**Child component:**\n\n```js\nconst model = defineModel({ default: 1 })\n```\n\n**Parent component:**\n\n```js\nconst myRef = ref()\n```\n\n```html\n<Child v-model=\"myRef\"></Child>\n```\n\n## v-model arguments\n\n`v-model` on a component can also accept an argument:\n\n```template\n<MyComponent v-model:title=\"bookTitle\" />\n```\n\nIn the child component, we can support the corresponding argument by passing a string to `defineModel()` as its first argument:\n\n```vue\n<!-- MyComponent.vue -->\n<script setup>\nconst title = defineModel('title')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"title\" />\n</template>\n```\n\n## Multiple v-model bindings\n\nBy leveraging the ability to target a particular prop and event as we learned before with [`v-model` arguments](https://vuejs.org/guide/components/v-model.html#v-model-arguments), we can now create multiple `v-model` bindings on a single component instance.\n\nEach `v-model` will sync to a different prop, without the need for extra options in the component:\n\n```template\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\n```vue\n<script setup>\nconst firstName = defineModel('firstName')\nconst lastName = defineModel('lastName')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"firstName\" />\n  <input type=\"text\" v-model=\"lastName\" />\n</template>\n```\n\n## Handling v-model modifiers\n\nWhen we were learning about form input bindings, we saw that `v-model` has [built-in modifiers](https://vuejs.org/guide/essentials/forms#modifiers) - `.trim`, `.number` and `.lazy`. In some cases, you might also want the `v-model` on your custom input component to support custom modifiers.\n\nLet's create an example custom modifier, `capitalize`, that capitalizes the first letter of the string provided by the `v-model` binding:\n\n```template\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\nModifiers added to a component `v-model` can be accessed in the child component by destructuring the `defineModel()` return value like this:\n\n```vue\n<script setup>\nconst [model, modifiers] = defineModel()\n\nconsole.log(modifiers) // { capitalize: true }\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>\n```\n\n## Modifiers for v-model with arguments\n\nFor `v-model` bindings with both argument and modifiers, the generated prop name will be `arg + \"Modifiers\"`. For example:\n\n```template\n<MyComponent v-model:title.capitalize=\"myText\">\n```\n\nThe corresponding declarations should be:\n\n```js\nexport default {\n  props: ['title', 'titleModifiers'],\n  emits: ['update:title'],\n  created() {\n    console.log(this.titleModifiers) // { capitalize: true }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\n`v-model` can be used on a component to implement a two-way binding.\n\nStarting in Vue 3.4, the recommended approach to achieve this is using the [`defineModel()`](https://vuejs.org/api/sfc-script-setup#definemodel) macro:\n\n```vue\n<!-- Child.vue -->\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>\n```\n\nThe parent can then bind a value with `v-model`:\n\n```template\n<!-- Parent.vue -->\n<Child v-model=\"countModel\" />\n```\n\nThe value returned by `defineModel()` is a ref. It can be accessed and mutated like any other ref, except that it acts as a two-way binding between a parent value and a local one:\n\n- Its `.value` is synced with the value bound by the parent `v-model`;\n- When it is mutated by the child, it causes the parent bound value to be updated as well.\n\nThis means you can also bind this ref to a native input element with `v-model`, making it straightforward to wrap native input elements while providing the same `v-model` usage:\n\n```vue\n<script setup>\nconst model = defineModel()\n</script>\n\n<template>\n  <input v-model=\"model\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I under the hood in vue-guide?\n\nAssistant: To under the hood in vue-guide, here's what you do:\n`defineModel` is a convenience macro. The compiler expands it to the following:\n\n- A prop named `modelValue`, which the local ref's value is synced with;\n- An event named `update:modelValue`, which is emitted when the local ref's value is mutated.\n\nThis is how you would implement the same child component shown above prior to 3.4:\n\n```vue\n<!-- Child.vue -->\n<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\nThen, `v-model=\"foo\"` in the parent component will be compiled to:\n\n```template\n<!-- Parent.vue -->\n<Child\n  :modelValue=\"foo\"\n  @update:modelValue=\"$event => (foo = $event)\"\n/>\n```\n\nAs you can see, it is quite a bit more verbose. However, it is helpful to understand what is happening under the hood.\n\nBecause `defineModel` declares a prop, you can therefore declare the underlying prop's options by passing it to `defineModel`:\n\n```js\n// making the v-model required\nconst model = defineModel({ required: true })\n\n// providing a default value\nconst model = defineModel({ default: 0 })\n```\n\nWARNING\n\nIf you have a `default` value for `defineModel` prop and you don't provide any value for this prop from the parent component, it can cause a de-synchronization between parent and child components. In the example below, the parent's `myRef` is undefined, but the child's `model` is 1:\n\n**Child component:**\n\n```js\nconst model = defineModel({ default: 1 })\n```\n\n**Parent component:**\n\n```js\nconst myRef = ref()\n```\n\n```html\n<Child v-model=\"myRef\"></Child>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I v-model arguments in vue-guide?\n\nAssistant: To v-model arguments in vue-guide, here's what you do:\n`v-model` on a component can also accept an argument:\n\n```template\n<MyComponent v-model:title=\"bookTitle\" />\n```\n\nIn the child component, we can support the corresponding argument by passing a string to `defineModel()` as its first argument:\n\n```vue\n<!-- MyComponent.vue -->\n<script setup>\nconst title = defineModel('title')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"title\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I multiple v-model bindings in vue-guide?\n\nAssistant: To multiple v-model bindings in vue-guide, here's what you do:\nBy leveraging the ability to target a particular prop and event as we learned before with [`v-model` arguments](https://vuejs.org/guide/components/v-model.html#v-model-arguments), we can now create multiple `v-model` bindings on a single component instance.\n\nEach `v-model` will sync to a different prop, without the need for extra options in the component:\n\n```template\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\n```vue\n<script setup>\nconst firstName = defineModel('firstName')\nconst lastName = defineModel('lastName')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"firstName\" />\n  <input type=\"text\" v-model=\"lastName\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I handling v-model modifiers in vue-guide?\n\nAssistant: To handling v-model modifiers in vue-guide, here's what you do:\nWhen we were learning about form input bindings, we saw that `v-model` has [built-in modifiers](https://vuejs.org/guide/essentials/forms#modifiers) - `.trim`, `.number` and `.lazy`. In some cases, you might also want the `v-model` on your custom input component to support custom modifiers.\n\nLet's create an example custom modifier, `capitalize`, that capitalizes the first letter of the string provided by the `v-model` binding:\n\n```template\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\nModifiers added to a component `v-model` can be accessed in the child component by destructuring the `defineModel()` return value like this:\n\n```vue\n<script setup>\nconst [model, modifiers] = defineModel()\n\nconsole.log(modifiers) // { capitalize: true }\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I modifiers for v-model with arguments in vue-guide?\n\nAssistant: To modifiers for v-model with arguments in vue-guide, here's what you do:\nFor `v-model` bindings with both argument and modifiers, the generated prop name will be `arg + \"Modifiers\"`. For example:\n\n```template\n<MyComponent v-model:title.capitalize=\"myText\">\n```\n\nThe corresponding declarations should be:\n\n```js\nexport default {\n  props: ['title', 'titleModifiers'],\n  emits: ['update:title'],\n  created() {\n    console.log(this.titleModifiers) // { capitalize: true }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Component v-model in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\n<!-- Child.vue -->\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of component v-model.\n\n**Parent Component Binding Example**:\n\n```yaml\n<!-- Parent.vue -->\n<Child v-model=\"countModel\" />\n```\n\nThis snippet shows you how to parent component binding example, which is an important aspect of component v-model.\n\n**Under the Hood Example**:\n\n```yaml\n<!-- Child.vue -->\n<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\nThis snippet shows you how to under the hood example, which is an important aspect of component v-model.\n\n**v-model with Argument Example**:\n\n```yaml\n<!-- MyComponent.vue -->\n<script setup>\nconst title = defineModel('title')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"title\" />\n</template>\n```\n\nThis snippet shows you how to v-model with argument example, which is an important aspect of component v-model.\n\n**Multiple v-model Example**:\n\n```yaml\n<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>\n```\n\nThis snippet shows you how to multiple v-model example, which is an important aspect of component v-model.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "code_examples", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Component v-model in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `defineModel()` for two-way binding in Vue 3.4 and above.\n\nBe cautious with default values in `defineModel()` to avoid desynchronization between parent and child components.\n\nUnderstand the underlying prop and event structure when using `v-model` for better debugging and implementation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/v-model.html", "title": "Component v-model", "description": "This page covers the usage of v-model in Vue components, including basic usage, modifiers, and multiple bindings.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:46", "type": "best_practices", "page_metadata": {"twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "language": "en-US", "title": "Component v-model | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "scrapeId": "65253d34-a4e9-4df2-aa00-0ce0cdce14a6", "sourceURL": "https://vuejs.org/guide/components/v-model.html", "url": "https://vuejs.org/guide/components/v-model.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Creating a Vue Application is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Creating a Vue Application in vue-guide.\n\n# Creating a Vue Application\n\nThis page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.Here's a quick rundown of what this is about:\n\n## The application instance\n\nEvery Vue application starts by creating a new **application instance** with the [`createApp`](https://vuejs.org/api/application#createapp) function:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\n## The Root Component\n\nThe object we are passing into `createApp` is in fact a component. Every app requires a \"root component\" that can contain other components as its children.\n\nIf you are using Single-File Components, we typically import the root component from another file:\n\n```js\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nWhile many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:\n\n```\nApp (root component)\n‚îú‚îÄ TodoList\n‚îÇ  ‚îî‚îÄ TodoItem\n‚îÇ     ‚îú‚îÄ TodoDeleteButton\n‚îÇ     ‚îî‚îÄ TodoEditButton\n‚îî‚îÄ TodoFooter\n   ‚îú‚îÄ TodoClearButton\n   ‚îî‚îÄ TodoStatistics\n```\n\n## Mounting the App\n\nAn application instance won't render anything until its `.mount()` method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:\n\n```html\n<div id=\"app\"></div>\n```\n\n```js\napp.mount('#app')\n```\n\nThe content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app.\n\nThe `.mount()` method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance.\n\n## In-DOM Root Component Template\n\nThe template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:\n\n```html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')\n```\n\nVue will automatically use the container's `innerHTML` as the template if the root component does not already have a `template` option.\n\nIn-DOM templates are often used in applications that are [using Vue without a build step](https://vuejs.org/guide/quick-start#using-vue-from-cdn). They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server.\n\n## App Configurations\n\nThe application instance exposes a `.config` object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:\n\n```js\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\nThe application instance also provides a few methods for registering app-scoped assets. For example, registering a component:\n\n```js\napp.component('TodoDeleteButton', TodoDeleteButton)\n```\n\nThis makes the `TodoDeleteButton` available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its [API reference](https://vuejs.org/api/application).\n\nMake sure to apply all app configurations before mounting the app!\n\n## Multiple application instances\n\nYou are not limited to a single application instance on the same page. The `createApp` API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:\n\n```js\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "overview", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the application instance in vue-guide?\n\nAssistant: To the application instance in vue-guide, here's what you do:\nEvery Vue application starts by creating a new **application instance** with the [`createApp`](https://vuejs.org/api/application#createapp) function:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the root component in vue-guide?\n\nAssistant: To the root component in vue-guide, here's what you do:\nThe object we are passing into `createApp` is in fact a component. Every app requires a \"root component\" that can contain other components as its children.\n\nIf you are using Single-File Components, we typically import the root component from another file:\n\n```js\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nWhile many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:\n\n```\nApp (root component)\n‚îú‚îÄ TodoList\n‚îÇ  ‚îî‚îÄ TodoItem\n‚îÇ     ‚îú‚îÄ TodoDeleteButton\n‚îÇ     ‚îî‚îÄ TodoEditButton\n‚îî‚îÄ TodoFooter\n   ‚îú‚îÄ TodoClearButton\n   ‚îî‚îÄ TodoStatistics\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mounting the app in vue-guide?\n\nAssistant: To mounting the app in vue-guide, here's what you do:\nAn application instance won't render anything until its `.mount()` method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:\n\n```html\n<div id=\"app\"></div>\n```\n\n```js\napp.mount('#app')\n```\n\nThe content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app.\n\nThe `.mount()` method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I in-dom root component template in vue-guide?\n\nAssistant: To in-dom root component template in vue-guide, here's what you do:\nThe template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:\n\n```html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')\n```\n\nVue will automatically use the container's `innerHTML` as the template if the root component does not already have a `template` option.\n\nIn-DOM templates are often used in applications that are [using Vue without a build step](https://vuejs.org/guide/quick-start#using-vue-from-cdn). They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app configurations in vue-guide?\n\nAssistant: To app configurations in vue-guide, here's what you do:\nThe application instance exposes a `.config` object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:\n\n```js\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\nThe application instance also provides a few methods for registering app-scoped assets. For example, registering a component:\n\n```js\napp.component('TodoDeleteButton', TodoDeleteButton)\n```\n\nThis makes the `TodoDeleteButton` available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its [API reference](https://vuejs.org/api/application).\n\nMake sure to apply all app configurations before mounting the app!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I multiple application instances in vue-guide?\n\nAssistant: To multiple application instances in vue-guide, here's what you do:\nYou are not limited to a single application instance on the same page. The `createApp` API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:\n\n```js\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "section_detail", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Creating a Vue Application in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Vue Application Instance**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\nThis snippet shows you how to creating a vue application instance, which is an important aspect of creating a vue application.\n\n**Using a Root Component**:\n\n```yaml\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nThis snippet shows you how to using a root component, which is an important aspect of creating a vue application.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "code_examples", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Creating a Vue Application in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to apply all app configurations before mounting the app!\n\nIf you are using Vue to enhance server-rendered HTML, create multiple small application instances instead of a single instance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application.html", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:17:23", "type": "best_practices", "page_metadata": {"title": "Creating a Vue Application | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "twitter:card": "summary", "language": "en-US", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "scrapeId": "1d7c1430-5915-4169-9af9-3a15e44260b0", "sourceURL": "https://vuejs.org/guide/essentials/application.html", "url": "https://vuejs.org/guide/essentials/application.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Conditional Rendering is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Conditional Rendering in vue-guide.\n\n# Conditional Rendering\n\nThis page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.Here's a quick rundown of what this is about:\n\n## `v-if`\n\nThe directive `v-if` is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.\n\ntemplate\n\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```\n\n## `v-else`\n\nYou can use the `v-else` directive to indicate an \"else block\" for `v-if`:\n\ntemplate\n\n```\n<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no üò¢</h1>\n```\n\nA `v-else` element must immediately follow a `v-if` or a `v-else-if` element - otherwise it will not be recognized.\n\n## `v-else-if`\n\nThe `v-else-if`, as the name suggests, serves as an \"else if block\" for `v-if`. It can also be chained multiple times:\n\ntemplate\n\n```\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\nSimilar to `v-else`, a `v-else-if` element must immediately follow a `v-if` or a `v-else-if` element.\n\n## `v-if` on `<template>`\n\nBecause `v-if` is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use `v-if` on a `<template>` element, which serves as an invisible wrapper. The final rendered result will not include the `<template>` element.\n\ntemplate\n\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n`v-else` and `v-else-if` can also be used on `<template>`.\n\n## `v-show`\n\nAnother option for conditionally displaying an element is the `v-show` directive. The usage is largely the same:\n\ntemplate\n\n```\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\nThe difference is that an element with `v-show` will always be rendered and remain in the DOM; `v-show` only toggles the `display` CSS property of the element.\n\n`v-show` doesn't support the `<template>` element, nor does it work with `v-else`.\n\n## `v-if` vs. `v-show`\n\n`v-if` is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\n`v-if` is also **lazy**: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, `v-show` is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.\n\nGenerally speaking, `v-if` has higher toggle costs while `v-show` has higher initial render costs. So prefer `v-show` if you need to toggle something very often, and prefer `v-if` if the condition is unlikely to change at runtime.\n\n## `v-if` with `v-for`\n\nWhen `v-if` and `v-for` are both used on the same element, `v-if` will be evaluated first. It's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "overview", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` in vue-guide?\n\nAssistant: To `v-if` in vue-guide, here's what you do:\nThe directive `v-if` is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.\n\ntemplate\n\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-else` in vue-guide?\n\nAssistant: To `v-else` in vue-guide, here's what you do:\nYou can use the `v-else` directive to indicate an \"else block\" for `v-if`:\n\ntemplate\n\n```\n<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no üò¢</h1>\n```\n\nA `v-else` element must immediately follow a `v-if` or a `v-else-if` element - otherwise it will not be recognized..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-else-if` in vue-guide?\n\nAssistant: To `v-else-if` in vue-guide, here's what you do:\nThe `v-else-if`, as the name suggests, serves as an \"else if block\" for `v-if`. It can also be chained multiple times:\n\ntemplate\n\n```\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\nSimilar to `v-else`, a `v-else-if` element must immediately follow a `v-if` or a `v-else-if` element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` on `<template>` in vue-guide?\n\nAssistant: To `v-if` on `<template>` in vue-guide, here's what you do:\nBecause `v-if` is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use `v-if` on a `<template>` element, which serves as an invisible wrapper. The final rendered result will not include the `<template>` element.\n\ntemplate\n\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n`v-else` and `v-else-if` can also be used on `<template>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-show` in vue-guide?\n\nAssistant: To `v-show` in vue-guide, here's what you do:\nAnother option for conditionally displaying an element is the `v-show` directive. The usage is largely the same:\n\ntemplate\n\n```\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\nThe difference is that an element with `v-show` will always be rendered and remain in the DOM; `v-show` only toggles the `display` CSS property of the element.\n\n`v-show` doesn't support the `<template>` element, nor does it work with `v-else`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` vs. `v-show` in vue-guide?\n\nAssistant: To `v-if` vs. `v-show` in vue-guide, here's what you do:\n`v-if` is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\n`v-if` is also **lazy**: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, `v-show` is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.\n\nGenerally speaking, `v-if` has higher toggle costs while `v-show` has higher initial render costs. So prefer `v-show` if you need to toggle something very often, and prefer `v-if` if the condition is unlikely to change at runtime..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` with `v-for` in vue-guide?\n\nAssistant: To `v-if` with `v-for` in vue-guide, here's what you do:\nWhen `v-if` and `v-for` are both used on the same element, `v-if` will be evaluated first. It's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "section_detail", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Conditional Rendering in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**`v-if` Example**:\n\n```yaml\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```\n\nThis snippet shows you how to `v-if` example, which is an important aspect of conditional rendering.\n\n**`v-else` Example**:\n\n```yaml\n<button @click=\"awesome = !awesome\">Toggle</button>\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no üò¢</h1>\n```\n\nThis snippet shows you how to `v-else` example, which is an important aspect of conditional rendering.\n\n**`v-else-if` Example**:\n\n```yaml\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\nThis snippet shows you how to `v-else-if` example, which is an important aspect of conditional rendering.\n\n**`v-if` on `<template>` Example**:\n\n```yaml\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\nThis snippet shows you how to `v-if` on `<template>` example, which is an important aspect of conditional rendering.\n\n**`v-show` Example**:\n\n```yaml\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\nThis snippet shows you how to `v-show` example, which is an important aspect of conditional rendering.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "code_examples", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Conditional Rendering in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPrefer `v-show` if you need to toggle something very often, and prefer `v-if` if the condition is unlikely to change at runtime.\n\nIt's not recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/conditional.html", "title": "Conditional Rendering", "description": "This page covers the various directives in Vue.js for conditionally rendering elements in the DOM, including v-if, v-else, v-else-if, and v-show.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:27:20", "type": "best_practices", "page_metadata": {"language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:site": "@vuejs", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "title": "Conditional Rendering | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "0095e83c-fd84-4ddb-9fa7-cfc729ddd230", "sourceURL": "https://vuejs.org/guide/essentials/conditional.html", "url": "https://vuejs.org/guide/essentials/conditional.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Event Handling is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Event Handling in vue-guide.\n\n# Event Handling\n\nThis page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.Here's a quick rundown of what this is about:\n\n## Listening to Events\n\nWe can use the `v-on` directive, which we typically shorten to the `@` symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be `v-on:click=\"handler\"` or with the shortcut, `@click=\"handler\"`. The handler value can be one of the following:\n\n1. **Inline handlers:** Inline JavaScript to be executed when the event is triggered (similar to the native `onclick` attribute).\n\n2. **Method handlers:** A property name or path that points to a method defined on the component.\n\n## Inline Handlers\n\nInline handlers are typically used in simple cases, for example:\n\n```js\nconst count = ref(0)\n```\n\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n```template\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```\n\n## Method Handlers\n\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why `v-on` can also accept the name or path of a component method you'd like to call.\n\nFor example:\n\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n```js\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n```template\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```\n\n## Method vs. Inline Detection\n\nThe template compiler detects method handlers by checking whether the `v-on` value string is a valid JavaScript identifier or property access path. For example, `foo`, `foo.bar` and `foo['bar']` are treated as method handlers, while `foo()` and `count++` are treated as inline handlers.\n\n## Calling Methods in Inline Handlers\n\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n```template\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```\n\n## Accessing Event Argument in Inline Handlers\n\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special `$event` variable, or use an inline arrow function:\n\n```template\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```\n\n## Event Modifiers\n\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.self`\n- `.capture`\n- `.once`\n- `.passive`\n\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```\n\n## Key Modifiers\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for `v-on` or `@` when listening for key events:\n\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n\nYou can directly use any valid key names exposed via [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values) as modifiers by converting them to kebab-case.\n\n```template\n<input @keyup.page-down=\"onPageDown\" />\n```\n\n## Key Aliases\n\nVue provides aliases for the most commonly used keys:\n\n- `.enter`\n- `.tab`\n- `.delete` (captures both \"Delete\" and \"Backspace\" keys)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n## System Modifier Keys\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`\n\nNote\n\nOn Macintosh keyboards, meta is the command key (‚åò). On Windows keyboards, meta is the Windows key (‚äû). On Sun Microsystems keyboards, meta is marked as a solid diamond (‚óÜ). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled ‚ÄúMETA‚Äù. On Symbolics keyboards, meta is labeled ‚ÄúMETA‚Äù or ‚ÄúMeta‚Äù.\n\nFor example:\n\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n## `.exact` Modifier\n\nThe `.exact` modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\n```template\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```\n\n## Mouse Button Modifiers\n\n- `.left`\n- `.right`\n- `.middle`\n\nThese modifiers restrict the handler to events triggered by a specific mouse button. Note, however, that `.left`, `.right`, and `.middle` modifier names are based on the typical right-handed mouse layout, but in fact represent \"main\", \"secondary\", and \"auxiliary\" pointing device event triggers, respectively, and not the actual physical buttons. So that for a left-handed mouse layout the \"main\" button might physically be the right one but would trigger the `.left` modifier handler.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "overview", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I listening to events in vue-guide?\n\nAssistant: To listening to events in vue-guide, here's what you do:\nWe can use the `v-on` directive, which we typically shorten to the `@` symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be `v-on:click=\"handler\"` or with the shortcut, `@click=\"handler\"`. The handler value can be one of the following:\n\n1. **Inline handlers:** Inline JavaScript to be executed when the event is triggered (similar to the native `onclick` attribute).\n\n2. **Method handlers:** A property name or path that points to a method defined on the component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I inline handlers in vue-guide?\n\nAssistant: To inline handlers in vue-guide, here's what you do:\nInline handlers are typically used in simple cases, for example:\n\n```js\nconst count = ref(0)\n```\n\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n```template\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I method handlers in vue-guide?\n\nAssistant: To method handlers in vue-guide, here's what you do:\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why `v-on` can also accept the name or path of a component method you'd like to call.\n\nFor example:\n\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n```js\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n```template\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I method vs. inline detection in vue-guide?\n\nAssistant: To method vs. inline detection in vue-guide, here's what you do:\nThe template compiler detects method handlers by checking whether the `v-on` value string is a valid JavaScript identifier or property access path. For example, `foo`, `foo.bar` and `foo['bar']` are treated as method handlers, while `foo()` and `count++` are treated as inline handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I calling methods in inline handlers in vue-guide?\n\nAssistant: To calling methods in inline handlers in vue-guide, here's what you do:\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n```template\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing event argument in inline handlers in vue-guide?\n\nAssistant: To accessing event argument in inline handlers in vue-guide, here's what you do:\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special `$event` variable, or use an inline arrow function:\n\n```template\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I event modifiers in vue-guide?\n\nAssistant: To event modifiers in vue-guide, here's what you do:\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.self`\n- `.capture`\n- `.once`\n- `.passive`\n\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I key modifiers in vue-guide?\n\nAssistant: To key modifiers in vue-guide, here's what you do:\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for `v-on` or `@` when listening for key events:\n\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n\nYou can directly use any valid key names exposed via [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values) as modifiers by converting them to kebab-case.\n\n```template\n<input @keyup.page-down=\"onPageDown\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I key aliases in vue-guide?\n\nAssistant: To key aliases in vue-guide, here's what you do:\nVue provides aliases for the most commonly used keys:\n\n- `.enter`\n- `.tab`\n- `.delete` (captures both \"Delete\" and \"Backspace\" keys)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I system modifier keys in vue-guide?\n\nAssistant: To system modifier keys in vue-guide, here's what you do:\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`\n\nNote\n\nOn Macintosh keyboards, meta is the command key (‚åò). On Windows keyboards, meta is the Windows key (‚äû). On Sun Microsystems keyboards, meta is marked as a solid diamond (‚óÜ). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled ‚ÄúMETA‚Äù. On Symbolics keyboards, meta is labeled ‚ÄúMETA‚Äù or ‚ÄúMeta‚Äù.\n\nFor example:\n\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `.exact` modifier in vue-guide?\n\nAssistant: To `.exact` modifier in vue-guide, here's what you do:\nThe `.exact` modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\n```template\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mouse button modifiers in vue-guide?\n\nAssistant: To mouse button modifiers in vue-guide, here's what you do:\n- `.left`\n- `.right`\n- `.middle`\n\nThese modifiers restrict the handler to events triggered by a specific mouse button. Note, however, that `.left`, `.right`, and `.middle` modifier names are based on the typical right-handed mouse layout, but in fact represent \"main\", \"secondary\", and \"auxiliary\" pointing device event triggers, respectively, and not the actual physical buttons. So that for a left-handed mouse layout the \"main\" button might physically be the right one but would trigger the `.left` modifier handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Event Handling in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Inline Handlers Example**:\n\n```yaml\n```js\nconst count = ref(0)\n```\n\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n```template\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```\n```\n\nThis snippet shows you how to inline handlers example, which is an important aspect of event handling.\n\n**Method Handlers Example**:\n\n```yaml\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n```js\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n```template\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```\n```\n\nThis snippet shows you how to method handlers example, which is an important aspect of event handling.\n\n**Calling Methods in Inline Handlers Example**:\n\n```yaml\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n```template\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```\n```\n\nThis snippet shows you how to calling methods in inline handlers example, which is an important aspect of event handling.\n\n**Accessing Event Argument in Inline Handlers Example**:\n\n```yaml\n```template\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```\n```\n\nThis snippet shows you how to accessing event argument in inline handlers example, which is an important aspect of event handling.\n\n**Event Modifiers Example**:\n\n```yaml\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```\n```\n\nThis snippet shows you how to event modifiers example, which is an important aspect of event handling.\n\n**Key Modifiers Example**:\n\n```yaml\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n```\n\nThis snippet shows you how to key modifiers example, which is an important aspect of event handling.\n\n**System Modifier Keys Example**:\n\n```yaml\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n```\n\nThis snippet shows you how to system modifier keys example, which is an important aspect of event handling.\n\n**`.exact` Modifier Example**:\n\n```yaml\n```template\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```\n```\n\nThis snippet shows you how to `.exact` modifier example, which is an important aspect of event handling.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "code_examples", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Event Handling in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOrder matters when using modifiers because the relevant code is generated in the same order. Therefore using `@click.prevent.self` will prevent click's default action on the element itself and its children, while `@click.self.prevent` will only prevent click's default action on the element itself.\n\nDo not use `.passive` and `.prevent` together, because `.passive` already indicates to the browser that you do not intend to prevent the event's default behavior, and you will likely see a warning from the browser if you do so.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling.html", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js, including listening to events, using inline and method handlers, and applying event modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 01:30:09", "type": "best_practices", "page_metadata": {"language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Event Handling | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "5d0a68ac-40f5-45fa-8e23-60a1e1dc8598", "sourceURL": "https://vuejs.org/guide/essentials/event-handling.html", "url": "https://vuejs.org/guide/essentials/event-handling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Form Input Bindings is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Form Input Bindings in vue-guide.\n\n# Form Input Bindings\n\nThis page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.Here's a quick rundown of what this is about:\n\n## Form Input Bindings\n\nWhen dealing with forms on the frontend, we often need to sync the state of form input elements with corresponding state in JavaScript. It can be cumbersome to manually wire up value bindings and change event listeners:\n\n```html\n<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n```\n\nThe `v-model` directive helps us simplify the above to:\n\n```html\n<input v-model=\"text\">\n```\n\nIn addition, `v-model` can be used on inputs of different types, `<textarea>`, and `<select>` elements. It automatically expands to different DOM property and event pairs based on the element it is used on:\n\n- `<input>` with text types and `<textarea>` elements use `value` property and `input` event;\n- `<input type=\"checkbox\">` and `<input type=\"radio\">` use `checked` property and `change` event;\n- `<select>` uses `value` as a prop and `change` as an event.\n\nNote\n`v-model` will ignore the initial `value`, `checked` or `selected` attributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, using the [`data`](https://vuejs.org/api/options-state#data) option[reactivity APIs](https://vuejs.org/api/reactivity-core#reactivity-api-core).\n\n## Basic Usage\n\n### Text\n\n```html\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nMessage is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jUEOgyAQRa8yYUO7aNkbNOkBegM2RseWRGACoxvC3TumxuX/+f+9ql5Ez31D1SlbpuyJoSBvNLjoA6XMUCHjAg2WnAJomWoXXZxSLAwBSxk/CP2xuWl9d9GaP0YAEhgDrSOjJABLw/s8+NJBrde/NWsOpWPrI20M+yOkGdfeqXPiFAhowm9aZ8zS4+wPv/RGjtZcJtV+YpNK1g==)\n\nNote\nFor languages that require an [IME](https://en.wikipedia.org/wiki/Input_method) (Chinese, Japanese, Korean etc.), you'll notice that `v-model` doesn't get updated during IME composition. If you want to respond to these updates as well, use your own `input` event listener and `value` binding instead of using `v-model`.\n\n### Multiline Text\n\n```html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nMultiline message is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jktuwzAMRK9CaON24XrvKgZ6gN5AG8FmGgH6ECKdJjB891D5LYec9zCb+SH6Oq9oRmN5roEEGGWlyeWQqFSBDSoeYYdjLQk6rXYuuzyXzAIJmf0fwqF1Prru02U7PDQq0CCYKHrBlsQy+Tz9rlFCDBnfdOBRqfa7twhYrhEPzvyfgmCvnxlHoIp9w76dmbbtDe+7HdpaBQUv4it6OPepLBjV8Gw5AzpjxlOJC1a9+2WB1IZQRGhWVqsdXgb1tfDcbvYbJDRqLQ==)\n\nNote that interpolation inside `<textarea>` won't work. Use `v-model` instead.\n\n```html\n<!-- bad -->\n<textarea>{{ text }}</textarea>\n\n<!-- good -->\n<textarea v-model=\"text\"></textarea>\n```\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n```html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n```\n\nfalse\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVjssKgzAURH/lko3tonVfotD/yEaTKw3Ni3gjLSH/3qhUcDnDnMNk9gzhviRkD8ZnGXUgmJFS6IXTNvhIkCHiBAWm6C00ddoIJ5z0biaQL5RvVNCtmwvFhFfheLuLqqIGQhvMQLgm4tqFREDfgJ1gGz36j2Cg1TkvN+sVmn+JqnbtrjDDiAYmH09En/PxphTebqsK8PY4wMoPslBUxQ==)\n\nWe can also bind multiple checkboxes to the same array or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) value:\n\n```javascript\nconst checkedNames = ref([])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      checkedNames: []\n    }\n  }\n}\n```\n\n```html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n```\n\nChecked names: []\n\nJackJohnMike\n\nIn this case, the `checkedNames` array will always contain the values from the currently checked boxes.\n\n[Try it in the Playground](https://play.vuejs.org/#eNqVkUtqwzAURbfy0CTtoNU8KILSWaHdQNWBIj8T1fohyybBeO+RbOc3i2e+vHvuMWggHyG89x2SLWGtijokaDF1gQunbfAxwQARaxihjt7CJlc3wgmnvGsTqAOqBqsfabGFXSm+/P69CsfovJVXckhog5EJcwJgle7558yBK+AWhuFxaRwZLbVCZ0K70CVIp4A7Qabi3h8FAV3l/C9Vk797abpy/lrim/UVmkt/Gc4HOv+EkXs0UPt4XeCFZHQ6lM4TZn9w9+YlrjFPCC/kKrPVDd6Zv5e4wjwv8ELezIxeX4qMZwHduAs=)\n\n### Radio\n\n```html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\nPicked:\n\nOneTwo\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkDFuwzAMRa9CaHE7tNoDxUBP0A4dtTgWDQiRJUKmHQSG7x7KhpMMAbLxk3z/g5zVD9H3NKI6KDO02RPDgDxSbaPvKWWGGTJ2sECXUw+VrFY22timODCQb8/o4FhWPqrfiNWnjUZvRmIhgrGn0DCKAjDOT/XfCh1gnnd+WYwukwJYNj7SyMBXwqNVuXE+WQXeiUgRpZyaMJaR5BX11SeHQfTmJi1dnNiE5oQBupR3shbC6LX9Posvpdyz/jf1OksOe85ayVqIR5bR9z+o5Qbc6oCk)\n\n### Select\n\nSingle select:\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected:\n\nPlease select oneABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1j7EOgyAQhl/lwmI7tO4Nmti+QJOuLFTPxASBALoQ3r2H2jYOjvff939wkTXWXucJ2Y1x37rBBvAYJlsLPYzWuAARHPaQoHdmhILQQmihW6N9RhW2ATuoMnQqirPQvFw9ZKAh4GiVDEgTAPdW6hpeW+sGMf4VKVEz73Mvs8sC5stoOlSVYF9SsEVGiLFhMBq6wcu3IsUs1YREEvFUKD1udjAaebnS+27dHOT3g/yxy+nHywM08PJ3KksfXwJ2dA==)\n\nNote\nIf the initial value of your `v-model` expression does not match any of the options, the `<select>` element will render in an \"unselected\" state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.\n\nMultiple select (bound to array):\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected: []\n\nABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1kL2OwjAQhF9l5Ya74i7QBhMJeARKTIESIyz5Z5VsAsjyu7NOQEBB5xl/M7vaKNaI/0OvRSlkV7cGCTpNPVbKG4ehJYjQ6hMkOLXBwYzRmfLK18F3GbW6Jt3AKkM/+8Ov8rKYeriBBWmH9kiaFYBszFDtHpkSYnwVpCSL/JtDDE4+DH8uNNqulHiCSoDrLRm0UyWzAckEX61l8Xh9+psv/vbD563HCSxk8bY0y45u47AJ2D/HHyDm4MU0dC5hMZ/jdal8Gg8wJkS6A3nRew4=)\n\nSelect options can be dynamically rendered with `v-for`:\n\n```javascript\nconst selected = ref('A')\n\nconst options = ref([\n  { text: 'One', value: 'A' },\n  { text: 'Two', value: 'B' },\n  { text: 'Three', value: 'C' }\n])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      selected: 'A',\n      options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n      ]\n    }\n  }\n}\n```\n\n```html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNplkMFugzAQRH9l5YtbKYU7IpFoP6CH9lb3EMGiWgLbMguthPzvXduEJMqNYUazb7yKxrlimVFUop5arx3BhDS7kzJ6dNYTrOCxhwC9tyNIjkpllGmtmWJ0wJawg2MMPclGPl9N60jzx+Z9KQPcRfhHFch3g/IAy3mYkVUjIRzu/M9fe+O/Pvo/Hm8b3jihzDdfr8s8gwewIBzdcCZkBVBnXFheRtvhcFTiwq9ECnAkQ3Okt54Dm9TmskYJqNLR3SyS3BsYct3CRYSFwGCpusx/M0qZTydKRXWnl9PHBlPFhv1lQ6jL6MZl+xoR/gFjPZTD)\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms.html", "title": "Form Input Bindings", "description": "This page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:07", "type": "overview", "page_metadata": {"og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "title": "Form Input Bindings | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "scrapeId": "25c983c8-c438-4809-9e97-176e8b73ebf1", "sourceURL": "https://vuejs.org/guide/essentials/forms.html", "url": "https://vuejs.org/guide/essentials/forms.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I form input bindings in vue-guide?\n\nAssistant: To form input bindings in vue-guide, here's what you do:\nWhen dealing with forms on the frontend, we often need to sync the state of form input elements with corresponding state in JavaScript. It can be cumbersome to manually wire up value bindings and change event listeners:\n\n```html\n<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n```\n\nThe `v-model` directive helps us simplify the above to:\n\n```html\n<input v-model=\"text\">\n```\n\nIn addition, `v-model` can be used on inputs of different types, `<textarea>`, and `<select>` elements. It automatically expands to different DOM property and event pairs based on the element it is used on:\n\n- `<input>` with text types and `<textarea>` elements use `value` property and `input` event;\n- `<input type=\"checkbox\">` and `<input type=\"radio\">` use `checked` property and `change` event;\n- `<select>` uses `value` as a prop and `change` as an event.\n\nNote\n`v-model` will ignore the initial `value`, `checked` or `selected` attributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, using the [`data`](https://vuejs.org/api/options-state#data) option[reactivity APIs](https://vuejs.org/api/reactivity-core#reactivity-api-core)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms.html", "title": "Form Input Bindings", "description": "This page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:07", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "title": "Form Input Bindings | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "scrapeId": "25c983c8-c438-4809-9e97-176e8b73ebf1", "sourceURL": "https://vuejs.org/guide/essentials/forms.html", "url": "https://vuejs.org/guide/essentials/forms.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\n### Text\n\n```html\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nMessage is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jUEOgyAQRa8yYUO7aNkbNOkBegM2RseWRGACoxvC3TumxuX/+f+9ql5Ez31D1SlbpuyJoSBvNLjoA6XMUCHjAg2WnAJomWoXXZxSLAwBSxk/CP2xuWl9d9GaP0YAEhgDrSOjJABLw/s8+NJBrde/NWsOpWPrI20M+yOkGdfeqXPiFAhowm9aZ8zS4+wPv/RGjtZcJtV+YpNK1g==)\n\nNote\nFor languages that require an [IME](https://en.wikipedia.org/wiki/Input_method) (Chinese, Japanese, Korean etc.), you'll notice that `v-model` doesn't get updated during IME composition. If you want to respond to these updates as well, use your own `input` event listener and `value` binding instead of using `v-model`.\n\n### Multiline Text\n\n```html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nMultiline message is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jktuwzAMRK9CaON24XrvKgZ6gN5AG8FmGgH6ECKdJjB891D5LYec9zCb+SH6Oq9oRmN5roEEGGWlyeWQqFSBDSoeYYdjLQk6rXYuuzyXzAIJmf0fwqF1Prru02U7PDQq0CCYKHrBlsQy+Tz9rlFCDBnfdOBRqfa7twhYrhEPzvyfgmCvnxlHoIp9w76dmbbtDe+7HdpaBQUv4it6OPepLBjV8Gw5AzpjxlOJC1a9+2WB1IZQRGhWVqsdXgb1tfDcbvYbJDRqLQ==)\n\nNote that interpolation inside `<textarea>` won't work. Use `v-model` instead.\n\n```html\n<!-- bad -->\n<textarea>{{ text }}</textarea>\n\n<!-- good -->\n<textarea v-model=\"text\"></textarea>\n```\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n```html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n```\n\nfalse\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVjssKgzAURH/lko3tonVfotD/yEaTKw3Ni3gjLSH/3qhUcDnDnMNk9gzhviRkD8ZnGXUgmJFS6IXTNvhIkCHiBAWm6C00ddoIJ5z0biaQL5RvVNCtmwvFhFfheLuLqqIGQhvMQLgm4tqFREDfgJ1gGz36j2Cg1TkvN+sVmn+JqnbtrjDDiAYmH09En/PxphTebqsK8PY4wMoPslBUxQ==)\n\nWe can also bind multiple checkboxes to the same array or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) value:\n\n```javascript\nconst checkedNames = ref([])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      checkedNames: []\n    }\n  }\n}\n```\n\n```html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n```\n\nChecked names: []\n\nJackJohnMike\n\nIn this case, the `checkedNames` array will always contain the values from the currently checked boxes.\n\n[Try it in the Playground](https://play.vuejs.org/#eNqVkUtqwzAURbfy0CTtoNU8KILSWaHdQNWBIj8T1fohyybBeO+RbOc3i2e+vHvuMWggHyG89x2SLWGtijokaDF1gQunbfAxwQARaxihjt7CJlc3wgmnvGsTqAOqBqsfabGFXSm+/P69CsfovJVXckhog5EJcwJgle7558yBK+AWhuFxaRwZLbVCZ0K70CVIp4A7Qabi3h8FAV3l/C9Vk797abpy/lrim/UVmkt/Gc4HOv+EkXs0UPt4XeCFZHQ6lM4TZn9w9+YlrjFPCC/kKrPVDd6Zv5e4wjwv8ELezIxeX4qMZwHduAs=)\n\n### Radio\n\n```html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\nPicked:\n\nOneTwo\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkDFuwzAMRa9CaHE7tNoDxUBP0A4dtTgWDQiRJUKmHQSG7x7KhpMMAbLxk3z/g5zVD9H3NKI6KDO02RPDgDxSbaPvKWWGGTJ2sECXUw+VrFY22timODCQb8/o4FhWPqrfiNWnjUZvRmIhgrGn0DCKAjDOT/XfCh1gnnd+WYwukwJYNj7SyMBXwqNVuXE+WQXeiUgRpZyaMJaR5BX11SeHQfTmJi1dnNiE5oQBupR3shbC6LX9Posvpdyz/jf1OksOe85ayVqIR5bR9z+o5Qbc6oCk)\n\n### Select\n\nSingle select:\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected:\n\nPlease select oneABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1j7EOgyAQhl/lwmI7tO4Nmti+QJOuLFTPxASBALoQ3r2H2jYOjvff939wkTXWXucJ2Y1x37rBBvAYJlsLPYzWuAARHPaQoHdmhILQQmihW6N9RhW2ATuoMnQqirPQvFw9ZKAh4GiVDEgTAPdW6hpeW+sGMf4VKVEz73Mvs8sC5stoOlSVYF9SsEVGiLFhMBq6wcu3IsUs1YREEvFUKD1udjAaebnS+27dHOT3g/yxy+nHywM08PJ3KksfXwJ2dA==)\n\nNote\nIf the initial value of your `v-model` expression does not match any of the options, the `<select>` element will render in an \"unselected\" state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.\n\nMultiple select (bound to array):\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected: []\n\nABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1kL2OwjAQhF9l5Ya74i7QBhMJeARKTIESIyz5Z5VsAsjyu7NOQEBB5xl/M7vaKNaI/0OvRSlkV7cGCTpNPVbKG4ehJYjQ6hMkOLXBwYzRmfLK18F3GbW6Jt3AKkM/+8Ov8rKYeriBBWmH9kiaFYBszFDtHpkSYnwVpCSL/JtDDE4+DH8uNNqulHiCSoDrLRm0UyWzAckEX61l8Xh9+psv/vbD563HCSxk8bY0y45u47AJ2D/HHyDm4MU0dC5hMZ/jdal8Gg8wJkS6A3nRew4=)\n\nSelect options can be dynamically rendered with `v-for`:\n\n```javascript\nconst selected = ref('A')\n\nconst options = ref([\n  { text: 'One', value: 'A' },\n  { text: 'Two', value: 'B' },\n  { text: 'Three', value: 'C' }\n])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      selected: 'A',\n      options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n      ]\n    }\n  }\n}\n```\n\n```html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNplkMFugzAQRH9l5YtbKYU7IpFoP6CH9lb3EMGiWgLbMguthPzvXduEJMqNYUazb7yKxrlimVFUop5arx3BhDS7kzJ6dNYTrOCxhwC9tyNIjkpllGmtmWJ0wJawg2MMPclGPl9N60jzx+Z9KQPcRfhHFch3g/IAy3mYkVUjIRzu/M9fe+O/Pvo/Hm8b3jihzDdfr8s8gwewIBzdcCZkBVBnXFheRtvhcFTiwq9ECnAkQ3Okt54Dm9TmskYJqNLR3SyS3BsYct3CRYSFwGCpusx/M0qZTydKRXWnl9PHBlPFhv1lQ6jL6MZl+xoR/gFjPZTD)\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms.html", "title": "Form Input Bindings", "description": "This page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:07", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "title": "Form Input Bindings | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "scrapeId": "25c983c8-c438-4809-9e97-176e8b73ebf1", "sourceURL": "https://vuejs.org/guide/essentials/forms.html", "url": "https://vuejs.org/guide/essentials/forms.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Form Input Bindings in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Text Input**:\n\n```yaml\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nThis snippet shows you how to basic text input, which is an important aspect of form input bindings.\n\n**Multiline Text Input**:\n\n```yaml\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nThis snippet shows you how to multiline text input, which is an important aspect of form input bindings.\n\n**Single Checkbox**:\n\n```yaml\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n```\n\nThis snippet shows you how to single checkbox, which is an important aspect of form input bindings.\n\n**Multiple Checkboxes**:\n\n```yaml\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n```\n\nThis snippet shows you how to multiple checkboxes, which is an important aspect of form input bindings.\n\n**Radio Inputs**:\n\n```yaml\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\nThis snippet shows you how to radio inputs, which is an important aspect of form input bindings.\n\n**Single Select Input**:\n\n```yaml\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nThis snippet shows you how to single select input, which is an important aspect of form input bindings.\n\n**Dynamic Select Options**:\n\n```yaml\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\nThis snippet shows you how to dynamic select options, which is an important aspect of form input bindings.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms.html", "title": "Form Input Bindings", "description": "This page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:07", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "title": "Form Input Bindings | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "scrapeId": "25c983c8-c438-4809-9e97-176e8b73ebf1", "sourceURL": "https://vuejs.org/guide/essentials/forms.html", "url": "https://vuejs.org/guide/essentials/forms.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Form Input Bindings in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor languages that require an IME, use your own input event listener and value binding instead of using v-model.\n\nIf the initial value of your v-model expression does not match any of the options, provide a disabled option with an empty value to avoid issues on iOS.\n\nThe true-value and false-value attributes don't affect the input's value attribute; use radio inputs to guarantee submission of one of two values.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms.html", "title": "Form Input Bindings", "description": "This page covers how to use v-model for form input bindings in Vue.js, simplifying the process of syncing form input elements with JavaScript state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:07", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "title": "Form Input Bindings | Vue.js", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "theme-color": "#3c8772", "scrapeId": "25c983c8-c438-4809-9e97-176e8b73ebf1", "sourceURL": "https://vuejs.org/guide/essentials/forms.html", "url": "https://vuejs.org/guide/essentials/forms.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Lifecycle Hooks is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Lifecycle Hooks in vue-guide.\n\n# Lifecycle Hooks\n\nEach Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.Here's a quick rundown of what this is about:\n\n## Registering Lifecycle Hooks\n\nFor example, the `onMounted` hook can be used to run code after the component has finished the initial rendering and created the DOM nodes:\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, with the most commonly used being `onMounted`, `onUpdated`, and `onUnmounted`. `mounted`, `updated`, and `unmounted`.\n\nAll lifecycle hooks are called with their `this` context pointing to the current active instance invoking it. Note this means you should avoid using arrow functions when declaring lifecycle hooks, as you won't be able to access the component instance via `this` if you do so.\n\nWhen calling `onMounted`, Vue automatically associates the registered callback function with the current active component instance. This requires these hooks to be registered synchronously during component setup. For example, do not do this:\n\nDo note this doesn't mean that the call must be placed lexically inside `setup()` or `<script setup>`. `onMounted()` can be called in an external function as long as the call stack is synchronous and originates from within `setup()`.\n\n## Lifecycle Diagram\n\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.\n\nConsult the Lifecycle Hooks API reference for details on all lifecycle hooks and their respective use cases.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle.html", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:34", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "2dddd9d6-e6b5-40d6-a3fe-e4bb4ff03020", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle.html", "url": "https://vuejs.org/guide/essentials/lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I registering lifecycle hooks in vue-guide?\n\nAssistant: To registering lifecycle hooks in vue-guide, here's what you do:\nFor example, the `onMounted` hook can be used to run code after the component has finished the initial rendering and created the DOM nodes:\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, with the most commonly used being `onMounted`, `onUpdated`, and `onUnmounted`. `mounted`, `updated`, and `unmounted`.\n\nAll lifecycle hooks are called with their `this` context pointing to the current active instance invoking it. Note this means you should avoid using arrow functions when declaring lifecycle hooks, as you won't be able to access the component instance via `this` if you do so.\n\nWhen calling `onMounted`, Vue automatically associates the registered callback function with the current active component instance. This requires these hooks to be registered synchronously during component setup. For example, do not do this:\n\nDo note this doesn't mean that the call must be placed lexically inside `setup()` or `<script setup>`. `onMounted()` can be called in an external function as long as the call stack is synchronous and originates from within `setup()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle.html", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:34", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "2dddd9d6-e6b5-40d6-a3fe-e4bb4ff03020", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle.html", "url": "https://vuejs.org/guide/essentials/lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lifecycle diagram in vue-guide?\n\nAssistant: To lifecycle diagram in vue-guide, here's what you do:\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.\n\nConsult the Lifecycle Hooks API reference for details on all lifecycle hooks and their respective use cases..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle.html", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:34", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "2dddd9d6-e6b5-40d6-a3fe-e4bb4ff03020", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle.html", "url": "https://vuejs.org/guide/essentials/lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Lifecycle Hooks in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using onMounted in <script setup>**:\n\n```yaml\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\nThis snippet shows you how to using onmounted in <script setup>, which is an important aspect of lifecycle hooks.\n\n**Using mounted in Options API**:\n\n```yaml\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\nThis snippet shows you how to using mounted in options api, which is an important aspect of lifecycle hooks.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle.html", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:34", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "2dddd9d6-e6b5-40d6-a3fe-e4bb4ff03020", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle.html", "url": "https://vuejs.org/guide/essentials/lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Lifecycle Hooks in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid using arrow functions when declaring lifecycle hooks to ensure access to the component instance via `this`.\n\nEnsure lifecycle hooks are registered synchronously during component setup.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle.html", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:33:34", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "2dddd9d6-e6b5-40d6-a3fe-e4bb4ff03020", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle.html", "url": "https://vuejs.org/guide/essentials/lifecycle.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what List Rendering is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain List Rendering in vue-guide.\n\n# List Rendering\n\nThis page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.Here's a quick rundown of what this is about:\n\n## `v-for`\n\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n```js\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\nInside the `v-for` scope, template expressions have access to all parent scope properties. In addition, `v-for` also supports an optional second alias for the index of the current item:\n\n```js\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\nParent - 0 - Foo\nParent - 1 - Bar\n\nThe variable scoping of `v-for` is similar to the following JavaScript:\n\n```js\nconst parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})\n```\n\nNotice how the `v-for` value matches the function signature of the `forEach` callback. In fact, you can use destructuring on the `v-for` item alias similar to destructuring function arguments:\n\n```template\n<li v-for=\"{ message } in items\">\n  {{ message }}\n</li>\n\n<!-- with index alias -->\n<li v-for=\"({ message }, index) in items\">\n  {{ message }} {{ index }}\n</li>\n```\n\nFor nested `v-for`, scoping also works similar to nested functions. Each `v-for` scope has access to parent scopes:\n\n```template\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n```template\n<div v-for=\"item of items\"></div>\n```\n\n## `v-for` with an Object\n\nYou can also use `v-for` to iterate through the properties of an object. The iteration order will be based on the result of calling `Object.values()` on the object:\n\n```js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\n```js\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\n```template\n<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>\n```\n\nYou can also provide a second alias for the property's name (a.k.a. key):\n\n```template\n<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>\n```\n\nAnd another for the index:\n\n```template\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n## `v-for` with a Range\n\n`v-for` can also take an integer. In this case it will repeat the template that many times, based on a range of `1...n`.\n\n```template\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nNote here `n` starts with an initial value of `1` instead of `0`.\n\n## `v-for` on `<template>`\n\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n```template\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```\n\n## `v-for` with `v-if`\n\nWhen they exist on the same node, `v-if` has a higher priority than `v-for`. That means the `v-if` condition will not have access to variables from the scope of the `v-for`:\n\n```template\n<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>\n```\n\nThis can be fixed by moving `v-for` to a wrapping `<template>` tag (which is also more explicit):\n\n```template\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\nNote\nIt's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`).\n\n## Maintaining State with `key`\n\nWhen Vue is updating a list of elements rendered with `v-for`, by default it uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.\n\nThis default mode is efficient, but **only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item:\n\n```template\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nWhen using `<template v-for>`, the `key` should be placed on the `<template>` container:\n\n```template\n<template v-for=\"todo in todos\" :key=\"todo.name\">\n  <li>{{ todo.name }}</li>\n</template>\n```\n\nNote\n`key` here is a special attribute being bound with `v-bind`. It should not be confused with the property key variable when [using `v-for` with an object](https://vuejs.org/guide/essentials/list.html#v-for-with-an-object).\n\nIt is recommended to provide a `key` attribute with `v-for` whenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains.\n\nThe `key` binding expects primitive values - i.e. strings and numbers. Do not use objects as `v-for` keys. For detailed usage of the `key` attribute, please see the [`key` API documentation](https://vuejs.org/api/built-in-special-attributes#key).\n\n## `v-for` with a Component\n\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a component, like any normal element (don't forget to provide a `key`):\n\n```template\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n```template\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations.\n\n## Array Change Detection\n\n### Mutation Methods\n\nVue is able to detect when a reactive array's mutation methods are called and trigger necessary updates. These mutation methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\n### Replacing an Array\n\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original array but **always return a new array**. When working with non-mutating methods, we should replace the old array with the new one:\n\n```js\n// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\n```js\nthis.items = this.items.filter((item) => item.message.match(/Foo/))\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.\n\n## Displaying Filtered/Sorted Results\n\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n```js\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\n```js\ndata() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}\n```\n\n```template\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\nIn situations where computed properties are not feasible (e.g. inside nested `v-for` loops), you can use a method:\n\n```js\nconst sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}\n```\n\n```js\ndata() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}\n```\n\n```template\n<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>\n```\n\nBe careful with `reverse()` and `sort()` in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:\n\n```diff\n- return numbers.reverse()\n+ return [...numbers].reverse()\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` in vue-guide?\n\nAssistant: To `v-for` in vue-guide, here's what you do:\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n```js\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\nInside the `v-for` scope, template expressions have access to all parent scope properties. In addition, `v-for` also supports an optional second alias for the index of the current item:\n\n```js\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\nParent - 0 - Foo\nParent - 1 - Bar\n\nThe variable scoping of `v-for` is similar to the following JavaScript:\n\n```js\nconst parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})\n```\n\nNotice how the `v-for` value matches the function signature of the `forEach` callback. In fact, you can use destructuring on the `v-for` item alias similar to destructuring function arguments:\n\n```template\n<li v-for=\"{ message } in items\">\n  {{ message }}\n</li>\n\n<!-- with index alias -->\n<li v-for=\"({ message }, index) in items\">\n  {{ message }} {{ index }}\n</li>\n```\n\nFor nested `v-for`, scoping also works similar to nested functions. Each `v-for` scope has access to parent scopes:\n\n```template\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n```template\n<div v-for=\"item of items\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with an object in vue-guide?\n\nAssistant: To `v-for` with an object in vue-guide, here's what you do:\nYou can also use `v-for` to iterate through the properties of an object. The iteration order will be based on the result of calling `Object.values()` on the object:\n\n```js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\n```js\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\n```template\n<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>\n```\n\nYou can also provide a second alias for the property's name (a.k.a. key):\n\n```template\n<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>\n```\n\nAnd another for the index:\n\n```template\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with a range in vue-guide?\n\nAssistant: To `v-for` with a range in vue-guide, here's what you do:\n`v-for` can also take an integer. In this case it will repeat the template that many times, based on a range of `1...n`.\n\n```template\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nNote here `n` starts with an initial value of `1` instead of `0`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` on `<template>` in vue-guide?\n\nAssistant: To `v-for` on `<template>` in vue-guide, here's what you do:\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n```template\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with `v-if` in vue-guide?\n\nAssistant: To `v-for` with `v-if` in vue-guide, here's what you do:\nWhen they exist on the same node, `v-if` has a higher priority than `v-for`. That means the `v-if` condition will not have access to variables from the scope of the `v-for`:\n\n```template\n<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>\n```\n\nThis can be fixed by moving `v-for` to a wrapping `<template>` tag (which is also more explicit):\n\n```template\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\nNote\nIt's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I maintaining state with `key` in vue-guide?\n\nAssistant: To maintaining state with `key` in vue-guide, here's what you do:\nWhen Vue is updating a list of elements rendered with `v-for`, by default it uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.\n\nThis default mode is efficient, but **only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item:\n\n```template\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nWhen using `<template v-for>`, the `key` should be placed on the `<template>` container:\n\n```template\n<template v-for=\"todo in todos\" :key=\"todo.name\">\n  <li>{{ todo.name }}</li>\n</template>\n```\n\nNote\n`key` here is a special attribute being bound with `v-bind`. It should not be confused with the property key variable when [using `v-for` with an object](https://vuejs.org/guide/essentials/list.html#v-for-with-an-object).\n\nIt is recommended to provide a `key` attribute with `v-for` whenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains.\n\nThe `key` binding expects primitive values - i.e. strings and numbers. Do not use objects as `v-for` keys. For detailed usage of the `key` attribute, please see the [`key` API documentation](https://vuejs.org/api/built-in-special-attributes#key)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with a component in vue-guide?\n\nAssistant: To `v-for` with a component in vue-guide, here's what you do:\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a component, like any normal element (don't forget to provide a `key`):\n\n```template\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n```template\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I array change detection in vue-guide?\n\nAssistant: To array change detection in vue-guide, here's what you do:\n### Mutation Methods\n\nVue is able to detect when a reactive array's mutation methods are called and trigger necessary updates. These mutation methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\n### Replacing an Array\n\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original array but **always return a new array**. When working with non-mutating methods, we should replace the old array with the new one:\n\n```js\n// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\n```js\nthis.items = this.items.filter((item) => item.message.match(/Foo/))\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I displaying filtered/sorted results in vue-guide?\n\nAssistant: To displaying filtered/sorted results in vue-guide, here's what you do:\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n```js\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\n```js\ndata() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}\n```\n\n```template\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\nIn situations where computed properties are not feasible (e.g. inside nested `v-for` loops), you can use a method:\n\n```js\nconst sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}\n```\n\n```js\ndata() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}\n```\n\n```template\n<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>\n```\n\nBe careful with `reverse()` and `sort()` in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:\n\n```diff\n- return numbers.reverse()\n+ return [...numbers].reverse()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for List Rendering in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic v-for Example**:\n\n```yaml\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\nThis snippet shows you how to basic v-for example, which is an important aspect of list rendering.\n\n**Using v-for with Parent Message**:\n\n```yaml\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\nThis snippet shows you how to using v-for with parent message, which is an important aspect of list rendering.\n\n**Using v-for with an Object**:\n\n```yaml\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\nThis snippet shows you how to using v-for with an object, which is an important aspect of list rendering.\n\n**Using v-for with a Range**:\n\n```yaml\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nThis snippet shows you how to using v-for with a range, which is an important aspect of list rendering.\n\n**Using v-for with a Component**:\n\n```yaml\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\nThis snippet shows you how to using v-for with a component, which is an important aspect of list rendering.\n\n**Array Mutation Example**:\n\n```yaml\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\nThis snippet shows you how to array mutation example, which is an important aspect of list rendering.\n\n**Computed Property Example**:\n\n```yaml\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\nThis snippet shows you how to computed property example, which is an important aspect of list rendering.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using List Rendering in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt's not recommended to use v-if and v-for on the same element due to implicit precedence.\n\nProvide a key attribute with v-for whenever possible to help Vue track each node's identity.\n\nBe careful with reverse() and sort() in a computed property as they mutate the original array. Create a copy of the original array before calling these methods.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list.html", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:35:21", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "title": "List Rendering | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "4317f0dc-19e0-4d88-a356-9d20699ef473", "sourceURL": "https://vuejs.org/guide/essentials/list.html", "url": "https://vuejs.org/guide/essentials/list.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Template Syntax is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Template Syntax in vue-guide.\n\n# Template Syntax\n\nVue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.Here's a quick rundown of what this is about:\n\n## Text Interpolation\n\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n```\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property from the corresponding component instance. It will also be updated whenever the `msg` property changes.\n\n## Raw HTML\n\nThe double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use the [`v-html` directive](https://vuejs.org/api/built-in-directives#v-html):\n\n```\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nUsing text interpolation: <span style=\"color: red\">This should be red.</span>\n\nUsing v-html directive: This should be red.\n\nHere we're encountering something new. The `v-html` attribute you're seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with the `rawHtml` property on the current active instance.\"\n\nThe contents of the `span` will be replaced with the value of the `rawHtml` property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\nSecurity Warning\n\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS vulnerabilities](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.\n\n## Attribute Bindings\n\nMustaches cannot be used inside HTML attributes. Instead, use a [`v-bind` directive](https://vuejs.org/api/built-in-directives#v-bind):\n\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThe `v-bind` directive instructs Vue to keep the element's `id` attribute in sync with the component's `dynamicId` property. If the bound value is `null` or `undefined`, then the attribute will be removed from the rendered element.\n\n## Shorthand\n\nBecause `v-bind` is so commonly used, it has a dedicated shorthand syntax:\n\n```\n<div :id=\"dynamicId\"></div>\n```\n\nAttributes that start with `:` may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later.\n\n> For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers.\n\n## Same-name Shorthand\n\n- Only supported in 3.4+\n\nIf the attribute has the same name with the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:\n\n```\n<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>\n```\n\nThis is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above.\n\n## Boolean Attributes\n\n[Boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) are attributes that can indicate true / false values by their presence on an element. For example, [`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) is one of the most commonly used boolean attributes.\n\n`v-bind` works a bit differently in this case:\n\n```\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThe `disabled` attribute will be included if `isButtonDisabled` has a [truthy value](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). It will also be included if the value is an empty string, maintaining consistency with `<button disabled=\"\">`. For other [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) the attribute will be omitted.\n\n## Dynamically Binding Multiple Attributes\n\nIf you have a JavaScript object representing multiple attributes that looks like this:\n\n```\nconst objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}\n```\n\n```\ndata() {\n  return {\n    objectOfAttrs: {\n      id: 'container',\n      class: 'wrapper'\n    }\n  }\n}\n```\n\nYou can bind them to a single element by using `v-bind` without an argument:\n\n```\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\n## Using JavaScript Expressions\n\nSo far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:\n\n```\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the current component instance.\n\nIn Vue templates, JavaScript expressions can be used in the following positions:\n- Inside text interpolations (mustaches)\n- In the attribute value of any Vue directives (special attributes that start with `v-`)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I text interpolation in vue-guide?\n\nAssistant: To text interpolation in vue-guide, here's what you do:\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n```\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property from the corresponding component instance. It will also be updated whenever the `msg` property changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I raw html in vue-guide?\n\nAssistant: To raw html in vue-guide, here's what you do:\nThe double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use the [`v-html` directive](https://vuejs.org/api/built-in-directives#v-html):\n\n```\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nUsing text interpolation: <span style=\"color: red\">This should be red.</span>\n\nUsing v-html directive: This should be red.\n\nHere we're encountering something new. The `v-html` attribute you're seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with the `rawHtml` property on the current active instance.\"\n\nThe contents of the `span` will be replaced with the value of the `rawHtml` property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\nSecurity Warning\n\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS vulnerabilities](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute bindings in vue-guide?\n\nAssistant: To attribute bindings in vue-guide, here's what you do:\nMustaches cannot be used inside HTML attributes. Instead, use a [`v-bind` directive](https://vuejs.org/api/built-in-directives#v-bind):\n\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThe `v-bind` directive instructs Vue to keep the element's `id` attribute in sync with the component's `dynamicId` property. If the bound value is `null` or `undefined`, then the attribute will be removed from the rendered element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I shorthand in vue-guide?\n\nAssistant: To shorthand in vue-guide, here's what you do:\nBecause `v-bind` is so commonly used, it has a dedicated shorthand syntax:\n\n```\n<div :id=\"dynamicId\"></div>\n```\n\nAttributes that start with `:` may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later.\n\n> For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I same-name shorthand in vue-guide?\n\nAssistant: To same-name shorthand in vue-guide, here's what you do:\n- Only supported in 3.4+\n\nIf the attribute has the same name with the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:\n\n```\n<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>\n```\n\nThis is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I boolean attributes in vue-guide?\n\nAssistant: To boolean attributes in vue-guide, here's what you do:\n[Boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) are attributes that can indicate true / false values by their presence on an element. For example, [`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) is one of the most commonly used boolean attributes.\n\n`v-bind` works a bit differently in this case:\n\n```\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThe `disabled` attribute will be included if `isButtonDisabled` has a [truthy value](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). It will also be included if the value is an empty string, maintaining consistency with `<button disabled=\"\">`. For other [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) the attribute will be omitted..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I dynamically binding multiple attributes in vue-guide?\n\nAssistant: To dynamically binding multiple attributes in vue-guide, here's what you do:\nIf you have a JavaScript object representing multiple attributes that looks like this:\n\n```\nconst objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}\n```\n\n```\ndata() {\n  return {\n    objectOfAttrs: {\n      id: 'container',\n      class: 'wrapper'\n    }\n  }\n}\n```\n\nYou can bind them to a single element by using `v-bind` without an argument:\n\n```\n<div v-bind=\"objectOfAttrs\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using javascript expressions in vue-guide?\n\nAssistant: To using javascript expressions in vue-guide, here's what you do:\nSo far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:\n\n```\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the current component instance.\n\nIn Vue templates, JavaScript expressions can be used in the following positions:\n- Inside text interpolations (mustaches)\n- In the attribute value of any Vue directives (special attributes that start with `v-`).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Template Syntax in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Text Interpolation Example**:\n\n```yaml\n<span>Message: {{ msg }}</span>\n```\n\nThis snippet shows you how to text interpolation example, which is an important aspect of template syntax.\n\n**Raw HTML Example**:\n\n```yaml\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nThis snippet shows you how to raw html example, which is an important aspect of template syntax.\n\n**Attribute Binding Example**:\n\n```yaml\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThis snippet shows you how to attribute binding example, which is an important aspect of template syntax.\n\n**Shorthand Example**:\n\n```yaml\n<div :id=\"dynamicId\"></div>\n```\n\nThis snippet shows you how to shorthand example, which is an important aspect of template syntax.\n\n**Same-name Shorthand Example**:\n\n```yaml\n<div :id></div>\n<div v-bind:id></div>\n```\n\nThis snippet shows you how to same-name shorthand example, which is an important aspect of template syntax.\n\n**Boolean Attribute Example**:\n\n```yaml\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThis snippet shows you how to boolean attribute example, which is an important aspect of template syntax.\n\n**Dynamically Binding Multiple Attributes Example**:\n\n```yaml\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\nThis snippet shows you how to dynamically binding multiple attributes example, which is an important aspect of template syntax.\n\n**Using JavaScript Expressions Example**:\n\n```yaml\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n<div :id=\"`list-${id}`\"></div>\n```\n\nThis snippet shows you how to using javascript expressions example, which is an important aspect of template syntax.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Template Syntax in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOnly use `v-html` on trusted content and never on user-provided content.\n\nFunctions called inside binding expressions will be called every time the component updates, so they should not have any side effects, such as changing data or triggering asynchronous operations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax.html", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:44:06", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "title": "Template Syntax | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:type": "website", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6cee4105-392f-4235-bc1d-a09d7080d1ac", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax.html", "url": "https://vuejs.org/guide/essentials/template-syntax.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Animation Techniques is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Animation Techniques in vue-guide.\n\n# Animation Techniques\n\nVue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.Here's a quick rundown of what this is about:\n\n## Class-based Animations\n\nFor elements that are not entering / leaving the DOM, we can trigger animations by dynamically adding a CSS class:\n\n```js\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n```\n\n```template\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n```\n\n```css\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\n## State-driven Animations\n\nSome transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:\n\n```js\nconst x = ref(0)\n\nfunction onMousemove(e) {\n  x.value = e.clientX\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      x: 0\n    }\n  },\n  methods: {\n    onMousemove(e) {\n      this.x = e.clientX\n    }\n  }\n}\n```\n\n```template\n<div\n  @mousemove=\"onMousemove\"\n  :style=\"{ backgroundColor: `hsl(${x}, 80%, 50%)` }\"\n  class=\"movearea\"\n>\n  <p>Move your mouse across this div...</p>\n  <p>x: {{ x }}</p>\n</div>\n```\n\n```css\n.movearea {\n  transition: 0.3s background-color ease;\n}\n```\n\nIn addition to color, you can also use style bindings to animate transform, width, or height. You can even animate SVG paths using spring physics - after all, they are all attribute data bindings.\n\n## Animating with Watchers\n\nWith some creativity, we can use watchers to animate anything based on some numerical state. For example, we can animate the number itself:\n\n```js\nimport { ref, reactive, watch } from 'vue'\nimport gsap from 'gsap'\n\nconst number = ref(0)\nconst tweened = reactive({\n  number: 0\n})\n\nwatch(number, (n) => {\n  gsap.to(tweened, { duration: 0.5, number: Number(n) || 0 })\n})\n```\n\n```template\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.number.toFixed(0) }}</p>\n```\n\n```js\nimport gsap from 'gsap'\n\nexport default {\n  data() {\n    return {\n      number: 0,\n      tweened: 0\n    }\n  },\n  watch: {\n    number(n) {\n      gsap.to(this, { duration: 0.5, tweened: Number(n) || 0 })\n    }\n  }\n}\n```\n\n```template\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.toFixed(0) }}</p>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "overview", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I class-based animations in vue-guide?\n\nAssistant: To class-based animations in vue-guide, here's what you do:\nFor elements that are not entering / leaving the DOM, we can trigger animations by dynamically adding a CSS class:\n\n```js\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n```\n\n```template\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n```\n\n```css\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I state-driven animations in vue-guide?\n\nAssistant: To state-driven animations in vue-guide, here's what you do:\nSome transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:\n\n```js\nconst x = ref(0)\n\nfunction onMousemove(e) {\n  x.value = e.clientX\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      x: 0\n    }\n  },\n  methods: {\n    onMousemove(e) {\n      this.x = e.clientX\n    }\n  }\n}\n```\n\n```template\n<div\n  @mousemove=\"onMousemove\"\n  :style=\"{ backgroundColor: `hsl(${x}, 80%, 50%)` }\"\n  class=\"movearea\"\n>\n  <p>Move your mouse across this div...</p>\n  <p>x: {{ x }}</p>\n</div>\n```\n\n```css\n.movearea {\n  transition: 0.3s background-color ease;\n}\n```\n\nIn addition to color, you can also use style bindings to animate transform, width, or height. You can even animate SVG paths using spring physics - after all, they are all attribute data bindings..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I animating with watchers in vue-guide?\n\nAssistant: To animating with watchers in vue-guide, here's what you do:\nWith some creativity, we can use watchers to animate anything based on some numerical state. For example, we can animate the number itself:\n\n```js\nimport { ref, reactive, watch } from 'vue'\nimport gsap from 'gsap'\n\nconst number = ref(0)\nconst tweened = reactive({\n  number: 0\n})\n\nwatch(number, (n) => {\n  gsap.to(tweened, { duration: 0.5, number: Number(n) || 0 })\n})\n```\n\n```template\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.number.toFixed(0) }}</p>\n```\n\n```js\nimport gsap from 'gsap'\n\nexport default {\n  data() {\n    return {\n      number: 0,\n      tweened: 0\n    }\n  },\n  watch: {\n    number(n) {\n      gsap.to(this, { duration: 0.5, tweened: Number(n) || 0 })\n    }\n  }\n}\n```\n\n```template\nType a number: <input v-model.number=\"number\" />\n<p>{{ tweened.toFixed(0) }}</p>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Animation Techniques in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Class-based Animations Example**:\n\n```yaml\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\nThis snippet shows you how to class-based animations example, which is an important aspect of animation techniques.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "code_examples", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Animation Techniques in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse CSS classes to trigger animations for elements that are not entering or leaving the DOM.\n\nUtilize style bindings to animate properties like transform, width, or height.\n\nConsider using watchers for animating numerical states.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation.html", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:48:44", "type": "best_practices", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:title": "Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "title": "Animation Techniques | Vue.js", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "51a604e0-3736-4f91-88be-85ab9e4bbdde", "sourceURL": "https://vuejs.org/guide/extras/animation.html", "url": "https://vuejs.org/guide/extras/animation.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Reactivity in Depth is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Reactivity in Depth in vue-guide.\n\n# Reactivity in Depth\n\nOne of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.Here's a quick rundown of what this is about:\n\n## What is Reactivity?\n\nThis term comes up in programming quite a bit these days, but what do people mean when they say it? Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. The canonical example that people usually show, because it‚Äôs a great one, is an Excel spreadsheet:\n\n|  | A | B | C |\n| --- | --- | --- | --- |\n| 0 | 1 |  |  |\n| 1 | 2 |  |  |\n| 2 | 3 |  |  |\n\nHere cell A2 is defined via a formula of `= A0 + A1` (you can click on A2 to view or edit the formula), so the spreadsheet gives us 3. No surprises there. But if you update A0 or A1, you'll notice that A2 automagically updates too.\n\nJavaScript doesn‚Äôt usually work like this. If we were to write something comparable in JavaScript:\n\n```js\nlet A0 = 1\nlet A1 = 2\nlet A2 = A0 + A1\n\nconsole.log(A2) // 3\n\nA0 = 2\nconsole.log(A2) // Still 3\n```\n\nWhen we mutate `A0`, `A2` does not change automatically.\n\nSo how would we do this in JavaScript? First, in order to re-run the code that updates `A2`, let's wrap it in a function:\n\n```js\nlet A2\n\nfunction update() {\n  A2 = A0 + A1\n}\n```\n\nThen, we need to define a few terms:\n\n- The `update()` function produces a **side effect**, or **effect** for short, because it modifies the state of the program.\n- `A0` and `A1` are considered **dependencies** of the effect, as their values are used to perform the effect. The effect is said to be a **subscriber** to its dependencies.\n\nWhat we need is a magic function that can invoke `update()` (the **effect**) whenever `A0` or `A1` (the **dependencies**) change:\n\n```js\nwhenDepsChange(update)\n```\n\nThis `whenDepsChange()` function has the following tasks:\n\n1. Track when a variable is read. E.g. when evaluating the expression `A0 + A1`, both `A0` and `A1` are read.\n2. If a variable is read when there is a currently running effect, make that effect a subscriber to that variable. E.g. because `A0` and `A1` are read when `update()` is being executed, `update()` becomes a subscriber to both `A0` and `A1` after the first call.\n3. Detect when a variable is mutated. E.g. when `A0` is assigned a new value, notify all its subscriber effects to re-run.\n\n## How Reactivity Works in Vue\n\nWe can't really track the reading and writing of local variables like in the example. There's just no mechanism for doing that in vanilla JavaScript. What we **can** do though, is intercept the reading and writing of **object properties**.\n\nThere are two ways of intercepting property access in JavaScript: [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#description) / [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set#description) and [Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). Vue 2 used getter / setters exclusively due to browser support limitations. In Vue 3, Proxies are used for reactive objects and getter / setters are used for refs. Here's some pseudo-code that illustrates how they work:\n\n```js\nfunction reactive(obj) {\n  return new Proxy(obj, {\n    get(target, key) {\n      track(target, key)\n      return target[key]\n    },\n    set(target, key, value) {\n      target[key] = value\n      trigger(target, key)\n    }\n  })\n}\n\nfunction ref(value) {\n  const refObject = {\n    get value() {\n      track(refObject, 'value')\n      return value\n    },\n    set value(newValue) {\n      value = newValue\n      trigger(refObject, 'value')\n    }\n  }\n  return refObject\n}\n```\n\nTIP\n\nCode snippets here and below are meant to explain the core concepts in the simplest form possible, so many details are omitted, and edge cases ignored.\n\nThis explains a few [limitations of reactive objects](https://vuejs.org/guide/essentials/reactivity-fundamentals#limitations-of-reactive) that we have discussed in the fundamentals section:\n\n- When you assign or destructure a reactive object's property to a local variable, accessing or assigning to that variable is non-reactive because it no longer triggers the get / set proxy traps on the source object. Note this \"disconnect\" only affects the variable binding - if the variable points to a non-primitive value such as an object, mutating the object would still be reactive.\n- The returned proxy from `reactive()`, although behaving just like the original, has a different identity if we compare it to the original using the `===` operator.\n\nInside `track()`, we check whether there is a currently running effect. If there is one, we lookup the subscriber effects (stored in a Set) for the property being tracked, and add the effect to the Set:\n\n```js\n// This will be set right before an effect is about\n// to be run. We'll deal with this later.\nlet activeEffect\n\nfunction track(target, key) {\n  if (activeEffect) {\n    const effects = getSubscribersForProperty(target, key)\n    effects.add(activeEffect)\n  }\n}\n```\n\nEffect subscriptions are stored in a global `WeakMap<target, Map<key, Set<effect>>>` data structure. If no subscribing effects Set was found for a property (tracked for the first time), it will be created. This is what the `getSubscribersForProperty()` function does, in short. For simplicity, we will skip its details.\n\nInside `trigger()`, we again lookup the subscriber effects for the property. But this time we invoke them instead:\n\n```js\nfunction trigger(target, key) {\n  const effects = getSubscribersForProperty(target, key)\n  effects.forEach((effect) => effect())\n}\n```\n\nNow let's circle back to the `whenDepsChange()` function:\n\n```js\nfunction whenDepsChange(update) {\n  const effect = () => {\n    activeEffect = effect\n    update()\n    activeEffect = null\n  }\n  effect()\n}\n```\n\nIt wraps the raw `update` function in an effect that sets itself as the current active effect before running the actual update. This enables `track()` calls during the update to locate the current active effect.\n\nAt this point, we have created an effect that automatically tracks its dependencies, and re-runs whenever a dependency changes. We call this a **Reactive Effect**.\n\nVue provides an API that allows you to create reactive effects: [`watchEffect()`](https://vuejs.org/api/reactivity-core#watcheffect). In fact, you may have noticed that it works pretty similarly to the magical `whenDepsChange()` in the example. We can now rework the original example using actual Vue APIs:\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // tracks A0 and A1\n  A2.value = A0.value + A1.value\n})\n\n// triggers the effect\nA0.value = 2\n```\n\nUsing a reactive effect to mutate a ref isn't the most interesting use case - in fact, using a computed property makes it more declarative:\n\n```js\nimport { ref, computed } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = computed(() => A0.value + A1.value)\n\nA0.value = 2\n```\n\nInternally, `computed` manages its invalidation and re-computation using a reactive effect.\n\nSo what's an example of a common and useful reactive effect? Well, updating the DOM! We can implement simple \"reactive rendering\" like this:\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst count = ref(0)\n\nwatchEffect(() => {\n  document.body.innerHTML = `Count is: ${count.value}`\n})\n\n// updates the DOM\ncount.value++\n```\n\nIn fact, this is pretty close to how a Vue component keeps the state and the DOM in sync - each component instance creates a reactive effect to render and update the DOM. Of course, Vue components use much more efficient ways to update the DOM than `innerHTML`. This is discussed in [Rendering Mechanism](https://vuejs.org/guide/extras/rendering-mechanism).\n\nThe `ref()`, `computed()` and `watchEffect()` APIs are all part of the Composition API. If you have only been using Options API with Vue so far, you'll notice that Composition API is closer to how Vue's reactivity system works under the hood. In fact, in Vue 3 the Options API is implemented on top of the Composition API. All property access on the component instance ( `this`) triggers getter / setters for reactivity tracking, and options like `watch` and `computed` invoke their Composition API equivalents internally.\n\n## Runtime vs. Compile-time Reactivity\n\nVue's reactivity system is primarily runtime-based: the tracking and triggering are all performed while the code is running directly in the browser. The pros of runtime reactivity are that it can work without a build step, and there are fewer edge cases. On the other hand, this makes it constrained by the syntax limitations of JavaScript, leading to the need of value containers like Vue refs.\n\nSome frameworks, such as [Svelte](https://svelte.dev/), choose to overcome such limitations by implementing reactivity during compilation. It analyzes and transforms the code in order to simulate reactivity. The compilation step allows the framework to alter the semantics of JavaScript itself - for example, implicitly injecting code that performs dependency analysis and effect triggering around access to locally defined variables. The downside is that such transforms require a build step, and altering JavaScript semantics is essentially creating a language that looks like JavaScript but compiles into something else.\n\nThe Vue team did explore this direction via an experimental feature called [Reactivity Transform](https://vuejs.org/guide/extras/reactivity-transform), but in the end we have decided that it would not be a good fit for the project due to [the reasoning here](https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028).\n\n## Reactivity Debugging\n\nIt's great that Vue's reactivity system automatically tracks dependencies, but in some cases we may want to figure out exactly what is being tracked, or what is causing a component to re-render.\n\n### Component Debugging Hooks\n\nWe can debug what dependencies are used during a component's render and which dependency is triggering an update using the `renderTracked``onRenderTracked` and `renderTriggered``onRenderTriggered` lifecycle hooks. Both hooks will receive a debugger event which contains information on the dependency in question. It is recommended to place a `debugger` statement in the callbacks to interactively inspect the dependency:\n\n```vue\n<script setup>\nimport { onRenderTracked, onRenderTriggered } from 'vue'\n\nonRenderTracked((event) => {\n  debugger\n})\n\nonRenderTriggered((event) => {\n  debugger\n})\n</script>\n```\n\n```js\nexport default {\n  renderTracked(event) {\n    debugger\n  },\n  renderTriggered(event) {\n    debugger\n  }\n}\n```\n\nTIP\n\nComponent debug hooks only work in development mode.\n\nThe debug event objects have the following type:\n\n```ts\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type:\n    | TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    | TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is reactivity? in vue-guide?\n\nAssistant: To what is reactivity? in vue-guide, here's what you do:\nThis term comes up in programming quite a bit these days, but what do people mean when they say it? Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. The canonical example that people usually show, because it‚Äôs a great one, is an Excel spreadsheet:\n\n|  | A | B | C |\n| --- | --- | --- | --- |\n| 0 | 1 |  |  |\n| 1 | 2 |  |  |\n| 2 | 3 |  |  |\n\nHere cell A2 is defined via a formula of `= A0 + A1` (you can click on A2 to view or edit the formula), so the spreadsheet gives us 3. No surprises there. But if you update A0 or A1, you'll notice that A2 automagically updates too.\n\nJavaScript doesn‚Äôt usually work like this. If we were to write something comparable in JavaScript:\n\n```js\nlet A0 = 1\nlet A1 = 2\nlet A2 = A0 + A1\n\nconsole.log(A2) // 3\n\nA0 = 2\nconsole.log(A2) // Still 3\n```\n\nWhen we mutate `A0`, `A2` does not change automatically.\n\nSo how would we do this in JavaScript? First, in order to re-run the code that updates `A2`, let's wrap it in a function:\n\n```js\nlet A2\n\nfunction update() {\n  A2 = A0 + A1\n}\n```\n\nThen, we need to define a few terms:\n\n- The `update()` function produces a **side effect**, or **effect** for short, because it modifies the state of the program.\n- `A0` and `A1` are considered **dependencies** of the effect, as their values are used to perform the effect. The effect is said to be a **subscriber** to its dependencies.\n\nWhat we need is a magic function that can invoke `update()` (the **effect**) whenever `A0` or `A1` (the **dependencies**) change:\n\n```js\nwhenDepsChange(update)\n```\n\nThis `whenDepsChange()` function has the following tasks:\n\n1. Track when a variable is read. E.g. when evaluating the expression `A0 + A1`, both `A0` and `A1` are read.\n2. If a variable is read when there is a currently running effect, make that effect a subscriber to that variable. E.g. because `A0` and `A1` are read when `update()` is being executed, `update()` becomes a subscriber to both `A0` and `A1` after the first call.\n3. Detect when a variable is mutated. E.g. when `A0` is assigned a new value, notify all its subscriber effects to re-run..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I how reactivity works in vue in vue-guide?\n\nAssistant: To how reactivity works in vue in vue-guide, here's what you do:\nWe can't really track the reading and writing of local variables like in the example. There's just no mechanism for doing that in vanilla JavaScript. What we **can** do though, is intercept the reading and writing of **object properties**.\n\nThere are two ways of intercepting property access in JavaScript: [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#description) / [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set#description) and [Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). Vue 2 used getter / setters exclusively due to browser support limitations. In Vue 3, Proxies are used for reactive objects and getter / setters are used for refs. Here's some pseudo-code that illustrates how they work:\n\n```js\nfunction reactive(obj) {\n  return new Proxy(obj, {\n    get(target, key) {\n      track(target, key)\n      return target[key]\n    },\n    set(target, key, value) {\n      target[key] = value\n      trigger(target, key)\n    }\n  })\n}\n\nfunction ref(value) {\n  const refObject = {\n    get value() {\n      track(refObject, 'value')\n      return value\n    },\n    set value(newValue) {\n      value = newValue\n      trigger(refObject, 'value')\n    }\n  }\n  return refObject\n}\n```\n\nTIP\n\nCode snippets here and below are meant to explain the core concepts in the simplest form possible, so many details are omitted, and edge cases ignored.\n\nThis explains a few [limitations of reactive objects](https://vuejs.org/guide/essentials/reactivity-fundamentals#limitations-of-reactive) that we have discussed in the fundamentals section:\n\n- When you assign or destructure a reactive object's property to a local variable, accessing or assigning to that variable is non-reactive because it no longer triggers the get / set proxy traps on the source object. Note this \"disconnect\" only affects the variable binding - if the variable points to a non-primitive value such as an object, mutating the object would still be reactive.\n- The returned proxy from `reactive()`, although behaving just like the original, has a different identity if we compare it to the original using the `===` operator.\n\nInside `track()`, we check whether there is a currently running effect. If there is one, we lookup the subscriber effects (stored in a Set) for the property being tracked, and add the effect to the Set:\n\n```js\n// This will be set right before an effect is about\n// to be run. We'll deal with this later.\nlet activeEffect\n\nfunction track(target, key) {\n  if (activeEffect) {\n    const effects = getSubscribersForProperty(target, key)\n    effects.add(activeEffect)\n  }\n}\n```\n\nEffect subscriptions are stored in a global `WeakMap<target, Map<key, Set<effect>>>` data structure. If no subscribing effects Set was found for a property (tracked for the first time), it will be created. This is what the `getSubscribersForProperty()` function does, in short. For simplicity, we will skip its details.\n\nInside `trigger()`, we again lookup the subscriber effects for the property. But this time we invoke them instead:\n\n```js\nfunction trigger(target, key) {\n  const effects = getSubscribersForProperty(target, key)\n  effects.forEach((effect) => effect())\n}\n```\n\nNow let's circle back to the `whenDepsChange()` function:\n\n```js\nfunction whenDepsChange(update) {\n  const effect = () => {\n    activeEffect = effect\n    update()\n    activeEffect = null\n  }\n  effect()\n}\n```\n\nIt wraps the raw `update` function in an effect that sets itself as the current active effect before running the actual update. This enables `track()` calls during the update to locate the current active effect.\n\nAt this point, we have created an effect that automatically tracks its dependencies, and re-runs whenever a dependency changes. We call this a **Reactive Effect**.\n\nVue provides an API that allows you to create reactive effects: [`watchEffect()`](https://vuejs.org/api/reactivity-core#watcheffect). In fact, you may have noticed that it works pretty similarly to the magical `whenDepsChange()` in the example. We can now rework the original example using actual Vue APIs:\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // tracks A0 and A1\n  A2.value = A0.value + A1.value\n})\n\n// triggers the effect\nA0.value = 2\n```\n\nUsing a reactive effect to mutate a ref isn't the most interesting use case - in fact, using a computed property makes it more declarative:\n\n```js\nimport { ref, computed } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = computed(() => A0.value + A1.value)\n\nA0.value = 2\n```\n\nInternally, `computed` manages its invalidation and re-computation using a reactive effect.\n\nSo what's an example of a common and useful reactive effect? Well, updating the DOM! We can implement simple \"reactive rendering\" like this:\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst count = ref(0)\n\nwatchEffect(() => {\n  document.body.innerHTML = `Count is: ${count.value}`\n})\n\n// updates the DOM\ncount.value++\n```\n\nIn fact, this is pretty close to how a Vue component keeps the state and the DOM in sync - each component instance creates a reactive effect to render and update the DOM. Of course, Vue components use much more efficient ways to update the DOM than `innerHTML`. This is discussed in [Rendering Mechanism](https://vuejs.org/guide/extras/rendering-mechanism).\n\nThe `ref()`, `computed()` and `watchEffect()` APIs are all part of the Composition API. If you have only been using Options API with Vue so far, you'll notice that Composition API is closer to how Vue's reactivity system works under the hood. In fact, in Vue 3 the Options API is implemented on top of the Composition API. All property access on the component instance ( `this`) triggers getter / setters for reactivity tracking, and options like `watch` and `computed` invoke their Composition API equivalents internally..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I runtime vs. compile-time reactivity in vue-guide?\n\nAssistant: To runtime vs. compile-time reactivity in vue-guide, here's what you do:\nVue's reactivity system is primarily runtime-based: the tracking and triggering are all performed while the code is running directly in the browser. The pros of runtime reactivity are that it can work without a build step, and there are fewer edge cases. On the other hand, this makes it constrained by the syntax limitations of JavaScript, leading to the need of value containers like Vue refs.\n\nSome frameworks, such as [Svelte](https://svelte.dev/), choose to overcome such limitations by implementing reactivity during compilation. It analyzes and transforms the code in order to simulate reactivity. The compilation step allows the framework to alter the semantics of JavaScript itself - for example, implicitly injecting code that performs dependency analysis and effect triggering around access to locally defined variables. The downside is that such transforms require a build step, and altering JavaScript semantics is essentially creating a language that looks like JavaScript but compiles into something else.\n\nThe Vue team did explore this direction via an experimental feature called [Reactivity Transform](https://vuejs.org/guide/extras/reactivity-transform), but in the end we have decided that it would not be a good fit for the project due to [the reasoning here](https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reactivity debugging in vue-guide?\n\nAssistant: To reactivity debugging in vue-guide, here's what you do:\nIt's great that Vue's reactivity system automatically tracks dependencies, but in some cases we may want to figure out exactly what is being tracked, or what is causing a component to re-render.\n\n### Component Debugging Hooks\n\nWe can debug what dependencies are used during a component's render and which dependency is triggering an update using the `renderTracked``onRenderTracked` and `renderTriggered``onRenderTriggered` lifecycle hooks. Both hooks will receive a debugger event which contains information on the dependency in question. It is recommended to place a `debugger` statement in the callbacks to interactively inspect the dependency:\n\n```vue\n<script setup>\nimport { onRenderTracked, onRenderTriggered } from 'vue'\n\nonRenderTracked((event) => {\n  debugger\n})\n\nonRenderTriggered((event) => {\n  debugger\n})\n</script>\n```\n\n```js\nexport default {\n  renderTracked(event) {\n    debugger\n  },\n  renderTriggered(event) {\n    debugger\n  }\n}\n```\n\nTIP\n\nComponent debug hooks only work in development mode.\n\nThe debug event objects have the following type:\n\n```ts\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type:\n    | TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    | TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Reactivity in Depth in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**JavaScript Example of Reactivity**:\n\n```yaml\nlet A0 = 1\nlet A1 = 2\nlet A2 = A0 + A1\n\nconsole.log(A2) // 3\n\nA0 = 2\nconsole.log(A2) // Still 3\n```\n\nThis snippet shows you how to javascript example of reactivity, which is an important aspect of reactivity in depth.\n\n**Update Function Example**:\n\n```yaml\nlet A2\n\nfunction update() {\n  A2 = A0 + A1\n}\n```\n\nThis snippet shows you how to update function example, which is an important aspect of reactivity in depth.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Reactivity in Depth in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCode snippets here and below are meant to explain the core concepts in the simplest form possible, so many details are omitted, and edge cases ignored.\n\nComponent debug hooks only work in development mode.\n\n`onTrack` and `onTrigger` computed options only work in development mode.\n\n`onTrack` and `onTrigger` watcher options only work in development mode.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "title": "Reactivity in Depth", "description": "One of Vue‚Äôs most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it‚Äôs also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue‚Äôs reactivity system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:52:36", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "og:type": "website", "title": "Reactivity in Depth | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "308a3fb3-9938-46bc-a323-b644b89aa98a", "sourceURL": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "url": "https://vuejs.org/guide/extras/reactivity-in-depth.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Rendering Mechanism is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Rendering Mechanism in vue-guide.\n\n# Rendering Mechanism\n\nHow does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.Here's a quick rundown of what this is about:\n\n## Virtual DOM\n\nYou have probably heard about the term \"virtual DOM\", which Vue's rendering system is based upon.\n\nThe virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM. The concept was pioneered by React, and has been adopted in many other frameworks with different implementations, including Vue.\n\nVirtual DOM is more of a pattern than a specific technology, so there is no one canonical implementation. We can illustrate the idea using a simple example:\n\n```js\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nHere, `vnode` is a plain JavaScript object (a \"virtual node\") representing a `<div>` element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree.\n\nA runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is called **mount**.\n\nIf we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is called **patch**, also known as \"diffing\" or \"reconciliation\".\n\nThe main benefit of virtual DOM is that it gives the developer the ability to programmatically create, inspect and compose desired UI structures in a declarative way, while leaving the direct DOM manipulation to the renderer.\n\n## Render Pipeline\n\nAt the high level, this is what happens when a Vue component is mounted:\n\n1. **Compile**: Vue templates are compiled into **render functions**: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler.\n\n2. **Mount**: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as a reactive effect, so it keeps track of all reactive dependencies that were used.\n\n3. **Patch**: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM.\n\n## Templates vs. Render Functions\n\nVue templates are compiled into virtual DOM render functions. Vue also provides APIs that allow us to skip the template compilation step and directly author render functions. Render functions are more flexible than templates when dealing with highly dynamic logic, because you can work with vnodes using the full power of JavaScript.\n\nSo why does Vue recommend templates by default? There are a number of reasons:\n\n1. Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify.\n\n2. Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM.\n\nIn practice, templates are sufficient for most use cases in applications. Render functions are typically only used in reusable components that need to deal with highly dynamic rendering logic.\n\n## Compiler-Informed Virtual DOM\n\nThe virtual DOM implementation in React and most other virtual-DOM implementations are purely runtime: the reconciliation algorithm cannot make any assumptions about the incoming virtual DOM tree, so it has to fully traverse the tree and diff the props of every vnode in order to ensure correctness. In addition, even if a part of the tree never changes, new vnodes are always created for them on each re-render, resulting in unnecessary memory pressure. This is one of the most criticized aspect of virtual DOM: the somewhat brute-force reconciliation process sacrifices efficiency in return for declarativeness and correctness.\n\nBut it doesn't have to be that way. In Vue, the framework controls both the compiler and the runtime. This allows us to implement many compile-time optimizations that only a tightly-coupled renderer can take advantage of. The compiler can statically analyze the template and leave hints in the generated code so that the runtime can take shortcuts whenever possible. At the same time, we still preserve the capability for the user to drop down to the render function layer for more direct control in edge cases. We call this hybrid approach **Compiler-Informed Virtual DOM**.\n\n## Cache Static\n\nQuite often there will be parts in a template that do not contain any dynamic bindings:\n\n```template\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\nThe `foo` and `bar` divs are static - re-creating vnodes and diffing them on each re-render is unnecessary. The renderer creates these vnodes during the initial render, caches them, and reuses the same vnodes for every subsequent re-render. The renderer is also able to completely skip diffing them when it notices the old vnode and the new vnode are the same one.\n\n## Patch Flags\n\nFor a single element with dynamic bindings, we can also infer a lot of information from it at compile time:\n\n```template\n<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>\n```\n\nWhen generating the render function code for these elements, Vue encodes the type of update each of them needs directly in the vnode creation call:\n\n```js\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThe last argument, `2`, is a patch flag. An element can have multiple patch flags, which will be merged into a single number. The runtime renderer can then check against the flags using bitwise operations to determine whether it needs to do certain work.\n\n## Tree Flattening\n\nTaking another look at the generated code from the previous example, you'll notice the root of the returned virtual DOM tree is created using a special `createElementBlock()` call:\n\n```js\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\nConceptually, a \"block\" is a part of the template that has stable inner structure. In this case, the entire template has a single block because it does not contain any structural directives like `v-if` and `v-for`.\n\n## Impact on SSR Hydration\n\nBoth patch flags and tree flattening also greatly improve Vue's SSR Hydration performance:\n\n- Single element hydration can take fast paths based on the corresponding vnode's patch flag.\n- Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "overview", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I virtual dom in vue-guide?\n\nAssistant: To virtual dom in vue-guide, here's what you do:\nYou have probably heard about the term \"virtual DOM\", which Vue's rendering system is based upon.\n\nThe virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM. The concept was pioneered by React, and has been adopted in many other frameworks with different implementations, including Vue.\n\nVirtual DOM is more of a pattern than a specific technology, so there is no one canonical implementation. We can illustrate the idea using a simple example:\n\n```js\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nHere, `vnode` is a plain JavaScript object (a \"virtual node\") representing a `<div>` element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree.\n\nA runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is called **mount**.\n\nIf we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is called **patch**, also known as \"diffing\" or \"reconciliation\".\n\nThe main benefit of virtual DOM is that it gives the developer the ability to programmatically create, inspect and compose desired UI structures in a declarative way, while leaving the direct DOM manipulation to the renderer..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I render pipeline in vue-guide?\n\nAssistant: To render pipeline in vue-guide, here's what you do:\nAt the high level, this is what happens when a Vue component is mounted:\n\n1. **Compile**: Vue templates are compiled into **render functions**: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler.\n\n2. **Mount**: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as a reactive effect, so it keeps track of all reactive dependencies that were used.\n\n3. **Patch**: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I templates vs. render functions in vue-guide?\n\nAssistant: To templates vs. render functions in vue-guide, here's what you do:\nVue templates are compiled into virtual DOM render functions. Vue also provides APIs that allow us to skip the template compilation step and directly author render functions. Render functions are more flexible than templates when dealing with highly dynamic logic, because you can work with vnodes using the full power of JavaScript.\n\nSo why does Vue recommend templates by default? There are a number of reasons:\n\n1. Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify.\n\n2. Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM.\n\nIn practice, templates are sufficient for most use cases in applications. Render functions are typically only used in reusable components that need to deal with highly dynamic rendering logic..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I compiler-informed virtual dom in vue-guide?\n\nAssistant: To compiler-informed virtual dom in vue-guide, here's what you do:\nThe virtual DOM implementation in React and most other virtual-DOM implementations are purely runtime: the reconciliation algorithm cannot make any assumptions about the incoming virtual DOM tree, so it has to fully traverse the tree and diff the props of every vnode in order to ensure correctness. In addition, even if a part of the tree never changes, new vnodes are always created for them on each re-render, resulting in unnecessary memory pressure. This is one of the most criticized aspect of virtual DOM: the somewhat brute-force reconciliation process sacrifices efficiency in return for declarativeness and correctness.\n\nBut it doesn't have to be that way. In Vue, the framework controls both the compiler and the runtime. This allows us to implement many compile-time optimizations that only a tightly-coupled renderer can take advantage of. The compiler can statically analyze the template and leave hints in the generated code so that the runtime can take shortcuts whenever possible. At the same time, we still preserve the capability for the user to drop down to the render function layer for more direct control in edge cases. We call this hybrid approach **Compiler-Informed Virtual DOM**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I cache static in vue-guide?\n\nAssistant: To cache static in vue-guide, here's what you do:\nQuite often there will be parts in a template that do not contain any dynamic bindings:\n\n```template\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\nThe `foo` and `bar` divs are static - re-creating vnodes and diffing them on each re-render is unnecessary. The renderer creates these vnodes during the initial render, caches them, and reuses the same vnodes for every subsequent re-render. The renderer is also able to completely skip diffing them when it notices the old vnode and the new vnode are the same one..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I patch flags in vue-guide?\n\nAssistant: To patch flags in vue-guide, here's what you do:\nFor a single element with dynamic bindings, we can also infer a lot of information from it at compile time:\n\n```template\n<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>\n```\n\nWhen generating the render function code for these elements, Vue encodes the type of update each of them needs directly in the vnode creation call:\n\n```js\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThe last argument, `2`, is a patch flag. An element can have multiple patch flags, which will be merged into a single number. The runtime renderer can then check against the flags using bitwise operations to determine whether it needs to do certain work..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I tree flattening in vue-guide?\n\nAssistant: To tree flattening in vue-guide, here's what you do:\nTaking another look at the generated code from the previous example, you'll notice the root of the returned virtual DOM tree is created using a special `createElementBlock()` call:\n\n```js\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\nConceptually, a \"block\" is a part of the template that has stable inner structure. In this case, the entire template has a single block because it does not contain any structural directives like `v-if` and `v-for`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I impact on ssr hydration in vue-guide?\n\nAssistant: To impact on ssr hydration in vue-guide, here's what you do:\nBoth patch flags and tree flattening also greatly improve Vue's SSR Hydration performance:\n\n- Single element hydration can take fast paths based on the corresponding vnode's patch flag.\n- Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Rendering Mechanism in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Virtual Node Example**:\n\n```yaml\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nThis snippet shows you how to virtual node example, which is an important aspect of rendering mechanism.\n\n**Render Function Code for Dynamic Binding**:\n\n```yaml\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThis snippet shows you how to render function code for dynamic binding, which is an important aspect of rendering mechanism.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "code_examples", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Rendering Mechanism in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse templates for most use cases as they are easier to understand and maintain.\n\nUtilize render functions for highly dynamic rendering logic when necessary.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:59:19", "type": "best_practices", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:type": "website", "twitter:site": "@vuejs", "title": "Rendering Mechanism | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "og:title": "Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "scrapeId": "1a133404-9554-4e43-a683-69edfbc5de3e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism.html", "url": "https://vuejs.org/guide/extras/rendering-mechanism.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Ways of Using Vue is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Ways of Using Vue in vue-guide.\n\n# Ways of Using Vue\n\nThis page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.Here's a quick rundown of what this is about:\n\n## Standalone Script\n\nVue can be used as a standalone script file - no build step required! If you have a backend framework already rendering most of the HTML, or your frontend logic isn't complex enough to justify a build step, this is the easiest way to integrate Vue into your stack. You can think of Vue as a more declarative replacement of jQuery in such cases.\n\nVue also provides an alternative distribution called petite-vue that is specifically optimized for progressively enhancing existing HTML. It has a smaller feature set, but is extremely lightweight and uses an implementation that is more efficient in no-build-step scenarios.\n\n## Embedded Web Components\n\nYou can use Vue to build standard Web Components that can be embedded in any HTML page, regardless of how they are rendered. This option allows you to leverage Vue in a completely consumer-agnostic fashion: the resulting web components can be embedded in legacy applications, static HTML, or even applications built with other frameworks.\n\n## Single-Page Application (SPA)\n\nSome applications require rich interactivity, deep session depth, and non-trivial stateful logic on the frontend. The best way to build such applications is to use an architecture where Vue not only controls the entire page, but also handles data updates and navigation without having to reload the page. This type of application is typically referred to as a Single-Page Application (SPA).\n\nVue provides core libraries and comprehensive tooling support with amazing developer experience for building modern SPAs, including:\n\n- Client-side router\n- Blazing fast build tool chain\n- IDE support\n- Browser devtools\n- TypeScript integrations\n- Testing utilities\n\nSPAs typically require the backend to expose API endpoints - but you can also pair Vue with solutions like Inertia.js to get the SPA benefits while retaining a server-centric development model.\n\n## Fullstack / SSR\n\nPure client-side SPAs are problematic when the app is sensitive to SEO and time-to-content. This is because the browser will receive a largely empty HTML page, and has to wait until the JavaScript is loaded before rendering anything.\n\nVue provides first-class APIs to \"render\" a Vue app into HTML strings on the server. This allows the server to send back already-rendered HTML, allowing end users to see the content immediately while the JavaScript is being downloaded. Vue will then \"hydrate\" the application on the client side to make it interactive. This is called Server-Side Rendering (SSR) and it greatly improves Core Web Vital metrics such as Largest Contentful Paint (LCP).\n\nThere are higher-level Vue-based frameworks built on top of this paradigm, such as Nuxt, which allow you to develop a fullstack application using Vue and JavaScript.\n\n## JAMStack / SSG\n\nServer-side rendering can be done ahead of time if the required data is static. This means we can pre-render an entire application into HTML and serve them as static files. This improves site performance and makes deployment a lot simpler since we no longer need to dynamically render pages on each request. Vue can still hydrate such applications to provide rich interactivity on the client. This technique is commonly referred to as Static-Site Generation (SSG), also known as JAMStack.\n\nThere are two flavors of SSG: single-page and multi-page. Both flavors pre-render the site into static HTML, the difference is that:\n\n- After the initial page load, a single-page SSG \"hydrates\" the page into an SPA. This requires more upfront JS payload and hydration cost, but subsequent navigations will be faster, since it only needs to partially update the page content instead of reloading the entire page.\n\n- A multi-page SSG loads a new page on every navigation. The upside is that it can ship minimal JS - or no JS at all if the page requires no interaction! Some multi-page SSG frameworks such as Astro also support \"partial hydration\" - which allows you to use Vue components to create interactive \"islands\" inside static HTML.\n\nSingle-page SSGs are better suited if you expect non-trivial interactivity, deep session lengths, or persisted elements / state across navigations. Otherwise, multi-page SSG would be the better choice.\n\nThe Vue team also maintains a static-site generator called VitePress, which powers this website you are reading right now! VitePress supports both flavors of SSG. Nuxt also supports SSG. You can even mix SSR and SSG for different routes in the same Nuxt app.\n\n## Beyond the Web\n\nAlthough Vue is primarily designed for building web applications, it is by no means limited to just the browser. You can:\n\n- Build desktop apps with Electron\n- Build mobile apps with Ionic Vue\n- Build desktop and mobile apps from the same codebase with Quasar or Tauri\n- Build 3D WebGL experiences with TresJS\n- Use Vue's Custom Renderer API to build custom renderers, like those for the terminal!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I standalone script in vue-guide?\n\nAssistant: To standalone script in vue-guide, here's what you do:\nVue can be used as a standalone script file - no build step required! If you have a backend framework already rendering most of the HTML, or your frontend logic isn't complex enough to justify a build step, this is the easiest way to integrate Vue into your stack. You can think of Vue as a more declarative replacement of jQuery in such cases.\n\nVue also provides an alternative distribution called petite-vue that is specifically optimized for progressively enhancing existing HTML. It has a smaller feature set, but is extremely lightweight and uses an implementation that is more efficient in no-build-step scenarios..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I embedded web components in vue-guide?\n\nAssistant: To embedded web components in vue-guide, here's what you do:\nYou can use Vue to build standard Web Components that can be embedded in any HTML page, regardless of how they are rendered. This option allows you to leverage Vue in a completely consumer-agnostic fashion: the resulting web components can be embedded in legacy applications, static HTML, or even applications built with other frameworks..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I single-page application (spa) in vue-guide?\n\nAssistant: To single-page application (spa) in vue-guide, here's what you do:\nSome applications require rich interactivity, deep session depth, and non-trivial stateful logic on the frontend. The best way to build such applications is to use an architecture where Vue not only controls the entire page, but also handles data updates and navigation without having to reload the page. This type of application is typically referred to as a Single-Page Application (SPA).\n\nVue provides core libraries and comprehensive tooling support with amazing developer experience for building modern SPAs, including:\n\n- Client-side router\n- Blazing fast build tool chain\n- IDE support\n- Browser devtools\n- TypeScript integrations\n- Testing utilities\n\nSPAs typically require the backend to expose API endpoints - but you can also pair Vue with solutions like Inertia.js to get the SPA benefits while retaining a server-centric development model..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I fullstack / ssr in vue-guide?\n\nAssistant: To fullstack / ssr in vue-guide, here's what you do:\nPure client-side SPAs are problematic when the app is sensitive to SEO and time-to-content. This is because the browser will receive a largely empty HTML page, and has to wait until the JavaScript is loaded before rendering anything.\n\nVue provides first-class APIs to \"render\" a Vue app into HTML strings on the server. This allows the server to send back already-rendered HTML, allowing end users to see the content immediately while the JavaScript is being downloaded. Vue will then \"hydrate\" the application on the client side to make it interactive. This is called Server-Side Rendering (SSR) and it greatly improves Core Web Vital metrics such as Largest Contentful Paint (LCP).\n\nThere are higher-level Vue-based frameworks built on top of this paradigm, such as Nuxt, which allow you to develop a fullstack application using Vue and JavaScript..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I jamstack / ssg in vue-guide?\n\nAssistant: To jamstack / ssg in vue-guide, here's what you do:\nServer-side rendering can be done ahead of time if the required data is static. This means we can pre-render an entire application into HTML and serve them as static files. This improves site performance and makes deployment a lot simpler since we no longer need to dynamically render pages on each request. Vue can still hydrate such applications to provide rich interactivity on the client. This technique is commonly referred to as Static-Site Generation (SSG), also known as JAMStack.\n\nThere are two flavors of SSG: single-page and multi-page. Both flavors pre-render the site into static HTML, the difference is that:\n\n- After the initial page load, a single-page SSG \"hydrates\" the page into an SPA. This requires more upfront JS payload and hydration cost, but subsequent navigations will be faster, since it only needs to partially update the page content instead of reloading the entire page.\n\n- A multi-page SSG loads a new page on every navigation. The upside is that it can ship minimal JS - or no JS at all if the page requires no interaction! Some multi-page SSG frameworks such as Astro also support \"partial hydration\" - which allows you to use Vue components to create interactive \"islands\" inside static HTML.\n\nSingle-page SSGs are better suited if you expect non-trivial interactivity, deep session lengths, or persisted elements / state across navigations. Otherwise, multi-page SSG would be the better choice.\n\nThe Vue team also maintains a static-site generator called VitePress, which powers this website you are reading right now! VitePress supports both flavors of SSG. Nuxt also supports SSG. You can even mix SSR and SSG for different routes in the same Nuxt app..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I beyond the web in vue-guide?\n\nAssistant: To beyond the web in vue-guide, here's what you do:\nAlthough Vue is primarily designed for building web applications, it is by no means limited to just the browser. You can:\n\n- Build desktop apps with Electron\n- Build mobile apps with Ionic Vue\n- Build desktop and mobile apps from the same codebase with Quasar or Tauri\n- Build 3D WebGL experiences with TresJS\n- Use Vue's Custom Renderer API to build custom renderers, like those for the terminal!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "title": "Ways of Using Vue", "description": "This page covers the various ways Vue can be utilized in web development, highlighting its flexibility and incremental adoptability.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 02:02:23", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "ogTitle": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "og:title": "Vue.js", "language": "en-US", "title": "Ways of Using Vue | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "scrapeId": "b5dae361-cf2a-407c-a3fd-3de3a856c3d9", "sourceURL": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "url": "https://vuejs.org/guide/extras/ways-of-using-vue.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Vue and Web Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Vue and Web Components in vue-guide.\n\n# Vue and Web Components\n\nThis page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.Here's a quick rundown of what this is about:\n\n## Using Custom Elements in Vue\n\nVue scores a perfect 100% in the Custom Elements Everywhere tests. Consuming custom elements inside a Vue application largely works the same as using native HTML elements, with a few things to keep in mind.\n\n## Skipping Component Resolution\n\nBy default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify the `compilerOptions.isCustomElement` option.\n\n## Example In-Browser Config\n\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')\n\n## Example Vite Config\n\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}\n\n## Example Vue CLI Config\n\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}\n\n## Passing DOM Properties\n\nSince DOM attributes can only be strings, we need to pass complex data to custom elements as DOM properties. When setting props on a custom element, Vue 3 automatically checks DOM-property presence using the `in` operator and will prefer setting the value as a DOM property if the key is present.\n\n## Building Custom Elements with Vue\n\nThe primary benefit of custom elements is that they can be used with any framework, or even without a framework. This makes them ideal for distributing components where the end consumer may not be using the same frontend stack.\n\n## defineCustomElement\n\nVue supports creating custom elements using exactly the same Vue component APIs via the `defineCustomElement` method. The method accepts the same argument as `defineComponent`, but instead returns a custom element constructor that extends `HTMLElement`.\n\n## Lifecycle\n\nA Vue custom element will mount an internal Vue component instance inside its shadow root when the element's `connectedCallback` is called for the first time.\n\n## Props\n\nAll props declared using the `props` option will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate.\n\n## Events\n\nEvents emitted via `this.$emit` or setup `emit` are dispatched as native CustomEvents on the custom element.\n\n## Slots\n\nInside the component, slots can be rendered using the `<slot/>` element as usual. However, when consuming the resulting element, it only accepts native slots syntax.\n\n## Provide / Inject\n\nThe Provide / Inject API and its Composition API equivalent also work between Vue-defined custom elements.\n\n## App Level Config\n\nYou can configure the app instance of a Vue custom element using the `configureApp` option.\n\n## SFC as Custom Element\n\n`defineCustomElement` also works with Vue Single-File Components (SFCs). However, with the default tooling setup, the `<style>` inside the SFCs will still be extracted and merged into a single CSS file during production build.\n\n## Tips for a Vue Custom Elements Library\n\nWhen building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used.\n\n## Vue-based Web Components and TypeScript\n\nWhen writing Vue SFC templates, you may want to type check your Vue components, including those that are defined as custom elements.\n\n## Non-Vue Web Components and TypeScript\n\nHere is the recommended way to enable type checking in SFC templates of Custom Elements that are not built with Vue.\n\n## Web Components vs. Vue Components\n\nSome developers believe that framework-proprietary component models should be avoided, and that exclusively using Custom Elements makes an application \"future-proof\".\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using custom elements in vue in vue-guide?\n\nAssistant: To using custom elements in vue in vue-guide, here's what you do:\nVue scores a perfect 100% in the Custom Elements Everywhere tests. Consuming custom elements inside a Vue application largely works the same as using native HTML elements, with a few things to keep in mind..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I skipping component resolution in vue-guide?\n\nAssistant: To skipping component resolution in vue-guide, here's what you do:\nBy default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify the `compilerOptions.isCustomElement` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example in-browser config in vue-guide?\n\nAssistant: To example in-browser config in vue-guide, here's what you do:\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-').\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example vite config in vue-guide?\n\nAssistant: To example vite config in vue-guide, here's what you do:\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example vue cli config in vue-guide?\n\nAssistant: To example vue cli config in vue-guide, here's what you do:\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing dom properties in vue-guide?\n\nAssistant: To passing dom properties in vue-guide, here's what you do:\nSince DOM attributes can only be strings, we need to pass complex data to custom elements as DOM properties. When setting props on a custom element, Vue 3 automatically checks DOM-property presence using the `in` operator and will prefer setting the value as a DOM property if the key is present..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I building custom elements with vue in vue-guide?\n\nAssistant: To building custom elements with vue in vue-guide, here's what you do:\nThe primary benefit of custom elements is that they can be used with any framework, or even without a framework. This makes them ideal for distributing components where the end consumer may not be using the same frontend stack..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I definecustomelement in vue-guide?\n\nAssistant: To definecustomelement in vue-guide, here's what you do:\nVue supports creating custom elements using exactly the same Vue component APIs via the `defineCustomElement` method. The method accepts the same argument as `defineComponent`, but instead returns a custom element constructor that extends `HTMLElement`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lifecycle in vue-guide?\n\nAssistant: To lifecycle in vue-guide, here's what you do:\nA Vue custom element will mount an internal Vue component instance inside its shadow root when the element's `connectedCallback` is called for the first time..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I props in vue-guide?\n\nAssistant: To props in vue-guide, here's what you do:\nAll props declared using the `props` option will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I events in vue-guide?\n\nAssistant: To events in vue-guide, here's what you do:\nEvents emitted via `this.$emit` or setup `emit` are dispatched as native CustomEvents on the custom element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I slots in vue-guide?\n\nAssistant: To slots in vue-guide, here's what you do:\nInside the component, slots can be rendered using the `<slot/>` element as usual. However, when consuming the resulting element, it only accepts native slots syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide / inject in vue-guide?\n\nAssistant: To provide / inject in vue-guide, here's what you do:\nThe Provide / Inject API and its Composition API equivalent also work between Vue-defined custom elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app level config in vue-guide?\n\nAssistant: To app level config in vue-guide, here's what you do:\nYou can configure the app instance of a Vue custom element using the `configureApp` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I sfc as custom element in vue-guide?\n\nAssistant: To sfc as custom element in vue-guide, here's what you do:\n`defineCustomElement` also works with Vue Single-File Components (SFCs). However, with the default tooling setup, the `<style>` inside the SFCs will still be extracted and merged into a single CSS file during production build..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I tips for a vue custom elements library in vue-guide?\n\nAssistant: To tips for a vue custom elements library in vue-guide, here's what you do:\nWhen building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I vue-based web components and typescript in vue-guide?\n\nAssistant: To vue-based web components and typescript in vue-guide, here's what you do:\nWhen writing Vue SFC templates, you may want to type check your Vue components, including those that are defined as custom elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I non-vue web components and typescript in vue-guide?\n\nAssistant: To non-vue web components and typescript in vue-guide, here's what you do:\nHere is the recommended way to enable type checking in SFC templates of Custom Elements that are not built with Vue..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I web components vs. vue components in vue-guide?\n\nAssistant: To web components vs. vue components in vue-guide, here's what you do:\nSome developers believe that framework-proprietary component models should be avoided, and that exclusively using Custom Elements makes an application \"future-proof\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Vue and Web Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example In-Browser Config**:\n\n```yaml\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')\n```\n\nThis snippet shows you how to example in-browser config, which is an important aspect of vue and web components.\n\n**Example Vite Config**:\n\n```yaml\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}\n```\n\nThis snippet shows you how to example vite config, which is an important aspect of vue and web components.\n\n**Example Vue CLI Config**:\n\n```yaml\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}\n```\n\nThis snippet shows you how to example vue cli config, which is an important aspect of vue and web components.\n\n**Passing DOM Properties Example**:\n\n```yaml\n<my-element :user.prop=\"{ name: 'jack' }\"></my-element>\n\n<!-- shorthand equivalent -->\n<my-element .user=\"{ name: 'jack' }\"></my-element>\n```\n\nThis snippet shows you how to passing dom properties example, which is an important aspect of vue and web components.\n\n**defineCustomElement Example**:\n\n```yaml\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  // normal Vue component options here\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement only: CSS to be injected into shadow root\n  styles: [`/* inlined css */`]\n})\n\n// Register the custom element.\n// After registration, all `<my-vue-element>` tags\n// on the page will be upgraded.\ncustomElements.define('my-vue-element', MyVueElement)\n```\n\nThis snippet shows you how to definecustomelement example, which is an important aspect of vue and web components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Vue and Web Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used.\n\nIt is recommended to export the individual element constructors to give your users the flexibility to import them on-demand and register them with desired tag names.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components.html", "title": "Vue and Web Components", "description": "This page covers the integration of Vue with Web Components, including how to use custom elements in Vue, build custom elements with Vue, and best practices for using Vue with Web Components.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 02:04:12", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "title": "Vue and Web Components | Vue.js", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "language": "en-US", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "2c951d66-6a0c-4217-89fc-8eac5462cdb8", "sourceURL": "https://vuejs.org/guide/extras/web-components.html", "url": "https://vuejs.org/guide/extras/web-components.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Introduction is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Introduction in vue-guide.\n\n# Introduction\n\nYou are reading the documentation for Vue 3!Here's a quick rundown of what this is about:\n\n## What is Vue?\n\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required.\n\n## The Progressive Framework\n\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\n\n## Single-File Components\n\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\n\n## API Styles\n\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar.\n\n## Still Got Questions?\n\nCheck out our [FAQ](https://vuejs.org/about/faq).\n\n## Pick Your Learning Path\n\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "overview", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is vue? in vue-guide?\n\nAssistant: To what is vue? in vue-guide, here's what you do:\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the progressive framework in vue-guide?\n\nAssistant: To the progressive framework in vue-guide, here's what you do:\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I single-file components in vue-guide?\n\nAssistant: To single-file components in vue-guide, here's what you do:\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I api styles in vue-guide?\n\nAssistant: To api styles in vue-guide, here's what you do:\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I still got questions? in vue-guide?\n\nAssistant: To still got questions? in vue-guide, here's what you do:\nCheck out our [FAQ](https://vuejs.org/about/faq)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I pick your learning path in vue-guide?\n\nAssistant: To pick your learning path in vue-guide, here's what you do:\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "section_detail", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Introduction in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Minimal Example with Options API**:\n\n```yaml\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with options api, which is an important aspect of introduction.\n\n**Minimal Example with Composition API**:\n\n```yaml\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with composition api, which is an important aspect of introduction.\n\n**Single-File Component Example with Options API**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with options api, which is an important aspect of introduction.\n\n**Single-File Component Example with Composition API**:\n\n```yaml\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with composition api, which is an important aspect of introduction.\n\n**Options API Example**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to options api example, which is an important aspect of introduction.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "code_examples", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Introduction in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\nFor production use, go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\nFor production use, go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/introduction.html", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:06:58", "type": "best_practices", "page_metadata": {"language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogTitle": "Vue.js", "og:type": "website", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Introduction | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1d493775-d9c2-4bf8-8973-4b11916744e7", "sourceURL": "https://vuejs.org/guide/introduction.html", "url": "https://vuejs.org/guide/introduction.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Quick Start is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Quick Start in vue-guide.\n\n# Quick Start\n\nA guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.Here's a quick rundown of what this is about:\n\n## Try Vue Online\n\n- To quickly get a taste of Vue, you can try it directly in our [Playground](https://play.vuejs.org/#eNo9jcEKwjAMhl/lt5fpQYfXUQfefAMvvRQbddC1pUuHUPrudg4HIcmXjyRZXEM4zYlEJ+T0iEPgXjn6BB8Zhp46WUZWDjCa9f6w9kAkTtH9CRinV4fmRtZ63H20Ztesqiylphqy3R5UYBqD1UyVAPk+9zkvV1CKbCv9poMLiTEfR2/IXpSoXomqZLtti/IFwVtA9A==).\n\n- If you prefer a plain HTML setup without any build steps, you can use this [JSFiddle](https://jsfiddle.net/yyx990803/2ke1ab0z/) as your starting point.\n\n- If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on [StackBlitz](https://vite.new/vue).\n\n## Creating a Vue Application\n\nPrerequisites\n\n- Familiarity with the command line\n- Install [Node.js](https://nodejs.org/) version 18.3 or higher\n\nIn this section we will introduce how to scaffold a Vue [Single Page Application](https://vuejs.org/guide/extras/ways-of-using-vue#single-page-application-spa) on your local machine. The created project will be using a build setup based on [Vite](https://vitejs.dev/) and allow us to use Vue [Single-File Components](https://vuejs.org/guide/scaling-up/sfc) (SFCs).\n\nMake sure you have an up-to-date version of [Node.js](https://nodejs.org/) installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the `$` sign):\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:\n\nIf you are unsure about an option, simply choose `No` by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:\n\nYou should now have your first Vue project running! Note that the example components in the generated project are written using the [Composition API](https://vuejs.org/guide/introduction#composition-api) and `<script setup>`, rather than the [Options API](https://vuejs.org/guide/introduction#options-api). Here are some additional tips:\n\n- The recommended IDE setup is [Visual Studio Code](https://code.visualstudio.com/) + [Vue - Official extension](https://marketplace.visualstudio.com/items?itemName=Vue.volar). If you use other editors, check out the [IDE support section](https://vuejs.org/guide/scaling-up/tooling#ide-support).\n- More tooling details, including integration with backend frameworks, are discussed in the [Tooling Guide](https://vuejs.org/guide/scaling-up/tooling).\n- To learn more about the underlying build tool Vite, check out the [Vite docs](https://vitejs.dev/).\n- If you choose to use TypeScript, check out the [TypeScript Usage Guide](https://vuejs.org/guide/typescript/overview).\n\n## Using Vue from CDN\n\nYou can use Vue directly from a CDN via a script tag:\n\nHere we are using [unpkg](https://unpkg.com/), but you can also use any CDN that serves npm packages, for example [jsdelivr](https://www.jsdelivr.com/package/npm/vue) or [cdnjs](https://cdnjs.com/libraries/vue). Of course, you can also download this file and serve it yourself.\n\nWhen using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.\n\n## Using the Global Build\n\nThe above link loads the _global build_ of Vue, where all top-level APIs are exposed as properties on the global `Vue` object. Here is a full example using the global build:\n\nNotice that we are using `<script type=\"module\">`, and the imported CDN URL is pointing to the **ES modules build** of Vue instead.\n\n## Enabling Import maps\n\nIn the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:\n\nWe can teach the browser where to locate the `vue` import by using [Import Maps](https://caniuse.com/import-maps):\n\nYou can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use.\n\n## Notes on Production Use\n\nThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the [Production Deployment Guide](https://vuejs.org/guide/best-practices/production-deployment#without-build-tools).\n\n## Splitting Up the Modules\n\nAs we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:\n\nIf you directly open the above `index.html` in your browser, you will find that it throws an error because ES modules cannot work over the `file://` protocol, which is the protocol the browser uses when you open a local file.\n\nDue to security reasons, ES modules can only work over the `http://` protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the `index.html` over the `http://` protocol, with a local HTTP server.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I try vue online in vue-guide?\n\nAssistant: To try vue online in vue-guide, here's what you do:\n- To quickly get a taste of Vue, you can try it directly in our [Playground](https://play.vuejs.org/#eNo9jcEKwjAMhl/lt5fpQYfXUQfefAMvvRQbddC1pUuHUPrudg4HIcmXjyRZXEM4zYlEJ+T0iEPgXjn6BB8Zhp46WUZWDjCa9f6w9kAkTtH9CRinV4fmRtZ63H20Ztesqiylphqy3R5UYBqD1UyVAPk+9zkvV1CKbCv9poMLiTEfR2/IXpSoXomqZLtti/IFwVtA9A==).\n\n- If you prefer a plain HTML setup without any build steps, you can use this [JSFiddle](https://jsfiddle.net/yyx990803/2ke1ab0z/) as your starting point.\n\n- If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on [StackBlitz](https://vite.new/vue)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I creating a vue application in vue-guide?\n\nAssistant: To creating a vue application in vue-guide, here's what you do:\nPrerequisites\n\n- Familiarity with the command line\n- Install [Node.js](https://nodejs.org/) version 18.3 or higher\n\nIn this section we will introduce how to scaffold a Vue [Single Page Application](https://vuejs.org/guide/extras/ways-of-using-vue#single-page-application-spa) on your local machine. The created project will be using a build setup based on [Vite](https://vitejs.dev/) and allow us to use Vue [Single-File Components](https://vuejs.org/guide/scaling-up/sfc) (SFCs).\n\nMake sure you have an up-to-date version of [Node.js](https://nodejs.org/) installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the `$` sign):\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:\n\nIf you are unsure about an option, simply choose `No` by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:\n\nYou should now have your first Vue project running! Note that the example components in the generated project are written using the [Composition API](https://vuejs.org/guide/introduction#composition-api) and `<script setup>`, rather than the [Options API](https://vuejs.org/guide/introduction#options-api). Here are some additional tips:\n\n- The recommended IDE setup is [Visual Studio Code](https://code.visualstudio.com/) + [Vue - Official extension](https://marketplace.visualstudio.com/items?itemName=Vue.volar). If you use other editors, check out the [IDE support section](https://vuejs.org/guide/scaling-up/tooling#ide-support).\n- More tooling details, including integration with backend frameworks, are discussed in the [Tooling Guide](https://vuejs.org/guide/scaling-up/tooling).\n- To learn more about the underlying build tool Vite, check out the [Vite docs](https://vitejs.dev/).\n- If you choose to use TypeScript, check out the [TypeScript Usage Guide](https://vuejs.org/guide/typescript/overview)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using vue from cdn in vue-guide?\n\nAssistant: To using vue from cdn in vue-guide, here's what you do:\nYou can use Vue directly from a CDN via a script tag:\n\nHere we are using [unpkg](https://unpkg.com/), but you can also use any CDN that serves npm packages, for example [jsdelivr](https://www.jsdelivr.com/package/npm/vue) or [cdnjs](https://cdnjs.com/libraries/vue). Of course, you can also download this file and serve it yourself.\n\nWhen using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using the global build in vue-guide?\n\nAssistant: To using the global build in vue-guide, here's what you do:\nThe above link loads the _global build_ of Vue, where all top-level APIs are exposed as properties on the global `Vue` object. Here is a full example using the global build:\n\nNotice that we are using `<script type=\"module\">`, and the imported CDN URL is pointing to the **ES modules build** of Vue instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I enabling import maps in vue-guide?\n\nAssistant: To enabling import maps in vue-guide, here's what you do:\nIn the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:\n\nWe can teach the browser where to locate the `vue` import by using [Import Maps](https://caniuse.com/import-maps):\n\nYou can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I notes on production use in vue-guide?\n\nAssistant: To notes on production use in vue-guide, here's what you do:\nThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the [Production Deployment Guide](https://vuejs.org/guide/best-practices/production-deployment#without-build-tools)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I splitting up the modules in vue-guide?\n\nAssistant: To splitting up the modules in vue-guide, here's what you do:\nAs we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:\n\nIf you directly open the above `index.html` in your browser, you will find that it throws an error because ES modules cannot work over the `file://` protocol, which is the protocol the browser uses when you open a local file.\n\nDue to security reasons, ES modules can only work over the `http://` protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the `index.html` over the `http://` protocol, with a local HTTP server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Quick Start in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Vue Application**:\n\n```yaml\n$ npm create vue@latest\n```\n\nThis snippet shows you how to creating a vue application, which is an important aspect of quick start.\n\n**Creating a Vue Application with pnpm**:\n\n```yaml\n$ pnpm create vue@latest\n```\n\nThis snippet shows you how to creating a vue application with pnpm, which is an important aspect of quick start.\n\n**Creating a Vue Application with Yarn**:\n\n```yaml\n$ yarn create vue\n```\n\nThis snippet shows you how to creating a vue application with yarn, which is an important aspect of quick start.\n\n**Creating a Vue Application with Yarn Modern**:\n\n```yaml\n$ yarn create vue@latest\n```\n\nThis snippet shows you how to creating a vue application with yarn modern, which is an important aspect of quick start.\n\n**Creating a Vue Application with Yarn ^v4.11**:\n\n```yaml\n$ yarn dlx create-vue@latest\n```\n\nThis snippet shows you how to creating a vue application with yarn ^v4.11, which is an important aspect of quick start.\n\n**Creating a Vue Application with bun**:\n\n```yaml\n$ bun create vue@latest\n```\n\nThis snippet shows you how to creating a vue application with bun, which is an important aspect of quick start.\n\n**Starting the Dev Server with npm**:\n\n```yaml\n$ cd <your-project-name>\n$ npm install\n$ npm run dev\n```\n\nThis snippet shows you how to starting the dev server with npm, which is an important aspect of quick start.\n\n**Starting the Dev Server with pnpm**:\n\n```yaml\n$ cd <your-project-name>\n$ pnpm install\n$ pnpm run dev\n```\n\nThis snippet shows you how to starting the dev server with pnpm, which is an important aspect of quick start.\n\n**Starting the Dev Server with Yarn**:\n\n```yaml\n$ cd <your-project-name>\n$ yarn\n$ yarn dev\n```\n\nThis snippet shows you how to starting the dev server with yarn, which is an important aspect of quick start.\n\n**Starting the Dev Server with bun**:\n\n```yaml\n$ cd <your-project-name>\n$ bun install\n$ bun run dev\n```\n\nThis snippet shows you how to starting the dev server with bun, which is an important aspect of quick start.\n\n**Building for Production with npm**:\n\n```yaml\n$ npm run build\n```\n\nThis snippet shows you how to building for production with npm, which is an important aspect of quick start.\n\n**Building for Production with pnpm**:\n\n```yaml\n$ pnpm run build\n```\n\nThis snippet shows you how to building for production with pnpm, which is an important aspect of quick start.\n\n**Building for Production with Yarn**:\n\n```yaml\n$ yarn build\n```\n\nThis snippet shows you how to building for production with yarn, which is an important aspect of quick start.\n\n**Building for Production with bun**:\n\n```yaml\n$ bun run build\n```\n\nThis snippet shows you how to building for production with bun, which is an important aspect of quick start.\n\n**Using Vue from CDN**:\n\n```yaml\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n```\n\nThis snippet shows you how to using vue from cdn, which is an important aspect of quick start.\n\n**Using the ES Module Build**:\n\n```yaml\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\nThis snippet shows you how to using the es module build, which is an important aspect of quick start.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Quick Start in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe recommended IDE setup is [Visual Studio Code](https://code.visualstudio.com/) + [Vue - Official extension](https://marketplace.visualstudio.com/items?itemName=Vue.volar). If you use other editors, check out the [IDE support section](https://vuejs.org/guide/scaling-up/tooling#ide-support).\n\nMore tooling details, including integration with backend frameworks, are discussed in the [Tooling Guide](https://vuejs.org/guide/scaling-up/tooling).\n\nTo learn more about the underlying build tool Vite, check out the [Vite docs](https://vitejs.dev/).\n\nIf you choose to use TypeScript, check out the [TypeScript Usage Guide](https://vuejs.org/guide/typescript/overview).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/quick-start.html", "title": "Quick Start", "description": "A guide to quickly get started with Vue.js, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:07:33", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "title": "Quick Start | Vue.js", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "scrapeId": "06ffe5cb-8a54-4e8b-b417-a8a9ae9c7541", "sourceURL": "https://vuejs.org/guide/quick-start.html", "url": "https://vuejs.org/guide/quick-start.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Custom Directives is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Custom Directives in vue-guide.\n\n# Custom Directives\n\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.Here's a quick rundown of what this is about:\n\n## Introduction\n\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.\n\nWe have introduced two forms of code reuse in Vue: [components](https://vuejs.org/guide/essentials/component-basics) and [composables](https://vuejs.org/guide/reusability/composables). Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.\n\nA custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that adds a class to an element when it is inserted into the DOM by Vue:\n\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n```template\n<p v-highlight>This sentence is important!</p>\n```\n\nThis sentence is important!\n\nIn `<script setup>`, any camelCase variable that starts with the `v` prefix can be used as a custom directive. In the example above, `vHighlight` can be used in the template as `v-highlight`.\n\nIf you are not using `<script setup>`, custom directives can be registered using the `directives` option:\n\n```js\nexport default {\n  setup() {\n    /*...*/\n  },\n  directives: {\n    // enables v-highlight in template\n    highlight: {\n      /* ... */\n    }\n  }\n}\n```\n\nSimilar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via the `directives` option.\n\nIt is also common to globally register custom directives at the app level:\n\n```js\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```\n\n## When to use custom directives\n\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nA common example of this is a `v-focus` custom directive that brings an element into focus.\n\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n```\n\n```template\n<input v-focus />\n```\n\nThis directive is more useful than the `autofocus` attribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly.\n\n## Directive Hooks\n\nA directive definition object can provide several hook functions (all optional):\n\n```js\nconst myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}\n```\n\n## Hook Arguments\n\nDirective hooks are passed these arguments:\n\n- `el`: the element the directive is bound to. This can be used to directly manipulate the DOM.\n\n- `binding`: an object containing the following properties.\n\n  - `value`: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - `oldValue`: The previous value, only available in `beforeUpdate` and `updated`. It is available whether or not the value has changed.\n  - `arg`: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - `modifiers`: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n  - `instance`: The instance of the component where the directive is used.\n  - `dir`: the directive definition object.\n- `vnode`: the underlying VNode representing the bound element.\n\n- `prevVnode`: the VNode representing the bound element from the previous render. Only available in the `beforeUpdate` and `updated` hooks.\n\nAs an example, consider the following directive usage:\n\n```template\n<div v-example:foo.bar=\"baz\">\n```\n\nThe `binding` argument would be an object in the shape of:\n\n```js\n{\n  arg: 'foo',\n  modifiers: { bar: true },\n  value: /* value of `baz` */, \n  oldValue: /* value of `baz` from previous update */\n}\n```\n\nSimilar to built-in directives, custom directive arguments can be dynamic. For example:\n\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n\nHere the directive argument will be reactively updated based on `arg` property in our component state.\n\nNote\n\nApart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset).\n\n## Function Shorthand\n\nIt's common for a custom directive to have the same behavior for `mounted` and `updated`, with no need for the other hooks. In such cases we can define the directive as a function:\n\n```template\n<div v-color=\"color\"></div>\n```\n\n```js\napp.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})\n```\n\n## Object Literals\n\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```\n\n## Usage on Components\n\nNot recommended\n\nUsing custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes.\n\nWhen used on components, custom directives will always apply to a component's root node, similar to [Fallthrough Attributes](https://vuejs.org/guide/components/attrs).\n\n```template\n<MyComponent v-demo=\"test\" />\n```\n\n```template\n<!-- template of MyComponent -->\n\n<div> <!-- v-demo directive will be applied here -->\n  <span>My component content</span>\n</div>\n```\n\nNote that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element with `v-bind=\"$attrs\"`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.\n\nWe have introduced two forms of code reuse in Vue: [components](https://vuejs.org/guide/essentials/component-basics) and [composables](https://vuejs.org/guide/reusability/composables). Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.\n\nA custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that adds a class to an element when it is inserted into the DOM by Vue:\n\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n```template\n<p v-highlight>This sentence is important!</p>\n```\n\nThis sentence is important!\n\nIn `<script setup>`, any camelCase variable that starts with the `v` prefix can be used as a custom directive. In the example above, `vHighlight` can be used in the template as `v-highlight`.\n\nIf you are not using `<script setup>`, custom directives can be registered using the `directives` option:\n\n```js\nexport default {\n  setup() {\n    /*...*/\n  },\n  directives: {\n    // enables v-highlight in template\n    highlight: {\n      /* ... */\n    }\n  }\n}\n```\n\nSimilar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via the `directives` option.\n\nIt is also common to globally register custom directives at the app level:\n\n```js\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I when to use custom directives in vue-guide?\n\nAssistant: To when to use custom directives in vue-guide, here's what you do:\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nA common example of this is a `v-focus` custom directive that brings an element into focus.\n\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n```\n\n```template\n<input v-focus />\n```\n\nThis directive is more useful than the `autofocus` attribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I directive hooks in vue-guide?\n\nAssistant: To directive hooks in vue-guide, here's what you do:\nA directive definition object can provide several hook functions (all optional):\n\n```js\nconst myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hook arguments in vue-guide?\n\nAssistant: To hook arguments in vue-guide, here's what you do:\nDirective hooks are passed these arguments:\n\n- `el`: the element the directive is bound to. This can be used to directly manipulate the DOM.\n\n- `binding`: an object containing the following properties.\n\n  - `value`: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - `oldValue`: The previous value, only available in `beforeUpdate` and `updated`. It is available whether or not the value has changed.\n  - `arg`: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - `modifiers`: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n  - `instance`: The instance of the component where the directive is used.\n  - `dir`: the directive definition object.\n- `vnode`: the underlying VNode representing the bound element.\n\n- `prevVnode`: the VNode representing the bound element from the previous render. Only available in the `beforeUpdate` and `updated` hooks.\n\nAs an example, consider the following directive usage:\n\n```template\n<div v-example:foo.bar=\"baz\">\n```\n\nThe `binding` argument would be an object in the shape of:\n\n```js\n{\n  arg: 'foo',\n  modifiers: { bar: true },\n  value: /* value of `baz` */, \n  oldValue: /* value of `baz` from previous update */\n}\n```\n\nSimilar to built-in directives, custom directive arguments can be dynamic. For example:\n\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n\nHere the directive argument will be reactively updated based on `arg` property in our component state.\n\nNote\n\nApart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I function shorthand in vue-guide?\n\nAssistant: To function shorthand in vue-guide, here's what you do:\nIt's common for a custom directive to have the same behavior for `mounted` and `updated`, with no need for the other hooks. In such cases we can define the directive as a function:\n\n```template\n<div v-color=\"color\"></div>\n```\n\n```js\napp.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I object literals in vue-guide?\n\nAssistant: To object literals in vue-guide, here's what you do:\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I usage on components in vue-guide?\n\nAssistant: To usage on components in vue-guide, here's what you do:\nNot recommended\n\nUsing custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes.\n\nWhen used on components, custom directives will always apply to a component's root node, similar to [Fallthrough Attributes](https://vuejs.org/guide/components/attrs).\n\n```template\n<MyComponent v-demo=\"test\" />\n```\n\n```template\n<!-- template of MyComponent -->\n\n<div> <!-- v-demo directive will be applied here -->\n  <span>My component content</span>\n</div>\n```\n\nNote that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element with `v-bind=\"$attrs\"`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Custom Directives in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Custom Directive Example**:\n\n```yaml\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n```template\n<p v-highlight>This sentence is important!</p>\n```\n```\n\nThis snippet shows you how to custom directive example, which is an important aspect of custom directives.\n\n**Focus Directive Example**:\n\n```yaml\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n```\n\n```template\n<input v-focus />\n```\n```\n\nThis snippet shows you how to focus directive example, which is an important aspect of custom directives.\n\n**Directive Hooks Example**:\n\n```yaml\n```js\nconst myDirective = {\n  created(el, binding, vnode) {},\n  beforeMount(el, binding, vnode) {},\n  mounted(el, binding, vnode) {},\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  updated(el, binding, vnode, prevVnode) {},\n  beforeUnmount(el, binding, vnode) {},\n  unmounted(el, binding, vnode) {}\n}\n```\n```\n\nThis snippet shows you how to directive hooks example, which is an important aspect of custom directives.\n\n**Dynamic Argument Example**:\n\n```yaml\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n```\n\nThis snippet shows you how to dynamic argument example, which is an important aspect of custom directives.\n\n**Function Shorthand Example**:\n\n```yaml\n```template\n<div v-color=\"color\"></div>\n```\n\n```js\napp.directive('color', (el, binding) => {\n  el.style.color = binding.value\n})\n```\n```\n\nThis snippet shows you how to function shorthand example, which is an important aspect of custom directives.\n\n**Object Literal Example**:\n\n```yaml\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```\n```\n\nThis snippet shows you how to object literal example, which is an important aspect of custom directives.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Custom Directives in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly.\n\nApart from `el`, you should treat directive arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's dataset.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives.html", "title": "Custom Directives", "description": "In addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:12:36", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "title": "Custom Directives | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "language": "en-US", "scrapeId": "1b9b4d79-1b88-469c-a979-a92f7f26c975", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives.html", "url": "https://vuejs.org/guide/reusability/custom-directives.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Plugins is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Plugins in vue-guide.\n\n# Plugins\n\nPlugins are self-contained code that usually add app-level functionality to Vue.Here's a quick rundown of what this is about:\n\n## Introduction\n\nPlugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\nA plugin is defined as either an object that exposes an `install()` method, or simply a function that acts as the install function itself. The install function receives the app instance along with additional options passed to `app.use()`, if any:\n\n```js\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThere is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:\n\n1. Register one or more global components or custom directives with `app.component()` and `app.directive()`.\n2. Make a resource injectable throughout the app by calling `app.provide()`.\n3. Add some global instance properties or methods by attaching them to `app.config.globalProperties`.\n4. A library that needs to perform some combination of the above (e.g. vue-router).\n\n## Writing a Plugin\n\nIn order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displays `i18n` (short for Internationalization) strings.\n\nLet's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\nWe want to create a translation function. This function will receive a dot-delimited `key` string, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:\n\n```template\n<h1>{{ $translate('greetings.hello') }}</h1>\n```\n\nSince this function should be globally available in all templates, we will make it so by attaching it to `app.config.globalProperties` in our plugin:\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\nOur `$translate` function will take a string such as `greetings.hello`, look inside the user provided configuration and return the translated value.\n\nThe object containing the translated keys should be passed to the plugin during installation via additional parameters to `app.use()`:\n\n```js\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\nNow, our initial expression `$translate('greetings.hello')` will be replaced by `Bonjour!` at runtime.\n\n## Provide / Inject with Plugins\n\nPlugins also allow us to use `inject` to provide a function or attribute to the plugin's users. For example, we can allow the application to have access to the `options` parameter to be able to use the translations object.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\nPlugin users will now be able to inject the plugin options into their components using the `i18n` key:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>\n```\n\n```js\nexport default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}\n```\n\n## Bundle for NPM\n\nIf you further want to build and publish your plugin for others to use, see Vite's section on Library Mode.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "overview", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nPlugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\nA plugin is defined as either an object that exposes an `install()` method, or simply a function that acts as the install function itself. The install function receives the app instance along with additional options passed to `app.use()`, if any:\n\n```js\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThere is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:\n\n1. Register one or more global components or custom directives with `app.component()` and `app.directive()`.\n2. Make a resource injectable throughout the app by calling `app.provide()`.\n3. Add some global instance properties or methods by attaching them to `app.config.globalProperties`.\n4. A library that needs to perform some combination of the above (e.g. vue-router)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I writing a plugin in vue-guide?\n\nAssistant: To writing a plugin in vue-guide, here's what you do:\nIn order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displays `i18n` (short for Internationalization) strings.\n\nLet's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\nWe want to create a translation function. This function will receive a dot-delimited `key` string, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:\n\n```template\n<h1>{{ $translate('greetings.hello') }}</h1>\n```\n\nSince this function should be globally available in all templates, we will make it so by attaching it to `app.config.globalProperties` in our plugin:\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\nOur `$translate` function will take a string such as `greetings.hello`, look inside the user provided configuration and return the translated value.\n\nThe object containing the translated keys should be passed to the plugin during installation via additional parameters to `app.use()`:\n\n```js\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\nNow, our initial expression `$translate('greetings.hello')` will be replaced by `Bonjour!` at runtime..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide / inject with plugins in vue-guide?\n\nAssistant: To provide / inject with plugins in vue-guide, here's what you do:\nPlugins also allow us to use `inject` to provide a function or attribute to the plugin's users. For example, we can allow the application to have access to the `options` parameter to be able to use the translations object.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\nPlugin users will now be able to inject the plugin options into their components using the `i18n` key:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>\n```\n\n```js\nexport default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I bundle for npm in vue-guide?\n\nAssistant: To bundle for npm in vue-guide, here's what you do:\nIf you further want to build and publish your plugin for others to use, see Vite's section on Library Mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Plugins in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing a Plugin**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\nThis snippet shows you how to installing a plugin, which is an important aspect of plugins.\n\n**Defining a Plugin**:\n\n```yaml\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThis snippet shows you how to defining a plugin, which is an important aspect of plugins.\n\n**Setting Up the Plugin Object**:\n\n```yaml\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\nThis snippet shows you how to setting up the plugin object, which is an important aspect of plugins.\n\n**Creating a Translation Function**:\n\n```yaml\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\nThis snippet shows you how to creating a translation function, which is an important aspect of plugins.\n\n**Using the Plugin**:\n\n```yaml\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\nThis snippet shows you how to using the plugin, which is an important aspect of plugins.\n\n**Providing Options to Plugin Users**:\n\n```yaml\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\nThis snippet shows you how to providing options to plugin users, which is an important aspect of plugins.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "code_examples", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Plugins in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse global properties scarcely, since it can quickly become confusing if too many global properties injected by different plugins are used throughout an app.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins.html", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:13:02", "type": "best_practices", "page_metadata": {"language": "en-US", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:card": "summary", "og:url": "https://vuejs.org/", "title": "Plugins | Vue.js", "twitter:site": "@vuejs", "scrapeId": "7f835a70-02a4-473b-95fa-9133c6b1e746", "sourceURL": "https://vuejs.org/guide/reusability/plugins.html", "url": "https://vuejs.org/guide/reusability/plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Routing is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Routing in vue-guide.\n\n# Routing\n\nThis page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.Here's a quick rundown of what this is about:\n\n## Client-Side vs. Server-Side Routing\n\nRouting on the server side means the server is sending a response based on the URL path that the user is visiting. When we click on a link in a traditional server-rendered web app, the browser receives an HTML response from the server and reloads the entire page with the new HTML.\n\nIn a Single-Page Application (SPA), however, the client-side JavaScript can intercept the navigation, dynamically fetch new data, and update the current page without full page reloads. This typically results in a more snappy user experience, especially for use cases that are more like actual \"applications\", where the user is expected to perform many interactions over a long period of time.\n\nIn such SPAs, the \"routing\" is done on the client side, in the browser. A client-side router is responsible for managing the application's rendered view using browser APIs such as History API or the `hashchange` event.\n\n## Official Router\n\nVue is well-suited for building SPAs. For most SPAs, it's recommended to use the officially-supported Vue Router library. For more details, see Vue Router's documentation.\n\n## Simple Routing from Scratch\n\nIf you only need very simple routing and do not wish to involve a full-featured router library, you can do so with Dynamic Components and update the current component state by listening to browser `hashchange` events or using the History API.\n\nHere's a bare-bone example:\n\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I client-side vs. server-side routing in vue-guide?\n\nAssistant: To client-side vs. server-side routing in vue-guide, here's what you do:\nRouting on the server side means the server is sending a response based on the URL path that the user is visiting. When we click on a link in a traditional server-rendered web app, the browser receives an HTML response from the server and reloads the entire page with the new HTML.\n\nIn a Single-Page Application (SPA), however, the client-side JavaScript can intercept the navigation, dynamically fetch new data, and update the current page without full page reloads. This typically results in a more snappy user experience, especially for use cases that are more like actual \"applications\", where the user is expected to perform many interactions over a long period of time.\n\nIn such SPAs, the \"routing\" is done on the client side, in the browser. A client-side router is responsible for managing the application's rendered view using browser APIs such as History API or the `hashchange` event..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I official router in vue-guide?\n\nAssistant: To official router in vue-guide, here's what you do:\nVue is well-suited for building SPAs. For most SPAs, it's recommended to use the officially-supported Vue Router library. For more details, see Vue Router's documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I simple routing from scratch in vue-guide?\n\nAssistant: To simple routing from scratch in vue-guide, here's what you do:\nIf you only need very simple routing and do not wish to involve a full-featured router library, you can do so with Dynamic Components and update the current component state by listening to browser `hashchange` events or using the History API.\n\nHere's a bare-bone example:\n\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Routing in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Simple Routing Example (Composition API)**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n```\n\nThis snippet shows you how to simple routing example (composition api), which is an important aspect of routing.\n\n**Simple Routing Example (Options API)**:\n\n```yaml\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n```\n\nThis snippet shows you how to simple routing example (options api), which is an important aspect of routing.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Routing in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor most SPAs, it's recommended to use the officially-supported Vue Router library for better functionality and support.\n\nIf you only need simple routing, consider using Dynamic Components and listening to `hashchange` events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing.html", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:14:27", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "title": "Routing | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "1458b6b6-d781-4de6-89f4-de44b376ac94", "sourceURL": "https://vuejs.org/guide/scaling-up/routing.html", "url": "https://vuejs.org/guide/scaling-up/routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Single-File Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Single-File Components in vue-guide.\n\n# Single-File Components\n\nVue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.Here's a quick rundown of what this is about:\n\n## Introduction\n\nVue Single-File Components (a.k.a. `*.vue` files, abbreviated as **SFC**) is a special file format that allows us to encapsulate the template, logic, **and** styling of a Vue component in a single file. Here's an example SFC:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nAs we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The `<template>`, `<script>`, and `<style>` blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in the [SFC Syntax Specification](https://vuejs.org/api/sfc-spec).\n\n## Why SFC\n\nWhile SFCs require a build step, there are numerous benefits in return:\n\n- Author modularized components using familiar HTML, CSS and JavaScript syntax\n- [Colocation of inherently coupled concerns](https://vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns)\n- Pre-compiled templates without runtime compilation cost\n- [Component-scoped CSS](https://vuejs.org/api/sfc-css-features)\n- [More ergonomic syntax when working with Composition API](https://vuejs.org/api/sfc-script-setup)\n- More compile-time optimizations by cross-analyzing template and script\n- [IDE support](https://vuejs.org/guide/scaling-up/tooling#ide-support) with auto-completion and type-checking for template expressions\n- Out-of-the-box Hot-Module Replacement (HMR) support\n\nSFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:\n\n- Single-Page Applications (SPA)\n- Static Site Generation (SSG)\n- Any non-trivial frontend where a build step can be justified for better development experience (DX).\n\nThat said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check out [petite-vue](https://github.com/vuejs/petite-vue), a 6 kB subset of Vue optimized for progressive enhancement.\n\n## How It Works\n\nVue SFC is a framework-specific file format and must be pre-compiled by [@vue/compiler-sfc](https://github.com/vuejs/core/tree/main/packages/compiler-sfc) into standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:\n\n```js\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\n`<style>` tags inside SFCs are typically injected as native `<style>` tags during development to support hot updates. For production they can be extracted and merged into a single CSS file.\n\nYou can play with SFCs and explore how they are compiled in the [Vue SFC Playground](https://play.vuejs.org/).\n\nIn actual projects, we typically integrate the SFC compiler with a build tool such as [Vite](https://vitejs.dev/) or [Vue CLI](http://cli.vuejs.org/) (which is based on [webpack](https://webpack.js.org/)), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in the [SFC Tooling](https://vuejs.org/guide/scaling-up/tooling) section.\n\n## What About Separation of Concerns?\n\nSome users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!\n\nTo answer this question, it is important for us to agree that **separation of concerns is not equal to the separation of file types**. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications.\n\nIn modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable.\n\nNote even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files using [Src Imports](https://vuejs.org/api/sfc-spec#src-imports).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "overview", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nVue Single-File Components (a.k.a. `*.vue` files, abbreviated as **SFC**) is a special file format that allows us to encapsulate the template, logic, **and** styling of a Vue component in a single file. Here's an example SFC:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nAs we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The `<template>`, `<script>`, and `<style>` blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in the [SFC Syntax Specification](https://vuejs.org/api/sfc-spec)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why sfc in vue-guide?\n\nAssistant: To why sfc in vue-guide, here's what you do:\nWhile SFCs require a build step, there are numerous benefits in return:\n\n- Author modularized components using familiar HTML, CSS and JavaScript syntax\n- [Colocation of inherently coupled concerns](https://vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns)\n- Pre-compiled templates without runtime compilation cost\n- [Component-scoped CSS](https://vuejs.org/api/sfc-css-features)\n- [More ergonomic syntax when working with Composition API](https://vuejs.org/api/sfc-script-setup)\n- More compile-time optimizations by cross-analyzing template and script\n- [IDE support](https://vuejs.org/guide/scaling-up/tooling#ide-support) with auto-completion and type-checking for template expressions\n- Out-of-the-box Hot-Module Replacement (HMR) support\n\nSFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:\n\n- Single-Page Applications (SPA)\n- Static Site Generation (SSG)\n- Any non-trivial frontend where a build step can be justified for better development experience (DX).\n\nThat said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check out [petite-vue](https://github.com/vuejs/petite-vue), a 6 kB subset of Vue optimized for progressive enhancement..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I how it works in vue-guide?\n\nAssistant: To how it works in vue-guide, here's what you do:\nVue SFC is a framework-specific file format and must be pre-compiled by [@vue/compiler-sfc](https://github.com/vuejs/core/tree/main/packages/compiler-sfc) into standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:\n\n```js\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\n`<style>` tags inside SFCs are typically injected as native `<style>` tags during development to support hot updates. For production they can be extracted and merged into a single CSS file.\n\nYou can play with SFCs and explore how they are compiled in the [Vue SFC Playground](https://play.vuejs.org/).\n\nIn actual projects, we typically integrate the SFC compiler with a build tool such as [Vite](https://vitejs.dev/) or [Vue CLI](http://cli.vuejs.org/) (which is based on [webpack](https://webpack.js.org/)), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in the [SFC Tooling](https://vuejs.org/guide/scaling-up/tooling) section..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what about separation of concerns? in vue-guide?\n\nAssistant: To what about separation of concerns? in vue-guide, here's what you do:\nSome users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!\n\nTo answer this question, it is important for us to agree that **separation of concerns is not equal to the separation of file types**. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications.\n\nIn modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable.\n\nNote even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files using [Src Imports](https://vuejs.org/api/sfc-spec#src-imports)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Single-File Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example SFC**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to example sfc, which is an important aspect of single-file components.\n\n**Example SFC with Script Setup**:\n\n```yaml\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to example sfc with script setup, which is an important aspect of single-file components.\n\n**Importing an SFC**:\n\n```yaml\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\nThis snippet shows you how to importing an sfc, which is an important aspect of single-file components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Single-File Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSFCs are recommended for Single-Page Applications (SPA) and Static Site Generation (SSG).\n\nUse Vue SFC for any non-trivial frontend where a build step can be justified for better development experience (DX).\n\nConsider using petite-vue for enhancing largely static HTML with light interactions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc.html", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:14:55", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "og:url": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Single-File Components | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "294e3a59-b946-410f-9a20-c05da3c47b21", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc.html", "url": "https://vuejs.org/guide/scaling-up/sfc.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what State Management is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain State Management in vue-guide.\n\n# State Management\n\nThis page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.Here's a quick rundown of what this is about:\n\n## What is State Management?\n\nTechnically, every Vue component instance already \"manages\" its own reactive state. Take a simple counter component as an example:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\n```vue\n<script>\nexport default {\n  // state\n  data() {\n    return {\n      count: 0\n    }\n  },\n  // actions\n  methods: {\n    increment() {\n      this.count++\n    }\n  }\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\nIt is a self-contained unit with the following parts:\n\n- The **state**, the source of truth that drives our app;\n- The **view**, a declarative mapping of the **state**;\n- The **actions**, the possible ways the state could change in reaction to user inputs from the **view**.\n\nThis is a simple representation of the concept of \"one-way data flow\":\n\n![state flow diagram](https://vuejs.org/assets/state-flow.Cd6No79V.png)\n\nHowever, the simplicity starts to break down when we have **multiple components that share a common state**:\n\n1. Multiple views may depend on the same piece of state.\n2. Actions from different views may need to mutate the same piece of state.\n\nFor case one, a possible workaround is by \"lifting\" the shared state up to a common ancestor component, and then pass it down as props. However, this quickly gets tedious in component trees with deep hierarchies, leading to another problem known as [Prop Drilling](https://vuejs.org/guide/components/provide-inject#prop-drilling).\n\nFor case two, we often find ourselves resorting to solutions such as reaching for direct parent / child instances via template refs, or trying to mutate and synchronize multiple copies of the state via emitted events. Both of these patterns are brittle and quickly lead to unmaintainable code.\n\nA simpler and more straightforward solution is to extract the shared state out of the components, and manage it in a global singleton. With this, our component tree becomes a big \"view\", and any component can access the state or trigger actions, no matter where they are in the tree!\n\n## Simple State Management with Reactivity API\n\nIn Options API, reactive data is declared using the `data()` option. Internally, the object returned by `data()` is made reactive via the [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) function, which is also available as a public API.\n\nIf you have a piece of state that should be shared by multiple instances, you can use [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) to create a reactive object, and then import it into multiple components:\n\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})\n```\n\n```vue\n<!-- ComponentA.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentB.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentA.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n}\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentB.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n}\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\nNow whenever the `store` object is mutated, both `<ComponentA>` and `<ComponentB>` will update their views automatically - we have a single source of truth now.\n\nHowever, this also means any component importing `store` can mutate it however they want:\n\n```template\n<template>\n  <button @click=\"store.count++\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\nWhile this works in simple cases, global state that can be arbitrarily mutated by any component is not going to be very maintainable in the long run. To ensure the state-mutating logic is centralized like the state itself, it is recommended to define methods on the store with names that express the intention of the actions:\n\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})\n```\n\n```template\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\nTIP: Note the click handler uses `store.increment()` with parentheses - this is necessary to call the method with the proper `this` context since it's not a component method.\n\nAlthough here we are using a single reactive object as a store, you can also share reactive state created using other [Reactivity APIs](https://vuejs.org/api/reactivity-core) such as `ref()` or `computed()`, or even return global state from a [Composable](https://vuejs.org/guide/reusability/composables):\n\n```js\nimport { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}\n}\n```\n\nThe fact that Vue's reactivity system is decoupled from the component model makes it extremely flexible.\n\n## SSR Considerations\n\nIf you are building an application that leverages [Server-Side Rendering (SSR)](https://vuejs.org/guide/scaling-up/ssr), the above pattern can lead to issues due to the store being a singleton shared across multiple requests. This is discussed in [more details](https://vuejs.org/guide/scaling-up/ssr#cross-request-state-pollution) in the SSR guide.\n\n## Pinia\n\nWhile our hand-rolled state management solution will suffice in simple scenarios, there are many more things to consider in large-scale production applications:\n\n- Stronger conventions for team collaboration\n- Integrating with the Vue DevTools, including timeline, in-component inspection, and time-travel debugging\n- Hot Module Replacement\n- Server-Side Rendering support\n\n[Pinia](https://pinia.vuejs.org/) is a state management library that implements all of the above. It is maintained by the Vue core team, and works with both Vue 2 and Vue 3.\n\nExisting users may be familiar with [Vuex](https://vuex.vuejs.org/), the previous official state management library for Vue. With Pinia serving the same role in the ecosystem, Vuex is now in maintenance mode. It still works, but will no longer receive new features. It is recommended to use Pinia for new applications.\n\nPinia started out as an exploration of what the next iteration of Vuex could look like, incorporating many ideas from core team discussions for Vuex 5. Eventually, we realized that Pinia already implements most of what we wanted in Vuex 5, and decided to make it the new recommendation instead.\n\nCompared to Vuex, Pinia provides a simpler API with less ceremony, offers Composition-API-style APIs, and most importantly, has solid type inference support when used with TypeScript.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is state management? in vue-guide?\n\nAssistant: To what is state management? in vue-guide, here's what you do:\nTechnically, every Vue component instance already \"manages\" its own reactive state. Take a simple counter component as an example:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\n```vue\n<script>\nexport default {\n  // state\n  data() {\n    return {\n      count: 0\n    }\n  },\n  // actions\n  methods: {\n    increment() {\n      this.count++\n    }\n  }\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n\nIt is a self-contained unit with the following parts:\n\n- The **state**, the source of truth that drives our app;\n- The **view**, a declarative mapping of the **state**;\n- The **actions**, the possible ways the state could change in reaction to user inputs from the **view**.\n\nThis is a simple representation of the concept of \"one-way data flow\":\n\n![state flow diagram](https://vuejs.org/assets/state-flow.Cd6No79V.png)\n\nHowever, the simplicity starts to break down when we have **multiple components that share a common state**:\n\n1. Multiple views may depend on the same piece of state.\n2. Actions from different views may need to mutate the same piece of state.\n\nFor case one, a possible workaround is by \"lifting\" the shared state up to a common ancestor component, and then pass it down as props. However, this quickly gets tedious in component trees with deep hierarchies, leading to another problem known as [Prop Drilling](https://vuejs.org/guide/components/provide-inject#prop-drilling).\n\nFor case two, we often find ourselves resorting to solutions such as reaching for direct parent / child instances via template refs, or trying to mutate and synchronize multiple copies of the state via emitted events. Both of these patterns are brittle and quickly lead to unmaintainable code.\n\nA simpler and more straightforward solution is to extract the shared state out of the components, and manage it in a global singleton. With this, our component tree becomes a big \"view\", and any component can access the state or trigger actions, no matter where they are in the tree!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I simple state management with reactivity api in vue-guide?\n\nAssistant: To simple state management with reactivity api in vue-guide, here's what you do:\nIn Options API, reactive data is declared using the `data()` option. Internally, the object returned by `data()` is made reactive via the [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) function, which is also available as a public API.\n\nIf you have a piece of state that should be shared by multiple instances, you can use [`reactive()`](https://vuejs.org/api/reactivity-core#reactive) to create a reactive object, and then import it into multiple components:\n\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})\n```\n\n```vue\n<!-- ComponentA.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentB.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentA.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n}\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n\n```vue\n<!-- ComponentB.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n}\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n\nNow whenever the `store` object is mutated, both `<ComponentA>` and `<ComponentB>` will update their views automatically - we have a single source of truth now.\n\nHowever, this also means any component importing `store` can mutate it however they want:\n\n```template\n<template>\n  <button @click=\"store.count++\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\nWhile this works in simple cases, global state that can be arbitrarily mutated by any component is not going to be very maintainable in the long run. To ensure the state-mutating logic is centralized like the state itself, it is recommended to define methods on the store with names that express the intention of the actions:\n\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})\n```\n\n```template\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n\nTIP: Note the click handler uses `store.increment()` with parentheses - this is necessary to call the method with the proper `this` context since it's not a component method.\n\nAlthough here we are using a single reactive object as a store, you can also share reactive state created using other [Reactivity APIs](https://vuejs.org/api/reactivity-core) such as `ref()` or `computed()`, or even return global state from a [Composable](https://vuejs.org/guide/reusability/composables):\n\n```js\nimport { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}\n}\n```\n\nThe fact that Vue's reactivity system is decoupled from the component model makes it extremely flexible..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ssr considerations in vue-guide?\n\nAssistant: To ssr considerations in vue-guide, here's what you do:\nIf you are building an application that leverages [Server-Side Rendering (SSR)](https://vuejs.org/guide/scaling-up/ssr), the above pattern can lead to issues due to the store being a singleton shared across multiple requests. This is discussed in [more details](https://vuejs.org/guide/scaling-up/ssr#cross-request-state-pollution) in the SSR guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I pinia in vue-guide?\n\nAssistant: To pinia in vue-guide, here's what you do:\nWhile our hand-rolled state management solution will suffice in simple scenarios, there are many more things to consider in large-scale production applications:\n\n- Stronger conventions for team collaboration\n- Integrating with the Vue DevTools, including timeline, in-component inspection, and time-travel debugging\n- Hot Module Replacement\n- Server-Side Rendering support\n\n[Pinia](https://pinia.vuejs.org/) is a state management library that implements all of the above. It is maintained by the Vue core team, and works with both Vue 2 and Vue 3.\n\nExisting users may be familiar with [Vuex](https://vuex.vuejs.org/), the previous official state management library for Vue. With Pinia serving the same role in the ecosystem, Vuex is now in maintenance mode. It still works, but will no longer receive new features. It is recommended to use Pinia for new applications.\n\nPinia started out as an exploration of what the next iteration of Vuex could look like, incorporating many ideas from core team discussions for Vuex 5. Eventually, we realized that Pinia already implements most of what we wanted in Vuex 5, and decided to make it the new recommendation instead.\n\nCompared to Vuex, Pinia provides a simpler API with less ceremony, offers Composition-API-style APIs, and most importantly, has solid type inference support when used with TypeScript..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for State Management in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter Component Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>\n```\n```\n\nThis snippet shows you how to counter component example, which is an important aspect of state management.\n\n**Store Example**:\n\n```yaml\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})\n```\n```\n\nThis snippet shows you how to store example, which is an important aspect of state management.\n\n**Component A Example**:\n\n```yaml\n```vue\n<!-- ComponentA.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From A: {{ store.count }}</template>\n```\n```\n\nThis snippet shows you how to component a example, which is an important aspect of state management.\n\n**Component B Example**:\n\n```yaml\n```vue\n<!-- ComponentB.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From B: {{ store.count }}</template>\n```\n```\n\nThis snippet shows you how to component b example, which is an important aspect of state management.\n\n**Store with Increment Method Example**:\n\n```yaml\n```js\n// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})\n```\n```\n\nThis snippet shows you how to store with increment method example, which is an important aspect of state management.\n\n**Button Click Example**:\n\n```yaml\n```template\n<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>\n```\n```\n\nThis snippet shows you how to button click example, which is an important aspect of state management.\n\n**Global State Example**:\n\n```yaml\n```js\nimport { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}\n}\n```\n```\n\nThis snippet shows you how to global state example, which is an important aspect of state management.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using State Management in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote the click handler uses `store.increment()` with parentheses - this is necessary to call the method with the proper `this` context since it's not a component method.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/state-management.html", "title": "State Management", "description": "This page covers the concept of state management in Vue, including how to manage shared state across components and introduces the Pinia state management library.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:19:31", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "title": "State Management | Vue.js", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "7010358b-ab79-46cf-83c2-7449b9a2dca1", "sourceURL": "https://vuejs.org/guide/scaling-up/state-management.html", "url": "https://vuejs.org/guide/scaling-up/state-management.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Testing is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Testing in vue-guide.\n\n# Testing\n\nThis page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.Here's a quick rundown of what this is about:\n\n## Why Test?\n\nAutomated tests help you and your team build complex Vue applications quickly and confidently by preventing regressions and encouraging you to break apart your application into testable functions, modules, classes, and components. As with any application, your new Vue app can break in many ways, and it's important that you can catch these issues and fix them before releasing.\n\nIn this guide, we'll cover basic terminology and provide our recommendations on which tools to choose for your Vue 3 application.\n\nThere is one Vue-specific section covering composables.\n\n## When to Test\n\nStart testing early! We recommend you begin writing tests as soon as you can. The longer you wait to add tests to your application, the more dependencies your application will have, and the harder it will be to start.\n\n## Testing Types\n\nWhen designing your Vue application's testing strategy, you should leverage the following testing types:\n\n- **Unit**: Checks that inputs to a given function, class, or composable are producing the expected output or side effects.\n- **Component**: Checks that your component mounts, renders, can be interacted with, and behaves as expected. These tests import more code than unit tests, are more complex, and require more time to execute.\n- **End-to-end**: Checks features that span multiple pages and makes real network requests against your production-built Vue application. These tests often involve standing up a database or other backend.\n\nEach testing type plays a role in your application's testing strategy, and each will protect you against different types of issues.\n\n## Overview\n\nWe will briefly discuss what each of these are, how they can be implemented for Vue applications, and provide some general recommendations.\n\n## Unit Testing\n\nUnit tests are written to verify that small, isolated units of code are working as expected. A unit test usually covers a single function, class, composable, or module. Unit tests focus on logical correctness and only concern themselves with a small portion of the application's overall functionality. They may mock large parts of your application's environment (e.g. initial state, complex classes, 3rd party modules, and network requests).\n\nIn general, unit tests will catch issues with a function's business logic and logical correctness.\n\nTake for example this `increment` function:\n\n```javascript\n// helpers.js\nexport function increment(current, max = 10) {\n  if (current < max) {\n    return current + 1\n  }\n  return current\n}\n```\n\nBecause it's very self-contained, it'll be easy to invoke the increment function and assert that it returns what it's supposed to, so we'll write a Unit Test.\n\nIf any of these assertions fail, it's clear that the issue is contained within the `increment` function.\n\n```javascript\n// helpers.spec.js\nimport { increment } from './helpers'\n\ndescribe('increment', () => {\n  test('increments the current number by 1', () => {\n    expect(increment(0, 10)).toBe(1)\n  })\n\n  test('does not increment the current number over the max', () => {\n    expect(increment(10, 10)).toBe(10)\n  })\n\n  test('has a default max of 10', () => {\n    expect(increment(10)).toBe(10)\n  })\n})\n```\n\nAs mentioned previously, unit testing is typically applied to self-contained business logic, components, classes, modules, or functions that do not involve UI rendering, network requests, or other environmental concerns.\n\n## Composables\n\nOne category of functions specific to Vue applications is Composables, which may require special handling during tests.\n\n## Unit Testing Components\n\nA component can be tested in two ways:\n\n1. Whitebox: Unit Testing\n\nTests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused on **isolating** the component under test.\n\n2. Blackbox: Component Testing\n\nTests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system.\n\n## Recommendation\n\n- [Vitest](https://vitest.dev/)\n\nSince the official setup created by `create-vue` is based on [Vite](https://vitejs.dev/), we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite. [Vitest](https://vitest.dev/) is a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members.\n\n## Other Options\n\n- [Jest](https://jestjs.io/) is a popular unit testing framework. However, we only recommend Jest if you have an existing Jest test suite that needs to be migrated over to a Vite-based project.\n\n## Component Testing\n\nIn Vue applications, components are the main building blocks of the UI. Components are therefore the natural unit of isolation when it comes to validating your application's behavior. From a granularity perspective, component testing sits somewhere above unit testing and can be considered a form of integration testing.\n\n## E2E Testing\n\nWhile unit tests provide developers with some degree of confidence, unit and component tests are limited in their abilities to provide holistic coverage of an application when deployed to production. As a result, end-to-end (E2E) tests provide coverage on what is arguably the most important aspect of an application: what happens when users actually use your applications.\n\n## Choosing an E2E Testing Solution\n\nWhile end-to-end (E2E) testing on the web has gained a negative reputation for unreliable (flaky) tests and slowing down development processes, modern E2E tools have made strides forward to create more reliable, interactive, and useful tests.\n\n## Recommendation\n\n- [Playwright](https://playwright.dev/) is a great E2E testing solution that supports Chromium, WebKit, and Firefox.\n\n## Other Options\n\n- [Nightwatch](https://nightwatchjs.org/) is an E2E testing solution based on [Selenium WebDriver](https://www.npmjs.com/package/selenium-webdriver).\n\n## Recipes\n\n### Adding Vitest to a Project\n\nIn a Vite-based Vue project, run:\n\n```sh\n> npm install -D vitest happy-dom @testing-library/vue\n```\n\nNext, update the Vite configuration to add the `test` option block:\n\n```javascript\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})\n```\n\nTIP\n\nIf you use TypeScript, add `vitest/globals` to the `types` field in your `tsconfig.json`.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\"]\n  }\n}\n```\n\nThen, create a file ending in `*.test.js` in your project. You can place all test files in a test directory in the project root or in test directories next to your source files. Vitest will automatically search for them using the naming convention.\n\n```javascript\n// MyComponent.test.js\nimport { render } from '@testing-library/vue'\nimport MyComponent from './MyComponent.vue'\n\ntest('it should work', () => {\n  const { getByText } = render(MyComponent, {\n    props: {\n      /* ... */\n    }\n  })\n\n  // assert output\n  getByText('...')\n})\n```\n\nFinally, update `package.json` to add the test script and run it:\n\n```json\n{\n  // ...\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\n```sh\n> npm test\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why test? in vue-guide?\n\nAssistant: To why test? in vue-guide, here's what you do:\nAutomated tests help you and your team build complex Vue applications quickly and confidently by preventing regressions and encouraging you to break apart your application into testable functions, modules, classes, and components. As with any application, your new Vue app can break in many ways, and it's important that you can catch these issues and fix them before releasing.\n\nIn this guide, we'll cover basic terminology and provide our recommendations on which tools to choose for your Vue 3 application.\n\nThere is one Vue-specific section covering composables..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I when to test in vue-guide?\n\nAssistant: To when to test in vue-guide, here's what you do:\nStart testing early! We recommend you begin writing tests as soon as you can. The longer you wait to add tests to your application, the more dependencies your application will have, and the harder it will be to start..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I testing types in vue-guide?\n\nAssistant: To testing types in vue-guide, here's what you do:\nWhen designing your Vue application's testing strategy, you should leverage the following testing types:\n\n- **Unit**: Checks that inputs to a given function, class, or composable are producing the expected output or side effects.\n- **Component**: Checks that your component mounts, renders, can be interacted with, and behaves as expected. These tests import more code than unit tests, are more complex, and require more time to execute.\n- **End-to-end**: Checks features that span multiple pages and makes real network requests against your production-built Vue application. These tests often involve standing up a database or other backend.\n\nEach testing type plays a role in your application's testing strategy, and each will protect you against different types of issues..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I overview in vue-guide?\n\nAssistant: To overview in vue-guide, here's what you do:\nWe will briefly discuss what each of these are, how they can be implemented for Vue applications, and provide some general recommendations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I unit testing in vue-guide?\n\nAssistant: To unit testing in vue-guide, here's what you do:\nUnit tests are written to verify that small, isolated units of code are working as expected. A unit test usually covers a single function, class, composable, or module. Unit tests focus on logical correctness and only concern themselves with a small portion of the application's overall functionality. They may mock large parts of your application's environment (e.g. initial state, complex classes, 3rd party modules, and network requests).\n\nIn general, unit tests will catch issues with a function's business logic and logical correctness.\n\nTake for example this `increment` function:\n\n```javascript\n// helpers.js\nexport function increment(current, max = 10) {\n  if (current < max) {\n    return current + 1\n  }\n  return current\n}\n```\n\nBecause it's very self-contained, it'll be easy to invoke the increment function and assert that it returns what it's supposed to, so we'll write a Unit Test.\n\nIf any of these assertions fail, it's clear that the issue is contained within the `increment` function.\n\n```javascript\n// helpers.spec.js\nimport { increment } from './helpers'\n\ndescribe('increment', () => {\n  test('increments the current number by 1', () => {\n    expect(increment(0, 10)).toBe(1)\n  })\n\n  test('does not increment the current number over the max', () => {\n    expect(increment(10, 10)).toBe(10)\n  })\n\n  test('has a default max of 10', () => {\n    expect(increment(10)).toBe(10)\n  })\n})\n```\n\nAs mentioned previously, unit testing is typically applied to self-contained business logic, components, classes, modules, or functions that do not involve UI rendering, network requests, or other environmental concerns..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I composables in vue-guide?\n\nAssistant: To composables in vue-guide, here's what you do:\nOne category of functions specific to Vue applications is Composables, which may require special handling during tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I unit testing components in vue-guide?\n\nAssistant: To unit testing components in vue-guide, here's what you do:\nA component can be tested in two ways:\n\n1. Whitebox: Unit Testing\n\nTests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused on **isolating** the component under test.\n\n2. Blackbox: Component Testing\n\nTests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recommendation in vue-guide?\n\nAssistant: To recommendation in vue-guide, here's what you do:\n- [Vitest](https://vitest.dev/)\n\nSince the official setup created by `create-vue` is based on [Vite](https://vitejs.dev/), we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite. [Vitest](https://vitest.dev/) is a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I other options in vue-guide?\n\nAssistant: To other options in vue-guide, here's what you do:\n- [Jest](https://jestjs.io/) is a popular unit testing framework. However, we only recommend Jest if you have an existing Jest test suite that needs to be migrated over to a Vite-based project..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I component testing in vue-guide?\n\nAssistant: To component testing in vue-guide, here's what you do:\nIn Vue applications, components are the main building blocks of the UI. Components are therefore the natural unit of isolation when it comes to validating your application's behavior. From a granularity perspective, component testing sits somewhere above unit testing and can be considered a form of integration testing..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I e2e testing in vue-guide?\n\nAssistant: To e2e testing in vue-guide, here's what you do:\nWhile unit tests provide developers with some degree of confidence, unit and component tests are limited in their abilities to provide holistic coverage of an application when deployed to production. As a result, end-to-end (E2E) tests provide coverage on what is arguably the most important aspect of an application: what happens when users actually use your applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I choosing an e2e testing solution in vue-guide?\n\nAssistant: To choosing an e2e testing solution in vue-guide, here's what you do:\nWhile end-to-end (E2E) testing on the web has gained a negative reputation for unreliable (flaky) tests and slowing down development processes, modern E2E tools have made strides forward to create more reliable, interactive, and useful tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recommendation in vue-guide?\n\nAssistant: To recommendation in vue-guide, here's what you do:\n- [Playwright](https://playwright.dev/) is a great E2E testing solution that supports Chromium, WebKit, and Firefox..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I other options in vue-guide?\n\nAssistant: To other options in vue-guide, here's what you do:\n- [Nightwatch](https://nightwatchjs.org/) is an E2E testing solution based on [Selenium WebDriver](https://www.npmjs.com/package/selenium-webdriver)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recipes in vue-guide?\n\nAssistant: To recipes in vue-guide, here's what you do:\n### Adding Vitest to a Project\n\nIn a Vite-based Vue project, run:\n\n```sh\n> npm install -D vitest happy-dom @testing-library/vue\n```\n\nNext, update the Vite configuration to add the `test` option block:\n\n```javascript\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})\n```\n\nTIP\n\nIf you use TypeScript, add `vitest/globals` to the `types` field in your `tsconfig.json`.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\"]\n  }\n}\n```\n\nThen, create a file ending in `*.test.js` in your project. You can place all test files in a test directory in the project root or in test directories next to your source files. Vitest will automatically search for them using the naming convention.\n\n```javascript\n// MyComponent.test.js\nimport { render } from '@testing-library/vue'\nimport MyComponent from './MyComponent.vue'\n\ntest('it should work', () => {\n  const { getByText } = render(MyComponent, {\n    props: {\n      /* ... */\n    }\n  })\n\n  // assert output\n  getByText('...')\n})\n```\n\nFinally, update `package.json` to add the test script and run it:\n\n```json\n{\n  // ...\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\n```sh\n> npm test\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Testing in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Increment Function**:\n\n```yaml\n// helpers.js\nexport function increment(current, max = 10) {\n  if (current < max) {\n    return current + 1\n  }\n  return current\n}\n```\n\nThis snippet shows you how to increment function, which is an important aspect of testing.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Testing in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStart testing early!\n\nTest what a component does, not how it does it.\n\nFor Visual logic: assert correct render output based on inputted props and slots.\n\nFor Behavioral logic: assert correct render updates or emitted events in response to user input events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing.html", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 02:20:11", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "title": "Testing | Vue.js", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "aa4ce9e9-3851-4308-a88f-673b8eb8e028", "sourceURL": "https://vuejs.org/guide/scaling-up/testing.html", "url": "https://vuejs.org/guide/scaling-up/testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Tooling is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Tooling in vue-guide.\n\n# Tooling\n\nThis page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.Here's a quick rundown of what this is about:\n\n## Try It Online\n\nYou don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:\n\n- [Vue SFC Playground](https://play.vuejs.org/)\n  - Always deployed from latest commit\n  - Designed for inspecting component compilation results\n- [Vue + Vite on StackBlitz](https://vite.new/vue)\n  - IDE-like environment running actual Vite dev server in the browser\n  - Closest to local setup\n\nIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs.\n\n## Project Scaffolding\n\n### Vite\n[Vite](https://vitejs.dev/) is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!\n\nTo get started with Vite + Vue, simply run:\n\nnpm\n\npnpm\n\nyarn\n\nbun\n\nsh\n\n```\n$ npm create vue@latest\n```\n\nsh\n\n```\n$ pnpm create vue@latest\n```\n\nsh\n\n```\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nsh\n\n```\n$ bun create vue@latest\n```\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool.\n\n- To learn more about Vite, check out the [Vite docs](https://vitejs.dev/).\n- To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for [@vitejs/plugin-vue](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme).\n\nBoth online playgrounds mentioned above also support downloading files as a Vite project.\n\n### Vue CLI\n[Vue CLI](https://cli.vuejs.org/) is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.\n\nFor information on migrating from Vue CLI to Vite:\n\n- [Vue CLI -> Vite Migration Guide from VueSchool.io](https://vueschool.io/articles/vuejs-tutorials/how-to-migrate-from-vue-cli-to-vite/)\n- [Tools / Plugins that help with auto migration](https://github.com/vitejs/awesome-vite#vue-cli)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling.html", "title": "Tooling", "description": "This page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:21:38", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Tooling | Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "scrapeId": "692a9eeb-d710-40e9-9be2-04fbde3a56f9", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling.html", "url": "https://vuejs.org/guide/scaling-up/tooling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I try it online in vue-guide?\n\nAssistant: To try it online in vue-guide, here's what you do:\nYou don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:\n\n- [Vue SFC Playground](https://play.vuejs.org/)\n  - Always deployed from latest commit\n  - Designed for inspecting component compilation results\n- [Vue + Vite on StackBlitz](https://vite.new/vue)\n  - IDE-like environment running actual Vite dev server in the browser\n  - Closest to local setup\n\nIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling.html", "title": "Tooling", "description": "This page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:21:38", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Tooling | Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "scrapeId": "692a9eeb-d710-40e9-9be2-04fbde3a56f9", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling.html", "url": "https://vuejs.org/guide/scaling-up/tooling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I project scaffolding in vue-guide?\n\nAssistant: To project scaffolding in vue-guide, here's what you do:\n### Vite\n[Vite](https://vitejs.dev/) is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!\n\nTo get started with Vite + Vue, simply run:\n\nnpm\n\npnpm\n\nyarn\n\nbun\n\nsh\n\n```\n$ npm create vue@latest\n```\n\nsh\n\n```\n$ pnpm create vue@latest\n```\n\nsh\n\n```\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nsh\n\n```\n$ bun create vue@latest\n```\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool.\n\n- To learn more about Vite, check out the [Vite docs](https://vitejs.dev/).\n- To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for [@vitejs/plugin-vue](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme).\n\nBoth online playgrounds mentioned above also support downloading files as a Vite project.\n\n### Vue CLI\n[Vue CLI](https://cli.vuejs.org/) is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.\n\nFor information on migrating from Vue CLI to Vite:\n\n- [Vue CLI -> Vite Migration Guide from VueSchool.io](https://vueschool.io/articles/vuejs-tutorials/how-to-migrate-from-vue-cli-to-vite/)\n- [Tools / Plugins that help with auto migration](https://github.com/vitejs/awesome-vite#vue-cli).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling.html", "title": "Tooling", "description": "This page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:21:38", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Tooling | Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "scrapeId": "692a9eeb-d710-40e9-9be2-04fbde3a56f9", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling.html", "url": "https://vuejs.org/guide/scaling-up/tooling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Tooling in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create Vue Project with npm**:\n\n```yaml\n$ npm create vue@latest\n```\n\nThis snippet shows you how to create vue project with npm, which is an important aspect of tooling.\n\n**Create Vue Project with pnpm**:\n\n```yaml\n$ pnpm create vue@latest\n```\n\nThis snippet shows you how to create vue project with pnpm, which is an important aspect of tooling.\n\n**Create Vue Project with Yarn**:\n\n```yaml\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nThis snippet shows you how to create vue project with yarn, which is an important aspect of tooling.\n\n**Create Vue Project with bun**:\n\n```yaml\n$ bun create vue@latest\n```\n\nThis snippet shows you how to create vue project with bun, which is an important aspect of tooling.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling.html", "title": "Tooling", "description": "This page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:21:38", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Tooling | Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "scrapeId": "692a9eeb-d710-40e9-9be2-04fbde3a56f9", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling.html", "url": "https://vuejs.org/guide/scaling-up/tooling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Tooling in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse online playgrounds to provide reproductions when reporting bugs.\n\nPrefer using `@vue/compiler-sfc` via the deep import to ensure version sync with the Vue runtime.\n\nDisable Vetur if you have it installed in Vue 3 projects.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling.html", "title": "Tooling", "description": "This page covers various tools and setups for working with Vue.js, including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:21:38", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:type": "website", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Tooling | Vue.js", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "scrapeId": "692a9eeb-d710-40e9-9be2-04fbde3a56f9", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling.html", "url": "https://vuejs.org/guide/scaling-up/tooling.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what TypeScript with Options API is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain TypeScript with Options API in vue-guide.\n\n# TypeScript with Options API\n\nThis page assumes you've already read the overview on Using Vue with TypeScript.Here's a quick rundown of what this is about:\n\n## Typing Component Props\n\nType inference for props in Options API requires wrapping the component with `defineComponent()`. With it, Vue is able to infer the types for the props based on the `props` option, taking additional options such as `required: true` and `default` into account:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\nHowever, the runtime `props` options only support using constructor functions as a prop's type - there is no way to specify complex types such as objects with nested properties or function call signatures.\n\nTo annotate complex props types, we can use the `PropType` utility type:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```\n\n## Caveats\n\nIf your TypeScript version is less than `4.7`, you have to be careful when using function values for `validator` and `default` prop options - make sure to use arrow functions:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\nThis prevents TypeScript from having to infer the type of `this` inside these functions, which, unfortunately, can cause the type inference to fail. It was a previous design limitation, and now has been improved in TypeScript 4.7.\n\n## Typing Component Emits\n\nWe can declare the expected payload type for an emitted event using the object syntax of the `emits` option. Also, all non-declared emitted events will throw a type error when called:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```\n\n## Typing Computed Properties\n\nA computed property infers its type based on its return value:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nIn some cases, you may want to explicitly annotate the type of a computed property to ensure its implementation is correct:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\nExplicit annotations may also be required in some edge cases where TypeScript fails to infer the type of a computed property due to circular inference loops.\n\n## Typing Event Handlers\n\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if `\"strict\": true` or `\"noImplicitAny\": true` are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```\n\n## Augmenting Global Properties\n\nSome plugins install globally available properties to all component instances via `app.config.globalProperties`. For example, we may install `this.$http` for data-fetching or `this.$translate` for internationalization. To make this play well with TypeScript, Vue exposes a `ComponentCustomProperties` interface designed to be augmented via TypeScript module augmentation:\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```\n\n## Type Augmentation Placement\n\nWe can put this type augmentation in a `.ts` file, or in a project-wide `*.d.ts` file. Either way, make sure it is included in `tsconfig.json`. For library / plugin authors, this file should be specified in the `types` property in `package.json`.\n\nIn order to take advantage of module augmentation, you will need to ensure the augmentation is placed in a TypeScript module. That is to say, the file needs to contain at least one top-level `import` or `export`, even if it is just `export {}`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "overview", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component props in vue-guide?\n\nAssistant: To typing component props in vue-guide, here's what you do:\nType inference for props in Options API requires wrapping the component with `defineComponent()`. With it, Vue is able to infer the types for the props based on the `props` option, taking additional options such as `required: true` and `default` into account:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\nHowever, the runtime `props` options only support using constructor functions as a prop's type - there is no way to specify complex types such as objects with nested properties or function call signatures.\n\nTo annotate complex props types, we can use the `PropType` utility type:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I caveats in vue-guide?\n\nAssistant: To caveats in vue-guide, here's what you do:\nIf your TypeScript version is less than `4.7`, you have to be careful when using function values for `validator` and `default` prop options - make sure to use arrow functions:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\nThis prevents TypeScript from having to infer the type of `this` inside these functions, which, unfortunately, can cause the type inference to fail. It was a previous design limitation, and now has been improved in TypeScript 4.7..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component emits in vue-guide?\n\nAssistant: To typing component emits in vue-guide, here's what you do:\nWe can declare the expected payload type for an emitted event using the object syntax of the `emits` option. Also, all non-declared emitted events will throw a type error when called:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing computed properties in vue-guide?\n\nAssistant: To typing computed properties in vue-guide, here's what you do:\nA computed property infers its type based on its return value:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nIn some cases, you may want to explicitly annotate the type of a computed property to ensure its implementation is correct:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\nExplicit annotations may also be required in some edge cases where TypeScript fails to infer the type of a computed property due to circular inference loops..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing event handlers in vue-guide?\n\nAssistant: To typing event handlers in vue-guide, here's what you do:\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if `\"strict\": true` or `\"noImplicitAny\": true` are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I augmenting global properties in vue-guide?\n\nAssistant: To augmenting global properties in vue-guide, here's what you do:\nSome plugins install globally available properties to all component instances via `app.config.globalProperties`. For example, we may install `this.$http` for data-fetching or `this.$translate` for internationalization. To make this play well with TypeScript, Vue exposes a `ComponentCustomProperties` interface designed to be augmented via TypeScript module augmentation:\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I type augmentation placement in vue-guide?\n\nAssistant: To type augmentation placement in vue-guide, here's what you do:\nWe can put this type augmentation in a `.ts` file, or in a project-wide `*.d.ts` file. Either way, make sure it is included in `tsconfig.json`. For library / plugin authors, this file should be specified in the `types` property in `package.json`.\n\nIn order to take advantage of module augmentation, you will need to ensure the augmentation is placed in a TypeScript module. That is to say, the file needs to contain at least one top-level `import` or `export`, even if it is just `export {}`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api.html", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:25:32", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "title": "TypeScript with Options API | Vue.js", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "610a207c-2835-499f-95fe-76b4746f56dd", "sourceURL": "https://vuejs.org/guide/typescript/options-api.html", "url": "https://vuejs.org/guide/typescript/options-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Using Vue with TypeScript is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Using Vue with TypeScript in vue-guide.\n\n# Using Vue with TypeScript\n\nA type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.Here's a quick rundown of what this is about:\n\n## Project Setup\n\n`create-vue`, the official project scaffolding tool, offers the options to scaffold a Vite-powered, TypeScript-ready Vue project.\n\n### Overview\nWith a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.\n\n- During development, we recommend relying on a good IDE setup for instant feedback on type errors.\n\n- If using SFCs, use the `vue-tsc` utility for command line type checking and type declaration generation. `vue-tsc` is a wrapper around `tsc`, TypeScript's own command line interface. It works largely the same as `tsc` except that it supports Vue SFCs in addition to TypeScript files. You can run `vue-tsc` in watch mode in parallel to the Vite dev server, or use a Vite plugin like `vite-plugin-checker` which runs the checks in a separate worker thread.\n\n- Vue CLI also provides TypeScript support, but is no longer recommended. See notes below.\n\n## IDE Support\n\n- Visual Studio Code (VS Code) is strongly recommended for its great out-of-the-box support for TypeScript.\n\n  - Vue - Official (previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.\n\n    TIP\n\n    Vue - Official extension replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.\n- WebStorm also provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or via a free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher.\n\n## Configuring `tsconfig.json`\n\nProjects scaffolded via `create-vue` include pre-configured `tsconfig.json`. The base config is abstracted in the `@vue/tsconfig` package. Inside the project, we use Project References to ensure correct types for code running in different environments (e.g. app code and test code should have different global variables).\n\nWhen configuring `tsconfig.json` manually, some notable options include:\n\n- `compilerOptions.isolatedModules` is set to `true` because Vite uses esbuild for transpiling TypeScript and is subject to single-file transpile limitations. `compilerOptions.verbatimModuleSyntax` is a superset of `isolatedModules` and is a good choice, too - it's what `@vue/tsconfig` uses.\n\n- If you're using Options API, you need to set `compilerOptions.strict` to `true` (or at least enable `compilerOptions.noImplicitThis`, which is a part of the `strict` flag) to leverage type checking of `this` in component options. Otherwise `this` will be treated as `any`.\n\n- If you have configured resolver aliases in your build tool, for example the `@/*` alias configured by default in a `create-vue` project, you need to also configure it for TypeScript via `compilerOptions.paths`.\n\n- If you intend to use TSX with Vue, set `compilerOptions.jsx` to \"preserve\", and set `compilerOptions.jsxImportSource` to \"vue\".\n\n## Note on Vue CLI and `ts-loader`\n\nIn webpack-based setups such as Vue CLI, it is common to perform type checking as part of the module transform pipeline, for example with `ts-loader`. This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks. Individual module's transform step simply is not the right place for the task. It leads to the following problems:\n\n- `ts-loader` can only type check post-transform code. This doesn't align with the errors we see in IDEs or from `vue-tsc`, which map directly back to the source code.\n\n- Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application.\n\n- We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off.\n\nIf you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite. We are also working on CLI options to enable transpile-only TS support, so that you can switch to `vue-tsc` for type checking.\n\n## General Usage Notes\n\n### `defineComponent()`\nTo let TypeScript properly infer types inside component options, we need to define components with `defineComponent()`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\n`defineComponent()` also supports inferring the props passed to `setup()` when using Composition API without `<script setup>`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n### Usage in Single-File Components\nTo use TypeScript in SFCs, add the `lang=\"ts\"` attribute to `<script>` tags. When `lang=\"ts\"` is present, all template expressions also enjoy stricter type checking.\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n`lang=\"ts\"` can also be used with `<script setup>`:\n\n```vue\n<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n### TypeScript in Templates\nThe `<template>` also supports TypeScript in binding expressions when `<script lang=\"ts\">` or `<script setup lang=\"ts\">` is used. This is useful in cases where you need to perform type casting in template expressions.\n\nHere's a contrived example:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  <!-- error because x could be a string -->\n  {{ x.toFixed(2) }}\n</template>\n```\n\nThis can be worked around with an inline type cast:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\n### Usage with TSX\nVue also supports authoring components with JSX / TSX. Details are covered in the Render Function & JSX guide.\n\n## Generic Components\n\nGeneric components are supported in two cases:\n\n- In SFCs: `<script setup>` with the `generic` attribute\n- Render function / JSX components: `defineComponent()`'s function signature.\n\n## API-Specific Recipes\n\n- TS with Composition API\n- TS with Options API.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I project setup in vue-guide?\n\nAssistant: To project setup in vue-guide, here's what you do:\n`create-vue`, the official project scaffolding tool, offers the options to scaffold a Vite-powered, TypeScript-ready Vue project.\n\n### Overview\nWith a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.\n\n- During development, we recommend relying on a good IDE setup for instant feedback on type errors.\n\n- If using SFCs, use the `vue-tsc` utility for command line type checking and type declaration generation. `vue-tsc` is a wrapper around `tsc`, TypeScript's own command line interface. It works largely the same as `tsc` except that it supports Vue SFCs in addition to TypeScript files. You can run `vue-tsc` in watch mode in parallel to the Vite dev server, or use a Vite plugin like `vite-plugin-checker` which runs the checks in a separate worker thread.\n\n- Vue CLI also provides TypeScript support, but is no longer recommended. See notes below..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ide support in vue-guide?\n\nAssistant: To ide support in vue-guide, here's what you do:\n- Visual Studio Code (VS Code) is strongly recommended for its great out-of-the-box support for TypeScript.\n\n  - Vue - Official (previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.\n\n    TIP\n\n    Vue - Official extension replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.\n- WebStorm also provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or via a free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I configuring `tsconfig.json` in vue-guide?\n\nAssistant: To configuring `tsconfig.json` in vue-guide, here's what you do:\nProjects scaffolded via `create-vue` include pre-configured `tsconfig.json`. The base config is abstracted in the `@vue/tsconfig` package. Inside the project, we use Project References to ensure correct types for code running in different environments (e.g. app code and test code should have different global variables).\n\nWhen configuring `tsconfig.json` manually, some notable options include:\n\n- `compilerOptions.isolatedModules` is set to `true` because Vite uses esbuild for transpiling TypeScript and is subject to single-file transpile limitations. `compilerOptions.verbatimModuleSyntax` is a superset of `isolatedModules` and is a good choice, too - it's what `@vue/tsconfig` uses.\n\n- If you're using Options API, you need to set `compilerOptions.strict` to `true` (or at least enable `compilerOptions.noImplicitThis`, which is a part of the `strict` flag) to leverage type checking of `this` in component options. Otherwise `this` will be treated as `any`.\n\n- If you have configured resolver aliases in your build tool, for example the `@/*` alias configured by default in a `create-vue` project, you need to also configure it for TypeScript via `compilerOptions.paths`.\n\n- If you intend to use TSX with Vue, set `compilerOptions.jsx` to \"preserve\", and set `compilerOptions.jsxImportSource` to \"vue\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I note on vue cli and `ts-loader` in vue-guide?\n\nAssistant: To note on vue cli and `ts-loader` in vue-guide, here's what you do:\nIn webpack-based setups such as Vue CLI, it is common to perform type checking as part of the module transform pipeline, for example with `ts-loader`. This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks. Individual module's transform step simply is not the right place for the task. It leads to the following problems:\n\n- `ts-loader` can only type check post-transform code. This doesn't align with the errors we see in IDEs or from `vue-tsc`, which map directly back to the source code.\n\n- Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application.\n\n- We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off.\n\nIf you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite. We are also working on CLI options to enable transpile-only TS support, so that you can switch to `vue-tsc` for type checking..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I general usage notes in vue-guide?\n\nAssistant: To general usage notes in vue-guide, here's what you do:\n### `defineComponent()`\nTo let TypeScript properly infer types inside component options, we need to define components with `defineComponent()`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\n`defineComponent()` also supports inferring the props passed to `setup()` when using Composition API without `<script setup>`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n### Usage in Single-File Components\nTo use TypeScript in SFCs, add the `lang=\"ts\"` attribute to `<script>` tags. When `lang=\"ts\"` is present, all template expressions also enjoy stricter type checking.\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n`lang=\"ts\"` can also be used with `<script setup>`:\n\n```vue\n<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n### TypeScript in Templates\nThe `<template>` also supports TypeScript in binding expressions when `<script lang=\"ts\">` or `<script setup lang=\"ts\">` is used. This is useful in cases where you need to perform type casting in template expressions.\n\nHere's a contrived example:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  <!-- error because x could be a string -->\n  {{ x.toFixed(2) }}\n</template>\n```\n\nThis can be worked around with an inline type cast:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\n### Usage with TSX\nVue also supports authoring components with JSX / TSX. Details are covered in the Render Function & JSX guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I generic components in vue-guide?\n\nAssistant: To generic components in vue-guide, here's what you do:\nGeneric components are supported in two cases:\n\n- In SFCs: `<script setup>` with the `generic` attribute\n- Render function / JSX components: `defineComponent()`'s function signature..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I api-specific recipes in vue-guide?\n\nAssistant: To api-specific recipes in vue-guide, here's what you do:\n- TS with Composition API\n- TS with Options API..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Using Vue with TypeScript in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using `defineComponent()`**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\nThis snippet shows you how to using `definecomponent()`, which is an important aspect of using vue with typescript.\n\n**Using TypeScript in SFCs**:\n\n```yaml\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\nThis snippet shows you how to using typescript in sfcs, which is an important aspect of using vue with typescript.\n\n**TypeScript in Templates**:\n\n```yaml\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\nThis snippet shows you how to typescript in templates, which is an important aspect of using vue with typescript.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Using Vue with TypeScript in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDuring development, rely on a good IDE setup for instant feedback on type errors.\n\nUse `vue-tsc` for command line type checking and type declaration generation.\n\nIf using Vue CLI, consider migrating to Vite for better TypeScript support.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview.html", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:26:03", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogUrl": "https://vuejs.org/", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "twitter:card": "summary", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "language": "en-US", "title": "Using Vue with TypeScript | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "9ff9ae5c-fe45-4d0c-b552-69f47a3071f0", "sourceURL": "https://vuejs.org/guide/typescript/overview.html", "url": "https://vuejs.org/guide/typescript/overview.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Introduction is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Introduction in vue-guide.\n\n# Introduction\n\nYou are reading the documentation for Vue 3!Here's a quick rundown of what this is about:\n\n## What is Vue?\n\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required.\n\n## The Progressive Framework\n\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\n\n## Single-File Components\n\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\n\n## API Styles\n\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar.\n\n## Still Got Questions?\n\nCheck out our [FAQ](https://vuejs.org/about/faq).\n\n## Pick Your Learning Path\n\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is vue? in vue-guide?\n\nAssistant: To what is vue? in vue-guide, here's what you do:\nVue (pronounced /vjuÀê/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\njs\n\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\njs\n\n```\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\ntemplate\n\n```\n<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>\n```\n\n**Result**\n\nCount is: 0\n\nThe above example demonstrates the two core features of Vue:\n\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nPrerequisites\n\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the progressive framework in vue-guide?\n\nAssistant: To the progressive framework in vue-guide, here's what you do:\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n\n- Enhancing static HTML without a build step\n- Embedding as Web Components on any page\n- Single-Page Application (SPA)\n- Fullstack / Server-Side Rendering (SSR)\n- Jamstack / Static Site Generation (SSG)\n- Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue).\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I single-file components in vue-guide?\n\nAssistant: To single-file components in vue-guide, here's what you do:\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nvue\n\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nvue\n\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](https://vuejs.org/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I api styles in vue-guide?\n\nAssistant: To api styles in vue-guide, here's what you do:\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\n\n### Options API\n\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\n\nvue\n\n```\n<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\n\n### Composition API\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](https://vuejs.org/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\n\nvue\n\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\n\n### Which to Choose?\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( `this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](https://vuejs.org/guide/extras/composition-api-faq).\n\nIf you are new to Vue, here's our general recommendation:\n\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\n- For production use:\n\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I still got questions? in vue-guide?\n\nAssistant: To still got questions? in vue-guide, here's what you do:\nCheck out our [FAQ](https://vuejs.org/about/faq)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I pick your learning path in vue-guide?\n\nAssistant: To pick your learning path in vue-guide, here's what you do:\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\n\n[Try the Tutorial\\\n\\\nFor those who prefer learning things hands-on.](https://vuejs.org/tutorial/) [Read the Guide\\\n\\\nThe guide walks you through every aspect of the framework in full detail.](https://vuejs.org/guide/quick-start) [Check out the Examples\\\n\\\nExplore examples of core features and common UI tasks.](https://vuejs.org/examples/).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Introduction in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Minimal Example with Options API**:\n\n```yaml\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with options api, which is an important aspect of introduction.\n\n**Minimal Example with Composition API**:\n\n```yaml\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n```\n\nThis snippet shows you how to minimal example with composition api, which is an important aspect of introduction.\n\n**Single-File Component Example with Options API**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with options api, which is an important aspect of introduction.\n\n**Single-File Component Example with Composition API**:\n\n```yaml\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\nThis snippet shows you how to single-file component example with composition api, which is an important aspect of introduction.\n\n**Options API Example**:\n\n```yaml\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to options api example, which is an important aspect of introduction.\n\n**Composition API Example**:\n\n```yaml\n<script setup>\nimport { ref, onMounted } from 'vue'\nconst count = ref(0)\nfunction increment() {\n  count.value++\n}\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to composition api example, which is an important aspect of introduction.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Introduction in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n\nFor production use, go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n\nFor production use, go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/introduction", "title": "Introduction", "description": "You are reading the documentation for Vue 3!", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:26:58", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "title": "Introduction | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "083dea6c-0b61-4e6e-8a60-8c6beca561a6", "sourceURL": "https://vuejs.org/guide/introduction", "url": "https://vuejs.org/guide/introduction", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Using Vue with TypeScript is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Using Vue with TypeScript in vue-guide.\n\n# Using Vue with TypeScript\n\nA type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.Here's a quick rundown of what this is about:\n\n## Project Setup\n\n`create-vue`, the official project scaffolding tool, offers the options to scaffold a Vite-powered, TypeScript-ready Vue project.\n\n### Overview\nWith a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.\n\n- During development, we recommend relying on a good IDE setup for instant feedback on type errors.\n\n- If using SFCs, use the `vue-tsc` utility for command line type checking and type declaration generation. `vue-tsc` is a wrapper around `tsc`, TypeScript's own command line interface. It works largely the same as `tsc` except that it supports Vue SFCs in addition to TypeScript files. You can run `vue-tsc` in watch mode in parallel to the Vite dev server, or use a Vite plugin like `vite-plugin-checker` which runs the checks in a separate worker thread.\n\n- Vue CLI also provides TypeScript support, but is no longer recommended.\n\n## IDE Support\n\n- Visual Studio Code (VS Code) is strongly recommended for its great out-of-the-box support for TypeScript.\n\n  - Vue - Official is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.\n\n    TIP\n\n    Vue - Official extension replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.\n- WebStorm also provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or via a free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher.\n\n## Configuring `tsconfig.json`\n\nProjects scaffolded via `create-vue` include pre-configured `tsconfig.json`. The base config is abstracted in the `@vue/tsconfig` package. Inside the project, we use Project References to ensure correct types for code running in different environments (e.g. app code and test code should have different global variables).\n\nWhen configuring `tsconfig.json` manually, some notable options include:\n\n- `compilerOptions.isolatedModules` is set to `true` because Vite uses esbuild for transpiling TypeScript and is subject to single-file transpile limitations. `compilerOptions.verbatimModuleSyntax` is a superset of `isolatedModules` and is a good choice, too - it's what `@vue/tsconfig` uses.\n\n- If you're using Options API, you need to set `compilerOptions.strict` to `true` (or at least enable `compilerOptions.noImplicitThis`, which is a part of the `strict` flag) to leverage type checking of `this` in component options. Otherwise `this` will be treated as `any`.\n\n- If you have configured resolver aliases in your build tool, for example the `@/*` alias configured by default in a `create-vue` project, you need to also configure it for TypeScript via `compilerOptions.paths`.\n\n- If you intend to use TSX with Vue, set `compilerOptions.jsx` to \"preserve\", and set `compilerOptions.jsxImportSource` to \"vue\".\n\n## Note on Vue CLI and `ts-loader`\n\nIn webpack-based setups such as Vue CLI, it is common to perform type checking as part of the module transform pipeline, for example with `ts-loader`. This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks. Individual module's transform step simply is not the right place for the task. It leads to the following problems:\n\n- `ts-loader` can only type check post-transform code. This doesn't align with the errors we see in IDEs or from `vue-tsc`, which map directly back to the source code.\n\n- Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application.\n\n- We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off.\n\nIf you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite. We are also working on CLI options to enable transpile-only TS support, so that you can switch to `vue-tsc` for type checking.\n\n## General Usage Notes\n\n### `defineComponent()`\nTo let TypeScript properly infer types inside component options, we need to define components with `defineComponent()`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\n`defineComponent()` also supports inferring the props passed to `setup()` when using Composition API without `<script setup>`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n### Usage in Single-File Components\nTo use TypeScript in SFCs, add the `lang=\"ts\"` attribute to `<script>` tags. When `lang=\"ts\"` is present, all template expressions also enjoy stricter type checking.\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n`lang=\"ts\"` can also be used with `<script setup>`:\n\n```vue\n<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n### TypeScript in Templates\nThe `<template>` also supports TypeScript in binding expressions when `<script lang=\"ts\">` or `<script setup lang=\"ts\">` is used. This is useful in cases where you need to perform type casting in template expressions.\n\nHere's a contrived example:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  <!-- error because x could be a string -->\n  {{ x.toFixed(2) }}\n</template>\n```\n\nThis can be worked around with an inline type cast:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\n### Usage with TSX\nVue also supports authoring components with JSX / TSX. Details are covered in the Render Function & JSX guide.\n\n## Generic Components\n\nGeneric components are supported in two cases:\n\n- In SFCs: `<script setup>` with the `generic` attribute\n- Render function / JSX components: `defineComponent()`'s function signature.\n\n## API-Specific Recipes\n\n- TS with Composition API\n- TS with Options API.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "overview", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I project setup in vue-guide?\n\nAssistant: To project setup in vue-guide, here's what you do:\n`create-vue`, the official project scaffolding tool, offers the options to scaffold a Vite-powered, TypeScript-ready Vue project.\n\n### Overview\nWith a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.\n\n- During development, we recommend relying on a good IDE setup for instant feedback on type errors.\n\n- If using SFCs, use the `vue-tsc` utility for command line type checking and type declaration generation. `vue-tsc` is a wrapper around `tsc`, TypeScript's own command line interface. It works largely the same as `tsc` except that it supports Vue SFCs in addition to TypeScript files. You can run `vue-tsc` in watch mode in parallel to the Vite dev server, or use a Vite plugin like `vite-plugin-checker` which runs the checks in a separate worker thread.\n\n- Vue CLI also provides TypeScript support, but is no longer recommended..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ide support in vue-guide?\n\nAssistant: To ide support in vue-guide, here's what you do:\n- Visual Studio Code (VS Code) is strongly recommended for its great out-of-the-box support for TypeScript.\n\n  - Vue - Official is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.\n\n    TIP\n\n    Vue - Official extension replaces Vetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.\n- WebStorm also provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or via a free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I configuring `tsconfig.json` in vue-guide?\n\nAssistant: To configuring `tsconfig.json` in vue-guide, here's what you do:\nProjects scaffolded via `create-vue` include pre-configured `tsconfig.json`. The base config is abstracted in the `@vue/tsconfig` package. Inside the project, we use Project References to ensure correct types for code running in different environments (e.g. app code and test code should have different global variables).\n\nWhen configuring `tsconfig.json` manually, some notable options include:\n\n- `compilerOptions.isolatedModules` is set to `true` because Vite uses esbuild for transpiling TypeScript and is subject to single-file transpile limitations. `compilerOptions.verbatimModuleSyntax` is a superset of `isolatedModules` and is a good choice, too - it's what `@vue/tsconfig` uses.\n\n- If you're using Options API, you need to set `compilerOptions.strict` to `true` (or at least enable `compilerOptions.noImplicitThis`, which is a part of the `strict` flag) to leverage type checking of `this` in component options. Otherwise `this` will be treated as `any`.\n\n- If you have configured resolver aliases in your build tool, for example the `@/*` alias configured by default in a `create-vue` project, you need to also configure it for TypeScript via `compilerOptions.paths`.\n\n- If you intend to use TSX with Vue, set `compilerOptions.jsx` to \"preserve\", and set `compilerOptions.jsxImportSource` to \"vue\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I note on vue cli and `ts-loader` in vue-guide?\n\nAssistant: To note on vue cli and `ts-loader` in vue-guide, here's what you do:\nIn webpack-based setups such as Vue CLI, it is common to perform type checking as part of the module transform pipeline, for example with `ts-loader`. This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks. Individual module's transform step simply is not the right place for the task. It leads to the following problems:\n\n- `ts-loader` can only type check post-transform code. This doesn't align with the errors we see in IDEs or from `vue-tsc`, which map directly back to the source code.\n\n- Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application.\n\n- We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off.\n\nIf you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite. We are also working on CLI options to enable transpile-only TS support, so that you can switch to `vue-tsc` for type checking..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I general usage notes in vue-guide?\n\nAssistant: To general usage notes in vue-guide, here's what you do:\n### `defineComponent()`\nTo let TypeScript properly infer types inside component options, we need to define components with `defineComponent()`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\n`defineComponent()` also supports inferring the props passed to `setup()` when using Composition API without `<script setup>`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n### Usage in Single-File Components\nTo use TypeScript in SFCs, add the `lang=\"ts\"` attribute to `<script>` tags. When `lang=\"ts\"` is present, all template expressions also enjoy stricter type checking.\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n`lang=\"ts\"` can also be used with `<script setup>`:\n\n```vue\n<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\n### TypeScript in Templates\nThe `<template>` also supports TypeScript in binding expressions when `<script lang=\"ts\">` or `<script setup lang=\"ts\">` is used. This is useful in cases where you need to perform type casting in template expressions.\n\nHere's a contrived example:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  <!-- error because x could be a string -->\n  {{ x.toFixed(2) }}\n</template>\n```\n\nThis can be worked around with an inline type cast:\n\n```vue\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\n### Usage with TSX\nVue also supports authoring components with JSX / TSX. Details are covered in the Render Function & JSX guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I generic components in vue-guide?\n\nAssistant: To generic components in vue-guide, here's what you do:\nGeneric components are supported in two cases:\n\n- In SFCs: `<script setup>` with the `generic` attribute\n- Render function / JSX components: `defineComponent()`'s function signature..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I api-specific recipes in vue-guide?\n\nAssistant: To api-specific recipes in vue-guide, here's what you do:\n- TS with Composition API\n- TS with Options API..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Using Vue with TypeScript in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using `defineComponent()`**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})\n```\n\nThis snippet shows you how to using `definecomponent()`, which is an important aspect of using vue with typescript.\n\n**Using TypeScript in SFCs**:\n\n```yaml\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>\n```\n\nThis snippet shows you how to using typescript in sfcs, which is an important aspect of using vue with typescript.\n\n**TypeScript in Templates**:\n\n```yaml\n<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>\n```\n\nThis snippet shows you how to typescript in templates, which is an important aspect of using vue with typescript.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "code_examples", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Using Vue with TypeScript in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDuring development, rely on a good IDE setup for instant feedback on type errors.\n\nIf using SFCs, use the `vue-tsc` utility for command line type checking and type declaration generation.\n\nVue - Official extension replaces Vetur; disable Vetur in Vue 3 projects if currently installed.\n\nIf you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/overview", "title": "Using Vue with TypeScript", "description": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs. Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:27:38", "type": "best_practices", "page_metadata": {"ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "title": "Using Vue with TypeScript | Vue.js", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:type": "website", "scrapeId": "12d56316-bcfd-4b75-969d-3c62f96208a0", "sourceURL": "https://vuejs.org/guide/typescript/overview", "url": "https://vuejs.org/guide/typescript/overview", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Quick Start is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Quick Start in vue-guide.\n\n# Quick Start\n\nA guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.Here's a quick rundown of what this is about:\n\n## Try Vue Online\n\n- To quickly get a taste of Vue, you can try it directly in our Playground.\n- If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point.\n- If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz.\n\n## Creating a Vue Application\n\nPrerequisites\n\n- Familiarity with the command line\n- Install Node.js version 18.3 or higher\n\nIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine. The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs).\n\nMake sure you have an up-to-date version of Node.js installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the $ sign):\n\nThis command will install and execute create-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:\n\nIf you are unsure about an option, simply choose No by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:\n\nYou should now have your first Vue project running! Note that the example components in the generated project are written using the Composition API and <script setup>, rather than the Options API.\n\n## Using Vue from CDN\n\nYou can use Vue directly from a CDN via a script tag. Here we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs. Of course, you can also download this file and serve it yourself.\n\nWhen using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.\n\n## Using the Global Build\n\nThe above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object. Here is a full example using the global build.\n\n## Using the ES Module Build\n\nThroughout the rest of the documentation, we will be primarily using ES modules syntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules.\n\n## Enabling Import maps\n\nIn the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this. We can teach the browser where to locate the vue import by using Import Maps.\n\n## Notes on Production Use\n\nThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide.\n\n## Splitting Up the Modules\n\nAs we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. If you directly open the above index.html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I try vue online in vue-guide?\n\nAssistant: To try vue online in vue-guide, here's what you do:\n- To quickly get a taste of Vue, you can try it directly in our Playground.\n- If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point.\n- If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I creating a vue application in vue-guide?\n\nAssistant: To creating a vue application in vue-guide, here's what you do:\nPrerequisites\n\n- Familiarity with the command line\n- Install Node.js version 18.3 or higher\n\nIn this section we will introduce how to scaffold a Vue Single Page Application on your local machine. The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs).\n\nMake sure you have an up-to-date version of Node.js installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the $ sign):\n\nThis command will install and execute create-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:\n\nIf you are unsure about an option, simply choose No by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:\n\nYou should now have your first Vue project running! Note that the example components in the generated project are written using the Composition API and <script setup>, rather than the Options API..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using vue from cdn in vue-guide?\n\nAssistant: To using vue from cdn in vue-guide, here's what you do:\nYou can use Vue directly from a CDN via a script tag. Here we are using unpkg, but you can also use any CDN that serves npm packages, for example jsdelivr or cdnjs. Of course, you can also download this file and serve it yourself.\n\nWhen using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using the global build in vue-guide?\n\nAssistant: To using the global build in vue-guide, here's what you do:\nThe above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global Vue object. Here is a full example using the global build..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using the es module build in vue-guide?\n\nAssistant: To using the es module build in vue-guide, here's what you do:\nThroughout the rest of the documentation, we will be primarily using ES modules syntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I enabling import maps in vue-guide?\n\nAssistant: To enabling import maps in vue-guide, here's what you do:\nIn the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this. We can teach the browser where to locate the vue import by using Import Maps..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I notes on production use in vue-guide?\n\nAssistant: To notes on production use in vue-guide, here's what you do:\nThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I splitting up the modules in vue-guide?\n\nAssistant: To splitting up the modules in vue-guide, here's what you do:\nAs we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. If you directly open the above index.html in your browser, you will find that it throws an error because ES modules cannot work over the file:// protocol..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Quick Start in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Vue Application**:\n\n```yaml\n$ npm create vue@latest\n```\n\nThis snippet shows you how to creating a vue application, which is an important aspect of quick start.\n\n**Creating a Vue Application with Yarn**:\n\n```yaml\n$ yarn create vue\n```\n\nThis snippet shows you how to creating a vue application with yarn, which is an important aspect of quick start.\n\n**Creating a Vue Application with Bun**:\n\n```yaml\n$ bun create vue@latest\n```\n\nThis snippet shows you how to creating a vue application with bun, which is an important aspect of quick start.\n\n**Starting the Dev Server with npm**:\n\n```yaml\n$ npm run dev\n```\n\nThis snippet shows you how to starting the dev server with npm, which is an important aspect of quick start.\n\n**Using Vue from CDN - Global Build Example**:\n\n```yaml\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\nThis snippet shows you how to using vue from cdn - global build example, which is an important aspect of quick start.\n\n**Using Vue from CDN - ES Module Build Example**:\n\n```yaml\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>\n```\n\nThis snippet shows you how to using vue from cdn - es module build example, which is an important aspect of quick start.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Quick Start in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe recommended IDE setup is Visual Studio Code + Vue - Official extension.\n\nMore tooling details, including integration with backend frameworks, are discussed in the Tooling Guide.\n\nTo learn more about the underlying build tool Vite, check out the Vite docs.\n\nIf you choose to use TypeScript, check out the TypeScript Usage Guide.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/quick-start", "title": "Quick Start", "description": "A guide to quickly get started with Vue, including trying Vue online, creating a Vue application, and using Vue from a CDN.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:28:22", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "theme-color": "#3c8772", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "language": "en-US", "ogTitle": "Vue.js", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Quick Start | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "b1aeaf96-7ef3-48f5-a59a-2baabf1ef5d1", "sourceURL": "https://vuejs.org/guide/quick-start", "url": "https://vuejs.org/guide/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Form Input Bindings is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Form Input Bindings in vue-guide.\n\n# Form Input Bindings\n\nThis page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.Here's a quick rundown of what this is about:\n\n## Form Input Bindings\n\nWhen dealing with forms on the frontend, we often need to sync the state of form input elements with corresponding state in JavaScript. It can be cumbersome to manually wire up value bindings and change event listeners:\n\n```html\n<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n```\n\nThe `v-model` directive helps us simplify the above to:\n\n```html\n<input v-model=\"text\">\n```\n\nIn addition, `v-model` can be used on inputs of different types, `<textarea>`, and `<select>` elements. It automatically expands to different DOM property and event pairs based on the element it is used on:\n\n- `<input>` with text types and `<textarea>` elements use `value` property and `input` event;\n- `<input type=\"checkbox\">` and `<input type=\"radio\">` use `checked` property and `change` event;\n- `<select>` uses `value` as a prop and `change` as an event.\n\nNote\n`v-model` will ignore the initial `value`, `checked` or `selected` attributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, using the [`data`](https://vuejs.org/api/options-state#data) option[reactivity APIs](https://vuejs.org/api/reactivity-core#reactivity-api-core).\n\n## Basic Usage\n\n### Text\n\n```html\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nMessage is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jUEOgyAQRa8yYUO7aNkbNOkBegM2RseWRGACoxvC3TumxuX/+f+9ql5Ez31D1SlbpuyJoSBvNLjoA6XMUCHjAg2WnAJomWoXXZxSLAwBSxk/CP2xuWl9d9GaP0YAEhgDrSOjJABLw/s8+NJBrde/NWsOpWPrI20M+yOkGdfeqXPiFAhowm9aZ8zS4+wPv/RGjtZcJtV+YpNK1g==)\n\nNote\nFor languages that require an [IME](https://en.wikipedia.org/wiki/Input_method) (Chinese, Japanese, Korean etc.), you'll notice that `v-model` doesn't get updated during IME composition. If you want to respond to these updates as well, use your own `input` event listener and `value` binding instead of using `v-model`.\n\n### Multiline Text\n\n```html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nMultiline message is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jktuwzAMRK9CaON24XrvKgZ6gN5AG8FmGgH6ECKdJjB891D5LYec9zCb+SH6Oq9oRmN5roEEGGWlyeWQqFSBDSoeYYdjLQk6rXYuuzyXzAIJmf0fwqF1Prru02U7PDQq0CCYKHrBlsQy+Tz9rlFCDBnfdOBRqfa7twhYrhEPzvyfgmCvnxlHoIp9w76dmbbtDe+7HdpaBQUv4it6OPepLBjV8Gw5AzpjxlOJC1a9+2WB1IZQRGhWVqsdXgb1tfDcbvYbJDRqLQ==)\n\nNote that interpolation inside `<textarea>` won't work. Use `v-model` instead.\n\n```html\n<!-- bad -->\n<textarea>{{ text }}</textarea>\n\n<!-- good -->\n<textarea v-model=\"text\"></textarea>\n```\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n```html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n```\n\nfalse\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVjssKgzAURH/lko3tonVfotD/yEaTKw3Ni3gjLSH/3qhUcDnDnMNk9gzhviRkD8ZnGXUgmJFS6IXTNvhIkCHiBAWm6C00ddoIJ5z0biaQL5RvVNCtmwvFhFfheLuLqqIGQhvMQLgm4tqFREDfgJ1gGz36j2Cg1TkvN+sVmn+JqnbtrjDDiAYmH09En/PxphTebqsK8PY4wMoPslBUxQ==)\n\nWe can also bind multiple checkboxes to the same array or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) value:\n\n```javascript\nconst checkedNames = ref([])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      checkedNames: []\n    }\n  }\n}\n```\n\n```html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n```\n\nChecked names: []\n\nJackJohnMike\n\nIn this case, the `checkedNames` array will always contain the values from the currently checked boxes.\n\n[Try it in the Playground](https://play.vuejs.org/#eNqVkUtqwzAURbfy0CTtoNU8KILSWaHdQNWBIj8T1fohyybBeO+RbOc3i2e+vHvuMWggHyG89x2SLWGtijokaDF1gQunbfAxwQARaxihjt7CJlc3wgmnvGsTqAOqBqsfabGFXSm+/P69CsfovJVXckhog5EJcwJgle7558yBK+AWhuFxaRwZLbVCZ0K70CVIp4A7Qabi3h8FAV3l/C9Vk797abpy/lrim/UVmkt/Gc4HOv+EkXs0UPt4XeCFZHQ6lM4TZn9w9+YlrjFPCC/kKrPVDd6Zv5e4wjwv8ELezIxeX4qMZwHduAs=)\n\n### Radio\n\n```html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\nPicked:\n\nOneTwo\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkDFuwzAMRa9CaHE7tNoDxUBP0A4dtTgWDQiRJUKmHQSG7x7KhpMMAbLxk3z/g5zVD9H3NKI6KDO02RPDgDxSbaPvKWWGGTJ2sECXUw+VrFY22timODCQb8/o4FhWPqrfiNWnjUZvRmIhgrGn0DCKAjDOT/XfCh1gnnd+WYwukwJYNj7SyMBXwqNVuXE+WQXeiUgRpZyaMJaR5BX11SeHQfTmJi1dnNiE5oQBupR3shbC6LX9Posvpdyz/jf1OksOe85ayVqIR5bR9z+o5Qbc6oCk)\n\n### Select\n\nSingle select:\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected:\n\nPlease select oneABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1j7EOgyAQhl/lwmI7tO4Nmti+QJOuLFTPxASBALoQ3r2H2jYOjvff939wkTXWXucJ2Y1x37rBBvAYJlsLPYzWuAARHPaQoHdmhILQQmihW6N9RhW2ATuoMnQqirPQvFw9ZKAh4GiVDEgTAPdW6hpeW+sGMf4VKVEz73Mvs8sC5stoOlSVYF9SsEVGiLFhMBq6wcu3IsUs1YREEvFUKD1udjAaebnS+27dHOT3g/yxy+nHywM08PJ3KksfXwJ2dA==)\n\nNote\nIf the initial value of your `v-model` expression does not match any of the options, the `<select>` element will render in an \"unselected\" state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.\n\nMultiple select (bound to array):\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected: []\n\nABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1kL2OwjAQhF9l5Ya74i7QBhMJeARKTIESIyz5Z5VsAsjyu7NOQEBB5xl/M7vaKNaI/0OvRSlkV7cGCTpNPVbKG4ehJYjQ6hMkOLXBwYzRmfLK18F3GbW6Jt3AKkM/+8Ov8rKYeriBBWmH9kiaFYBszFDtHpkSYnwVpCSL/JtDDE4+DH8uNNqulHiCSoDrLRm0UyWzAckEX61l8Xh9+psv/vbD563HCSxk8bY0y45u47AJ2D/HHyDm4MU0dC5hMZ/jdal8Gg8wJkS6A3nRew4=)\n\nSelect options can be dynamically rendered with `v-for`:\n\n```javascript\nconst selected = ref('A')\n\nconst options = ref([\n  { text: 'One', value: 'A' },\n  { text: 'Two', value: 'B' },\n  { text: 'Three', value: 'C' }\n])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      selected: 'A',\n      options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n      ]\n    }\n  }\n}\n```\n\n```html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNplkMFugzAQRH9l5YtbKYU7IpFoP6CH9lb3EMGiWgLbMguthPzvXduEJMqNYUazb7yKxrlimVFUop5arx3BhDS7kzJ6dNYTrOCxhwC9tyNIjkpllGmtmWJ0wJawg2MMPclGPl9N60jzx+Z9KQPcRfhHFch3g/IAy3mYkVUjIRzu/M9fe+O/Pvo/Hm8b3jihzDdfr8s8gwewIBzdcCZkBVBnXFheRtvhcFTiwq9ECnAkQ3Okt54Dm9TmskYJqNLR3SyS3BsYct3CRYSFwGCpusx/M0qZTydKRXWnl9PHBlPFhv1lQ6jL6MZl+xoR/gFjPZTD)\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms", "title": "Form Input Bindings", "description": "This page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:10", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Form Input Bindings | Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "scrapeId": "3872eddb-efa0-4e2c-95a9-11fb9804b74a", "sourceURL": "https://vuejs.org/guide/essentials/forms", "url": "https://vuejs.org/guide/essentials/forms", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I form input bindings in vue-guide?\n\nAssistant: To form input bindings in vue-guide, here's what you do:\nWhen dealing with forms on the frontend, we often need to sync the state of form input elements with corresponding state in JavaScript. It can be cumbersome to manually wire up value bindings and change event listeners:\n\n```html\n<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n```\n\nThe `v-model` directive helps us simplify the above to:\n\n```html\n<input v-model=\"text\">\n```\n\nIn addition, `v-model` can be used on inputs of different types, `<textarea>`, and `<select>` elements. It automatically expands to different DOM property and event pairs based on the element it is used on:\n\n- `<input>` with text types and `<textarea>` elements use `value` property and `input` event;\n- `<input type=\"checkbox\">` and `<input type=\"radio\">` use `checked` property and `change` event;\n- `<select>` uses `value` as a prop and `change` as an event.\n\nNote\n`v-model` will ignore the initial `value`, `checked` or `selected` attributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, using the [`data`](https://vuejs.org/api/options-state#data) option[reactivity APIs](https://vuejs.org/api/reactivity-core#reactivity-api-core)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms", "title": "Form Input Bindings", "description": "This page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:10", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Form Input Bindings | Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "scrapeId": "3872eddb-efa0-4e2c-95a9-11fb9804b74a", "sourceURL": "https://vuejs.org/guide/essentials/forms", "url": "https://vuejs.org/guide/essentials/forms", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\n### Text\n\n```html\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nMessage is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jUEOgyAQRa8yYUO7aNkbNOkBegM2RseWRGACoxvC3TumxuX/+f+9ql5Ez31D1SlbpuyJoSBvNLjoA6XMUCHjAg2WnAJomWoXXZxSLAwBSxk/CP2xuWl9d9GaP0YAEhgDrSOjJABLw/s8+NJBrde/NWsOpWPrI20M+yOkGdfeqXPiFAhowm9aZ8zS4+wPv/RGjtZcJtV+YpNK1g==)\n\nNote\nFor languages that require an [IME](https://en.wikipedia.org/wiki/Input_method) (Chinese, Japanese, Korean etc.), you'll notice that `v-model` doesn't get updated during IME composition. If you want to respond to these updates as well, use your own `input` event listener and `value` binding instead of using `v-model`.\n\n### Multiline Text\n\n```html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nMultiline message is:\n\n[Try it in the Playground](https://play.vuejs.org/#eNo9jktuwzAMRK9CaON24XrvKgZ6gN5AG8FmGgH6ECKdJjB891D5LYec9zCb+SH6Oq9oRmN5roEEGGWlyeWQqFSBDSoeYYdjLQk6rXYuuzyXzAIJmf0fwqF1Prru02U7PDQq0CCYKHrBlsQy+Tz9rlFCDBnfdOBRqfa7twhYrhEPzvyfgmCvnxlHoIp9w76dmbbtDe+7HdpaBQUv4it6OPepLBjV8Gw5AzpjxlOJC1a9+2WB1IZQRGhWVqsdXgb1tfDcbvYbJDRqLQ==)\n\nNote that interpolation inside `<textarea>` won't work. Use `v-model` instead.\n\n```html\n<!-- bad -->\n<textarea>{{ text }}</textarea>\n\n<!-- good -->\n<textarea v-model=\"text\"></textarea>\n```\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n```html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n```\n\nfalse\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVjssKgzAURH/lko3tonVfotD/yEaTKw3Ni3gjLSH/3qhUcDnDnMNk9gzhviRkD8ZnGXUgmJFS6IXTNvhIkCHiBAWm6C00ddoIJ5z0biaQL5RvVNCtmwvFhFfheLuLqqIGQhvMQLgm4tqFREDfgJ1gGz36j2Cg1TkvN+sVmn+JqnbtrjDDiAYmH09En/PxphTebqsK8PY4wMoPslBUxQ==)\n\nWe can also bind multiple checkboxes to the same array or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) value:\n\n```javascript\nconst checkedNames = ref([])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      checkedNames: []\n    }\n  }\n}\n```\n\n```html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n```\n\nChecked names: []\n\nJackJohnMike\n\nIn this case, the `checkedNames` array will always contain the values from the currently checked boxes.\n\n[Try it in the Playground](https://play.vuejs.org/#eNqVkUtqwzAURbfy0CTtoNU8KILSWaHdQNWBIj8T1fohyybBeO+RbOc3i2e+vHvuMWggHyG89x2SLWGtijokaDF1gQunbfAxwQARaxihjt7CJlc3wgmnvGsTqAOqBqsfabGFXSm+/P69CsfovJVXckhog5EJcwJgle7558yBK+AWhuFxaRwZLbVCZ0K70CVIp4A7Qabi3h8FAV3l/C9Vk797abpy/lrim/UVmkt/Gc4HOv+EkXs0UPt4XeCFZHQ6lM4TZn9w9+YlrjFPCC/kKrPVDd6Zv5e4wjwv8ELezIxeX4qMZwHduAs=)\n\n### Radio\n\n```html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\nPicked:\n\nOneTwo\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkDFuwzAMRa9CaHE7tNoDxUBP0A4dtTgWDQiRJUKmHQSG7x7KhpMMAbLxk3z/g5zVD9H3NKI6KDO02RPDgDxSbaPvKWWGGTJ2sECXUw+VrFY22timODCQb8/o4FhWPqrfiNWnjUZvRmIhgrGn0DCKAjDOT/XfCh1gnnd+WYwukwJYNj7SyMBXwqNVuXE+WQXeiUgRpZyaMJaR5BX11SeHQfTmJi1dnNiE5oQBupR3shbC6LX9Posvpdyz/jf1OksOe85ayVqIR5bR9z+o5Qbc6oCk)\n\n### Select\n\nSingle select:\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected:\n\nPlease select oneABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1j7EOgyAQhl/lwmI7tO4Nmti+QJOuLFTPxASBALoQ3r2H2jYOjvff939wkTXWXucJ2Y1x37rBBvAYJlsLPYzWuAARHPaQoHdmhILQQmihW6N9RhW2ATuoMnQqirPQvFw9ZKAh4GiVDEgTAPdW6hpeW+sGMf4VKVEz73Mvs8sC5stoOlSVYF9SsEVGiLFhMBq6wcu3IsUs1YREEvFUKD1udjAaebnS+27dHOT3g/yxy+nHywM08PJ3KksfXwJ2dA==)\n\nNote\nIf the initial value of your `v-model` expression does not match any of the options, the `<select>` element will render in an \"unselected\" state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.\n\nMultiple select (bound to array):\n\n```html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nSelected: []\n\nABC\n\n[Try it in the Playground](https://play.vuejs.org/#eNp1kL2OwjAQhF9l5Ya74i7QBhMJeARKTIESIyz5Z5VsAsjyu7NOQEBB5xl/M7vaKNaI/0OvRSlkV7cGCTpNPVbKG4ehJYjQ6hMkOLXBwYzRmfLK18F3GbW6Jt3AKkM/+8Ov8rKYeriBBWmH9kiaFYBszFDtHpkSYnwVpCSL/JtDDE4+DH8uNNqulHiCSoDrLRm0UyWzAckEX61l8Xh9+psv/vbD563HCSxk8bY0y45u47AJ2D/HHyDm4MU0dC5hMZ/jdal8Gg8wJkS6A3nRew4=)\n\nSelect options can be dynamically rendered with `v-for`:\n\n```javascript\nconst selected = ref('A')\n\nconst options = ref([\n  { text: 'One', value: 'A' },\n  { text: 'Two', value: 'B' },\n  { text: 'Three', value: 'C' }\n])\n```\n\n```javascript\nexport default {\n  data() {\n    return {\n      selected: 'A',\n      options: [\n        { text: 'One', value: 'A' },\n        { text: 'Two', value: 'B' },\n        { text: 'Three', value: 'C' }\n      ]\n    }\n  }\n}\n```\n\n```html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>\n```\n\n[Try it in the Playground](https://play.vuejs.org/#eNplkMFugzAQRH9l5YtbKYU7IpFoP6CH9lb3EMGiWgLbMguthPzvXduEJMqNYUazb7yKxrlimVFUop5arx3BhDS7kzJ6dNYTrOCxhwC9tyNIjkpllGmtmWJ0wJawg2MMPclGPl9N60jzx+Z9KQPcRfhHFch3g/IAy3mYkVUjIRzu/M9fe+O/Pvo/Hm8b3jihzDdfr8s8gwewIBzdcCZkBVBnXFheRtvhcFTiwq9ECnAkQ3Okt54Dm9TmskYJqNLR3SyS3BsYct3CRYSFwGCpusx/M0qZTydKRXWnl9PHBlPFhv1lQ6jL6MZl+xoR/gFjPZTD)\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms", "title": "Form Input Bindings", "description": "This page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:10", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Form Input Bindings | Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "scrapeId": "3872eddb-efa0-4e2c-95a9-11fb9804b74a", "sourceURL": "https://vuejs.org/guide/essentials/forms", "url": "https://vuejs.org/guide/essentials/forms", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Form Input Bindings in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Text Input**:\n\n```yaml\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\nThis snippet shows you how to basic text input, which is an important aspect of form input bindings.\n\n**Multiline Text Input**:\n\n```yaml\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\nThis snippet shows you how to multiline text input, which is an important aspect of form input bindings.\n\n**Single Checkbox**:\n\n```yaml\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n```\n\nThis snippet shows you how to single checkbox, which is an important aspect of form input bindings.\n\n**Multiple Checkboxes**:\n\n```yaml\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n```\n\nThis snippet shows you how to multiple checkboxes, which is an important aspect of form input bindings.\n\n**Single Radio Input**:\n\n```yaml\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n```\n\nThis snippet shows you how to single radio input, which is an important aspect of form input bindings.\n\n**Single Select Input**:\n\n```yaml\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nThis snippet shows you how to single select input, which is an important aspect of form input bindings.\n\n**Dynamic Select Options**:\n\n```yaml\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n```\n\nThis snippet shows you how to dynamic select options, which is an important aspect of form input bindings.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms", "title": "Form Input Bindings", "description": "This page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:10", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Form Input Bindings | Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "scrapeId": "3872eddb-efa0-4e2c-95a9-11fb9804b74a", "sourceURL": "https://vuejs.org/guide/essentials/forms", "url": "https://vuejs.org/guide/essentials/forms", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Form Input Bindings in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor languages that require an IME, use your own input event listener and value binding instead of using v-model.\n\nIf the initial value of your v-model expression does not match any of the options, provide a disabled option with an empty value to avoid issues on iOS.\n\nUse radio inputs instead of checkboxes with true-value and false-value attributes to guarantee form submissions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/forms", "title": "Form Input Bindings", "description": "This page covers how to use the v-model directive in Vue.js to bind form input elements to JavaScript state, simplifying the process of handling user inputs in forms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:10", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "title": "Form Input Bindings | Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "scrapeId": "3872eddb-efa0-4e2c-95a9-11fb9804b74a", "sourceURL": "https://vuejs.org/guide/essentials/forms", "url": "https://vuejs.org/guide/essentials/forms", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Lifecycle Hooks is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Lifecycle Hooks in vue-guide.\n\n# Lifecycle Hooks\n\nEach Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.Here's a quick rundown of what this is about:\n\n## Registering Lifecycle Hooks\n\nFor example, the `onMounted` hook can be used to run code after the component has finished the initial rendering and created the DOM nodes:\n\n### Code Example\n\n```vue\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\n```js\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, with the most commonly used being [`onMounted`](https://vuejs.org/api/composition-api-lifecycle#onmounted), [`onUpdated`](https://vuejs.org/api/composition-api-lifecycle#onupdated), and [`onUnmounted`](https://vuejs.org/api/composition-api-lifecycle#onunmounted). [`mounted`](https://vuejs.org/api/options-lifecycle#mounted), [`updated`](https://vuejs.org/api/options-lifecycle#updated), and [`unmounted`](https://vuejs.org/api/options-lifecycle#unmounted).\n\nAll lifecycle hooks are called with their `this` context pointing to the current active instance invoking it. Note this means you should avoid using arrow functions when declaring lifecycle hooks, as you won't be able to access the component instance via `this` if you do so.\n\nWhen calling `onMounted`, Vue automatically associates the registered callback function with the current active component instance. This requires these hooks to be registered **synchronously** during component setup. For example, do not do this:\n\n### Incorrect Example\n\n```js\nsetTimeout(() => {\n  onMounted(() => {\n    // this won't work.\n  })\n}, 100)\n```\n\nDo note this doesn't mean that the call must be placed lexically inside `setup()` or `<script setup>`. `onMounted()` can be called in an external function as long as the call stack is synchronous and originates from within `setup()`.\n\n## Lifecycle Diagram\n\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.\n\n![Component lifecycle diagram](https://vuejs.org/assets/lifecycle.MuZLBFAS.png)\n\nConsult the [Lifecycle Hooks API reference](https://vuejs.org/api/composition-api-lifecycle) for details on all lifecycle hooks and their respective use cases.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:32", "type": "overview", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "81a454d1-0919-489e-9a56-1d9904e7363e", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle", "url": "https://vuejs.org/guide/essentials/lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I registering lifecycle hooks in vue-guide?\n\nAssistant: To registering lifecycle hooks in vue-guide, here's what you do:\nFor example, the `onMounted` hook can be used to run code after the component has finished the initial rendering and created the DOM nodes:\n\n### Code Example\n\n```vue\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\n```js\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, with the most commonly used being [`onMounted`](https://vuejs.org/api/composition-api-lifecycle#onmounted), [`onUpdated`](https://vuejs.org/api/composition-api-lifecycle#onupdated), and [`onUnmounted`](https://vuejs.org/api/composition-api-lifecycle#onunmounted). [`mounted`](https://vuejs.org/api/options-lifecycle#mounted), [`updated`](https://vuejs.org/api/options-lifecycle#updated), and [`unmounted`](https://vuejs.org/api/options-lifecycle#unmounted).\n\nAll lifecycle hooks are called with their `this` context pointing to the current active instance invoking it. Note this means you should avoid using arrow functions when declaring lifecycle hooks, as you won't be able to access the component instance via `this` if you do so.\n\nWhen calling `onMounted`, Vue automatically associates the registered callback function with the current active component instance. This requires these hooks to be registered **synchronously** during component setup. For example, do not do this:\n\n### Incorrect Example\n\n```js\nsetTimeout(() => {\n  onMounted(() => {\n    // this won't work.\n  })\n}, 100)\n```\n\nDo note this doesn't mean that the call must be placed lexically inside `setup()` or `<script setup>`. `onMounted()` can be called in an external function as long as the call stack is synchronous and originates from within `setup()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:32", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "81a454d1-0919-489e-9a56-1d9904e7363e", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle", "url": "https://vuejs.org/guide/essentials/lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lifecycle diagram in vue-guide?\n\nAssistant: To lifecycle diagram in vue-guide, here's what you do:\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.\n\n![Component lifecycle diagram](https://vuejs.org/assets/lifecycle.MuZLBFAS.png)\n\nConsult the [Lifecycle Hooks API reference](https://vuejs.org/api/composition-api-lifecycle) for details on all lifecycle hooks and their respective use cases..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:32", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "81a454d1-0919-489e-9a56-1d9904e7363e", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle", "url": "https://vuejs.org/guide/essentials/lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Lifecycle Hooks in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using onMounted in <script setup>**:\n\n```yaml\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\nThis snippet shows you how to using onmounted in <script setup>, which is an important aspect of lifecycle hooks.\n\n**Using mounted in Options API**:\n\n```yaml\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\nThis snippet shows you how to using mounted in options api, which is an important aspect of lifecycle hooks.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:32", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "81a454d1-0919-489e-9a56-1d9904e7363e", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle", "url": "https://vuejs.org/guide/essentials/lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Lifecycle Hooks in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid using arrow functions when declaring lifecycle hooks to ensure access to the component instance via 'this'.\n\nLifecycle hooks must be registered synchronously during component setup.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/lifecycle", "title": "Lifecycle Hooks", "description": "Each Vue component instance goes through a series of initialization steps when it's created, running functions called lifecycle hooks, allowing users to add their own code at specific stages.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:29:32", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Lifecycle Hooks | Vue.js", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "81a454d1-0919-489e-9a56-1d9904e7363e", "sourceURL": "https://vuejs.org/guide/essentials/lifecycle", "url": "https://vuejs.org/guide/essentials/lifecycle", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Component Registration is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Component Registration in vue-guide.\n\n# Component Registration\n\nThis page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.Here's a quick rundown of what this is about:\n\n## Global Registration\n\nWe can make components available globally in the current Vue application using the `.component()` method:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)\n```\n\nIf using SFCs, you will be registering the imported `.vue` files:\n\n```js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)\n```\n\nThe `.component()` method can be chained:\n\n```js\napp\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)\n```\n\nGlobally registered components can be used in the template of any component within this application:\n\n```template\n<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>\n```\n\nThis even applies to all subcomponents, meaning all three of these components will also be available inside each other.\n\n## Local Registration\n\nWhile convenient, global registration has a few drawbacks:\n\n1. Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.\n\n2. Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables.\n\nLocal registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly.\n\nWhen using SFC with `<script setup>`, imported components can be locally used without registration:\n\n```vue\n<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nIn non- `<script setup>`, you will need to use the `components` option:\n\n```js\nimport ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}\n```\n\nLocal registration is done using the `components` option:\n\n```vue\n<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nFor each property in the `components` object, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:\n\n```js\nexport default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}\n```\n\nNote that locally registered components are _not_ also available in descendant components. In this case, `ComponentA` will be made available to the current component only, not any of its child or descendant components.\n\n## Component Name Casing\n\nThroughout the guide, we are using PascalCase names when registering components. This is because:\n\n1. PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.\n\n2. `<PascalCase />` makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).\n\nThis is the recommended style when working with SFC or string templates. However, as discussed in [in-DOM Template Parsing Caveats](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats), PascalCase tags are not usable in in-DOM templates.\n\nLuckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as `MyComponent` can be referenced inside a Vue template (or inside an HTML element rendered by Vue) via both `<MyComponent>` and `<my-component>`. This allows us to use the same JavaScript component registration code regardless of template source.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I global registration in vue-guide?\n\nAssistant: To global registration in vue-guide, here's what you do:\nWe can make components available globally in the current Vue application using the `.component()` method:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)\n```\n\nIf using SFCs, you will be registering the imported `.vue` files:\n\n```js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)\n```\n\nThe `.component()` method can be chained:\n\n```js\napp\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)\n```\n\nGlobally registered components can be used in the template of any component within this application:\n\n```template\n<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>\n```\n\nThis even applies to all subcomponents, meaning all three of these components will also be available inside each other..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I local registration in vue-guide?\n\nAssistant: To local registration in vue-guide, here's what you do:\nWhile convenient, global registration has a few drawbacks:\n\n1. Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.\n\n2. Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables.\n\nLocal registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly.\n\nWhen using SFC with `<script setup>`, imported components can be locally used without registration:\n\n```vue\n<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nIn non- `<script setup>`, you will need to use the `components` option:\n\n```js\nimport ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}\n```\n\nLocal registration is done using the `components` option:\n\n```vue\n<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>\n```\n\nFor each property in the `components` object, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:\n\n```js\nexport default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}\n```\n\nNote that locally registered components are _not_ also available in descendant components. In this case, `ComponentA` will be made available to the current component only, not any of its child or descendant components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I component name casing in vue-guide?\n\nAssistant: To component name casing in vue-guide, here's what you do:\nThroughout the guide, we are using PascalCase names when registering components. This is because:\n\n1. PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.\n\n2. `<PascalCase />` makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).\n\nThis is the recommended style when working with SFC or string templates. However, as discussed in [in-DOM Template Parsing Caveats](https://vuejs.org/guide/essentials/component-basics#in-dom-template-parsing-caveats), PascalCase tags are not usable in in-DOM templates.\n\nLuckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as `MyComponent` can be referenced inside a Vue template (or inside an HTML element rendered by Vue) via both `<MyComponent>` and `<my-component>`. This allows us to use the same JavaScript component registration code regardless of template source..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Component Registration in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Global Component Registration Example**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  'MyComponent',\n  {\n    /* ... */\n  }\n)\n```\n\nThis snippet shows you how to global component registration example, which is an important aspect of component registration.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "code_examples", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Component Registration in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse PascalCase for component names to differentiate them from native HTML elements.\n\nConsider local registration for better tree-shaking and explicit dependency relationships.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/registration", "title": "Component Registration", "description": "This page covers how to register components in Vue, including global and local registration methods, component name casing, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:29:56", "type": "best_practices", "page_metadata": {"theme-color": "#3c8772", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Component Registration | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "81d40704-8a85-404d-b5c9-7d8cdb6d3968", "sourceURL": "https://vuejs.org/guide/components/registration", "url": "https://vuejs.org/guide/components/registration", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Computed Properties is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Computed Properties in vue-guide.\n\n# Computed Properties\n\nThis page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.Here's a quick rundown of what this is about:\n\n## Basic Example\n\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\n```js\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\nAnd we want to display different messages depending on if `author` already has some books or not:\n\n```template\n<p>Has published books:</p>\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\n```\n\nAt this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending on `author.books`. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once.\n\nThat's why for complex logic that includes reactive data, it is recommended to use a **computed property**. Here's the same example, refactored:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\n```template\n<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>\n```\n\nHere we have declared a computed property `publishedBooksMessage`. Try to change the value of the `books` array in the application `data` and you will see how `publishedBooksMessage` is changing accordingly. You can data-bind to computed properties in templates just like a normal property. Vue is aware that `this.publishedBooksMessage` depends on `this.author.books`, so it will update any bindings that depend on `this.publishedBooksMessage` when `this.author.books` changes.\n\n## Computed Caching vs. Methods\n\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n```template\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n```js\n// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their reactive dependencies.** A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as `author.books` has not changed, multiple access to `publishedBooksMessage` will immediately return the previously computed result without having to run the getter function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n```js\ncomputed: {\n  now() {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens. Why do we need caching? Imagine we have an expensive computed property `list`, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend on `list`. Without caching, we would be executing `list`‚Äôs getter many more times than necessary! In cases where you do not want caching, use a method call instead.\n\n## Writable Computed\n\nComputed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:\n\n```js\nexport default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}\n```\n\nNow when you run `this.fullName = 'John Doe'`, the setter will be invoked and `this.firstName` and `this.lastName` will be updated accordingly.\n\n## Getting the Previous Value\n\n- Only supported in 3.4+\n\nIn case you need it, you can get the previous value returned by the computed property accessing the first argument of the getter:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}\n```\n\nIn case you're using a writable computed:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}\n```\n\n## Best Practices\n\n### Getters should be side-effect free\n\nIt is important to remember that computed getter functions should only perform pure computation and be free of side effects. For example, **don't mutate other state, make async requests, or mutate the DOM inside a computed getter!** Think of a computed property as declaratively describing how to derive a value based on other values - its only responsibility should be computing and returning that value. Later in the guide we will discuss how we can perform side effects in reaction to state changes with [watchers](https://vuejs.org/guide/essentials/watchers).\n\n### Avoid mutating computed value\n\nThe returned value from a computed property is derived state. Think of it as a temporary snapshot - every time the source state changes, a new snapshot is created. It does not make sense to mutate a snapshot, so a computed return value should be treated as read-only and never be mutated - instead, update the source state it depends on to trigger new computations.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic example in vue-guide?\n\nAssistant: To basic example in vue-guide, here's what you do:\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\n```js\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\nAnd we want to display different messages depending on if `author` already has some books or not:\n\n```template\n<p>Has published books:</p>\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\n```\n\nAt this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending on `author.books`. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once.\n\nThat's why for complex logic that includes reactive data, it is recommended to use a **computed property**. Here's the same example, refactored:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\n```template\n<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>\n```\n\nHere we have declared a computed property `publishedBooksMessage`. Try to change the value of the `books` array in the application `data` and you will see how `publishedBooksMessage` is changing accordingly. You can data-bind to computed properties in templates just like a normal property. Vue is aware that `this.publishedBooksMessage` depends on `this.author.books`, so it will update any bindings that depend on `this.publishedBooksMessage` when `this.author.books` changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I computed caching vs. methods in vue-guide?\n\nAssistant: To computed caching vs. methods in vue-guide, here's what you do:\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n```template\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n```js\n// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their reactive dependencies.** A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as `author.books` has not changed, multiple access to `publishedBooksMessage` will immediately return the previously computed result without having to run the getter function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n```js\ncomputed: {\n  now() {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens. Why do we need caching? Imagine we have an expensive computed property `list`, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend on `list`. Without caching, we would be executing `list`‚Äôs getter many more times than necessary! In cases where you do not want caching, use a method call instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I writable computed in vue-guide?\n\nAssistant: To writable computed in vue-guide, here's what you do:\nComputed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:\n\n```js\nexport default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}\n```\n\nNow when you run `this.fullName = 'John Doe'`, the setter will be invoked and `this.firstName` and `this.lastName` will be updated accordingly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I getting the previous value in vue-guide?\n\nAssistant: To getting the previous value in vue-guide, here's what you do:\n- Only supported in 3.4+\n\nIn case you need it, you can get the previous value returned by the computed property accessing the first argument of the getter:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}\n```\n\nIn case you're using a writable computed:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I best practices in vue-guide?\n\nAssistant: To best practices in vue-guide, here's what you do:\n### Getters should be side-effect free\n\nIt is important to remember that computed getter functions should only perform pure computation and be free of side effects. For example, **don't mutate other state, make async requests, or mutate the DOM inside a computed getter!** Think of a computed property as declaratively describing how to derive a value based on other values - its only responsibility should be computing and returning that value. Later in the guide we will discuss how we can perform side effects in reaction to state changes with [watchers](https://vuejs.org/guide/essentials/watchers).\n\n### Avoid mutating computed value\n\nThe returned value from a computed property is derived state. Think of it as a temporary snapshot - every time the source state changes, a new snapshot is created. It does not make sense to mutate a snapshot, so a computed return value should be treated as read-only and never be mutated - instead, update the source state it depends on to trigger new computations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Computed Properties in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Example - Author Data**:\n\n```yaml\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\nThis snippet shows you how to basic example - author data, which is an important aspect of computed properties.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 02:31:31", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "title": "Computed Properties | Vue.js", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "theme-color": "#3c8772", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "twitter:card": "summary", "language": "en-US", "ogUrl": "https://vuejs.org/", "scrapeId": "31cab7ef-8584-4168-beea-d8faf850d3f1", "sourceURL": "https://vuejs.org/guide/essentials/computed", "url": "https://vuejs.org/guide/essentials/computed", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Creating a Vue Application is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Creating a Vue Application in vue-guide.\n\n# Creating a Vue Application\n\nThis page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.Here's a quick rundown of what this is about:\n\n## The application instance\n\nEvery Vue application starts by creating a new **application instance** with the [`createApp`](https://vuejs.org/api/application#createapp) function:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\n## The Root Component\n\nThe object we are passing into `createApp` is in fact a component. Every app requires a \"root component\" that can contain other components as its children.\n\nIf you are using Single-File Components, we typically import the root component from another file:\n\n```js\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nWhile many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:\n\n```\nApp (root component)\n‚îú‚îÄ TodoList\n‚îÇ  ‚îî‚îÄ TodoItem\n‚îÇ     ‚îú‚îÄ TodoDeleteButton\n‚îÇ     ‚îî‚îÄ TodoEditButton\n‚îî‚îÄ TodoFooter\n   ‚îú‚îÄ TodoClearButton\n   ‚îî‚îÄ TodoStatistics\n```\n\n## Mounting the App\n\nAn application instance won't render anything until its `.mount()` method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:\n\n```html\n<div id=\"app\"></div>\n```\n\n```js\napp.mount('#app')\n```\n\nThe content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app.\n\nThe `.mount()` method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance.\n\n## In-DOM Root Component Template\n\nThe template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:\n\n```html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')\n```\n\nVue will automatically use the container's `innerHTML` as the template if the root component does not already have a `template` option.\n\nIn-DOM templates are often used in applications that are [using Vue without a build step](https://vuejs.org/guide/quick-start#using-vue-from-cdn). They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server.\n\n## App Configurations\n\nThe application instance exposes a `.config` object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:\n\n```js\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\nThe application instance also provides a few methods for registering app-scoped assets. For example, registering a component:\n\n```js\napp.component('TodoDeleteButton', TodoDeleteButton)\n```\n\nThis makes the `TodoDeleteButton` available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its [API reference](https://vuejs.org/api/application).\n\nMake sure to apply all app configurations before mounting the app!\n\n## Multiple application instances\n\nYou are not limited to a single application instance on the same page. The `createApp` API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:\n\n```js\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the application instance in vue-guide?\n\nAssistant: To the application instance in vue-guide, here's what you do:\nEvery Vue application starts by creating a new **application instance** with the [`createApp`](https://vuejs.org/api/application#createapp) function:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the root component in vue-guide?\n\nAssistant: To the root component in vue-guide, here's what you do:\nThe object we are passing into `createApp` is in fact a component. Every app requires a \"root component\" that can contain other components as its children.\n\nIf you are using Single-File Components, we typically import the root component from another file:\n\n```js\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nWhile many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:\n\n```\nApp (root component)\n‚îú‚îÄ TodoList\n‚îÇ  ‚îî‚îÄ TodoItem\n‚îÇ     ‚îú‚îÄ TodoDeleteButton\n‚îÇ     ‚îî‚îÄ TodoEditButton\n‚îî‚îÄ TodoFooter\n   ‚îú‚îÄ TodoClearButton\n   ‚îî‚îÄ TodoStatistics\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mounting the app in vue-guide?\n\nAssistant: To mounting the app in vue-guide, here's what you do:\nAn application instance won't render anything until its `.mount()` method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:\n\n```html\n<div id=\"app\"></div>\n```\n\n```js\napp.mount('#app')\n```\n\nThe content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app.\n\nThe `.mount()` method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I in-dom root component template in vue-guide?\n\nAssistant: To in-dom root component template in vue-guide, here's what you do:\nThe template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:\n\n```html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')\n```\n\nVue will automatically use the container's `innerHTML` as the template if the root component does not already have a `template` option.\n\nIn-DOM templates are often used in applications that are [using Vue without a build step](https://vuejs.org/guide/quick-start#using-vue-from-cdn). They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app configurations in vue-guide?\n\nAssistant: To app configurations in vue-guide, here's what you do:\nThe application instance exposes a `.config` object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:\n\n```js\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\nThe application instance also provides a few methods for registering app-scoped assets. For example, registering a component:\n\n```js\napp.component('TodoDeleteButton', TodoDeleteButton)\n```\n\nThis makes the `TodoDeleteButton` available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its [API reference](https://vuejs.org/api/application).\n\nMake sure to apply all app configurations before mounting the app!.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I multiple application instances in vue-guide?\n\nAssistant: To multiple application instances in vue-guide, here's what you do:\nYou are not limited to a single application instance on the same page. The `createApp` API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:\n\n```js\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Creating a Vue Application in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Vue Application Instance**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\nThis snippet shows you how to creating a vue application instance, which is an important aspect of creating a vue application.\n\n**Using a Root Component**:\n\n```yaml\nimport { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\nThis snippet shows you how to using a root component, which is an important aspect of creating a vue application.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Creating a Vue Application in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to apply all app configurations before mounting the app!\n\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/application", "title": "Creating a Vue Application", "description": "This page covers the basics of creating a Vue application, including the application instance, root component, mounting the app, app configurations, and handling multiple application instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:32:01", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "og:type": "website", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "title": "Creating a Vue Application | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "twitter:site": "@vuejs", "twitter:card": "summary", "og:title": "Vue.js", "scrapeId": "2b2c1662-ee1b-43c2-983c-0a6ae6e5a3ac", "sourceURL": "https://vuejs.org/guide/essentials/application", "url": "https://vuejs.org/guide/essentials/application", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what List Rendering is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain List Rendering in vue-guide.\n\n# List Rendering\n\nThis page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.Here's a quick rundown of what this is about:\n\n## `v-for`\n\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n```js\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\nInside the `v-for` scope, template expressions have access to all parent scope properties. In addition, `v-for` also supports an optional second alias for the index of the current item:\n\n```js\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\nParent - 0 - Foo\nParent - 1 - Bar\n\nThe variable scoping of `v-for` is similar to the following JavaScript:\n\n```js\nconst parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})\n```\n\nNotice how the `v-for` value matches the function signature of the `forEach` callback. In fact, you can use destructuring on the `v-for` item alias similar to destructuring function arguments:\n\n```template\n<li v-for=\"{ message } in items\">\n  {{ message }}\n</li>\n\n<!-- with index alias -->\n<li v-for=\"({ message }, index) in items\">\n  {{ message }} {{ index }}\n</li>\n```\n\nFor nested `v-for`, scoping also works similar to nested functions. Each `v-for` scope has access to parent scopes:\n\n```template\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n```template\n<div v-for=\"item of items\"></div>\n```\n\n## `v-for` with an Object\n\nYou can also use `v-for` to iterate through the properties of an object. The iteration order will be based on the result of calling `Object.values()` on the object:\n\n```js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\n```js\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\n```template\n<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>\n```\n\nYou can also provide a second alias for the property's name (a.k.a. key):\n\n```template\n<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>\n```\n\nAnd another for the index:\n\n```template\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n## `v-for` with a Range\n\n`v-for` can also take an integer. In this case it will repeat the template that many times, based on a range of `1...n`.\n\n```template\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nNote here `n` starts with an initial value of `1` instead of `0`.\n\n## `v-for` on `<template>`\n\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n```template\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```\n\n## `v-for` with `v-if`\n\nWhen they exist on the same node, `v-if` has a higher priority than `v-for`. That means the `v-if` condition will not have access to variables from the scope of the `v-for`:\n\n```template\n<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>\n```\n\nThis can be fixed by moving `v-for` to a wrapping `<template>` tag (which is also more explicit):\n\n```template\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\nNote\nIt's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`).\n\n## Maintaining State with `key`\n\nWhen Vue is updating a list of elements rendered with `v-for`, by default it uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.\n\nThis default mode is efficient, but **only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item:\n\n```template\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nWhen using `<template v-for>`, the `key` should be placed on the `<template>` container:\n\n```template\n<template v-for=\"todo in todos\" :key=\"todo.name\">\n  <li>{{ todo.name }}</li>\n</template>\n```\n\nNote\n`key` here is a special attribute being bound with `v-bind`. It should not be confused with the property key variable when [using `v-for` with an object](https://vuejs.org/guide/essentials/list#v-for-with-an-object).\n\nIt is recommended to provide a `key` attribute with `v-for` whenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains.\n\nThe `key` binding expects primitive values - i.e. strings and numbers. Do not use objects as `v-for` keys. For detailed usage of the `key` attribute, please see the [`key` API documentation](https://vuejs.org/api/built-in-special-attributes#key).\n\n## `v-for` with a Component\n\nThis section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a component, like any normal element (don't forget to provide a `key`):\n\n```template\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n```template\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations.\n\n## Array Change Detection\n\nVue is able to detect when a reactive array's mutation methods are called and trigger necessary updates. These mutation methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\n### Replacing an Array\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original array but **always return a new array**. When working with non-mutating methods, we should replace the old array with the new one:\n\n```js\n// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\n```js\nthis.items = this.items.filter((item) => item.message.match(/Foo/))\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.\n\n## Displaying Filtered/Sorted Results\n\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n```js\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\n```js\ndata() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}\n```\n\n```template\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\nIn situations where computed properties are not feasible (e.g. inside nested `v-for` loops), you can use a method:\n\n```js\nconst sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}\n```\n\n```js\ndata() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}\n```\n\n```template\n<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>\n```\n\nBe careful with `reverse()` and `sort()` in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:\n\n```diff\n- return numbers.reverse()\n+ return [...numbers].reverse()\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "overview", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` in vue-guide?\n\nAssistant: To `v-for` in vue-guide, here's what you do:\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n```js\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\nInside the `v-for` scope, template expressions have access to all parent scope properties. In addition, `v-for` also supports an optional second alias for the index of the current item:\n\n```js\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\n```js\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\n```template\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\nParent - 0 - Foo\nParent - 1 - Bar\n\nThe variable scoping of `v-for` is similar to the following JavaScript:\n\n```js\nconst parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})\n```\n\nNotice how the `v-for` value matches the function signature of the `forEach` callback. In fact, you can use destructuring on the `v-for` item alias similar to destructuring function arguments:\n\n```template\n<li v-for=\"{ message } in items\">\n  {{ message }}\n</li>\n\n<!-- with index alias -->\n<li v-for=\"({ message }, index) in items\">\n  {{ message }} {{ index }}\n</li>\n```\n\nFor nested `v-for`, scoping also works similar to nested functions. Each `v-for` scope has access to parent scopes:\n\n```template\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n```template\n<div v-for=\"item of items\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with an object in vue-guide?\n\nAssistant: To `v-for` with an object in vue-guide, here's what you do:\nYou can also use `v-for` to iterate through the properties of an object. The iteration order will be based on the result of calling `Object.values()` on the object:\n\n```js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\n```js\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\n```template\n<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>\n```\n\nYou can also provide a second alias for the property's name (a.k.a. key):\n\n```template\n<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>\n```\n\nAnd another for the index:\n\n```template\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with a range in vue-guide?\n\nAssistant: To `v-for` with a range in vue-guide, here's what you do:\n`v-for` can also take an integer. In this case it will repeat the template that many times, based on a range of `1...n`.\n\n```template\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nNote here `n` starts with an initial value of `1` instead of `0`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` on `<template>` in vue-guide?\n\nAssistant: To `v-for` on `<template>` in vue-guide, here's what you do:\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n```template\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with `v-if` in vue-guide?\n\nAssistant: To `v-for` with `v-if` in vue-guide, here's what you do:\nWhen they exist on the same node, `v-if` has a higher priority than `v-for`. That means the `v-if` condition will not have access to variables from the scope of the `v-for`:\n\n```template\n<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>\n```\n\nThis can be fixed by moving `v-for` to a wrapping `<template>` tag (which is also more explicit):\n\n```template\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\nNote\nIt's **not** recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I maintaining state with `key` in vue-guide?\n\nAssistant: To maintaining state with `key` in vue-guide, here's what you do:\nWhen Vue is updating a list of elements rendered with `v-for`, by default it uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.\n\nThis default mode is efficient, but **only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item:\n\n```template\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nWhen using `<template v-for>`, the `key` should be placed on the `<template>` container:\n\n```template\n<template v-for=\"todo in todos\" :key=\"todo.name\">\n  <li>{{ todo.name }}</li>\n</template>\n```\n\nNote\n`key` here is a special attribute being bound with `v-bind`. It should not be confused with the property key variable when [using `v-for` with an object](https://vuejs.org/guide/essentials/list#v-for-with-an-object).\n\nIt is recommended to provide a `key` attribute with `v-for` whenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains.\n\nThe `key` binding expects primitive values - i.e. strings and numbers. Do not use objects as `v-for` keys. For detailed usage of the `key` attribute, please see the [`key` API documentation](https://vuejs.org/api/built-in-special-attributes#key)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-for` with a component in vue-guide?\n\nAssistant: To `v-for` with a component in vue-guide, here's what you do:\nThis section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a component, like any normal element (don't forget to provide a `key`):\n\n```template\n<MyComponent v-for=\"item in items\" :key=\"item.id\" />\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n```template\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I array change detection in vue-guide?\n\nAssistant: To array change detection in vue-guide, here's what you do:\nVue is able to detect when a reactive array's mutation methods are called and trigger necessary updates. These mutation methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\n### Replacing an Array\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original array but **always return a new array**. When working with non-mutating methods, we should replace the old array with the new one:\n\n```js\n// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))\n```\n\n```js\nthis.items = this.items.filter((item) => item.message.match(/Foo/))\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I displaying filtered/sorted results in vue-guide?\n\nAssistant: To displaying filtered/sorted results in vue-guide, here's what you do:\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n```js\nconst numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})\n```\n\n```js\ndata() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}\n```\n\n```template\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\nIn situations where computed properties are not feasible (e.g. inside nested `v-for` loops), you can use a method:\n\n```js\nconst sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}\n```\n\n```js\ndata() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}\n```\n\n```template\n<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>\n```\n\nBe careful with `reverse()` and `sort()` in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:\n\n```diff\n- return numbers.reverse()\n+ return [...numbers].reverse()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for List Rendering in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic v-for Example**:\n\n```yaml\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\nThis snippet shows you how to basic v-for example, which is an important aspect of list rendering.\n\n**Data Function Example**:\n\n```yaml\ndata() {\n  return {\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\nThis snippet shows you how to data function example, which is an important aspect of list rendering.\n\n**Template Example**:\n\n```yaml\n<li v-for=\"item in items\">\n  {{ item.message }}\n</li>\n```\n\nThis snippet shows you how to template example, which is an important aspect of list rendering.\n\n**Parent Message Example**:\n\n```yaml\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\nThis snippet shows you how to parent message example, which is an important aspect of list rendering.\n\n**Nested v-for Example**:\n\n```yaml\n<li v-for=\"item in items\">\n  <span v-for=\"childItem in item.children\">\n    {{ item.message }} {{ childItem }}\n  </span>\n</li>\n```\n\nThis snippet shows you how to nested v-for example, which is an important aspect of list rendering.\n\n**v-for with Object Example**:\n\n```yaml\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\nThis snippet shows you how to v-for with object example, which is an important aspect of list rendering.\n\n**v-for with Range Example**:\n\n```yaml\n<span v-for=\"n in 10\">{{ n }}</span>\n```\n\nThis snippet shows you how to v-for with range example, which is an important aspect of list rendering.\n\n**v-for on Template Example**:\n\n```yaml\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\" role=\"presentation\"></li>\n  </template>\n</ul>\n```\n\nThis snippet shows you how to v-for on template example, which is an important aspect of list rendering.\n\n**v-if with v-for Example**:\n\n```yaml\n<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>\n```\n\nThis snippet shows you how to v-if with v-for example, which is an important aspect of list rendering.\n\n**Maintaining State with key Example**:\n\n```yaml\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nThis snippet shows you how to maintaining state with key example, which is an important aspect of list rendering.\n\n**v-for with Component Example**:\n\n```yaml\n<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>\n```\n\nThis snippet shows you how to v-for with component example, which is an important aspect of list rendering.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "code_examples", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using List Rendering in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt's not recommended to use `v-if` and `v-for` on the same element due to implicit precedence.\n\nProvide a `key` attribute with `v-for` whenever possible, unless the iterated DOM content is simple or you are intentionally relying on the default behavior for performance gains.\n\nBe careful with `reverse()` and `sort()` in a computed property; create a copy of the original array before calling these methods.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/list", "title": "List Rendering", "description": "This page covers how to render lists in Vue.js using the v-for directive, including various use cases and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:34:01", "type": "best_practices", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "title": "List Rendering | Vue.js", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "scrapeId": "969a454d-75ff-4a46-ac07-72b8409fa22c", "sourceURL": "https://vuejs.org/guide/essentials/list", "url": "https://vuejs.org/guide/essentials/list", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Plugins is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Plugins in vue-guide.\n\n# Plugins\n\nPlugins are self-contained code that usually add app-level functionality to Vue.Here's a quick rundown of what this is about:\n\n## Introduction\n\nPlugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\nA plugin is defined as either an object that exposes an `install()` method, or simply a function that acts as the install function itself. The install function receives the app instance along with additional options passed to `app.use()`, if any:\n\n```js\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThere is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:\n\n1. Register one or more global components or custom directives with `app.component()` and `app.directive()`.\n2. Make a resource injectable throughout the app by calling `app.provide()`.\n3. Add some global instance properties or methods by attaching them to `app.config.globalProperties`.\n4. A library that needs to perform some combination of the above (e.g. vue-router).\n\n## Writing a Plugin\n\nIn order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displays `i18n` (short for Internationalization) strings.\n\nLet's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\nWe want to create a translation function. This function will receive a dot-delimited `key` string, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:\n\n```template\n<h1>{{ $translate('greetings.hello') }}</h1>\n```\n\nSince this function should be globally available in all templates, we will make it so by attaching it to `app.config.globalProperties` in our plugin:\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\nOur `$translate` function will take a string such as `greetings.hello`, look inside the user provided configuration and return the translated value.\n\nThe object containing the translated keys should be passed to the plugin during installation via additional parameters to `app.use()`:\n\n```js\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\nNow, our initial expression `$translate('greetings.hello')` will be replaced by `Bonjour!` at runtime.\n\n## Provide / Inject with Plugins\n\nPlugins also allow us to use `inject` to provide a function or attribute to the plugin's users. For example, we can allow the application to have access to the `options` parameter to be able to use the translations object.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\nPlugin users will now be able to inject the plugin options into their components using the `i18n` key:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>\n```\n\n```js\nexport default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}\n```\n\n## Bundle for NPM\n\nIf you further want to build and publish your plugin for others to use, see Vite's section on Library Mode.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "overview", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nPlugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})\n```\n\nA plugin is defined as either an object that exposes an `install()` method, or simply a function that acts as the install function itself. The install function receives the app instance along with additional options passed to `app.use()`, if any:\n\n```js\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThere is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:\n\n1. Register one or more global components or custom directives with `app.component()` and `app.directive()`.\n2. Make a resource injectable throughout the app by calling `app.provide()`.\n3. Add some global instance properties or methods by attaching them to `app.config.globalProperties`.\n4. A library that needs to perform some combination of the above (e.g. vue-router)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I writing a plugin in vue-guide?\n\nAssistant: To writing a plugin in vue-guide, here's what you do:\nIn order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displays `i18n` (short for Internationalization) strings.\n\nLet's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // Plugin code goes here\n  }\n}\n```\n\nWe want to create a translation function. This function will receive a dot-delimited `key` string, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:\n\n```template\n<h1>{{ $translate('greetings.hello') }}</h1>\n```\n\nSince this function should be globally available in all templates, we will make it so by attaching it to `app.config.globalProperties` in our plugin:\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}\n```\n\nOur `$translate` function will take a string such as `greetings.hello`, look inside the user provided configuration and return the translated value.\n\nThe object containing the translated keys should be passed to the plugin during installation via additional parameters to `app.use()`:\n\n```js\nimport i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})\n```\n\nNow, our initial expression `$translate('greetings.hello')` will be replaced by `Bonjour!` at runtime..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide / inject with plugins in vue-guide?\n\nAssistant: To provide / inject with plugins in vue-guide, here's what you do:\nPlugins also allow us to use `inject` to provide a function or attribute to the plugin's users. For example, we can allow the application to have access to the `options` parameter to be able to use the translations object.\n\n```js\n// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}\n```\n\nPlugin users will now be able to inject the plugin options into their components using the `i18n` key:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>\n```\n\n```js\nexport default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I bundle for npm in vue-guide?\n\nAssistant: To bundle for npm in vue-guide, here's what you do:\nIf you further want to build and publish your plugin for others to use, see Vite's section on Library Mode..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Plugins in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing a Plugin**:\n\n```yaml\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n} )\n```\n\nThis snippet shows you how to installing a plugin, which is an important aspect of plugins.\n\n**Defining a Plugin**:\n\n```yaml\nconst myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}\n```\n\nThis snippet shows you how to defining a plugin, which is an important aspect of plugins.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "code_examples", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Plugins in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse global properties scarcely, since it can quickly become confusing if too many global properties injected by different plugins are used throughout an app.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/plugins", "title": "Plugins", "description": "Plugins are self-contained code that usually add app-level functionality to Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:47:37", "type": "best_practices", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:type": "website", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "language": "en-US", "og:title": "Vue.js", "title": "Plugins | Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "scrapeId": "abcb126d-c7b6-4776-ba3d-cfd9850ce0a6", "sourceURL": "https://vuejs.org/guide/reusability/plugins", "url": "https://vuejs.org/guide/reusability/plugins", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Async Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Async Components in vue-guide.\n\n# Async Components\n\nThis page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has a `defineAsyncComponent` function:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component\n```\n\nAs you can see, `defineAsyncComponent` accepts a loader function that returns a Promise. The Promise's `resolve` callback should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed.\n\n[ES module dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) also returns a Promise, so most of the time we will use it in combination with `defineAsyncComponent`. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThe resulting `AsyncComp` is a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading.\n\nAs with normal components, async components can be [registered globally](https://vuejs.org/guide/components/registration#global-registration) using `app.component()`:\n\n```js\napp.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))\n```\n\nYou can also use `defineAsyncComponent` when [registering a component locally](https://vuejs.org/guide/components/registration#local-registration):\n\n```vue\n<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\nThey can also be defined directly inside their parent component:\n\n```vue\n<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\n## Loading and Error States\n\nAsynchronous operations inevitably involve loading and error states - `defineAsyncComponent()` supports handling these states via advanced options:\n\n```js\nconst AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})\n```\n\nIf a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker.\n\nIf an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long.\n\n## Lazy Hydration\n\nThis section only applies if you are using [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\n\nIn Vue 3.5+, async components can control when they are hydrated by providing a hydration strategy.\n\n- Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used.\n\n- The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt).\n\n## Hydrate on Idle\n\nHydrates via `requestIdleCallback`:\n\n```js\nimport { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})\n```\n\n## Hydrate on Visible\n\nHydrate when element(s) become visible via `IntersectionObserver`.\n\n```js\nimport { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n```\n\nCan optionally pass in an options object value for the observer:\n\n```js\nhydrateOnVisible({ rootMargin: '100px' })\n```\n\n## Hydrate on Media Query\n\nHydrates when the specified media query matches.\n\n```js\nimport { defineAsyncComponent, hydrateOnMediaQuery } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n```\n\n## Hydrate on Interaction\n\nHydrates when specified event(s) are triggered on the component element(s). The event that triggered the hydration will also be replayed once hydration is complete.\n\n```js\nimport { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})\n```\n\nCan also be a list of multiple event types:\n\n```js\nhydrateOnInteraction(['wheel', 'mouseover'])\n```\n\n## Custom Strategy\n\n```ts\nimport { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})\n```\n\n## Using with Suspense\n\nAsync components can be used with the `<Suspense>` built-in component. The interaction between `<Suspense>` and async components is documented in the [dedicated chapter for `<Suspense>`](https://vuejs.org/guide/built-ins/suspense).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "overview", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has a `defineAsyncComponent` function:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component\n```\n\nAs you can see, `defineAsyncComponent` accepts a loader function that returns a Promise. The Promise's `resolve` callback should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed.\n\n[ES module dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) also returns a Promise, so most of the time we will use it in combination with `defineAsyncComponent`. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThe resulting `AsyncComp` is a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading.\n\nAs with normal components, async components can be [registered globally](https://vuejs.org/guide/components/registration#global-registration) using `app.component()`:\n\n```js\napp.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))\n```\n\nYou can also use `defineAsyncComponent` when [registering a component locally](https://vuejs.org/guide/components/registration#local-registration):\n\n```vue\n<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```\n\nThey can also be defined directly inside their parent component:\n\n```vue\n<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I loading and error states in vue-guide?\n\nAssistant: To loading and error states in vue-guide, here's what you do:\nAsynchronous operations inevitably involve loading and error states - `defineAsyncComponent()` supports handling these states via advanced options:\n\n```js\nconst AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})\n```\n\nIf a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker.\n\nIf an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lazy hydration in vue-guide?\n\nAssistant: To lazy hydration in vue-guide, here's what you do:\nThis section only applies if you are using [Server-Side Rendering](https://vuejs.org/guide/scaling-up/ssr).\n\nIn Vue 3.5+, async components can control when they are hydrated by providing a hydration strategy.\n\n- Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used.\n\n- The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hydrate on idle in vue-guide?\n\nAssistant: To hydrate on idle in vue-guide, here's what you do:\nHydrates via `requestIdleCallback`:\n\n```js\nimport { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hydrate on visible in vue-guide?\n\nAssistant: To hydrate on visible in vue-guide, here's what you do:\nHydrate when element(s) become visible via `IntersectionObserver`.\n\n```js\nimport { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n```\n\nCan optionally pass in an options object value for the observer:\n\n```js\nhydrateOnVisible({ rootMargin: '100px' })\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hydrate on media query in vue-guide?\n\nAssistant: To hydrate on media query in vue-guide, here's what you do:\nHydrates when the specified media query matches.\n\n```js\nimport { defineAsyncComponent, hydrateOnMediaQuery } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hydrate on interaction in vue-guide?\n\nAssistant: To hydrate on interaction in vue-guide, here's what you do:\nHydrates when specified event(s) are triggered on the component element(s). The event that triggered the hydration will also be replayed once hydration is complete.\n\n```js\nimport { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})\n```\n\nCan also be a list of multiple event types:\n\n```js\nhydrateOnInteraction(['wheel', 'mouseover'])\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I custom strategy in vue-guide?\n\nAssistant: To custom strategy in vue-guide, here's what you do:\n```ts\nimport { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using with suspense in vue-guide?\n\nAssistant: To using with suspense in vue-guide, here's what you do:\nAsync components can be used with the `<Suspense>` built-in component. The interaction between `<Suspense>` and async components is documented in the [dedicated chapter for `<Suspense>`](https://vuejs.org/guide/built-ins/suspense)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Async Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of async components.\n\n**ES Module Dynamic Import Example**:\n\n```yaml\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)\n```\n\nThis snippet shows you how to es module dynamic import example, which is an important aspect of async components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Async Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `defineAsyncComponent` to load components only when needed, improving performance in large applications.\n\nHandle loading and error states to enhance user experience during asynchronous operations.\n\nConsider using built-in hydration strategies for better control over when components are hydrated.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/async", "title": "Async Components", "description": "This page covers the usage of async components in Vue, including how to define them, handle loading and error states, and use them with various hydration strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:48:18", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Async Components | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "scrapeId": "1b4700e0-6cc3-4e3c-9a54-cecea003e29c", "sourceURL": "https://vuejs.org/guide/components/async", "url": "https://vuejs.org/guide/components/async", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Animation Techniques is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Animation Techniques in vue-guide.\n\n# Animation Techniques\n\nVue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.Here's a quick rundown of what this is about:\n\n## Class-based Animations\n\nFor elements that are not entering / leaving the DOM, we can trigger animations by dynamically adding a CSS class:\n\n```js\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n```\n\n```template\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n```\n\n```css\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:48:34", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Animation Techniques | Vue.js", "theme-color": "#3c8772", "og:type": "website", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "1cbd8a1c-25bc-45a8-a2f4-e3b7d0f11d38", "sourceURL": "https://vuejs.org/guide/extras/animation", "url": "https://vuejs.org/guide/extras/animation", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I class-based animations in vue-guide?\n\nAssistant: To class-based animations in vue-guide, here's what you do:\nFor elements that are not entering / leaving the DOM, we can trigger animations by dynamically adding a CSS class:\n\n```js\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n```\n\n```js\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n```\n\n```template\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n```\n\n```css\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:48:34", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Animation Techniques | Vue.js", "theme-color": "#3c8772", "og:type": "website", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "1cbd8a1c-25bc-45a8-a2f4-e3b7d0f11d38", "sourceURL": "https://vuejs.org/guide/extras/animation", "url": "https://vuejs.org/guide/extras/animation", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Animation Techniques in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Class-based Animations Example**:\n\n```yaml\nconst disabled = ref(false)\n\nfunction warnDisabled() {\n  disabled.value = true\n  setTimeout(() => {\n    disabled.value = false\n  }, 1500)\n}\n\nexport default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}\n\n<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>\n\n.shake {\n  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n  transform: translate3d(0, 0, 0);\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\nThis snippet shows you how to class-based animations example, which is an important aspect of animation techniques.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:48:34", "type": "code_examples", "page_metadata": {"twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Animation Techniques | Vue.js", "theme-color": "#3c8772", "og:type": "website", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "1cbd8a1c-25bc-45a8-a2f4-e3b7d0f11d38", "sourceURL": "https://vuejs.org/guide/extras/animation", "url": "https://vuejs.org/guide/extras/animation", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Animation Techniques in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse CSS classes to trigger animations for elements that are not entering or leaving the DOM.\n\nUtilize Vue's reactivity to manage animation states effectively.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/animation", "title": "Animation Techniques", "description": "Vue provides the <Transition> and <TransitionGroup> components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:48:34", "type": "best_practices", "page_metadata": {"twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "title": "Animation Techniques | Vue.js", "theme-color": "#3c8772", "og:type": "website", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "1cbd8a1c-25bc-45a8-a2f4-e3b7d0f11d38", "sourceURL": "https://vuejs.org/guide/extras/animation", "url": "https://vuejs.org/guide/extras/animation", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Fallthrough Attributes is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Fallthrough Attributes in vue-guide.\n\n# Fallthrough Attributes\n\nThis page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.Here's a quick rundown of what this is about:\n\n## Attribute Inheritance\n\nA \"fallthrough attribute\" is an attribute or `v-on` event listener that is passed to a component, but is not explicitly declared in the receiving component's [props](https://vuejs.org/guide/components/props) or [emits](https://vuejs.org/guide/components/events#declaring-emitted-events). Common examples of this include `class`, `style`, and `id` attributes.\n\nWhen a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a `<MyButton>` component with the following template:\n\n```html\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\nAnd a parent using this component with:\n\n```html\n<MyButton class=\"large\" />\n```\n\nThe final rendered DOM would be:\n\n```html\n<button class=\"large\">Click Me</button>\n```\n\nHere, `<MyButton>` did not declare `class` as an accepted prop. Therefore, `class` is treated as a fallthrough attribute and automatically added to `<MyButton>`'s root element.\n\n## `class` and `style` Merging\n\nIf the child component's root element already has existing `class` or `style` attributes, it will be merged with the `class` and `style` values that are inherited from the parent. Suppose we change the template of `<MyButton>` in the previous example to:\n\n```html\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\nThen the final rendered DOM would now become:\n\n```html\n<button class=\"btn large\">Click Me</button>\n```\n\n## `v-on` Listener Inheritance\n\nThe same rule applies to `v-on` event listeners:\n\n```html\n<MyButton @click=\"onClick\" />\n```\n\nThe `click` listener will be added to the root element of `<MyButton>`, i.e. the native `<button>` element. When the native `<button>` is clicked, it will trigger the `onClick` method of the parent component. If the native `<button>` already has a `click` listener bound with `v-on`, then both listeners will trigger.\n\n## Nested Component Inheritance\n\nIf a component renders another component as its root node, for example, we refactored `<MyButton>` to render a `<BaseButton>` as its root:\n\n```html\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\nThen the fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>`.\n\nNote that:\n\n1. Forwarded attributes do not include any attributes that are declared as props, or `v-on` listeners of declared events by `<MyButton>` \\- in other words, the declared props and listeners have been \"consumed\" by `<MyButton>`.\n\n2. Forwarded attributes may be accepted as props by `<BaseButton>`, if declared by it.\n\n## Disabling Attribute Inheritance\n\nIf you do **not** want a component to automatically inherit attributes, you can set `inheritAttrs: false` in the component's options.\n\nSince 3.3 you can also use [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) directly in `<script setup>`:\n\n```vue\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\nThe common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the `inheritAttrs` option to `false`, you can take full control over where the fallthrough attributes should be applied.\n\nThese fallthrough attributes can be accessed directly in template expressions as `$attrs`:\n\n```html\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\nThe `$attrs` object includes all attributes that are not declared by the component's `props` or `emits` options (e.g., `class`, `style`, `v-on` listeners, etc.).\n\nSome notes:\n\n- Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like `foo-bar` needs to be accessed as `$attrs['foo-bar']`.\n\n- A `v-on` event listener like `@click` will be exposed on the object as a function under `$attrs.onClick`.\n\n## Attribute Inheritance on Multiple Root Nodes\n\nUnlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If `$attrs` are not bound explicitly, a runtime warning will be issued.\n\n```html\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\n```\n\nIf `<CustomLayout>` has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:\n\n```html\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\nThe warning will be suppressed if `$attrs` is explicitly bound:\n\n```html\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```\n\n## Accessing Fallthrough Attributes in JavaScript\n\nIf needed, you can access a component's fallthrough attributes in `<script setup>` using the `useAttrs()` API:\n\n```vue\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\nIf not using `<script setup>`, `attrs` will be exposed as a property of the `setup()` context:\n\n```js\nexport default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}\n```\n\nNote that although the `attrs` object here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use `onUpdated()` to perform side effects with the latest `attrs` on each update.\n\nIf needed, you can access a component's fallthrough attributes via the `$attrs` instance property:\n\n```js\nexport default {\n  created() {\n    console.log(this.$attrs)\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute inheritance in vue-guide?\n\nAssistant: To attribute inheritance in vue-guide, here's what you do:\nA \"fallthrough attribute\" is an attribute or `v-on` event listener that is passed to a component, but is not explicitly declared in the receiving component's [props](https://vuejs.org/guide/components/props) or [emits](https://vuejs.org/guide/components/events#declaring-emitted-events). Common examples of this include `class`, `style`, and `id` attributes.\n\nWhen a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a `<MyButton>` component with the following template:\n\n```html\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\nAnd a parent using this component with:\n\n```html\n<MyButton class=\"large\" />\n```\n\nThe final rendered DOM would be:\n\n```html\n<button class=\"large\">Click Me</button>\n```\n\nHere, `<MyButton>` did not declare `class` as an accepted prop. Therefore, `class` is treated as a fallthrough attribute and automatically added to `<MyButton>`'s root element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `class` and `style` merging in vue-guide?\n\nAssistant: To `class` and `style` merging in vue-guide, here's what you do:\nIf the child component's root element already has existing `class` or `style` attributes, it will be merged with the `class` and `style` values that are inherited from the parent. Suppose we change the template of `<MyButton>` in the previous example to:\n\n```html\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\nThen the final rendered DOM would now become:\n\n```html\n<button class=\"btn large\">Click Me</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-on` listener inheritance in vue-guide?\n\nAssistant: To `v-on` listener inheritance in vue-guide, here's what you do:\nThe same rule applies to `v-on` event listeners:\n\n```html\n<MyButton @click=\"onClick\" />\n```\n\nThe `click` listener will be added to the root element of `<MyButton>`, i.e. the native `<button>` element. When the native `<button>` is clicked, it will trigger the `onClick` method of the parent component. If the native `<button>` already has a `click` listener bound with `v-on`, then both listeners will trigger..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I nested component inheritance in vue-guide?\n\nAssistant: To nested component inheritance in vue-guide, here's what you do:\nIf a component renders another component as its root node, for example, we refactored `<MyButton>` to render a `<BaseButton>` as its root:\n\n```html\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\nThen the fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>`.\n\nNote that:\n\n1. Forwarded attributes do not include any attributes that are declared as props, or `v-on` listeners of declared events by `<MyButton>` \\- in other words, the declared props and listeners have been \"consumed\" by `<MyButton>`.\n\n2. Forwarded attributes may be accepted as props by `<BaseButton>`, if declared by it..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I disabling attribute inheritance in vue-guide?\n\nAssistant: To disabling attribute inheritance in vue-guide, here's what you do:\nIf you do **not** want a component to automatically inherit attributes, you can set `inheritAttrs: false` in the component's options.\n\nSince 3.3 you can also use [`defineOptions`](https://vuejs.org/api/sfc-script-setup#defineoptions) directly in `<script setup>`:\n\n```vue\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\nThe common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the `inheritAttrs` option to `false`, you can take full control over where the fallthrough attributes should be applied.\n\nThese fallthrough attributes can be accessed directly in template expressions as `$attrs`:\n\n```html\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\nThe `$attrs` object includes all attributes that are not declared by the component's `props` or `emits` options (e.g., `class`, `style`, `v-on` listeners, etc.).\n\nSome notes:\n\n- Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like `foo-bar` needs to be accessed as `$attrs['foo-bar']`.\n\n- A `v-on` event listener like `@click` will be exposed on the object as a function under `$attrs.onClick`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute inheritance on multiple root nodes in vue-guide?\n\nAssistant: To attribute inheritance on multiple root nodes in vue-guide, here's what you do:\nUnlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If `$attrs` are not bound explicitly, a runtime warning will be issued.\n\n```html\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\n```\n\nIf `<CustomLayout>` has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:\n\n```html\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\nThe warning will be suppressed if `$attrs` is explicitly bound:\n\n```html\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing fallthrough attributes in javascript in vue-guide?\n\nAssistant: To accessing fallthrough attributes in javascript in vue-guide, here's what you do:\nIf needed, you can access a component's fallthrough attributes in `<script setup>` using the `useAttrs()` API:\n\n```vue\n<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>\n```\n\nIf not using `<script setup>`, `attrs` will be exposed as a property of the `setup()` context:\n\n```js\nexport default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}\n```\n\nNote that although the `attrs` object here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use `onUpdated()` to perform side effects with the latest `attrs` on each update.\n\nIf needed, you can access a component's fallthrough attributes via the `$attrs` instance property:\n\n```js\nexport default {\n  created() {\n    console.log(this.$attrs)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Fallthrough Attributes in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**MyButton Component Example**:\n\n```yaml\n<!-- template of <MyButton> -->\n<button>Click Me</button>\n```\n\nThis snippet shows you how to mybutton component example, which is an important aspect of fallthrough attributes.\n\n**Parent Component Using MyButton**:\n\n```yaml\n<MyButton class=\"large\" />\n```\n\nThis snippet shows you how to parent component using mybutton, which is an important aspect of fallthrough attributes.\n\n**Final Rendered DOM for MyButton**:\n\n```yaml\n<button class=\"large\">Click Me</button>\n```\n\nThis snippet shows you how to final rendered dom for mybutton, which is an important aspect of fallthrough attributes.\n\n**MyButton with Merged Class Example**:\n\n```yaml\n<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>\n```\n\nThis snippet shows you how to mybutton with merged class example, which is an important aspect of fallthrough attributes.\n\n**Final Rendered DOM with Merged Class**:\n\n```yaml\n<button class=\"btn large\">Click Me</button>\n```\n\nThis snippet shows you how to final rendered dom with merged class, which is an important aspect of fallthrough attributes.\n\n**Nested Component Example**:\n\n```yaml\n<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />\n```\n\nThis snippet shows you how to nested component example, which is an important aspect of fallthrough attributes.\n\n**Disabling Inheritance Example**:\n\n```yaml\n<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>\n```\n\nThis snippet shows you how to disabling inheritance example, which is an important aspect of fallthrough attributes.\n\n**Accessing Fallthrough Attributes in Template**:\n\n```yaml\n<span>Fallthrough attributes: {{ $attrs }}</span>\n```\n\nThis snippet shows you how to accessing fallthrough attributes in template, which is an important aspect of fallthrough attributes.\n\n**Multi-root Component Example**:\n\n```yaml\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\n```\n\nThis snippet shows you how to multi-root component example, which is an important aspect of fallthrough attributes.\n\n**Multi-root Template Warning Example**:\n\n```yaml\n<header>...</header>\n<main>...</main>\n<footer>...</footer>\n```\n\nThis snippet shows you how to multi-root template warning example, which is an important aspect of fallthrough attributes.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Fallthrough Attributes in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `inheritAttrs: false` to control where fallthrough attributes are applied.\n\nAccess fallthrough attributes using `$attrs` in templates or `useAttrs()` in JavaScript.\n\nBe cautious with multi-root components as they do not automatically inherit attributes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/attrs", "title": "Fallthrough Attributes", "description": "This page covers how fallthrough attributes work in Vue components, including inheritance, merging, and how to disable it.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:49:07", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "ogTitle": "Vue.js", "title": "Fallthrough Attributes | Vue.js", "twitter:card": "summary", "og:title": "Vue.js", "og:type": "website", "language": "en-US", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "622151ae-58c4-47a4-94a9-8cf470b30a75", "sourceURL": "https://vuejs.org/guide/components/attrs", "url": "https://vuejs.org/guide/components/attrs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Props is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Props in vue-guide.\n\n# Props\n\nThis page covers the declaration, validation, and usage of props in Vue components.Here's a quick rundown of what this is about:\n\n## Props Declaration\n\nVue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in its dedicated section). In SFCs using `<script setup>`, props can be declared using the `defineProps()` macro:\n\n```vue\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nIn non- `<script setup>` components, props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nNotice the argument passed to `defineProps()` is the same as the value provided to the `props` options: the same props options API is shared between the two declaration styles. Props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}\n}\n```\n\nIn addition to declaring props using an array of strings, we can also use the object syntax:\n\n```js\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\n```js\n// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n```\n\n```js\n// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\nFor each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type. This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about prop validation further down this page.\n\n## Reactive Props Destructure\n\nVue's reactivity system tracks state usage based on property access. E.g. when you access `props.foo` in a computed getter or a watcher, the `foo` prop gets tracked as a dependency. So, given the following code:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```\n\nIn version 3.4 and below, `foo` is an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`. Therefore the code above becomes equivalent to the following:\n\n```js\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n```\n\nIn addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:\n\n```ts\nconst { foo = 'hello' } = defineProps<{ foo?: string }>()\n```\n\n## Passing Destructured Props into Functions\n\nWhen we pass a destructured prop into a function, e.g.:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatch(foo, /* ... */)\n```\n\nThis will not work as expected because it is equivalent to `watch(props.foo, ...)` - we are passing a value instead of a reactive data source to `watch`. In fact, Vue's compiler will catch such cases and throw a warning. Similar to how we can watch a normal prop with `watch(() => props.foo, ...)`, we can watch a destructured prop also by wrapping it in a getter:\n\n```js\nwatch(() => foo, /* ... */)\n```\n\nIn addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:\n\n```js\nuseComposable(() => foo)\n```\n\n## Prop Passing Details\n\n### Prop Name Casing\nWe declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:\n\n```js\ndefineProps({\n  greetingMessage: String\n})\n```\n\n```js\nexport default {\n  props: {\n    greetingMessage: String\n  }\n}\n```\n\ntemplate\n\n```html\n<span>{{ greetingMessage }}</span>\n```\n\nTechnically, you can also use camelCase when passing props to a child component (except in in-DOM templates). However, the convention is using kebab-case in all cases to align with HTML attributes:\n\ntemplate\n\n```html\n<MyComponent greeting-message=\"hello\" />\n```\n\nWe use PascalCase for component tags when possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions.\n\n## One-Way Data Flow\n\nAll props form a **one-way-down binding** between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand. In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:\n\n```js\nconst props = defineProps(['foo'])\n\n// ‚ùå warning, props are readonly!\nprops.foo = 'bar'\n```\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // ‚ùå warning, props are readonly!\n    this.foo = 'bar'\n  }\n}\n```\n\nThere are usually two cases where it's tempting to mutate a prop:\n1. **The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.** In this case, it's best to define a local data property that uses the prop as its initial value:\n\n```js\nconst props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)\n```\n\n```js\nexport default {\n     props: ['initialCounter'],\n     data() {\n       return {\n         // counter only uses this.initialCounter as the initial value;\n         // it is disconnected from future prop updates.\n         counter: this.initialCounter\n       }\n     }\n}\n```\n\n2. **The prop is passed in as a raw value that needs to be transformed.** In this case, it's best to define a computed property using the prop's value:\n\n```js\nconst props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())\n```\n\n```js\nexport default {\n     props: ['size'],\n     computed: {\n       // computed property that auto-updates when the prop changes\n       normalizedSize() {\n         return this.size.trim().toLowerCase()\n       }\n     }\n}\n```\n\n## Prop Validation\n\nComponents can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others. To specify prop validations, you can provide an object with validation requirements to the `defineProps()` macro`props` option, instead of an array of strings. For example:\n\n```js\ndefineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "overview", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I props declaration in vue-guide?\n\nAssistant: To props declaration in vue-guide, here's what you do:\nVue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in its dedicated section). In SFCs using `<script setup>`, props can be declared using the `defineProps()` macro:\n\n```vue\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nIn non- `<script setup>` components, props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nNotice the argument passed to `defineProps()` is the same as the value provided to the `props` options: the same props options API is shared between the two declaration styles. Props are declared using the `props` option:\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}\n}\n```\n\nIn addition to declaring props using an array of strings, we can also use the object syntax:\n\n```js\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\n```js\n// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n```\n\n```js\n// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n```\n\nFor each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type. This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about prop validation further down this page..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reactive props destructure in vue-guide?\n\nAssistant: To reactive props destructure in vue-guide, here's what you do:\nVue's reactivity system tracks state usage based on property access. E.g. when you access `props.foo` in a computed getter or a watcher, the `foo` prop gets tracked as a dependency. So, given the following code:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n```\n\nIn version 3.4 and below, `foo` is an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`. Therefore the code above becomes equivalent to the following:\n\n```js\nconst props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n```\n\nIn addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:\n\n```ts\nconst { foo = 'hello' } = defineProps<{ foo?: string }>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing destructured props into functions in vue-guide?\n\nAssistant: To passing destructured props into functions in vue-guide, here's what you do:\nWhen we pass a destructured prop into a function, e.g.:\n\n```js\nconst { foo } = defineProps(['foo'])\n\nwatch(foo, /* ... */)\n```\n\nThis will not work as expected because it is equivalent to `watch(props.foo, ...)` - we are passing a value instead of a reactive data source to `watch`. In fact, Vue's compiler will catch such cases and throw a warning. Similar to how we can watch a normal prop with `watch(() => props.foo, ...)`, we can watch a destructured prop also by wrapping it in a getter:\n\n```js\nwatch(() => foo, /* ... */)\n```\n\nIn addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:\n\n```js\nuseComposable(() => foo)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop passing details in vue-guide?\n\nAssistant: To prop passing details in vue-guide, here's what you do:\n### Prop Name Casing\nWe declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:\n\n```js\ndefineProps({\n  greetingMessage: String\n})\n```\n\n```js\nexport default {\n  props: {\n    greetingMessage: String\n  }\n}\n```\n\ntemplate\n\n```html\n<span>{{ greetingMessage }}</span>\n```\n\nTechnically, you can also use camelCase when passing props to a child component (except in in-DOM templates). However, the convention is using kebab-case in all cases to align with HTML attributes:\n\ntemplate\n\n```html\n<MyComponent greeting-message=\"hello\" />\n```\n\nWe use PascalCase for component tags when possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I one-way data flow in vue-guide?\n\nAssistant: To one-way data flow in vue-guide, here's what you do:\nAll props form a **one-way-down binding** between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand. In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:\n\n```js\nconst props = defineProps(['foo'])\n\n// ‚ùå warning, props are readonly!\nprops.foo = 'bar'\n```\n\n```js\nexport default {\n  props: ['foo'],\n  created() {\n    // ‚ùå warning, props are readonly!\n    this.foo = 'bar'\n  }\n}\n```\n\nThere are usually two cases where it's tempting to mutate a prop:\n1. **The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.** In this case, it's best to define a local data property that uses the prop as its initial value:\n\n```js\nconst props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)\n```\n\n```js\nexport default {\n     props: ['initialCounter'],\n     data() {\n       return {\n         // counter only uses this.initialCounter as the initial value;\n         // it is disconnected from future prop updates.\n         counter: this.initialCounter\n       }\n     }\n}\n```\n\n2. **The prop is passed in as a raw value that needs to be transformed.** In this case, it's best to define a computed property using the prop's value:\n\n```js\nconst props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())\n```\n\n```js\nexport default {\n     props: ['size'],\n     computed: {\n       // computed property that auto-updates when the prop changes\n       normalizedSize() {\n         return this.size.trim().toLowerCase()\n       }\n     }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop validation in vue-guide?\n\nAssistant: To prop validation in vue-guide, here's what you do:\nComponents can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others. To specify prop validations, you can provide an object with validation requirements to the `defineProps()` macro`props` option, instead of an array of strings. For example:\n\n```js\ndefineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "section_detail", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Props in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Props Declaration in <script setup>**:\n\n```yaml\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\nThis snippet shows you how to props declaration in <script setup>, which is an important aspect of props.\n\n**Props Declaration in Non-<script setup>**:\n\n```yaml\nexport default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}\n```\n\nThis snippet shows you how to props declaration in non-<script setup>, which is an important aspect of props.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "code_examples", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Props in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCode inside the `defineProps()` argument cannot access other variables declared in `<script setup>`, because the entire expression is moved to an outer function scope when compiled.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/props", "title": "Props", "description": "This page covers the declaration, validation, and usage of props in Vue components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:49:46", "type": "best_practices", "page_metadata": {"language": "en-US", "og:title": "Vue.js", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Props | Vue.js", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "scrapeId": "ba0f07a3-ec16-4c3e-92c8-4781ff9646ee", "sourceURL": "https://vuejs.org/guide/components/props", "url": "https://vuejs.org/guide/components/props", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Rendering Mechanism is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Rendering Mechanism in vue-guide.\n\n# Rendering Mechanism\n\nHow does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.Here's a quick rundown of what this is about:\n\n## Virtual DOM\n\nYou have probably heard about the term \"virtual DOM\", which Vue's rendering system is based upon.\n\nThe virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM. The concept was pioneered by React, and has been adopted in many other frameworks with different implementations, including Vue.\n\nVirtual DOM is more of a pattern than a specific technology, so there is no one canonical implementation. We can illustrate the idea using a simple example:\n\n```js\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nHere, `vnode` is a plain JavaScript object (a \"virtual node\") representing a `<div>` element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree.\n\nA runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is called **mount**.\n\nIf we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is called **patch**, also known as \"diffing\" or \"reconciliation\".\n\nThe main benefit of virtual DOM is that it gives the developer the ability to programmatically create, inspect and compose desired UI structures in a declarative way, while leaving the direct DOM manipulation to the renderer.\n\n## Render Pipeline\n\nAt the high level, this is what happens when a Vue component is mounted:\n\n1. **Compile**: Vue templates are compiled into **render functions**: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler.\n\n2. **Mount**: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as a reactive effect, so it keeps track of all reactive dependencies that were used.\n\n3. **Patch**: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM.\n\n## Templates vs. Render Functions\n\nVue templates are compiled into virtual DOM render functions. Vue also provides APIs that allow us to skip the template compilation step and directly author render functions. Render functions are more flexible than templates when dealing with highly dynamic logic, because you can work with vnodes using the full power of JavaScript.\n\nSo why does Vue recommend templates by default? There are a number of reasons:\n\n1. Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify.\n\n2. Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM.\n\nIn practice, templates are sufficient for most use cases in applications. Render functions are typically only used in reusable components that need to deal with highly dynamic rendering logic.\n\n## Compiler-Informed Virtual DOM\n\nThe virtual DOM implementation in React and most other virtual-DOM implementations are purely runtime: the reconciliation algorithm cannot make any assumptions about the incoming virtual DOM tree, so it has to fully traverse the tree and diff the props of every vnode in order to ensure correctness. In addition, even if a part of the tree never changes, new vnodes are always created for them on each re-render, resulting in unnecessary memory pressure. This is one of the most criticized aspect of virtual DOM: the somewhat brute-force reconciliation process sacrifices efficiency in return for declarativeness and correctness.\n\nBut it doesn't have to be that way. In Vue, the framework controls both the compiler and the runtime. This allows us to implement many compile-time optimizations that only a tightly-coupled renderer can take advantage of. The compiler can statically analyze the template and leave hints in the generated code so that the runtime can take shortcuts whenever possible. At the same time, we still preserve the capability for the user to drop down to the render function layer for more direct control in edge cases. We call this hybrid approach **Compiler-Informed Virtual DOM**.\n\n## Cache Static\n\nQuite often there will be parts in a template that do not contain any dynamic bindings:\n\n```template\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\nThe `foo` and `bar` divs are static - re-creating vnodes and diffing them on each re-render is unnecessary. The renderer creates these vnodes during the initial render, caches them, and reuses the same vnodes for every subsequent re-render. The renderer is also able to completely skip diffing them when it notices the old vnode and the new vnode are the same one.\n\n## Patch Flags\n\nFor a single element with dynamic bindings, we can also infer a lot of information from it at compile time:\n\n```template\n<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>\n```\n\nWhen generating the render function code for these elements, Vue encodes the type of update each of them needs directly in the vnode creation call:\n\n```js\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThe last argument, `2`, is a patch flag. An element can have multiple patch flags, which will be merged into a single number. The runtime renderer can then check against the flags using bitwise operations to determine whether it needs to do certain work:\n\n```js\nif (vnode.patchFlag & PatchFlags.CLASS /* 2 */) {\n  // update the element's class\n}\n```\n\nBitwise checks are extremely fast. With the patch flags, Vue is able to do the least amount of work necessary when updating elements with dynamic bindings.\n\n## Tree Flattening\n\nTaking another look at the generated code from the previous example, you'll notice the root of the returned virtual DOM tree is created using a special `createElementBlock()` call:\n\n```js\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\nConceptually, a \"block\" is a part of the template that has stable inner structure. In this case, the entire template has a single block because it does not contain any structural directives like `v-if` and `v-for`.\n\nEach block tracks any descendant nodes (not just direct children) that have patch flags. For example:\n\n```template\n<div> <!-- root block -->\n  <div>...</div>         <!-- not tracked -->\n  <div :id=\"id\"></div>   <!-- tracked -->\n  <div>                  <!-- not tracked -->\n    <div>{{ bar }}</div> <!-- tracked -->\n  </div>\n</div>\n```\n\nThe result is a flattened array that contains only the dynamic descendant nodes:\n\n```\ndiv (block root)\n- div with :id binding\n- div with {{ bar }} binding\n```\n\nWhen this component needs to re-render, it only needs to traverse the flattened tree instead of the full tree. This is called **Tree Flattening**, and it greatly reduces the number of nodes that need to be traversed during virtual DOM reconciliation.\n\n## Impact on SSR Hydration\n\nBoth patch flags and tree flattening also greatly improve Vue's SSR Hydration performance:\n\n- Single element hydration can take fast paths based on the corresponding vnode's patch flag.\n- Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I virtual dom in vue-guide?\n\nAssistant: To virtual dom in vue-guide, here's what you do:\nYou have probably heard about the term \"virtual DOM\", which Vue's rendering system is based upon.\n\nThe virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM. The concept was pioneered by React, and has been adopted in many other frameworks with different implementations, including Vue.\n\nVirtual DOM is more of a pattern than a specific technology, so there is no one canonical implementation. We can illustrate the idea using a simple example:\n\n```js\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nHere, `vnode` is a plain JavaScript object (a \"virtual node\") representing a `<div>` element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree.\n\nA runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is called **mount**.\n\nIf we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is called **patch**, also known as \"diffing\" or \"reconciliation\".\n\nThe main benefit of virtual DOM is that it gives the developer the ability to programmatically create, inspect and compose desired UI structures in a declarative way, while leaving the direct DOM manipulation to the renderer..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I render pipeline in vue-guide?\n\nAssistant: To render pipeline in vue-guide, here's what you do:\nAt the high level, this is what happens when a Vue component is mounted:\n\n1. **Compile**: Vue templates are compiled into **render functions**: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler.\n\n2. **Mount**: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as a reactive effect, so it keeps track of all reactive dependencies that were used.\n\n3. **Patch**: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I templates vs. render functions in vue-guide?\n\nAssistant: To templates vs. render functions in vue-guide, here's what you do:\nVue templates are compiled into virtual DOM render functions. Vue also provides APIs that allow us to skip the template compilation step and directly author render functions. Render functions are more flexible than templates when dealing with highly dynamic logic, because you can work with vnodes using the full power of JavaScript.\n\nSo why does Vue recommend templates by default? There are a number of reasons:\n\n1. Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify.\n\n2. Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM.\n\nIn practice, templates are sufficient for most use cases in applications. Render functions are typically only used in reusable components that need to deal with highly dynamic rendering logic..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I compiler-informed virtual dom in vue-guide?\n\nAssistant: To compiler-informed virtual dom in vue-guide, here's what you do:\nThe virtual DOM implementation in React and most other virtual-DOM implementations are purely runtime: the reconciliation algorithm cannot make any assumptions about the incoming virtual DOM tree, so it has to fully traverse the tree and diff the props of every vnode in order to ensure correctness. In addition, even if a part of the tree never changes, new vnodes are always created for them on each re-render, resulting in unnecessary memory pressure. This is one of the most criticized aspect of virtual DOM: the somewhat brute-force reconciliation process sacrifices efficiency in return for declarativeness and correctness.\n\nBut it doesn't have to be that way. In Vue, the framework controls both the compiler and the runtime. This allows us to implement many compile-time optimizations that only a tightly-coupled renderer can take advantage of. The compiler can statically analyze the template and leave hints in the generated code so that the runtime can take shortcuts whenever possible. At the same time, we still preserve the capability for the user to drop down to the render function layer for more direct control in edge cases. We call this hybrid approach **Compiler-Informed Virtual DOM**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I cache static in vue-guide?\n\nAssistant: To cache static in vue-guide, here's what you do:\nQuite often there will be parts in a template that do not contain any dynamic bindings:\n\n```template\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\nThe `foo` and `bar` divs are static - re-creating vnodes and diffing them on each re-render is unnecessary. The renderer creates these vnodes during the initial render, caches them, and reuses the same vnodes for every subsequent re-render. The renderer is also able to completely skip diffing them when it notices the old vnode and the new vnode are the same one..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I patch flags in vue-guide?\n\nAssistant: To patch flags in vue-guide, here's what you do:\nFor a single element with dynamic bindings, we can also infer a lot of information from it at compile time:\n\n```template\n<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>\n```\n\nWhen generating the render function code for these elements, Vue encodes the type of update each of them needs directly in the vnode creation call:\n\n```js\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThe last argument, `2`, is a patch flag. An element can have multiple patch flags, which will be merged into a single number. The runtime renderer can then check against the flags using bitwise operations to determine whether it needs to do certain work:\n\n```js\nif (vnode.patchFlag & PatchFlags.CLASS /* 2 */) {\n  // update the element's class\n}\n```\n\nBitwise checks are extremely fast. With the patch flags, Vue is able to do the least amount of work necessary when updating elements with dynamic bindings..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I tree flattening in vue-guide?\n\nAssistant: To tree flattening in vue-guide, here's what you do:\nTaking another look at the generated code from the previous example, you'll notice the root of the returned virtual DOM tree is created using a special `createElementBlock()` call:\n\n```js\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\nConceptually, a \"block\" is a part of the template that has stable inner structure. In this case, the entire template has a single block because it does not contain any structural directives like `v-if` and `v-for`.\n\nEach block tracks any descendant nodes (not just direct children) that have patch flags. For example:\n\n```template\n<div> <!-- root block -->\n  <div>...</div>         <!-- not tracked -->\n  <div :id=\"id\"></div>   <!-- tracked -->\n  <div>                  <!-- not tracked -->\n    <div>{{ bar }}</div> <!-- tracked -->\n  </div>\n</div>\n```\n\nThe result is a flattened array that contains only the dynamic descendant nodes:\n\n```\ndiv (block root)\n- div with :id binding\n- div with {{ bar }} binding\n```\n\nWhen this component needs to re-render, it only needs to traverse the flattened tree instead of the full tree. This is called **Tree Flattening**, and it greatly reduces the number of nodes that need to be traversed during virtual DOM reconciliation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I impact on ssr hydration in vue-guide?\n\nAssistant: To impact on ssr hydration in vue-guide, here's what you do:\nBoth patch flags and tree flattening also greatly improve Vue's SSR Hydration performance:\n\n- Single element hydration can take fast paths based on the corresponding vnode's patch flag.\n- Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Rendering Mechanism in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Virtual DOM Example**:\n\n```yaml\nconst vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}\n```\n\nThis snippet shows you how to virtual dom example, which is an important aspect of rendering mechanism.\n\n**Cache Static Example**:\n\n```yaml\n<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>\n```\n\nThis snippet shows you how to cache static example, which is an important aspect of rendering mechanism.\n\n**Patch Flags Example**:\n\n```yaml\ncreateElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)\n```\n\nThis snippet shows you how to patch flags example, which is an important aspect of rendering mechanism.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Rendering Mechanism in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse templates for most use cases as they are easier to understand and maintain.\n\nUtilize render functions for highly dynamic rendering logic when necessary.\n\nTake advantage of compiler-informed optimizations to improve performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/rendering-mechanism", "title": "Rendering Mechanism", "description": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:50:11", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "twitter:card": "summary", "title": "Rendering Mechanism | Vue.js", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "scrapeId": "e30ae287-3d59-4796-a831-ea9ad681a16e", "sourceURL": "https://vuejs.org/guide/extras/rendering-mechanism", "url": "https://vuejs.org/guide/extras/rendering-mechanism", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Security is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Security in vue-guide.\n\n# Security\n\nBest practices for ensuring security when using Vue.Here's a quick rundown of what this is about:\n\n## Reporting Vulnerabilities\n\nWhen a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please email security@vuejs.org. While the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible.\n\n## Rule No.1: Never Use Non-trusted Templates\n\nThe most fundamental security rule when using Vue is **never use non-trusted content as your component template**. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:\n\n```js\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nVue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you.\n\n## What Vue Does to Protect You\n\n### HTML content\nWhether using templates or render functions, content is automatically escaped. That means in this template:\n\n```template\n<h1>{{ userProvidedString }}</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'<script>alert(\"hi\")</script>'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\n```\n\nthus preventing the script injection. This escaping is done using native browser APIs, like `textContent`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n### Attribute bindings\nSimilarly, dynamic attribute bindings are also automatically escaped. That means in this template:\n\n```template\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'\" onclick=\"alert(\\'hi\\')'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&quot; onclick=&quot;alert('hi')\n```\n\nthus preventing the close of the `title` attribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, like `setAttribute`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n## Potential Dangers\n\nIn any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though.\n\nFor example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables.\n\n### HTML Injection\nAs you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However, **in cases where you know the HTML is safe**, you can explicitly render HTML content:\n\n- Using a template:\n\n```template\n<div v-html=\"userProvidedHtml\"></div>\n```\n- Using a render function:\n\n```js\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n- Using a render function with JSX:\n\n```jsx\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nWARNING\n\nUser-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers.\n\n## URL Injection\n\nIn a URL like this:\n\n```template\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThere's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution using `javascript:`. There are libraries such as [sanitize-url](https://www.npmjs.com/package/@braintree/sanitize-url) to help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue. **User-provided URLs should always be sanitized by your backend before even being saved to a database.** Then the problem is avoided for _every_ client connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations.\n\n## Style Injection\n\nLooking at this example:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nLet's assume that `sanitizedUrl` has been sanitized, so that it's definitely a real URL and not JavaScript. With the `userProvidedStyles`, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then if `https://user-controlled-website.com/` is built to resemble the login page of your application, they might have just captured a user's real login information.\n\nYou may be able to imagine how allowing user-provided content for a `<style>` element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:\n\n```template\n<style>{{ userProvidedStyles }}</style>\n```\n\nTo keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using its [object syntax](https://vuejs.org/guide/essentials/class-and-style#binding-to-objects-1) and only allowing users to provide values for specific properties it's safe for them to control, like this:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>\n```\n\n## JavaScript Injection\n\nWe strongly discourage ever rendering a `<script>` element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime.\n\nEvery HTML element has attributes with values accepting strings of JavaScript, such as `onclick`, `onfocus`, and `onmouseenter`. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided.\n\nWARNING\n\nUser-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it.\n\nSometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:\n\n1. The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.\n2. The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is to **never mount Vue on nodes that may contain server-rendered and user-provided content**.\n\n## Best Practices\n\nThe general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework.\n\nBeyond the recommendations made above for [Potential Dangers](https://vuejs.org/guide/best-practices/security#potential-dangers), we also recommend familiarizing yourself with these resources:\n\n- [HTML5 Security Cheat Sheet](https://html5sec.org/)\n- [OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\nThen use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM.\n\n## Backend Coordination\n\nHTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions.\n\n## Server-Side Rendering (SSR)\n\nThere are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughout [our SSR documentation](https://vuejs.org/guide/scaling-up/ssr) to avoid vulnerabilities.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "overview", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reporting vulnerabilities in vue-guide?\n\nAssistant: To reporting vulnerabilities in vue-guide, here's what you do:\nWhen a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please email security@vuejs.org. While the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I rule no.1: never use non-trusted templates in vue-guide?\n\nAssistant: To rule no.1: never use non-trusted templates in vue-guide, here's what you do:\nThe most fundamental security rule when using Vue is **never use non-trusted content as your component template**. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:\n\n```js\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nVue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what vue does to protect you in vue-guide?\n\nAssistant: To what vue does to protect you in vue-guide, here's what you do:\n### HTML content\nWhether using templates or render functions, content is automatically escaped. That means in this template:\n\n```template\n<h1>{{ userProvidedString }}</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'<script>alert(\"hi\")</script>'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\n```\n\nthus preventing the script injection. This escaping is done using native browser APIs, like `textContent`, so a vulnerability can only exist if the browser itself is vulnerable.\n\n### Attribute bindings\nSimilarly, dynamic attribute bindings are also automatically escaped. That means in this template:\n\n```template\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nif `userProvidedString` contained:\n\n```js\n'\" onclick=\"alert(\\'hi\\')'\n```\n\nthen it would be escaped to the following HTML:\n\n```template\n&quot; onclick=&quot;alert('hi')\n```\n\nthus preventing the close of the `title` attribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, like `setAttribute`, so a vulnerability can only exist if the browser itself is vulnerable..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I potential dangers in vue-guide?\n\nAssistant: To potential dangers in vue-guide, here's what you do:\nIn any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though.\n\nFor example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables.\n\n### HTML Injection\nAs you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However, **in cases where you know the HTML is safe**, you can explicitly render HTML content:\n\n- Using a template:\n\n```template\n<div v-html=\"userProvidedHtml\"></div>\n```\n- Using a render function:\n\n```js\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n- Using a render function with JSX:\n\n```jsx\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nWARNING\n\nUser-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I url injection in vue-guide?\n\nAssistant: To url injection in vue-guide, here's what you do:\nIn a URL like this:\n\n```template\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThere's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution using `javascript:`. There are libraries such as [sanitize-url](https://www.npmjs.com/package/@braintree/sanitize-url) to help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue. **User-provided URLs should always be sanitized by your backend before even being saved to a database.** Then the problem is avoided for _every_ client connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I style injection in vue-guide?\n\nAssistant: To style injection in vue-guide, here's what you do:\nLooking at this example:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nLet's assume that `sanitizedUrl` has been sanitized, so that it's definitely a real URL and not JavaScript. With the `userProvidedStyles`, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then if `https://user-controlled-website.com/` is built to resemble the login page of your application, they might have just captured a user's real login information.\n\nYou may be able to imagine how allowing user-provided content for a `<style>` element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:\n\n```template\n<style>{{ userProvidedStyles }}</style>\n```\n\nTo keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using its [object syntax](https://vuejs.org/guide/essentials/class-and-style#binding-to-objects-1) and only allowing users to provide values for specific properties it's safe for them to control, like this:\n\n```template\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I javascript injection in vue-guide?\n\nAssistant: To javascript injection in vue-guide, here's what you do:\nWe strongly discourage ever rendering a `<script>` element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime.\n\nEvery HTML element has attributes with values accepting strings of JavaScript, such as `onclick`, `onfocus`, and `onmouseenter`. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided.\n\nWARNING\n\nUser-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it.\n\nSometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:\n\n1. The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.\n2. The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is to **never mount Vue on nodes that may contain server-rendered and user-provided content**..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I best practices in vue-guide?\n\nAssistant: To best practices in vue-guide, here's what you do:\nThe general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework.\n\nBeyond the recommendations made above for [Potential Dangers](https://vuejs.org/guide/best-practices/security#potential-dangers), we also recommend familiarizing yourself with these resources:\n\n- [HTML5 Security Cheat Sheet](https://html5sec.org/)\n- [OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\nThen use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I backend coordination in vue-guide?\n\nAssistant: To backend coordination in vue-guide, here's what you do:\nHTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I server-side rendering (ssr) in vue-guide?\n\nAssistant: To server-side rendering (ssr) in vue-guide, here's what you do:\nThere are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughout [our SSR documentation](https://vuejs.org/guide/scaling-up/ssr) to avoid vulnerabilities..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "section_detail", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Security in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Non-trusted Template Example**:\n\n```yaml\nVue.createApp({\n  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS\n}).mount('#app')\n```\n\nThis snippet shows you how to non-trusted template example, which is an important aspect of security.\n\n**HTML Escaping Example**:\n\n```yaml\n<h1>{{ userProvidedString }}</h1>\n```\n\nThis snippet shows you how to html escaping example, which is an important aspect of security.\n\n**Attribute Binding Example**:\n\n```yaml\n<h1 :title=\"userProvidedString\">\n  hello\n</h1>\n```\n\nThis snippet shows you how to attribute binding example, which is an important aspect of security.\n\n**HTML Injection with Template**:\n\n```yaml\n<div v-html=\"userProvidedHtml\"></div>\n```\n\nThis snippet shows you how to html injection with template, which is an important aspect of security.\n\n**HTML Injection with Render Function**:\n\n```yaml\nh('div', {\n    innerHTML: this.userProvidedHtml\n})\n```\n\nThis snippet shows you how to html injection with render function, which is an important aspect of security.\n\n**HTML Injection with JSX**:\n\n```yaml\n<div innerHTML={this.userProvidedHtml}></div>\n```\n\nThis snippet shows you how to html injection with jsx, which is an important aspect of security.\n\n**URL Binding Example**:\n\n```yaml\n<a :href=\"userProvidedUrl\">\n  click me\n</a>\n```\n\nThis snippet shows you how to url binding example, which is an important aspect of security.\n\n**Style Binding Example**:\n\n```yaml\n<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>\n```\n\nThis snippet shows you how to style binding example, which is an important aspect of security.\n\n**JavaScript Injection Warning**:\n\n```yaml\n<script>...</script>\n```\n\nThis snippet shows you how to javascript injection warning, which is an important aspect of security.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "code_examples", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Security in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways use the latest versions of Vue and its official companion libraries.\n\nNever use non-trusted content as your component template.\n\nUser-provided URLs should always be sanitized by your backend before being saved to a database.\n\nNever mount Vue on nodes that may contain server-rendered and user-provided content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/security", "title": "Security", "description": "Best practices for ensuring security when using Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:50:49", "type": "best_practices", "page_metadata": {"og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:type": "website", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "title": "Security | Vue.js", "twitter:site": "@vuejs", "twitter:card": "summary", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "scrapeId": "c5004dbc-91e9-4bbb-8b6c-d7d565b34f37", "sourceURL": "https://vuejs.org/guide/best-practices/security", "url": "https://vuejs.org/guide/best-practices/security", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Render Functions & JSX is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Render Functions & JSX in vue-guide.\n\n# Render Functions & JSX\n\nVue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nVue provides an `h()` function for creating vnodes:\n\n```js\nimport { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)\n```\n\n`h()` is short for **hyperscript** - which means \"JavaScript that produces HTML (hypertext markup language)\". This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could be `createVNode()`, but a shorter name helps when you have to call this function many times in a render function.\n\nThe `h()` function is designed to be very flexible:\n\n```js\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// props modifiers such as `.prop` and `.attr` can be added\n// with `.` and `^` prefixes respectively\nh('div', { '.name': 'some-name', '^width': '100' })\n\n// class and style have the same object / array\n// value support that they have in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThe resulting vnode has the following shape:\n\n```js\nconst vnode = h('div', { id: 'foo' }, [])\n\nvnode.type // 'div'\nvnode.props // { id: 'foo' }\nvnode.children // []\nvnode.key // null\n```\n\nNote\n\nThe full `VNode` interface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed.\n\n## Declaring Render Functions\n\nWhen using templates with Composition API, the return value of the `setup()` hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:\n\n```js\nimport { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}\n```\n\nThe render function is declared inside `setup()` so it naturally has access to the props and any reactive state declared in the same scope.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  setup() {\n    return () => 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nTIP\n\nMake sure to return a function instead of directly returning values! The `setup()` function is called only once per component, while the returned render function will be called multiple times.\n\nWe can declare render functions using the `render` option:\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}\n```\n\nThe `render()` function has access to the component instance via `this`.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  render() {\n    return 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nIf a render function component doesn't need any instance state, they can also be declared directly as a function for brevity:\n\n```js\nfunction Hello() {\n  return 'hello world!'\n}\n```\n\nThat's right, this is a valid Vue component! See [Functional Components](https://vuejs.org/guide/extras/render-function#functional-components) for more details on this syntax.\n\n## Vnodes Must Be Unique\n\nAll vnodes in the component tree must be unique. That means the following render function is invalid:\n\n```js\nfunction render() {\n  const p = h('p', 'hi')\n  return h('div', [\n    // Yikes - duplicate vnodes!\n    p,\n    p\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n```js\nfunction render() {\n  return h(\n    'div',\n    Array.from({ length: 20 }).map(() => {\n      return h('p', 'hi')\n    })\n  )\n}\n```\n\n## JSX / TSX\n\n[JSX](https://facebook.github.io/jsx/) is an XML-like extension to JavaScript that allows us to write code like this:\n\n```jsx\nconst vnode = <div>hello</div>\n```\n\nInside JSX expressions, use curly braces to embed dynamic values:\n\n```jsx\nconst vnode = <div id={dynamicId}>hello, {userName}</div>\n```\n\n`create-vue` and Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of [`@vue/babel-plugin-jsx`](https://github.com/vuejs/jsx-next) for details.\n\nAlthough first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note that **Vue JSX transform is different from React's JSX transform**, so you can't use React's JSX transform in Vue applications. Some notable differences from React JSX include:\n\n- You can use HTML attributes such as `class` and `for` as props - no need to use `className` or `htmlFor`.\n- Passing children to components (i.e. slots) [works differently](https://vuejs.org/guide/extras/render-function#passing-slots).\n\nVue's type definition also provides type inference for TSX usage. When using TSX, make sure to specify `\"jsx\": \"preserve\"` in `tsconfig.json` so that TypeScript leaves the JSX syntax intact for Vue JSX transform to process.\n\n## JSX Type Inference\n\nSimilar to the transform, Vue's JSX also needs different type definitions.\n\nStarting in Vue 3.4, Vue no longer implicitly registers the global `JSX` namespace. To instruct TypeScript to use Vue's JSX type definitions, make sure to include the following in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"vue\"\n    // ...\n  }\n}\n```\n\nYou can also opt-in per file by adding a `/* @jsxImportSource vue */` comment at the top of the file.\n\nIf there is code that depends on the presence of the global `JSX` namespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencing `vue/jsx` in your project, which registers the global `JSX` namespace.\n\n## Render Function Recipes\n\nBelow we will provide some common recipes for implementing template features as their equivalent render functions / JSX.\n\n## `v-if`\n\nTemplate:\n\n```template\n<div>\n  <div v-if=\"ok\">yes</div>\n  <span v-else>no</span>\n</div>\n```\n\nEquivalent render function / JSX:\n\n```js\nh('div', [ok.value ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{ok.value ? <div>yes</div> : <span>no</span>}</div>\n```\n\n```js\nh('div', [this.ok ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{this.ok ? <div>yes</div> : <span>no</span>}</div>\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nVue provides an `h()` function for creating vnodes:\n\n```js\nimport { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)\n```\n\n`h()` is short for **hyperscript** - which means \"JavaScript that produces HTML (hypertext markup language)\". This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could be `createVNode()`, but a shorter name helps when you have to call this function many times in a render function.\n\nThe `h()` function is designed to be very flexible:\n\n```js\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// props modifiers such as `.prop` and `.attr` can be added\n// with `.` and `^` prefixes respectively\nh('div', { '.name': 'some-name', '^width': '100' })\n\n// class and style have the same object / array\n// value support that they have in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThe resulting vnode has the following shape:\n\n```js\nconst vnode = h('div', { id: 'foo' }, [])\n\nvnode.type // 'div'\nvnode.props // { id: 'foo' }\nvnode.children // []\nvnode.key // null\n```\n\nNote\n\nThe full `VNode` interface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring render functions in vue-guide?\n\nAssistant: To declaring render functions in vue-guide, here's what you do:\nWhen using templates with Composition API, the return value of the `setup()` hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:\n\n```js\nimport { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}\n```\n\nThe render function is declared inside `setup()` so it naturally has access to the props and any reactive state declared in the same scope.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  setup() {\n    return () => 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nTIP\n\nMake sure to return a function instead of directly returning values! The `setup()` function is called only once per component, while the returned render function will be called multiple times.\n\nWe can declare render functions using the `render` option:\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}\n```\n\nThe `render()` function has access to the component instance via `this`.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  render() {\n    return 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nIf a render function component doesn't need any instance state, they can also be declared directly as a function for brevity:\n\n```js\nfunction Hello() {\n  return 'hello world!'\n}\n```\n\nThat's right, this is a valid Vue component! See [Functional Components](https://vuejs.org/guide/extras/render-function#functional-components) for more details on this syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I vnodes must be unique in vue-guide?\n\nAssistant: To vnodes must be unique in vue-guide, here's what you do:\nAll vnodes in the component tree must be unique. That means the following render function is invalid:\n\n```js\nfunction render() {\n  const p = h('p', 'hi')\n  return h('div', [\n    // Yikes - duplicate vnodes!\n    p,\n    p\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n```js\nfunction render() {\n  return h(\n    'div',\n    Array.from({ length: 20 }).map(() => {\n      return h('p', 'hi')\n    })\n  )\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I jsx / tsx in vue-guide?\n\nAssistant: To jsx / tsx in vue-guide, here's what you do:\n[JSX](https://facebook.github.io/jsx/) is an XML-like extension to JavaScript that allows us to write code like this:\n\n```jsx\nconst vnode = <div>hello</div>\n```\n\nInside JSX expressions, use curly braces to embed dynamic values:\n\n```jsx\nconst vnode = <div id={dynamicId}>hello, {userName}</div>\n```\n\n`create-vue` and Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of [`@vue/babel-plugin-jsx`](https://github.com/vuejs/jsx-next) for details.\n\nAlthough first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note that **Vue JSX transform is different from React's JSX transform**, so you can't use React's JSX transform in Vue applications. Some notable differences from React JSX include:\n\n- You can use HTML attributes such as `class` and `for` as props - no need to use `className` or `htmlFor`.\n- Passing children to components (i.e. slots) [works differently](https://vuejs.org/guide/extras/render-function#passing-slots).\n\nVue's type definition also provides type inference for TSX usage. When using TSX, make sure to specify `\"jsx\": \"preserve\"` in `tsconfig.json` so that TypeScript leaves the JSX syntax intact for Vue JSX transform to process..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I jsx type inference in vue-guide?\n\nAssistant: To jsx type inference in vue-guide, here's what you do:\nSimilar to the transform, Vue's JSX also needs different type definitions.\n\nStarting in Vue 3.4, Vue no longer implicitly registers the global `JSX` namespace. To instruct TypeScript to use Vue's JSX type definitions, make sure to include the following in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"vue\"\n    // ...\n  }\n}\n```\n\nYou can also opt-in per file by adding a `/* @jsxImportSource vue */` comment at the top of the file.\n\nIf there is code that depends on the presence of the global `JSX` namespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencing `vue/jsx` in your project, which registers the global `JSX` namespace..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I render function recipes in vue-guide?\n\nAssistant: To render function recipes in vue-guide, here's what you do:\nBelow we will provide some common recipes for implementing template features as their equivalent render functions / JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` in vue-guide?\n\nAssistant: To `v-if` in vue-guide, here's what you do:\nTemplate:\n\n```template\n<div>\n  <div v-if=\"ok\">yes</div>\n  <span v-else>no</span>\n</div>\n```\n\nEquivalent render function / JSX:\n\n```js\nh('div', [ok.value ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{ok.value ? <div>yes</div> : <span>no</span>}</div>\n```\n\n```js\nh('div', [this.ok ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{this.ok ? <div>yes</div> : <span>no</span>}</div>\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 02:59:06", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "4ee13323-8921-461d-a3df-83b994272ba4", "sourceURL": "https://vuejs.org/guide/extras/render-function", "url": "https://vuejs.org/guide/extras/render-function", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Single-File Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Single-File Components in vue-guide.\n\n# Single-File Components\n\nVue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.Here's a quick rundown of what this is about:\n\n## Introduction\n\nVue Single-File Components (a.k.a. `*.vue` files, abbreviated as **SFC**) is a special file format that allows us to encapsulate the template, logic, **and** styling of a Vue component in a single file. Here's an example SFC:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nAs we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The `<template>`, `<script>`, and `<style>` blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in the [SFC Syntax Specification](https://vuejs.org/api/sfc-spec).\n\n## Why SFC\n\nWhile SFCs require a build step, there are numerous benefits in return:\n\n- Author modularized components using familiar HTML, CSS and JavaScript syntax\n- [Colocation of inherently coupled concerns](https://vuejs.org/guide/scaling-up/sfc#what-about-separation-of-concerns)\n- Pre-compiled templates without runtime compilation cost\n- [Component-scoped CSS](https://vuejs.org/api/sfc-css-features)\n- [More ergonomic syntax when working with Composition API](https://vuejs.org/api/sfc-script-setup)\n- More compile-time optimizations by cross-analyzing template and script\n- [IDE support](https://vuejs.org/guide/scaling-up/tooling#ide-support) with auto-completion and type-checking for template expressions\n- Out-of-the-box Hot-Module Replacement (HMR) support\n\nSFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:\n\n- Single-Page Applications (SPA)\n- Static Site Generation (SSG)\n- Any non-trivial frontend where a build step can be justified for better development experience (DX).\n\nThat said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check out [petite-vue](https://github.com/vuejs/petite-vue), a 6 kB subset of Vue optimized for progressive enhancement.\n\n## How It Works\n\nVue SFC is a framework-specific file format and must be pre-compiled by [@vue/compiler-sfc](https://github.com/vuejs/core/tree/main/packages/compiler-sfc) into standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:\n\n```js\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\n`<style>` tags inside SFCs are typically injected as native `<style>` tags during development to support hot updates. For production they can be extracted and merged into a single CSS file.\n\nYou can play with SFCs and explore how they are compiled in the [Vue SFC Playground](https://play.vuejs.org/).\n\nIn actual projects, we typically integrate the SFC compiler with a build tool such as [Vite](https://vitejs.dev/) or [Vue CLI](http://cli.vuejs.org/) (which is based on [webpack](https://webpack.js.org/)), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in the [SFC Tooling](https://vuejs.org/guide/scaling-up/tooling) section.\n\n## What About Separation of Concerns?\n\nSome users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!\n\nTo answer this question, it is important for us to agree that **separation of concerns is not equal to the separation of file types**. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications.\n\nIn modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable.\n\nNote even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files using [Src Imports](https://vuejs.org/api/sfc-spec#src-imports).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "overview", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nVue Single-File Components (a.k.a. `*.vue` files, abbreviated as **SFC**) is a special file format that allows us to encapsulate the template, logic, **and** styling of a Vue component in a single file. Here's an example SFC:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n\nAs we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The `<template>`, `<script>`, and `<style>` blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in the [SFC Syntax Specification](https://vuejs.org/api/sfc-spec)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why sfc in vue-guide?\n\nAssistant: To why sfc in vue-guide, here's what you do:\nWhile SFCs require a build step, there are numerous benefits in return:\n\n- Author modularized components using familiar HTML, CSS and JavaScript syntax\n- [Colocation of inherently coupled concerns](https://vuejs.org/guide/scaling-up/sfc#what-about-separation-of-concerns)\n- Pre-compiled templates without runtime compilation cost\n- [Component-scoped CSS](https://vuejs.org/api/sfc-css-features)\n- [More ergonomic syntax when working with Composition API](https://vuejs.org/api/sfc-script-setup)\n- More compile-time optimizations by cross-analyzing template and script\n- [IDE support](https://vuejs.org/guide/scaling-up/tooling#ide-support) with auto-completion and type-checking for template expressions\n- Out-of-the-box Hot-Module Replacement (HMR) support\n\nSFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:\n\n- Single-Page Applications (SPA)\n- Static Site Generation (SSG)\n- Any non-trivial frontend where a build step can be justified for better development experience (DX).\n\nThat said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check out [petite-vue](https://github.com/vuejs/petite-vue), a 6 kB subset of Vue optimized for progressive enhancement..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I how it works in vue-guide?\n\nAssistant: To how it works in vue-guide, here's what you do:\nVue SFC is a framework-specific file format and must be pre-compiled by [@vue/compiler-sfc](https://github.com/vuejs/core/tree/main/packages/compiler-sfc) into standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:\n\n```js\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n\n`<style>` tags inside SFCs are typically injected as native `<style>` tags during development to support hot updates. For production they can be extracted and merged into a single CSS file.\n\nYou can play with SFCs and explore how they are compiled in the [Vue SFC Playground](https://play.vuejs.org/).\n\nIn actual projects, we typically integrate the SFC compiler with a build tool such as [Vite](https://vitejs.dev/) or [Vue CLI](http://cli.vuejs.org/) (which is based on [webpack](https://webpack.js.org/)), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in the [SFC Tooling](https://vuejs.org/guide/scaling-up/tooling) section..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what about separation of concerns? in vue-guide?\n\nAssistant: To what about separation of concerns? in vue-guide, here's what you do:\nSome users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!\n\nTo answer this question, it is important for us to agree that **separation of concerns is not equal to the separation of file types**. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications.\n\nIn modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable.\n\nNote even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files using [Src Imports](https://vuejs.org/api/sfc-spec#src-imports)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Single-File Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Single-File Component Example**:\n\n```yaml\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n```\n\nThis snippet shows you how to single-file component example, which is an important aspect of single-file components.\n\n**Single-File Component with Script Setup**:\n\n```yaml\n```vue\n<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>\n```\n```\n\nThis snippet shows you how to single-file component with script setup, which is an important aspect of single-file components.\n\n**Importing a Single-File Component**:\n\n```yaml\n```js\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}\n```\n```\n\nThis snippet shows you how to importing a single-file component, which is an important aspect of single-file components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Single-File Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSeparation of concerns is not equal to the separation of file types; focus on maintainability.\n\nColocate template, logic, and styles within components for better cohesion.\n\nLeverage hot-reloading and pre-compilation features even if not using SFCs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/sfc", "title": "Single-File Components", "description": "Vue Single-File Components (a.k.a. *.vue files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:00:01", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:type": "website", "twitter:site": "@vuejs", "theme-color": "#3c8772", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "title": "Single-File Components | Vue.js", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "2df20171-edb5-4572-9773-9ab2d5c73d72", "sourceURL": "https://vuejs.org/guide/scaling-up/sfc", "url": "https://vuejs.org/guide/scaling-up/sfc", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what TypeScript with Options API is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain TypeScript with Options API in vue-guide.\n\n# TypeScript with Options API\n\nThis page assumes you've already read the overview on Using Vue with TypeScript.Here's a quick rundown of what this is about:\n\n## Typing Component Props\n\nType inference for props in Options API requires wrapping the component with `defineComponent()`. With it, Vue is able to infer the types for the props based on the `props` option, taking additional options such as `required: true` and `default` into account:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\nHowever, the runtime `props` options only support using constructor functions as a prop's type - there is no way to specify complex types such as objects with nested properties or function call signatures.\n\nTo annotate complex props types, we can use the `PropType` utility type:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```\n\n## Caveats\n\nIf your TypeScript version is less than `4.7`, you have to be careful when using function values for `validator` and `default` prop options - make sure to use arrow functions:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\nThis prevents TypeScript from having to infer the type of `this` inside these functions, which, unfortunately, can cause the type inference to fail. It was a previous design limitation, and now has been improved in TypeScript 4.7.\n\n## Typing Component Emits\n\nWe can declare the expected payload type for an emitted event using the object syntax of the `emits` option. Also, all non-declared emitted events will throw a type error when called:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```\n\n## Typing Computed Properties\n\nA computed property infers its type based on its return value:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nIn some cases, you may want to explicitly annotate the type of a computed property to ensure its implementation is correct:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\nExplicit annotations may also be required in some edge cases where TypeScript fails to infer the type of a computed property due to circular inference loops.\n\n## Typing Event Handlers\n\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if `\"strict\": true` or `\"noImplicitAny\": true` are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```\n\n## Augmenting Global Properties\n\nSome plugins install globally available properties to all component instances via `app.config.globalProperties`. For example, we may install `this.$http` for data-fetching or `this.$translate` for internationalization. To make this play well with TypeScript, Vue exposes a `ComponentCustomProperties` interface designed to be augmented via TypeScript module augmentation:\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```\n\n## Type Augmentation Placement\n\nWe can put this type augmentation in a `.ts` file, or in a project-wide `*.d.ts` file. Either way, make sure it is included in `tsconfig.json`. For library / plugin authors, this file should be specified in the `types` property in `package.json`.\n\nIn order to take advantage of module augmentation, you will need to ensure the augmentation is placed in a TypeScript module. That is to say, the file needs to contain at least one top-level `import` or `export`, even if it is just `export {}`. If the augmentation is placed outside of a module, it will overwrite the original types rather than augmenting them!\n\n```ts\n// Does not work, overwrites the original types.\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```\n\n```ts\n// Works correctly\nexport {}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```\n\n## Augmenting Custom Options\n\nSome plugins, for example `vue-router`, provide support for custom component options such as `beforeRouteEnter`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    // ...\n  }\n})\n```\n\nWithout proper type augmentation, the arguments of this hook will implicitly have `any` type. We can augment the `ComponentCustomOptions` interface to support these custom options:\n\n```ts\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: Route, from: Route, next: () => void): void\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component props in vue-guide?\n\nAssistant: To typing component props in vue-guide, here's what you do:\nType inference for props in Options API requires wrapping the component with `defineComponent()`. With it, Vue is able to infer the types for the props based on the `props` option, taking additional options such as `required: true` and `default` into account:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\nHowever, the runtime `props` options only support using constructor functions as a prop's type - there is no way to specify complex types such as objects with nested properties or function call signatures.\n\nTo annotate complex props types, we can use the `PropType` utility type:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I caveats in vue-guide?\n\nAssistant: To caveats in vue-guide, here's what you do:\nIf your TypeScript version is less than `4.7`, you have to be careful when using function values for `validator` and `default` prop options - make sure to use arrow functions:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\nThis prevents TypeScript from having to infer the type of `this` inside these functions, which, unfortunately, can cause the type inference to fail. It was a previous design limitation, and now has been improved in TypeScript 4.7..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component emits in vue-guide?\n\nAssistant: To typing component emits in vue-guide, here's what you do:\nWe can declare the expected payload type for an emitted event using the object syntax of the `emits` option. Also, all non-declared emitted events will throw a type error when called:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing computed properties in vue-guide?\n\nAssistant: To typing computed properties in vue-guide, here's what you do:\nA computed property infers its type based on its return value:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nIn some cases, you may want to explicitly annotate the type of a computed property to ensure its implementation is correct:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\nExplicit annotations may also be required in some edge cases where TypeScript fails to infer the type of a computed property due to circular inference loops..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing event handlers in vue-guide?\n\nAssistant: To typing event handlers in vue-guide, here's what you do:\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if `\"strict\": true` or `\"noImplicitAny\": true` are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I augmenting global properties in vue-guide?\n\nAssistant: To augmenting global properties in vue-guide, here's what you do:\nSome plugins install globally available properties to all component instances via `app.config.globalProperties`. For example, we may install `this.$http` for data-fetching or `this.$translate` for internationalization. To make this play well with TypeScript, Vue exposes a `ComponentCustomProperties` interface designed to be augmented via TypeScript module augmentation:\n\n```ts\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I type augmentation placement in vue-guide?\n\nAssistant: To type augmentation placement in vue-guide, here's what you do:\nWe can put this type augmentation in a `.ts` file, or in a project-wide `*.d.ts` file. Either way, make sure it is included in `tsconfig.json`. For library / plugin authors, this file should be specified in the `types` property in `package.json`.\n\nIn order to take advantage of module augmentation, you will need to ensure the augmentation is placed in a TypeScript module. That is to say, the file needs to contain at least one top-level `import` or `export`, even if it is just `export {}`. If the augmentation is placed outside of a module, it will overwrite the original types rather than augmenting them!\n\n```ts\n// Does not work, overwrites the original types.\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```\n\n```ts\n// Works correctly\nexport {}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I augmenting custom options in vue-guide?\n\nAssistant: To augmenting custom options in vue-guide, here's what you do:\nSome plugins, for example `vue-router`, provide support for custom component options such as `beforeRouteEnter`:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    // ...\n  }\n})\n```\n\nWithout proper type augmentation, the arguments of this hook will implicitly have `any` type. We can augment the `ComponentCustomOptions` interface to support these custom options:\n\n```ts\nimport { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: Route, from: Route, next: () => void): void\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for TypeScript with Options API in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Typing Component Props Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})\n```\n\nThis snippet shows you how to typing component props example, which is an important aspect of typescript with options api.\n\n**Complex Props Types Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})\n```\n\nThis snippet shows you how to complex props types example, which is an important aspect of typescript with options api.\n\n**Caveats Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})\n```\n\nThis snippet shows you how to caveats example, which is an important aspect of typescript with options api.\n\n**Typing Component Emits Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})\n```\n\nThis snippet shows you how to typing component emits example, which is an important aspect of typescript with options api.\n\n**Typing Computed Properties Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})\n```\n\nThis snippet shows you how to typing computed properties example, which is an important aspect of typescript with options api.\n\n**Explicitly Annotate Computed Properties Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})\n```\n\nThis snippet shows you how to explicitly annotate computed properties example, which is an important aspect of typescript with options api.\n\n**Typing Event Handlers Example**:\n\n```yaml\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})\n```\n\nThis snippet shows you how to typing event handlers example, which is an important aspect of typescript with options api.\n\n**Augmenting Global Properties Example**:\n\n```yaml\nimport axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}\n```\n\nThis snippet shows you how to augmenting global properties example, which is an important aspect of typescript with options api.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using TypeScript with Options API in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhile Vue does support TypeScript usage with Options API, it is recommended to use Vue with TypeScript via Composition API as it offers simpler, more efficient and more robust type inference.\n\nMake sure to use arrow functions if your TypeScript version is less than 4.7 when using function values for `validator` and `default` prop options.\n\nExplicitly annotate the argument of event handlers to avoid implicit `any` type.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/options-api", "title": "TypeScript with Options API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:44", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "TypeScript with Options API | Vue.js", "ogUrl": "https://vuejs.org/", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "language": "en-US", "ogTitle": "Vue.js", "og:url": "https://vuejs.org/", "og:type": "website", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41baa5c3-4bc5-470d-86a9-d484ae1c1163", "sourceURL": "https://vuejs.org/guide/typescript/options-api", "url": "https://vuejs.org/guide/typescript/options-api", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Routing is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Routing in vue-guide.\n\n# Routing\n\nThis page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.Here's a quick rundown of what this is about:\n\n## Client-Side vs. Server-Side Routing\n\nRouting on the server side means the server is sending a response based on the URL path that the user is visiting. When we click on a link in a traditional server-rendered web app, the browser receives an HTML response from the server and reloads the entire page with the new HTML.\n\nIn a Single-Page Application (SPA), however, the client-side JavaScript can intercept the navigation, dynamically fetch new data, and update the current page without full page reloads. This typically results in a more snappy user experience, especially for use cases that are more like actual \"applications\", where the user is expected to perform many interactions over a long period of time.\n\nIn such SPAs, the \"routing\" is done on the client side, in the browser. A client-side router is responsible for managing the application's rendered view using browser APIs such as History API or the `hashchange` event.\n\n## Official Router\n\nVue is well-suited for building SPAs. For most SPAs, it's recommended to use the officially-supported Vue Router library. For more details, see Vue Router's documentation.\n\n## Simple Routing from Scratch\n\nIf you only need very simple routing and do not wish to involve a full-featured router library, you can do so with Dynamic Components and update the current component state by listening to browser `hashchange` events or using the History API.\n\nHere's a bare-bone example:\n\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I client-side vs. server-side routing in vue-guide?\n\nAssistant: To client-side vs. server-side routing in vue-guide, here's what you do:\nRouting on the server side means the server is sending a response based on the URL path that the user is visiting. When we click on a link in a traditional server-rendered web app, the browser receives an HTML response from the server and reloads the entire page with the new HTML.\n\nIn a Single-Page Application (SPA), however, the client-side JavaScript can intercept the navigation, dynamically fetch new data, and update the current page without full page reloads. This typically results in a more snappy user experience, especially for use cases that are more like actual \"applications\", where the user is expected to perform many interactions over a long period of time.\n\nIn such SPAs, the \"routing\" is done on the client side, in the browser. A client-side router is responsible for managing the application's rendered view using browser APIs such as History API or the `hashchange` event..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I official router in vue-guide?\n\nAssistant: To official router in vue-guide, here's what you do:\nVue is well-suited for building SPAs. For most SPAs, it's recommended to use the officially-supported Vue Router library. For more details, see Vue Router's documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I simple routing from scratch in vue-guide?\n\nAssistant: To simple routing from scratch in vue-guide, here's what you do:\nIf you only need very simple routing and do not wish to involve a full-featured router library, you can do so with Dynamic Components and update the current component state by listening to browser `hashchange` events or using the History API.\n\nHere's a bare-bone example:\n\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Routing in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Simple Routing Example (Composition API)**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n```\n\nThis snippet shows you how to simple routing example (composition api), which is an important aspect of routing.\n\n**Simple Routing Example (Options API)**:\n\n```yaml\n```vue\n<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n```\n\nThis snippet shows you how to simple routing example (options api), which is an important aspect of routing.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "code_examples", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Routing in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor most SPAs, it's recommended to use the officially-supported Vue Router library for better functionality and support.\n\nIf you need simple routing, consider using Dynamic Components and listening to `hashchange` events or using the History API.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/routing", "title": "Routing", "description": "This page covers the concepts of client-side and server-side routing in Vue.js, including the use of the official Vue Router and simple routing from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:03:30", "type": "best_practices", "page_metadata": {"theme-color": "#3c8772", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "generator": "VitePress v1.6.3", "title": "Routing | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "6dceaa88-6cc3-47f3-9dfd-0894051c686b", "sourceURL": "https://vuejs.org/guide/scaling-up/routing", "url": "https://vuejs.org/guide/scaling-up/routing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Performance is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Performance in vue-guide.\n\n# Performance\n\nThis page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.Here's a quick rundown of what this is about:\n\n## Overview\n\nVue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application.\n\nFirst, let's discuss the two major aspects of web performance:\n\n- **Page Load Performance**: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics like [Largest Contentful Paint (LCP)](https://web.dev/lcp/) and [Interaction to Next Paint](https://web.dev/articles/inp).\n\n- **Update Performance**: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA).\n\nWhile it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:\n\n- Consult [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue) to see how you can leverage Vue in different ways.\n- Jason Miller discusses the types of web applications and their respective ideal implementation / delivery in [Application Holotypes](https://jasonformat.com/application-holotypes/).\n\n## Profiling Options\n\nTo improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:\n\nFor profiling load performance of production deployments:\n\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n\nFor profiling performance during local development:\n\n- [Chrome DevTools Performance Panel](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n  - [`app.config.performance`](https://vuejs.org/api/application#app-config-performance) enables Vue-specific performance markers in Chrome DevTools' performance timeline.\n- [Vue DevTools Extension](https://vuejs.org/guide/scaling-up/tooling#browser-devtools) also provides a performance profiling feature.\n\n## Page Load Optimizations\n\nThere are many framework-agnostic aspects for optimizing page load performance - check out [this web.dev guide](https://web.dev/fast/) for a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue.\n\n### Choosing the Right Architecture\nIf your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated with [Server-Side Rendering (SSR)](https://vuejs.org/guide/extras/ways-of-using-vue#fullstack-ssr) or [Static Site Generation (SSG)](https://vuejs.org/guide/extras/ways-of-using-vue#jamstack-ssg). Check out the [SSR Guide](https://vuejs.org/guide/scaling-up/ssr) to learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client.\n\nIf your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG.\n\n### Bundle Size and Tree-shaking\nOne of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:\n\n- Use a build step if possible.\n  - Many of Vue's APIs are [\"tree-shakable\"](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) if bundled via a modern build tool. For example, if you don't use the built-in `<Transition>` component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.\n  - When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves **14kb** min+gzipped JavaScript and avoids the runtime compilation cost.\n- Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.\n  - If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer `lodash-es` over `lodash`.\n  - Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools like [bundlejs.com](https://bundlejs.com/) can be used for quick checks, but measuring with your actual build setup will always be the most accurate.\n- If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider using [petite-vue](https://github.com/vuejs/petite-vue) (only **6kb**) instead.\n\n### Code Splitting\nCode splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance.\n\nBundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:\n\n```js\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nLazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue's [Async Component](https://vuejs.org/guide/components/async) feature to create split chunks for component trees:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))\n```\n\nFor applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate from `defineAsyncComponent`. See [Lazy Loading Routes](https://router.vuejs.org/guide/advanced/lazy-loading.html) for more details.\n\n## Update Optimizations\n\n### Props Stability\nIn Vue, a child component only updates when at least one of its received props has changed. Consider the following example:\n\n```template\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />\n```\n\nInside the `<ListItem>` component, it uses its `id` and `activeId` props to determine whether it is the currently active item. While this works, the problem is that whenever `activeId` changes, **every** `<ListItem>` in the list has to update!\n\nIdeally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make `<ListItem>` directly accept an `active` prop instead:\n\n```template\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\nNow, for most components the `active` prop will remain the same when `activeId` changes, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible.\n\n### `v-once`\n`v-once` is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-once) for more details.\n\n### `v-memo`\n`v-memo` is a built-in directive that can be used to conditionally skip the update of large sub-trees or `v-for` lists. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-memo) for more details.\n\n### Computed Stability\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the following `isEven` computed only triggers effects if the returned value has changed from `true` to `false`, or vice-versa:\n\n```js\nconst count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4\n```\n\nThis reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:\n\n```js\nconst computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})\n```\n\nBecause a new object is created each time, the new value is technically always different from the old value. Even if the `isEven` property remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it.\n\nInstead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:\n\n```js\nconst computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})\n```\n\n[Try it in the playground](https://play.vuejs.org/#eNqVVMtu2zAQ/JUFgSZK4UpuczMkow/40AJ9IC3aQ9mDIlG2EokUyKVt1PC/d0lKtoEminMQQC1nZ4c7S+7Yu66L11awGUtNoesOwQi03ZzLuu2URtiBFtUECtV2FkU5gU2OxWpRVaJA2EOlVQuXxHDJJZeFkgYJayVC5hKj6dUxLnzSjZXmV40rZfFrh3Vb/82xVrLH//5DCQNNKPkweNiNVFP+zBsrIJvDjksgGrRahjVAbRZrIWdBVLz2yBfwBrIsg6mD7LncPyryfIVnywupUmz68HOEEqqCI+XFBQzrOKR79MDdx66GCn1jhpQDZx8f0oZ+nBgdRVcH/aMuBt1xZ80qGvGvh/X6nlXwnGpPl6qsLLxTtitzFFTNl0oSN/79AKOCHHQuS5pw4XorbXsr9ImHZN7nHFdx1SilI78MeOJ7Ca+nbvgd+GgomQOv6CNjSQqXaRJuHd03+kHRdg3JoT+A3a7XsfcmpbcWkQS/LZq6uM84C8o5m4fFuOg0CemeOXXX2w2E6ylsgj2gTgeYio/f1l5UEqj+Z3yC7lGuNDlpApswNNTrql7Gd0ZJeqW8TZw5t+tGaMdDXnA2G4acs7xp1OaTj6G2YjLEi5Uo7h+I35mti3H2TQsj9Jp6etjDXC8Fhu3F9y9iS+vDZqtK2xB6ZPNGGNVYpzHA3ltZkuwTnFf70b+1tVz+MIstCmmGQzmh/p56PGf00H4YOfpR7nV8PTxubP8P2GAP9Q==)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "overview", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I overview in vue-guide?\n\nAssistant: To overview in vue-guide, here's what you do:\nVue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application.\n\nFirst, let's discuss the two major aspects of web performance:\n\n- **Page Load Performance**: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics like [Largest Contentful Paint (LCP)](https://web.dev/lcp/) and [Interaction to Next Paint](https://web.dev/articles/inp).\n\n- **Update Performance**: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA).\n\nWhile it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:\n\n- Consult [Ways of Using Vue](https://vuejs.org/guide/extras/ways-of-using-vue) to see how you can leverage Vue in different ways.\n- Jason Miller discusses the types of web applications and their respective ideal implementation / delivery in [Application Holotypes](https://jasonformat.com/application-holotypes/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "section_detail", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I profiling options in vue-guide?\n\nAssistant: To profiling options in vue-guide, here's what you do:\nTo improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:\n\nFor profiling load performance of production deployments:\n\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n\nFor profiling performance during local development:\n\n- [Chrome DevTools Performance Panel](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n  - [`app.config.performance`](https://vuejs.org/api/application#app-config-performance) enables Vue-specific performance markers in Chrome DevTools' performance timeline.\n- [Vue DevTools Extension](https://vuejs.org/guide/scaling-up/tooling#browser-devtools) also provides a performance profiling feature..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "section_detail", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I page load optimizations in vue-guide?\n\nAssistant: To page load optimizations in vue-guide, here's what you do:\nThere are many framework-agnostic aspects for optimizing page load performance - check out [this web.dev guide](https://web.dev/fast/) for a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue.\n\n### Choosing the Right Architecture\nIf your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated with [Server-Side Rendering (SSR)](https://vuejs.org/guide/extras/ways-of-using-vue#fullstack-ssr) or [Static Site Generation (SSG)](https://vuejs.org/guide/extras/ways-of-using-vue#jamstack-ssg). Check out the [SSR Guide](https://vuejs.org/guide/scaling-up/ssr) to learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client.\n\nIf your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG.\n\n### Bundle Size and Tree-shaking\nOne of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:\n\n- Use a build step if possible.\n  - Many of Vue's APIs are [\"tree-shakable\"](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) if bundled via a modern build tool. For example, if you don't use the built-in `<Transition>` component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.\n  - When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves **14kb** min+gzipped JavaScript and avoids the runtime compilation cost.\n- Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.\n  - If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer `lodash-es` over `lodash`.\n  - Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools like [bundlejs.com](https://bundlejs.com/) can be used for quick checks, but measuring with your actual build setup will always be the most accurate.\n- If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider using [petite-vue](https://github.com/vuejs/petite-vue) (only **6kb**) instead.\n\n### Code Splitting\nCode splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance.\n\nBundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:\n\n```js\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nLazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue's [Async Component](https://vuejs.org/guide/components/async) feature to create split chunks for component trees:\n\n```js\nimport { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))\n```\n\nFor applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate from `defineAsyncComponent`. See [Lazy Loading Routes](https://router.vuejs.org/guide/advanced/lazy-loading.html) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "section_detail", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I update optimizations in vue-guide?\n\nAssistant: To update optimizations in vue-guide, here's what you do:\n### Props Stability\nIn Vue, a child component only updates when at least one of its received props has changed. Consider the following example:\n\n```template\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />\n```\n\nInside the `<ListItem>` component, it uses its `id` and `activeId` props to determine whether it is the currently active item. While this works, the problem is that whenever `activeId` changes, **every** `<ListItem>` in the list has to update!\n\nIdeally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make `<ListItem>` directly accept an `active` prop instead:\n\n```template\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\nNow, for most components the `active` prop will remain the same when `activeId` changes, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible.\n\n### `v-once`\n`v-once` is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-once) for more details.\n\n### `v-memo`\n`v-memo` is a built-in directive that can be used to conditionally skip the update of large sub-trees or `v-for` lists. Consult its [API reference](https://vuejs.org/api/built-in-directives#v-memo) for more details.\n\n### Computed Stability\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the following `isEven` computed only triggers effects if the returned value has changed from `true` to `false`, or vice-versa:\n\n```js\nconst count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4\n```\n\nThis reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:\n\n```js\nconst computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})\n```\n\nBecause a new object is created each time, the new value is technically always different from the old value. Even if the `isEven` property remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it.\n\nInstead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:\n\n```js\nconst computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})\n```\n\n[Try it in the playground](https://play.vuejs.org/#eNqVVMtu2zAQ/JUFgSZK4UpuczMkow/40AJ9IC3aQ9mDIlG2EokUyKVt1PC/d0lKtoEminMQQC1nZ4c7S+7Yu66L11awGUtNoesOwQi03ZzLuu2URtiBFtUECtV2FkU5gU2OxWpRVaJA2EOlVQuXxHDJJZeFkgYJayVC5hKj6dUxLnzSjZXmV40rZfFrh3Vb/82xVrLH//5DCQNNKPkweNiNVFP+zBsrIJvDjksgGrRahjVAbRZrIWdBVLz2yBfwBrIsg6mD7LncPyryfIVnywupUmz68HOEEqqCI+XFBQzrOKR79MDdx66GCn1jhpQDZx8f0oZ+nBgdRVcH/aMuBt1xZ80qGvGvh/X6nlXwnGpPl6qsLLxTtitzFFTNl0oSN/79AKOCHHQuS5pw4XorbXsr9ImHZN7nHFdx1SilI78MeOJ7Ca+nbvgd+GgomQOv6CNjSQqXaRJuHd03+kHRdg3JoT+A3a7XsfcmpbcWkQS/LZq6uM84C8o5m4fFuOg0CemeOXXX2w2E6ylsgj2gTgeYio/f1l5UEqj+Z3yC7lGuNDlpApswNNTrql7Gd0ZJeqW8TZw5t+tGaMdDXnA2G4acs7xp1OaTj6G2YjLEi5Uo7h+I35mti3H2TQsj9Jp6etjDXC8Fhu3F9y9iS+vDZqtK2xB6ZPNGGNVYpzHA3ltZkuwTnFf70b+1tVz+MIstCmmGQzmh/p56PGf00H4YOfpR7nV8PTxubP8P2GAP9Q==).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "section_detail", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Performance in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Code Splitting Example**:\n\n```yaml\n// lazy.js and its dependencies will be split into a separate chunk\n// and only loaded when `loadLazy()` is called.\nfunction loadLazy() {\n  return import('./lazy.js')\n}\n```\n\nThis snippet shows you how to code splitting example, which is an important aspect of performance.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "code_examples", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Performance in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsult Ways of Using Vue to see how you can leverage Vue in different ways.\n\nBe cautious of size when introducing new dependencies!\n\nCheck a dependency's size and evaluate whether it is worth the functionality it provides.\n\nUse a build step if possible to enable tree-shaking.\n\nConsider using petite-vue for progressive enhancement with minimal size.\n\nUse lazy loading for features that are not immediately needed after initial page load.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/performance", "title": "Performance", "description": "This page discusses performance optimization techniques for Vue applications, focusing on both page load and update performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:10:25", "type": "best_practices", "page_metadata": {"title": "Performance | Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "ogUrl": "https://vuejs.org/", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:title": "Vue.js", "language": "en-US", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "scrapeId": "52ef3b77-81f8-4310-a699-94fe50907a88", "sourceURL": "https://vuejs.org/guide/best-practices/performance", "url": "https://vuejs.org/guide/best-practices/performance", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Template Refs is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Template Refs in vue-guide.\n\n# Template Refs\n\nWhile Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.Here's a quick rundown of what this is about:\n\n## Accessing the Refs\n\nTo obtain the reference with Composition API, we can use the [`useTemplateRef()`](https://vuejs.org/api/composition-api-helpers#usetemplateref) helper:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n\nWhen using TypeScript, Vue's IDE support and `vue-tsc` will automatically infer the type of `input.value` based on what element or component the matching `ref` attribute is used on.\n\n## Usage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nIf not using `<script setup>`, make sure to also return the ref from `setup()`:\n\n```js\nexport default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}\n```\n\nThe resulting ref is exposed on `this.$refs`:\n\n```vue\n<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nNote that you can only access the ref **after the component is mounted.** If you try to access `$refs.input` in a template expression, it will be `undefined` on the first render. This is because the element doesn't exist until after the first render!\n\nIf you are trying to watch the changes of a template ref, make sure to account for the case where the ref has `null` value:\n\n```js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // not mounted yet, or the element was unmounted (e.g. by v-if)\n  }\n})\n```\n\n## Refs inside `v-for`\n\n> Requires v3.5 or above\n\nWhen `ref` is used inside `v-for`, the corresponding ref should contain an Array value, which will be populated with the elements after mount:\n\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nUsage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value. The ref should also contain an array value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = ref([])\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"itemRefs\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nWhen `ref` is used inside `v-for`, the resulting ref value will be an array containing the corresponding elements:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      list: [\\\n        /* ... */\\\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nIt should be noted that the ref array does **not** guarantee the same order as the source array.\n\n## Function Refs\n\nInstead of a string key, the `ref` attribute can also be bound to a function, which will be called on each component update and gives you full flexibility on where to store the element reference. The function receives the element reference as the first argument:\n\n```template\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n\nNote we are using a dynamic `:ref` binding so we can pass it a function instead of a ref name string. When the element is unmounted, the argument will be `null`. You can, of course, use a method instead of an inline function.\n\n## Ref on Component\n\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\n`ref` can also be used on a child component. In this case the reference will be that of a component instance:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nUsage before 3.5\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\n```vue\n<script>\nimport Child from './Child.vue'\n\nexport default {\n  components: {\n    Child\n  },\n  mounted() {\n    // this.$refs.child will hold an instance of <Child />\n  }\n}\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nIf the child component is using Options API or not using `<script setup>`, the referenced instance will be identical to the child component's `this`, which means the parent component will have full access to every property and method of the child component. This makes it easy to create tightly coupled implementation details between the parent and the child, so component refs should be only used when absolutely needed - in most cases, you should try to implement parent / child interactions using the standard props and emit interfaces first.\n\nAn exception here is that components using `<script setup>` are **private by default**: a parent component referencing a child component using `<script setup>` won't be able to access anything unless the child component chooses to expose a public interface using the `defineExpose` macro:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\n// Compiler macros, such as defineExpose, don't need to be imported\ndefineExpose({\n  a,\n  b\n})\n</script>\n```\n\nWhen a parent gets an instance of this component via template refs, the retrieved instance will be of the shape `{ a: number, b: number }` (refs are automatically unwrapped just like on normal instances).\n\nNote that defineExpose must be called before any await operation. Otherwise, properties and methods exposed after the await operation will not be accessible.\n\nSee also: [Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs)\n\nThe `expose` option can be used to limit the access to a child instance:\n\n```js\nexport default {\n  expose: ['publicData', 'publicMethod'],\n  data() {\n    return {\n      publicData: 'foo',\n      privateData: 'bar'\n    }\n  },\n  methods: {\n    publicMethod() {\n      /* ... */\n    },\n    privateMethod() {\n      /* ... */\n    }\n  }\n}\n```\n\nIn the above example, a parent referencing this component via template ref will only be able to access `publicData` and `publicMethod`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing the refs in vue-guide?\n\nAssistant: To accessing the refs in vue-guide, here's what you do:\nTo obtain the reference with Composition API, we can use the [`useTemplateRef()`](https://vuejs.org/api/composition-api-helpers#usetemplateref) helper:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n\nWhen using TypeScript, Vue's IDE support and `vue-tsc` will automatically infer the type of `input.value` based on what element or component the matching `ref` attribute is used on..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I usage before 3.5 in vue-guide?\n\nAssistant: To usage before 3.5 in vue-guide, here's what you do:\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nIf not using `<script setup>`, make sure to also return the ref from `setup()`:\n\n```js\nexport default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}\n```\n\nThe resulting ref is exposed on `this.$refs`:\n\n```vue\n<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nNote that you can only access the ref **after the component is mounted.** If you try to access `$refs.input` in a template expression, it will be `undefined` on the first render. This is because the element doesn't exist until after the first render!\n\nIf you are trying to watch the changes of a template ref, make sure to account for the case where the ref has `null` value:\n\n```js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // not mounted yet, or the element was unmounted (e.g. by v-if)\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I refs inside `v-for` in vue-guide?\n\nAssistant: To refs inside `v-for` in vue-guide, here's what you do:\n> Requires v3.5 or above\n\nWhen `ref` is used inside `v-for`, the corresponding ref should contain an Array value, which will be populated with the elements after mount:\n\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nUsage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value. The ref should also contain an array value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = ref([])\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"itemRefs\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nWhen `ref` is used inside `v-for`, the resulting ref value will be an array containing the corresponding elements:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      list: [\\\n        /* ... */\\\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nIt should be noted that the ref array does **not** guarantee the same order as the source array..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I function refs in vue-guide?\n\nAssistant: To function refs in vue-guide, here's what you do:\nInstead of a string key, the `ref` attribute can also be bound to a function, which will be called on each component update and gives you full flexibility on where to store the element reference. The function receives the element reference as the first argument:\n\n```template\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n\nNote we are using a dynamic `:ref` binding so we can pass it a function instead of a ref name string. When the element is unmounted, the argument will be `null`. You can, of course, use a method instead of an inline function..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ref on component in vue-guide?\n\nAssistant: To ref on component in vue-guide, here's what you do:\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\n`ref` can also be used on a child component. In this case the reference will be that of a component instance:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nUsage before 3.5\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\n```vue\n<script>\nimport Child from './Child.vue'\n\nexport default {\n  components: {\n    Child\n  },\n  mounted() {\n    // this.$refs.child will hold an instance of <Child />\n  }\n}\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nIf the child component is using Options API or not using `<script setup>`, the referenced instance will be identical to the child component's `this`, which means the parent component will have full access to every property and method of the child component. This makes it easy to create tightly coupled implementation details between the parent and the child, so component refs should be only used when absolutely needed - in most cases, you should try to implement parent / child interactions using the standard props and emit interfaces first.\n\nAn exception here is that components using `<script setup>` are **private by default**: a parent component referencing a child component using `<script setup>` won't be able to access anything unless the child component chooses to expose a public interface using the `defineExpose` macro:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\n// Compiler macros, such as defineExpose, don't need to be imported\ndefineExpose({\n  a,\n  b\n})\n</script>\n```\n\nWhen a parent gets an instance of this component via template refs, the retrieved instance will be of the shape `{ a: number, b: number }` (refs are automatically unwrapped just like on normal instances).\n\nNote that defineExpose must be called before any await operation. Otherwise, properties and methods exposed after the await operation will not be accessible.\n\nSee also: [Typing Component Template Refs](https://vuejs.org/guide/typescript/composition-api#typing-component-template-refs)\n\nThe `expose` option can be used to limit the access to a child instance:\n\n```js\nexport default {\n  expose: ['publicData', 'publicMethod'],\n  data() {\n    return {\n      publicData: 'foo',\n      privateData: 'bar'\n    }\n  },\n  methods: {\n    publicMethod() {\n      /* ... */\n    },\n    privateMethod() {\n      /* ... */\n    }\n  }\n}\n```\n\nIn the above example, a parent referencing this component via template ref will only be able to access `publicData` and `publicMethod`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Template Refs in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Accessing the Refs with Composition API**:\n\n```yaml\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n```\n\nThis snippet shows you how to accessing the refs with composition api, which is an important aspect of template refs.\n\n**Usage before 3.5**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n```\n\nThis snippet shows you how to usage before 3.5, which is an important aspect of template refs.\n\n**Refs inside v-for**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n```\n\nThis snippet shows you how to refs inside v-for, which is an important aspect of template refs.\n\n**Function Refs**:\n\n```yaml\n```template\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n```\n\nThis snippet shows you how to function refs, which is an important aspect of template refs.\n\n**Ref on Component**:\n\n```yaml\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n```\n\nThis snippet shows you how to ref on component, which is an important aspect of template refs.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Template Refs in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can only access the ref after the component is mounted.\n\nIf you try to access `$refs.input` in a template expression, it will be `undefined` on the first render.\n\nMake sure to account for the case where the ref has `null` value when watching changes of a template ref.\n\nThe ref array does not guarantee the same order as the source array.\n\nComponent refs should be only used when absolutely needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs", "title": "Template Refs", "description": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:11:04", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "theme-color": "#3c8772", "twitter:site": "@vuejs", "title": "Template Refs | Vue.js", "ogTitle": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "75f3b2e4-eab3-4fb2-a2e7-1c2dc889083d", "sourceURL": "https://vuejs.org/guide/essentials/template-refs", "url": "https://vuejs.org/guide/essentials/template-refs", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Accessibility is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Accessibility in vue-guide.\n\n# Accessibility\n\nWeb accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.Here's a quick rundown of what this is about:\n\n## Skip link\n\nYou should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages.\n\nTypically this is done on the top of `App.vue` as it will be the first focusable element on all your pages:\n\n```template\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nTo hide the link unless it is focused, you can add the following style:\n\n```css\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nOnce a user changes route, bring focus back to the very beginning of the page, right before the skip link. This can be achieved by calling focus on the `backToTop` template ref (assuming usage of `vue-router`):\n\n```vue\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>\n```\n\n## Content Structure\n\nOne of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application.\n\n### Headings\n\nUsers can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:\n\n- Nest headings in their ranking order: `<h1>` - `<h6>`\n- Don‚Äôt skip headings within a section\n- Use actual heading tags instead of styling text to give the visual appearance of headings\n\n```template\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```\n\n## Landmarks\n\n[Landmarks](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) provide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can use [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to help you achieve this.\n\n| HTML | ARIA Role | Landmark Purpose |\n| --- | --- | --- |\n| header | role=\"banner\" | Prime heading: title of the page |\n| nav | role=\"navigation\" | Collection of links suitable for use when navigating the document or related documents |\n| main | role=\"main\" | The main or central content of the document. |\n| footer | role=\"contentinfo\" | Information about the parent document: footnotes/copyrights/links to privacy statement |\n| aside | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content |\n| search | role=\"search\" | This section contains the search functionality for the application |\n| form | role=\"form\" | Collection of form-associated elements |\n| section | role=\"region\" | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\n\n[Read more about landmarks](https://www.w3.org/TR/wai-aria-1.2/#landmark_roles)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "overview", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I skip link in vue-guide?\n\nAssistant: To skip link in vue-guide, here's what you do:\nYou should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages.\n\nTypically this is done on the top of `App.vue` as it will be the first focusable element on all your pages:\n\n```template\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nTo hide the link unless it is focused, you can add the following style:\n\n```css\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nOnce a user changes route, bring focus back to the very beginning of the page, right before the skip link. This can be achieved by calling focus on the `backToTop` template ref (assuming usage of `vue-router`):\n\n```vue\n<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>\n```\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I content structure in vue-guide?\n\nAssistant: To content structure in vue-guide, here's what you do:\nOne of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application.\n\n### Headings\n\nUsers can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:\n\n- Nest headings in their ranking order: `<h1>` - `<h6>`\n- Don‚Äôt skip headings within a section\n- Use actual heading tags instead of styling text to give the visual appearance of headings\n\n```template\n<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I landmarks in vue-guide?\n\nAssistant: To landmarks in vue-guide, here's what you do:\n[Landmarks](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) provide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can use [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to help you achieve this.\n\n| HTML | ARIA Role | Landmark Purpose |\n| --- | --- | --- |\n| header | role=\"banner\" | Prime heading: title of the page |\n| nav | role=\"navigation\" | Collection of links suitable for use when navigating the document or related documents |\n| main | role=\"main\" | The main or central content of the document. |\n| footer | role=\"contentinfo\" | Information about the parent document: footnotes/copyrights/links to privacy statement |\n| aside | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content |\n| search | role=\"search\" | This section contains the search functionality for the application |\n| form | role=\"form\" | Collection of form-associated elements |\n| section | role=\"region\" | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\n\n[Read more about landmarks](https://www.w3.org/TR/wai-aria-1.2/#landmark_roles).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Accessibility in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Skip link implementation**:\n\n```yaml\n<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>\n```\n\nThis snippet shows you how to skip link implementation, which is an important aspect of accessibility.\n\n**CSS for skip link**:\n\n```yaml\n.skip-links {\n  list-style: none;\n}\n.skip-link {\n  white-space: nowrap;\n  margin: 1em auto;\n  top: 0;\n  position: fixed;\n  left: 50%;\n  margin-left: -72px;\n  opacity: 0;\n}\n.skip-link:focus {\n  opacity: 1;\n  background-color: white;\n  padding: 0.5em;\n  border: 1px solid black;\n}\n```\n\nThis snippet shows you how to css for skip link, which is an important aspect of accessibility.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Accessibility in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdd a skip link at the top of each page to allow users to skip repeated content.\n\nUse descriptive headings for every section to help users navigate the application.\n\nNest headings in their ranking order and avoid skipping headings within a section.\n\nUse actual heading tags instead of styling text to appear as headings.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/best-practices/accessibility", "title": "Accessibility", "description": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone ‚Äî be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:12:27", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Accessibility | Vue.js", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:title": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "scrapeId": "6907337c-b2f6-4a46-b6f7-f78339ba9c59", "sourceURL": "https://vuejs.org/guide/best-practices/accessibility", "url": "https://vuejs.org/guide/best-practices/accessibility", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Tooling is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Tooling in vue-guide.\n\n# Tooling\n\nThis page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.Here's a quick rundown of what this is about:\n\n## Try It Online\n\nYou don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:\n\n- [Vue SFC Playground](https://play.vuejs.org/)\n  - Always deployed from latest commit\n  - Designed for inspecting component compilation results\n- [Vue + Vite on StackBlitz](https://vite.new/vue)\n  - IDE-like environment running actual Vite dev server in the browser\n  - Closest to local setup\n\nIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs.\n\n## Project Scaffolding\n\n### Vite\n[Vite](https://vitejs.dev/) is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!\n\nTo get started with Vite + Vue, simply run:\n\nnpm\n\npnpm\n\nyarn\n\nbun\n\nsh\n\n```\n$ npm create vue@latest\n```\n\nsh\n\n```\n$ pnpm create vue@latest\n```\n\nsh\n\n```\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nsh\n\n```\n$ bun create vue@latest\n```\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool.\n\n- To learn more about Vite, check out the [Vite docs](https://vitejs.dev/).\n- To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for [@vitejs/plugin-vue](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme).\n\nBoth online playgrounds mentioned above also support downloading files as a Vite project.\n\n### Vue CLI\n[Vue CLI](https://cli.vuejs.org/) is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.\n\nFor information on migrating from Vue CLI to Vite:\n\n- [Vue CLI -> Vite Migration Guide from VueSchool.io](https://vueschool.io/articles/vuejs-tutorials/how-to-migrate-from-vue-cli-to-vite/)\n- [Tools / Plugins that help with auto migration](https://github.com/vitejs/awesome-vite#vue-cli)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling", "title": "Tooling", "description": "This page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:12:46", "type": "overview", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "theme-color": "#3c8772", "title": "Tooling | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "3fea760f-76e6-437b-b76e-62b865202137", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling", "url": "https://vuejs.org/guide/scaling-up/tooling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I try it online in vue-guide?\n\nAssistant: To try it online in vue-guide, here's what you do:\nYou don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:\n\n- [Vue SFC Playground](https://play.vuejs.org/)\n  - Always deployed from latest commit\n  - Designed for inspecting component compilation results\n- [Vue + Vite on StackBlitz](https://vite.new/vue)\n  - IDE-like environment running actual Vite dev server in the browser\n  - Closest to local setup\n\nIt is also recommended to use these online playgrounds to provide reproductions when reporting bugs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling", "title": "Tooling", "description": "This page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:12:46", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "theme-color": "#3c8772", "title": "Tooling | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "3fea760f-76e6-437b-b76e-62b865202137", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling", "url": "https://vuejs.org/guide/scaling-up/tooling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I project scaffolding in vue-guide?\n\nAssistant: To project scaffolding in vue-guide, here's what you do:\n### Vite\n[Vite](https://vitejs.dev/) is a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!\n\nTo get started with Vite + Vue, simply run:\n\nnpm\n\npnpm\n\nyarn\n\nbun\n\nsh\n\n```\n$ npm create vue@latest\n```\n\nsh\n\n```\n$ pnpm create vue@latest\n```\n\nsh\n\n```\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nsh\n\n```\n$ bun create vue@latest\n```\n\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool.\n\n- To learn more about Vite, check out the [Vite docs](https://vitejs.dev/).\n- To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for [@vitejs/plugin-vue](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme).\n\nBoth online playgrounds mentioned above also support downloading files as a Vite project.\n\n### Vue CLI\n[Vue CLI](https://cli.vuejs.org/) is the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases.\n\nFor information on migrating from Vue CLI to Vite:\n\n- [Vue CLI -> Vite Migration Guide from VueSchool.io](https://vueschool.io/articles/vuejs-tutorials/how-to-migrate-from-vue-cli-to-vite/)\n- [Tools / Plugins that help with auto migration](https://github.com/vitejs/awesome-vite#vue-cli).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling", "title": "Tooling", "description": "This page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:12:46", "type": "section_detail", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "theme-color": "#3c8772", "title": "Tooling | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "3fea760f-76e6-437b-b76e-62b865202137", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling", "url": "https://vuejs.org/guide/scaling-up/tooling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Tooling in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create Vue Project with npm**:\n\n```yaml\n$ npm create vue@latest\n```\n\nThis snippet shows you how to create vue project with npm, which is an important aspect of tooling.\n\n**Create Vue Project with pnpm**:\n\n```yaml\n$ pnpm create vue@latest\n```\n\nThis snippet shows you how to create vue project with pnpm, which is an important aspect of tooling.\n\n**Create Vue Project with Yarn**:\n\n```yaml\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n```\n\nThis snippet shows you how to create vue project with yarn, which is an important aspect of tooling.\n\n**Create Vue Project with bun**:\n\n```yaml\n$ bun create vue@latest\n```\n\nThis snippet shows you how to create vue project with bun, which is an important aspect of tooling.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling", "title": "Tooling", "description": "This page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:12:46", "type": "code_examples", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "theme-color": "#3c8772", "title": "Tooling | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "3fea760f-76e6-437b-b76e-62b865202137", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling", "url": "https://vuejs.org/guide/scaling-up/tooling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Tooling in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse online playgrounds to provide reproductions when reporting bugs.\n\nPrefer using Vite for new projects unless specific webpack-only features are needed.\n\nAlways prefer using `@vue/compiler-sfc` via the `vue/compiler-sfc` deep import to ensure version sync with the Vue runtime.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/tooling", "title": "Tooling", "description": "This page covers various tools and practices for working with Vue Single File Components (SFCs), including online playgrounds, project scaffolding, IDE support, testing, linting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:12:46", "type": "best_practices", "page_metadata": {"ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "theme-color": "#3c8772", "title": "Tooling | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "3fea760f-76e6-437b-b76e-62b865202137", "sourceURL": "https://vuejs.org/guide/scaling-up/tooling", "url": "https://vuejs.org/guide/scaling-up/tooling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Custom Directives is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Custom Directives in vue-guide.\n\n# Custom Directives\n\nThis page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.Here's a quick rundown of what this is about:\n\n## Introduction\n\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.\n\nWe have introduced two forms of code reuse in Vue: [components](https://vuejs.org/guide/essentials/component-basics) and [composables](https://vuejs.org/guide/reusability/composables). Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.\n\nA custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that adds a class to an element when it is inserted into the DOM by Vue:\n\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n```template\n<p v-highlight>This sentence is important!</p>\n```\n\nIn `<script setup>`, any camelCase variable that starts with the `v` prefix can be used as a custom directive. In the example above, `vHighlight` can be used in the template as `v-highlight`.\n\nIf you are not using `<script setup>`, custom directives can be registered using the `directives` option:\n\n```js\nexport default {\n  setup() {\n    /*...*/\n  },\n  directives: {\n    // enables v-highlight in template\n    highlight: {\n      /* ... */\n    }\n  }\n}\n```\n\nSimilar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via the `directives` option.\n\nIt is also common to globally register custom directives at the app level:\n\n```js\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```\n\n## When to use custom directives\n\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nA common example of this is a `v-focus` custom directive that brings an element into focus.\n\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n}\n```\n\n```template\n<input v-focus />\n```\n\nThis directive is more useful than the `autofocus` attribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly.\n\n## Directive Hooks\n\nA directive definition object can provide several hook functions (all optional):\n\n```js\nconst myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}\n```\n\n## Hook Arguments\n\nDirective hooks are passed these arguments:\n\n- `el`: the element the directive is bound to. This can be used to directly manipulate the DOM.\n\n- `binding`: an object containing the following properties.\n\n  - `value`: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - `oldValue`: The previous value, only available in `beforeUpdate` and `updated`. It is available whether or not the value has changed.\n  - `arg`: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - `modifiers`: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n  - `instance`: The instance of the component where the directive is used.\n  - `dir`: the directive definition object.\n- `vnode`: the underlying VNode representing the bound element.\n\n- `prevVnode`: the VNode representing the bound element from the previous render. Only available in the `beforeUpdate` and `updated` hooks.\n\nAs an example, consider the following directive usage:\n\n```template\n<div v-example:foo.bar=\"baz\">\n```\n\nThe `binding` argument would be an object in the shape of:\n\n```js\n{\n  arg: 'foo',\n  modifiers: { bar: true },\n  value: /* value of `baz` */, \n  oldValue: /* value of `baz` from previous update */\n}\n```\n\nSimilar to built-in directives, custom directive arguments can be dynamic. For example:\n\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n\nHere the directive argument will be reactively updated based on `arg` property in our component state.\n\nNote: Apart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset).\n\n## Function Shorthand\n\nIt's common for a custom directive to have the same behavior for `mounted` and `updated`, with no need for the other hooks. In such cases we can define the directive as a function:\n\n```template\n<div v-color=\"color\"></div>\n```\n\n```js\napp.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})\n```\n\n## Object Literals\n\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```\n\n## Usage on Components\n\nNot recommended\n\nUsing custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes.\n\nWhen used on components, custom directives will always apply to a component's root node, similar to [Fallthrough Attributes](https://vuejs.org/guide/components/attrs).\n\n```template\n<MyComponent v-demo=\"test\" />\n```\n\n```template\n<!-- template of MyComponent -->\n\n<div> <!-- v-demo directive will be applied here -->\n  <span>My component content</span>\n</div>\n```\n\nNote that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element with `v-bind=\"$attrs\"`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "overview", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I introduction in vue-guide?\n\nAssistant: To introduction in vue-guide, here's what you do:\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.\n\nWe have introduced two forms of code reuse in Vue: [components](https://vuejs.org/guide/essentials/component-basics) and [composables](https://vuejs.org/guide/reusability/composables). Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.\n\nA custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that adds a class to an element when it is inserted into the DOM by Vue:\n\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n```\n\n```template\n<p v-highlight>This sentence is important!</p>\n```\n\nIn `<script setup>`, any camelCase variable that starts with the `v` prefix can be used as a custom directive. In the example above, `vHighlight` can be used in the template as `v-highlight`.\n\nIf you are not using `<script setup>`, custom directives can be registered using the `directives` option:\n\n```js\nexport default {\n  setup() {\n    /*...*/\n  },\n  directives: {\n    // enables v-highlight in template\n    highlight: {\n      /* ... */\n    }\n  }\n}\n```\n\nSimilar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via the `directives` option.\n\nIt is also common to globally register custom directives at the app level:\n\n```js\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I when to use custom directives in vue-guide?\n\nAssistant: To when to use custom directives in vue-guide, here's what you do:\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nA common example of this is a `v-focus` custom directive that brings an element into focus.\n\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n}\n```\n\n```template\n<input v-focus />\n```\n\nThis directive is more useful than the `autofocus` attribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I directive hooks in vue-guide?\n\nAssistant: To directive hooks in vue-guide, here's what you do:\nA directive definition object can provide several hook functions (all optional):\n\n```js\nconst myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I hook arguments in vue-guide?\n\nAssistant: To hook arguments in vue-guide, here's what you do:\nDirective hooks are passed these arguments:\n\n- `el`: the element the directive is bound to. This can be used to directly manipulate the DOM.\n\n- `binding`: an object containing the following properties.\n\n  - `value`: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - `oldValue`: The previous value, only available in `beforeUpdate` and `updated`. It is available whether or not the value has changed.\n  - `arg`: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - `modifiers`: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n  - `instance`: The instance of the component where the directive is used.\n  - `dir`: the directive definition object.\n- `vnode`: the underlying VNode representing the bound element.\n\n- `prevVnode`: the VNode representing the bound element from the previous render. Only available in the `beforeUpdate` and `updated` hooks.\n\nAs an example, consider the following directive usage:\n\n```template\n<div v-example:foo.bar=\"baz\">\n```\n\nThe `binding` argument would be an object in the shape of:\n\n```js\n{\n  arg: 'foo',\n  modifiers: { bar: true },\n  value: /* value of `baz` */, \n  oldValue: /* value of `baz` from previous update */\n}\n```\n\nSimilar to built-in directives, custom directive arguments can be dynamic. For example:\n\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n\nHere the directive argument will be reactively updated based on `arg` property in our component state.\n\nNote: Apart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I function shorthand in vue-guide?\n\nAssistant: To function shorthand in vue-guide, here's what you do:\nIt's common for a custom directive to have the same behavior for `mounted` and `updated`, with no need for the other hooks. In such cases we can define the directive as a function:\n\n```template\n<div v-color=\"color\"></div>\n```\n\n```js\napp.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I object literals in vue-guide?\n\nAssistant: To object literals in vue-guide, here's what you do:\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I usage on components in vue-guide?\n\nAssistant: To usage on components in vue-guide, here's what you do:\nNot recommended\n\nUsing custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes.\n\nWhen used on components, custom directives will always apply to a component's root node, similar to [Fallthrough Attributes](https://vuejs.org/guide/components/attrs).\n\n```template\n<MyComponent v-demo=\"test\" />\n```\n\n```template\n<!-- template of MyComponent -->\n\n<div> <!-- v-demo directive will be applied here -->\n  <span>My component content</span>\n</div>\n```\n\nNote that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element with `v-bind=\"$attrs\"`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "section_detail", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Custom Directives in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Custom Directive Example**:\n\n```yaml\n```vue\n<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>\n```\n```\n\nThis snippet shows you how to custom directive example, which is an important aspect of custom directives.\n\n**Custom Directive Registration Example**:\n\n```yaml\n```js\nconst highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}\n}\n```\n```\n\nThis snippet shows you how to custom directive registration example, which is an important aspect of custom directives.\n\n**Global Custom Directive Registration Example**:\n\n```yaml\n```js\nconst app = createApp({})\n\n// make v-highlight usable in all components\napp.directive('highlight', {\n  /* ... */\n})\n```\n```\n\nThis snippet shows you how to global custom directive registration example, which is an important aspect of custom directives.\n\n**Custom Directive for Focus Example**:\n\n```yaml\n```vue\n<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>\n```\n```\n\nThis snippet shows you how to custom directive for focus example, which is an important aspect of custom directives.\n\n**Custom Directive for Focus Registration Example**:\n\n```yaml\n```js\nconst focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}\n}\n```\n```\n\nThis snippet shows you how to custom directive for focus registration example, which is an important aspect of custom directives.\n\n**Directive Hooks Example**:\n\n```yaml\n```js\nconst myDirective = {\n  created(el, binding, vnode) {},\n  beforeMount(el, binding, vnode) {},\n  mounted(el, binding, vnode) {},\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  updated(el, binding, vnode, prevVnode) {},\n  beforeUnmount(el, binding, vnode) {},\n  unmounted(el, binding, vnode) {}\n}\n```\n```\n\nThis snippet shows you how to directive hooks example, which is an important aspect of custom directives.\n\n**Dynamic Directive Argument Example**:\n\n```yaml\n```template\n<div v-example:[arg]=\"value\"></div>\n```\n```\n\nThis snippet shows you how to dynamic directive argument example, which is an important aspect of custom directives.\n\n**Function Shorthand Example**:\n\n```yaml\n```js\napp.directive('color', (el, binding) => {\n  el.style.color = binding.value\n})\n```\n```\n\nThis snippet shows you how to function shorthand example, which is an important aspect of custom directives.\n\n**Object Literal Directive Example**:\n\n```yaml\n```template\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n```\n\nThis snippet shows you how to object literal directive example, which is an important aspect of custom directives.\n\n**Object Literal Directive Registration Example**:\n\n```yaml\n```js\napp.directive('demo', (el, binding) => {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text) // => \"hello!\"\n})\n```\n```\n\nThis snippet shows you how to object literal directive registration example, which is an important aspect of custom directives.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "code_examples", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Custom Directives in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\n\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly.\n\nWhen using custom directives on components, be aware of potential unexpected behavior due to multiple root nodes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/custom-directives", "title": "Custom Directives", "description": "This page covers how to create and use custom directives in Vue, including their lifecycle hooks and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:16:48", "type": "best_practices", "page_metadata": {"title": "Custom Directives | Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "twitter:card": "summary", "scrapeId": "2b63115f-83f0-4a18-9380-66eddf737098", "sourceURL": "https://vuejs.org/guide/reusability/custom-directives", "url": "https://vuejs.org/guide/reusability/custom-directives", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Event Handling is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Event Handling in vue-guide.\n\n# Event Handling\n\nThis page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.Here's a quick rundown of what this is about:\n\n## Listening to Events\n\nWe can use the `v-on` directive, which we typically shorten to the `@` symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be `v-on:click=\"handler\"` or with the shortcut, `@click=\"handler\"`.\n\nThe handler value can be one of the following:\n\n1. **Inline handlers:** Inline JavaScript to be executed when the event is triggered (similar to the native `onclick` attribute).\n\n2. **Method handlers:** A property name or path that points to a method defined on the component.\n\n## Inline Handlers\n\nInline handlers are typically used in simple cases, for example:\n\n```js\nconst count = ref(0)\n```\n\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n```template\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```\n\n## Method Handlers\n\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why `v-on` can also accept the name or path of a component method you'd like to call.\n\nFor example:\n\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n```js\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n```template\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```\n\n## Method vs. Inline Detection\n\nThe template compiler detects method handlers by checking whether the `v-on` value string is a valid JavaScript identifier or property access path. For example, `foo`, `foo.bar` and `foo['bar']` are treated as method handlers, while `foo()` and `count++` are treated as inline handlers.\n\n## Calling Methods in Inline Handlers\n\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n```template\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```\n\n## Accessing Event Argument in Inline Handlers\n\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special `$event` variable, or use an inline arrow function:\n\n```template\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```\n\n## Event Modifiers\n\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.self`\n- `.capture`\n- `.once`\n- `.passive`\n\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```\n\n## Key Modifiers\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for `v-on` or `@` when listening for key events:\n\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n\nYou can directly use any valid key names exposed via [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values) as modifiers by converting them to kebab-case.\n\n```template\n<input @keyup.page-down=\"onPageDown\" />\n```\n\n## Key Aliases\n\nVue provides aliases for the most commonly used keys:\n\n- `.enter`\n- `.tab`\n- `.delete` (captures both \"Delete\" and \"Backspace\" keys)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n## System Modifier Keys\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`\n\nFor example:\n\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n## .exact Modifier\n\nThe `.exact` modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\n```template\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```\n\n## Mouse Button Modifiers\n\n- `.left`\n- `.right`\n- `.middle`\n\nThese modifiers restrict the handler to events triggered by a specific mouse button.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I listening to events in vue-guide?\n\nAssistant: To listening to events in vue-guide, here's what you do:\nWe can use the `v-on` directive, which we typically shorten to the `@` symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be `v-on:click=\"handler\"` or with the shortcut, `@click=\"handler\"`.\n\nThe handler value can be one of the following:\n\n1. **Inline handlers:** Inline JavaScript to be executed when the event is triggered (similar to the native `onclick` attribute).\n\n2. **Method handlers:** A property name or path that points to a method defined on the component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I inline handlers in vue-guide?\n\nAssistant: To inline handlers in vue-guide, here's what you do:\nInline handlers are typically used in simple cases, for example:\n\n```js\nconst count = ref(0)\n```\n\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n\n```template\n<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I method handlers in vue-guide?\n\nAssistant: To method handlers in vue-guide, here's what you do:\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why `v-on` can also accept the name or path of a component method you'd like to call.\n\nFor example:\n\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n\n```js\ndata() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}\n```\n\n```template\n<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I method vs. inline detection in vue-guide?\n\nAssistant: To method vs. inline detection in vue-guide, here's what you do:\nThe template compiler detects method handlers by checking whether the `v-on` value string is a valid JavaScript identifier or property access path. For example, `foo`, `foo.bar` and `foo['bar']` are treated as method handlers, while `foo()` and `count++` are treated as inline handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I calling methods in inline handlers in vue-guide?\n\nAssistant: To calling methods in inline handlers in vue-guide, here's what you do:\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  say(message) {\n    alert(message)\n  }\n}\n```\n\n```template\n<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing event argument in inline handlers in vue-guide?\n\nAssistant: To accessing event argument in inline handlers in vue-guide, here's what you do:\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special `$event` variable, or use an inline arrow function:\n\n```template\n<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>\n```\n\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n```js\nmethods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I event modifiers in vue-guide?\n\nAssistant: To event modifiers in vue-guide, here's what you do:\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.self`\n- `.capture`\n- `.once`\n- `.passive`\n\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I key modifiers in vue-guide?\n\nAssistant: To key modifiers in vue-guide, here's what you do:\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for `v-on` or `@` when listening for key events:\n\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n\nYou can directly use any valid key names exposed via [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values) as modifiers by converting them to kebab-case.\n\n```template\n<input @keyup.page-down=\"onPageDown\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I key aliases in vue-guide?\n\nAssistant: To key aliases in vue-guide, here's what you do:\nVue provides aliases for the most commonly used keys:\n\n- `.enter`\n- `.tab`\n- `.delete` (captures both \"Delete\" and \"Backspace\" keys)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I system modifier keys in vue-guide?\n\nAssistant: To system modifier keys in vue-guide, here's what you do:\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`\n\nFor example:\n\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I .exact modifier in vue-guide?\n\nAssistant: To .exact modifier in vue-guide, here's what you do:\nThe `.exact` modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\n```template\n<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mouse button modifiers in vue-guide?\n\nAssistant: To mouse button modifiers in vue-guide, here's what you do:\n- `.left`\n- `.right`\n- `.middle`\n\nThese modifiers restrict the handler to events triggered by a specific mouse button..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Event Handling in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Inline Handlers Example**:\n\n```yaml\n```js\nconst count = ref(0)\n```\n```js\ndata() {\n  return {\n    count: 0\n  }\n}\n```\n```\n\nThis snippet shows you how to inline handlers example, which is an important aspect of event handling.\n\n**Method Handlers Example**:\n\n```yaml\n```js\nconst name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}\n```\n```\n\nThis snippet shows you how to method handlers example, which is an important aspect of event handling.\n\n**Calling Methods in Inline Handlers Example**:\n\n```yaml\n```js\nfunction say(message) {\n  alert(message)\n}\n```\n```\n\nThis snippet shows you how to calling methods in inline handlers example, which is an important aspect of event handling.\n\n**Accessing Event Argument in Inline Handlers Example**:\n\n```yaml\n```js\nfunction warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n```\n\nThis snippet shows you how to accessing event argument in inline handlers example, which is an important aspect of event handling.\n\n**Event Modifiers Example**:\n\n```yaml\n```template\n<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n```\n```\n\nThis snippet shows you how to event modifiers example, which is an important aspect of event handling.\n\n**Key Modifiers Example**:\n\n```yaml\n```template\n<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />\n```\n```\n\nThis snippet shows you how to key modifiers example, which is an important aspect of event handling.\n\n**System Modifier Keys Example**:\n\n```yaml\n```template\n<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n```\n\nThis snippet shows you how to system modifier keys example, which is an important aspect of event handling.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Event Handling in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOrder matters when using modifiers because the relevant code is generated in the same order. Therefore using `@click.prevent.self` will prevent click's default action on the element itself and its children, while `@click.self.prevent` will only prevent click's default action on the element itself.\n\nDo not use `.passive` and `.prevent` together, because `.passive` already indicates to the browser that you do not intend to prevent the event's default behavior, and you will likely see a warning from the browser if you do so.\n\nNote that modifier keys are different from regular keys and when used with `keyup` events, they have to be pressed when the event is emitted. In other words, `keyup.ctrl` will only trigger if you release a key while holding down `ctrl`. It won't trigger if you release the `ctrl` key alone.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/event-handling", "title": "Event Handling", "description": "This page covers how to handle events in Vue.js using the v-on directive, including inline and method handlers, event modifiers, and key modifiers.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:18:36", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "ogUrl": "https://vuejs.org/", "title": "Event Handling | Vue.js", "og:type": "website", "twitter:card": "summary", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "og:title": "Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "scrapeId": "16c311f4-d11a-4da7-8d53-28cc5e833073", "sourceURL": "https://vuejs.org/guide/essentials/event-handling", "url": "https://vuejs.org/guide/essentials/event-handling", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Provide / Inject is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Provide / Inject in vue-guide.\n\n# Provide / Inject\n\nThis page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.Here's a quick rundown of what this is about:\n\n## Prop Drilling\n\nUsually, when we need to pass data from the parent to a child component, we use props. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain:\n\nNotice although the `<Footer>` component may not care about these props at all, it still needs to declare and pass them along just so `<DeepChild>` can access them. If there is a longer parent chain, more components would be affected along the way. This is called \"props drilling\" and definitely isn't fun to deal with.\n\nWe can solve props drilling with `provide` and `inject`. A parent component can serve as a dependency provider for all its descendants. Any component in the descendant tree, regardless of how deep it is, can inject dependencies provided by components up in its parent chain.\n\n## Provide\n\nTo provide data to a component's descendants, use the `provide()` function:\n\n```vue\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\nIf not using `<script setup>`, make sure `provide()` is called synchronously inside `setup()`:\n\n```js\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\nThe `provide()` function accepts two arguments. The first argument is called the injection key, which can be a string or a Symbol. The injection key is used by descendant components to lookup the desired value to inject. A single component can call `provide()` multiple times with different injection keys to provide different values.\n\nThe second argument is the provided value. The value can be of any type, including reactive state such as refs:\n\n```js\nimport { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)\n```\n\nProviding reactive values allows the descendant components using the provided value to establish a reactive connection to the provider component.\n\n## App-level Provide\n\nIn addition to providing data in a component, we can also provide at the app level:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n\nApp-level provides are available to all components rendered in the app. This is especially useful when writing plugins, as plugins typically wouldn't be able to provide values using components.\n\n## Inject\n\nTo inject data provided by an ancestor component, use the `inject()` function:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n\nIf the provided value is a ref, it will be injected as-is and will not be automatically unwrapped. This allows the injector component to retain the reactivity connection to the provider component.\n\n## Injection Aliasing\n\nWhen using the array syntax for `inject`, the injected properties are exposed on the component instance using the same key. If we want to inject the property using a different local key, we need to use the object syntax for the `inject` option:\n\n```js\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```\n\n## Injection Default Values\n\nBy default, `inject` assumes that the injected key is provided somewhere in the parent chain. If we want to make an injected property work with optional providers, we need to declare a default value, similar to props:\n\n```js\nconst value = inject('message', 'default value')\n```\n\nIn some cases, the default value may need to be created by calling a function or instantiating a new class. To avoid unnecessary computation or side effects in case the optional value is not used, we can use a factory function for creating the default value:\n\n```js\nconst value = inject('key', () => new ExpensiveClass(), true)\n```\n\n## Working with Reactivity\n\nWhen using reactive provide/inject values, it is recommended to keep any mutations to reactive state inside of the provider whenever possible. This ensures that the provided state and its possible mutations are co-located in the same component, making it easier to maintain in the future.\n\n## Working with Symbol Keys\n\nIf you are working in a large application with many dependency providers, or you are authoring components that are going to be used by other developers, it is best to use Symbol injection keys to avoid potential collisions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "overview", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I prop drilling in vue-guide?\n\nAssistant: To prop drilling in vue-guide, here's what you do:\nUsually, when we need to pass data from the parent to a child component, we use props. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain:\n\nNotice although the `<Footer>` component may not care about these props at all, it still needs to declare and pass them along just so `<DeepChild>` can access them. If there is a longer parent chain, more components would be affected along the way. This is called \"props drilling\" and definitely isn't fun to deal with.\n\nWe can solve props drilling with `provide` and `inject`. A parent component can serve as a dependency provider for all its descendants. Any component in the descendant tree, regardless of how deep it is, can inject dependencies provided by components up in its parent chain..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide in vue-guide?\n\nAssistant: To provide in vue-guide, here's what you do:\nTo provide data to a component's descendants, use the `provide()` function:\n\n```vue\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n\nIf not using `<script setup>`, make sure `provide()` is called synchronously inside `setup()`:\n\n```js\nimport { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}\n```\n\nThe `provide()` function accepts two arguments. The first argument is called the injection key, which can be a string or a Symbol. The injection key is used by descendant components to lookup the desired value to inject. A single component can call `provide()` multiple times with different injection keys to provide different values.\n\nThe second argument is the provided value. The value can be of any type, including reactive state such as refs:\n\n```js\nimport { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)\n```\n\nProviding reactive values allows the descendant components using the provided value to establish a reactive connection to the provider component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app-level provide in vue-guide?\n\nAssistant: To app-level provide in vue-guide, here's what you do:\nIn addition to providing data in a component, we can also provide at the app level:\n\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n\nApp-level provides are available to all components rendered in the app. This is especially useful when writing plugins, as plugins typically wouldn't be able to provide values using components..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I inject in vue-guide?\n\nAssistant: To inject in vue-guide, here's what you do:\nTo inject data provided by an ancestor component, use the `inject()` function:\n\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n\nIf the provided value is a ref, it will be injected as-is and will not be automatically unwrapped. This allows the injector component to retain the reactivity connection to the provider component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I injection aliasing in vue-guide?\n\nAssistant: To injection aliasing in vue-guide, here's what you do:\nWhen using the array syntax for `inject`, the injected properties are exposed on the component instance using the same key. If we want to inject the property using a different local key, we need to use the object syntax for the `inject` option:\n\n```js\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I injection default values in vue-guide?\n\nAssistant: To injection default values in vue-guide, here's what you do:\nBy default, `inject` assumes that the injected key is provided somewhere in the parent chain. If we want to make an injected property work with optional providers, we need to declare a default value, similar to props:\n\n```js\nconst value = inject('message', 'default value')\n```\n\nIn some cases, the default value may need to be created by calling a function or instantiating a new class. To avoid unnecessary computation or side effects in case the optional value is not used, we can use a factory function for creating the default value:\n\n```js\nconst value = inject('key', () => new ExpensiveClass(), true)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I working with reactivity in vue-guide?\n\nAssistant: To working with reactivity in vue-guide, here's what you do:\nWhen using reactive provide/inject values, it is recommended to keep any mutations to reactive state inside of the provider whenever possible. This ensures that the provided state and its possible mutations are co-located in the same component, making it easier to maintain in the future..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I working with symbol keys in vue-guide?\n\nAssistant: To working with symbol keys in vue-guide, here's what you do:\nIf you are working in a large application with many dependency providers, or you are authoring components that are going to be used by other developers, it is best to use Symbol injection keys to avoid potential collisions..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Provide / Inject in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Provide Example**:\n\n```yaml\n```vue\n<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>\n```\n```\n\nThis snippet shows you how to provide example, which is an important aspect of provide / inject.\n\n**Inject Example**:\n\n```yaml\n```vue\n<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>\n```\n```\n\nThis snippet shows you how to inject example, which is an important aspect of provide / inject.\n\n**App-level Provide Example**:\n\n```yaml\n```js\nimport { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')\n```\n```\n\nThis snippet shows you how to app-level provide example, which is an important aspect of provide / inject.\n\n**Injection Aliasing Example**:\n\n```yaml\n```js\nexport default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}\n```\n```\n\nThis snippet shows you how to injection aliasing example, which is an important aspect of provide / inject.\n\n**Injection Default Values Example**:\n\n```yaml\n```js\nconst value = inject('message', 'default value')\n```\n```\n\nThis snippet shows you how to injection default values example, which is an important aspect of provide / inject.\n\n**Working with Symbol Keys Example**:\n\n```yaml\n```js\n// keys.js\nexport const myInjectionKey = Symbol()\n```\n```\n\nThis snippet shows you how to working with symbol keys example, which is an important aspect of provide / inject.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "code_examples", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Provide / Inject in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKeep mutations to reactive state inside the provider component whenever possible.\n\nUse Symbol injection keys to avoid potential collisions in large applications.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/components/provide-inject", "title": "Provide / Inject", "description": "This page covers the provide/inject pattern in Vue.js, which allows components to share data without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:19:10", "type": "best_practices", "page_metadata": {"og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "favicon": "https://vuejs.org/logo.svg", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "language": "en-US", "title": "Provide / Inject | Vue.js", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "scrapeId": "1ab051b2-d281-47c4-8c64-23f3dba086f4", "sourceURL": "https://vuejs.org/guide/components/provide-inject", "url": "https://vuejs.org/guide/components/provide-inject", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Transition is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Transition in vue-guide.\n\n# Transition\n\nVue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.Here's a quick rundown of what this is about:\n\n## The `<Transition>` Component\n\n`<Transition>` is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:\n\n- Conditional rendering via `v-if`\n- Conditional display via `v-show`\n- Dynamic components toggling via the `<component>` special element\n- Changing the special `key` attribute\n\nThis is an example of the most basic usage:\n\ntemplate\n\n```\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nToggle Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=)\n\nTIP\n\n`<Transition>` only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nWhen an element in a `<Transition>` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of [CSS transition classes](https://vuejs.org/guide/built-ins/transition#transition-classes) will be added / removed at appropriate timings.\n\n2. If there are listeners for [JavaScript hooks](https://vuejs.org/guide/built-ins/transition#javascript-hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame.\n\n## CSS-Based Transitions\n\n### Transition Classes\n\nThere are six classes applied for enter / leave transitions.\n\n![Transition Diagram](https://vuejs.org/assets/transition-classes.DYG5-69l.png)\n\n1. `v-enter-from`: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.\n\n2. `v-enter-active`: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.\n\n3. `v-enter-to`: Ending state for enter. Added one frame after the element is inserted (at the same time `v-enter-from` is removed), removed when the transition/animation finishes.\n\n4. `v-leave-from`: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.\n\n5. `v-leave-active`: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.\n\n6. `v-leave-to`: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time `v-leave-from` is removed), removed when the transition/animation finishes.\n\n`v-enter-active` and `v-leave-active` give us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections.\n\n## Named Transitions\n\nA transition can be named via the `name` prop:\n\ntemplate\n\n```\n<Transition name=\"fade\">\n  ...\n</Transition>\n```\n\nFor a named transition, its transition classes will be prefixed with its name instead of `v`. For example, the applied class for the above transition will be `fade-enter-active` instead of `v-enter-active`. The CSS for the fade transition should look like this:\n\ncss\n\n```\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n```\n\n### CSS Transitions\n\n`<Transition>` is most commonly used in combination with [native CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions), as seen in the basic example above. The `transition` CSS property is a shorthand that allows us to specify multiple aspects of a transition, including properties that should be animated, duration of the transition, and [easing curves](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function).\n\nHere is a more advanced example that transitions multiple properties, with different durations and easing curves for enter and leave:\n\ntemplate\n\n```\n<Transition name=\"slide-fade\">\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/*\n  Enter and leave animations can use different\n  durations and timing functions.\n*/\n.slide-fade-enter-active {\n  transition: all 0.3s ease-out;\n}\n\n.slide-fade-leave-active {\n  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\n}\n\n.slide-fade-enter-from,\n.slide-fade-leave-to {\n  transform: translateX(20px);\n  opacity: 0;\n}\n```\n\nToggle Slide + Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkc9uwjAMxl/F6wXQKIVNk1AX0HbZC4zDDr2E4EK0NIkStxtDvPviFQ0OSFzyx/m+n+34kL16P+lazMpMRBW0J4hIrV9WVjfeBYIDBKzhCHVwDQySdFDZyipnY5Lu3BcsWDCk0OKosqLoKcmfLoSNN5KQbyTWLZGz8KKMVp+LKju573ivsuXKbbcG4d3oDcI9vMkNiqL3JD+AWAVpoyadGFY2yATW5nVSJj9rkspDl+v6hE/hHRrjRMEdpdfiDEkBUVxWaEWkveHj5AzO0RKGXCrSHcKBIfSPKEEaA9PJYwSUEXPX0nNlj8y6RBiUHd5AzCOodq1VvsYfjWE4G6fgEy/zMcxG17B9ZTyX8bV85C5y1S40ZX/kdj+GD1P/zVQA56XStC9h2idJI/z7huz4CxoVvE4=)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "overview", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the `<transition>` component in vue-guide?\n\nAssistant: To the `<transition>` component in vue-guide, here's what you do:\n`<Transition>` is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:\n\n- Conditional rendering via `v-if`\n- Conditional display via `v-show`\n- Dynamic components toggling via the `<component>` special element\n- Changing the special `key` attribute\n\nThis is an example of the most basic usage:\n\ntemplate\n\n```\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nToggle Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=)\n\nTIP\n\n`<Transition>` only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nWhen an element in a `<Transition>` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of [CSS transition classes](https://vuejs.org/guide/built-ins/transition#transition-classes) will be added / removed at appropriate timings.\n\n2. If there are listeners for [JavaScript hooks](https://vuejs.org/guide/built-ins/transition#javascript-hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I css-based transitions in vue-guide?\n\nAssistant: To css-based transitions in vue-guide, here's what you do:\n### Transition Classes\n\nThere are six classes applied for enter / leave transitions.\n\n![Transition Diagram](https://vuejs.org/assets/transition-classes.DYG5-69l.png)\n\n1. `v-enter-from`: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.\n\n2. `v-enter-active`: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.\n\n3. `v-enter-to`: Ending state for enter. Added one frame after the element is inserted (at the same time `v-enter-from` is removed), removed when the transition/animation finishes.\n\n4. `v-leave-from`: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.\n\n5. `v-leave-active`: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.\n\n6. `v-leave-to`: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time `v-leave-from` is removed), removed when the transition/animation finishes.\n\n`v-enter-active` and `v-leave-active` give us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I named transitions in vue-guide?\n\nAssistant: To named transitions in vue-guide, here's what you do:\nA transition can be named via the `name` prop:\n\ntemplate\n\n```\n<Transition name=\"fade\">\n  ...\n</Transition>\n```\n\nFor a named transition, its transition classes will be prefixed with its name instead of `v`. For example, the applied class for the above transition will be `fade-enter-active` instead of `v-enter-active`. The CSS for the fade transition should look like this:\n\ncss\n\n```\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n```\n\n### CSS Transitions\n\n`<Transition>` is most commonly used in combination with [native CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions), as seen in the basic example above. The `transition` CSS property is a shorthand that allows us to specify multiple aspects of a transition, including properties that should be animated, duration of the transition, and [easing curves](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function).\n\nHere is a more advanced example that transitions multiple properties, with different durations and easing curves for enter and leave:\n\ntemplate\n\n```\n<Transition name=\"slide-fade\">\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/*\n  Enter and leave animations can use different\n  durations and timing functions.\n*/\n.slide-fade-enter-active {\n  transition: all 0.3s ease-out;\n}\n\n.slide-fade-leave-active {\n  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\n}\n\n.slide-fade-enter-from,\n.slide-fade-leave-to {\n  transform: translateX(20px);\n  opacity: 0;\n}\n```\n\nToggle Slide + Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNqFkc9uwjAMxl/F6wXQKIVNk1AX0HbZC4zDDr2E4EK0NIkStxtDvPviFQ0OSFzyx/m+n+34kL16P+lazMpMRBW0J4hIrV9WVjfeBYIDBKzhCHVwDQySdFDZyipnY5Lu3BcsWDCk0OKosqLoKcmfLoSNN5KQbyTWLZGz8KKMVp+LKju573ivsuXKbbcG4d3oDcI9vMkNiqL3JD+AWAVpoyadGFY2yATW5nVSJj9rkspDl+v6hE/hHRrjRMEdpdfiDEkBUVxWaEWkveHj5AzO0RKGXCrSHcKBIfSPKEEaA9PJYwSUEXPX0nNlj8y6RBiUHd5AzCOodq1VvsYfjWE4G6fgEy/zMcxG17B9ZTyX8bV85C5y1S40ZX/kdj+GD1P/zVQA56XStC9h2idJI/z7huz4CxoVvE4=).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "section_detail", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Transition in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of `<Transition>`**:\n\n```yaml\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\nThis snippet shows you how to basic usage of `<transition>`, which is an important aspect of transition.\n\n**Basic CSS for Transition**:\n\n```yaml\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nThis snippet shows you how to basic css for transition, which is an important aspect of transition.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "code_examples", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Transition in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n<Transition> only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nWhen an element in a <Transition> component is inserted or removed, Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of CSS transition classes will be added / removed at appropriate timings.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:49", "type": "best_practices", "page_metadata": {"favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "twitter:card": "summary", "title": "Transition | Vue.js", "ogUrl": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:type": "website", "viewport": "width=device-width,initial-scale=1", "scrapeId": "27ca781c-db76-4dfb-a7e6-685a9950045d", "sourceURL": "https://vuejs.org/guide/built-ins/transition", "url": "https://vuejs.org/guide/built-ins/transition", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Template Syntax is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Template Syntax in vue-guide.\n\n# Template Syntax\n\nVue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.Here's a quick rundown of what this is about:\n\n## Text Interpolation\n\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n```html\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property from the corresponding component instance. It will also be updated whenever the `msg` property changes.\n\n## Raw HTML\n\nThe double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use the [`v-html` directive](https://vuejs.org/api/built-in-directives#v-html):\n\n```html\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nUsing text interpolation: <span style=\"color: red\">This should be red.</span>\n\nUsing v-html directive: This should be red.\n\nHere we're encountering something new. The `v-html` attribute you're seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with the `rawHtml` property on the current active instance.\"\n\nThe contents of the `span` will be replaced with the value of the `rawHtml` property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\n**Security Warning**\n\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS vulnerabilities](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.\n\n## Attribute Bindings\n\nMustaches cannot be used inside HTML attributes. Instead, use a [`v-bind` directive](https://vuejs.org/api/built-in-directives#v-bind):\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThe `v-bind` directive instructs Vue to keep the element's `id` attribute in sync with the component's `dynamicId` property. If the bound value is `null` or `undefined`, then the attribute will be removed from the rendered element.\n\n## Shorthand\n\nBecause `v-bind` is so commonly used, it has a dedicated shorthand syntax:\n\n```html\n<div :id=\"dynamicId\"></div>\n```\n\nAttributes that start with `:` may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later.\n\n> For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers.\n\n## Same-name Shorthand\n\n- Only supported in 3.4+\n\nIf the attribute has the same name with the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:\n\n```html\n<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>\n```\n\nThis is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above.\n\n## Boolean Attributes\n\n[Boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) are attributes that can indicate true / false values by their presence on an element. For example, [`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) is one of the most commonly used boolean attributes.\n\n`v-bind` works a bit differently in this case:\n\n```html\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThe `disabled` attribute will be included if `isButtonDisabled` has a [truthy value](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). It will also be included if the value is an empty string, maintaining consistency with `<button disabled=\"\">`. For other [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) the attribute will be omitted.\n\n## Dynamically Binding Multiple Attributes\n\nIf you have a JavaScript object representing multiple attributes that looks like this:\n\n```javascript\nconst objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}\n```\n\nYou can bind them to a single element by using `v-bind` without an argument:\n\n```html\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\n## Using JavaScript Expressions\n\nSo far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the current component instance.\n\nIn Vue templates, JavaScript expressions can be used in the following positions:\n\n- Inside text interpolations (mustaches)\n- In the attribute value of any Vue directives (special attributes that start with `v-`)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "overview", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I text interpolation in vue-guide?\n\nAssistant: To text interpolation in vue-guide, here's what you do:\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n```html\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property from the corresponding component instance. It will also be updated whenever the `msg` property changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I raw html in vue-guide?\n\nAssistant: To raw html in vue-guide, here's what you do:\nThe double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use the [`v-html` directive](https://vuejs.org/api/built-in-directives#v-html):\n\n```html\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nUsing text interpolation: <span style=\"color: red\">This should be red.</span>\n\nUsing v-html directive: This should be red.\n\nHere we're encountering something new. The `v-html` attribute you're seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with the `rawHtml` property on the current active instance.\"\n\nThe contents of the `span` will be replaced with the value of the `rawHtml` property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\n**Security Warning**\n\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS vulnerabilities](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I attribute bindings in vue-guide?\n\nAssistant: To attribute bindings in vue-guide, here's what you do:\nMustaches cannot be used inside HTML attributes. Instead, use a [`v-bind` directive](https://vuejs.org/api/built-in-directives#v-bind):\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThe `v-bind` directive instructs Vue to keep the element's `id` attribute in sync with the component's `dynamicId` property. If the bound value is `null` or `undefined`, then the attribute will be removed from the rendered element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I shorthand in vue-guide?\n\nAssistant: To shorthand in vue-guide, here's what you do:\nBecause `v-bind` is so commonly used, it has a dedicated shorthand syntax:\n\n```html\n<div :id=\"dynamicId\"></div>\n```\n\nAttributes that start with `:` may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later.\n\n> For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I same-name shorthand in vue-guide?\n\nAssistant: To same-name shorthand in vue-guide, here's what you do:\n- Only supported in 3.4+\n\nIf the attribute has the same name with the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:\n\n```html\n<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>\n```\n\nThis is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I boolean attributes in vue-guide?\n\nAssistant: To boolean attributes in vue-guide, here's what you do:\n[Boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) are attributes that can indicate true / false values by their presence on an element. For example, [`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) is one of the most commonly used boolean attributes.\n\n`v-bind` works a bit differently in this case:\n\n```html\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThe `disabled` attribute will be included if `isButtonDisabled` has a [truthy value](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). It will also be included if the value is an empty string, maintaining consistency with `<button disabled=\"\">`. For other [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) the attribute will be omitted..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I dynamically binding multiple attributes in vue-guide?\n\nAssistant: To dynamically binding multiple attributes in vue-guide, here's what you do:\nIf you have a JavaScript object representing multiple attributes that looks like this:\n\n```javascript\nconst objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}\n```\n\nYou can bind them to a single element by using `v-bind` without an argument:\n\n```html\n<div v-bind=\"objectOfAttrs\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using javascript expressions in vue-guide?\n\nAssistant: To using javascript expressions in vue-guide, here's what you do:\nSo far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the current component instance.\n\nIn Vue templates, JavaScript expressions can be used in the following positions:\n\n- Inside text interpolations (mustaches)\n- In the attribute value of any Vue directives (special attributes that start with `v-`).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "section_detail", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Template Syntax in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Text Interpolation Example**:\n\n```yaml\n<span>Message: {{ msg }}</span>\n```\n\nThis snippet shows you how to text interpolation example, which is an important aspect of template syntax.\n\n**Raw HTML Example**:\n\n```yaml\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nThis snippet shows you how to raw html example, which is an important aspect of template syntax.\n\n**Attribute Binding Example**:\n\n```yaml\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nThis snippet shows you how to attribute binding example, which is an important aspect of template syntax.\n\n**Shorthand Example**:\n\n```yaml\n<div :id=\"dynamicId\"></div>\n```\n\nThis snippet shows you how to shorthand example, which is an important aspect of template syntax.\n\n**Same-name Shorthand Example**:\n\n```yaml\n<div :id></div>\n<div v-bind:id></div>\n```\n\nThis snippet shows you how to same-name shorthand example, which is an important aspect of template syntax.\n\n**Boolean Attribute Example**:\n\n```yaml\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\nThis snippet shows you how to boolean attribute example, which is an important aspect of template syntax.\n\n**Dynamically Binding Multiple Attributes Example**:\n\n```yaml\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\nThis snippet shows you how to dynamically binding multiple attributes example, which is an important aspect of template syntax.\n\n**Using JavaScript Expressions Example**:\n\n```yaml\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n<div :id=\"`list-${id}`\"></div>\n```\n\nThis snippet shows you how to using javascript expressions example, which is an important aspect of template syntax.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "code_examples", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Template Syntax in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFunctions called inside binding expressions will be called every time the component updates, so they should not have any side effects, such as changing data or triggering asynchronous operations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-syntax", "title": "Template Syntax", "description": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:23:49", "type": "best_practices", "page_metadata": {"title": "Template Syntax | Vue.js", "ogTitle": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "language": "en-US", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "generator": "VitePress v1.6.3", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "scrapeId": "689d8bd5-5a62-4aaf-bc40-3cc0ed0ee40e", "sourceURL": "https://vuejs.org/guide/essentials/template-syntax", "url": "https://vuejs.org/guide/essentials/template-syntax", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Class and Style Bindings is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Class and Style Bindings in vue-guide.\n\n# Class and Style Bindings\n\nA common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.Here's a quick rundown of what this is about:\n\n## Binding HTML Classes\n\nWe can pass an object to `:class` (short for `v-bind:class`) to dynamically toggle classes:\n\n```html\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the truthiness of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `:class` directive can also co-exist with the plain `class` attribute. So given the following state:\n\n```javascript\nconst isActive = ref(true)\nconst hasError = ref(false)\n```\n\nAnd the following template:\n\n```html\n<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n```\n\nIt will render:\n\n```html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n```javascript\nconst classObject = reactive({\n  active: true,\n  'text-danger': false\n})\n```\n\n```javascript\ndata() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\nThis will render:\n\n```html\n<div class=\"active\"></div>\n```\n\nWe can also bind to a computed property that returns an object. This is a common and powerful pattern:\n\n```javascript\nconst isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))\n```\n\n```javascript\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\n## Binding to Arrays\n\nWe can bind `:class` to an array to apply a list of classes:\n\n```javascript\nconst activeClass = ref('active')\nconst errorClass = ref('text-danger')\n```\n\n```javascript\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n```\n\n```html\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nWhich will render:\n\n```html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n```html\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n```\n\nThis will always apply `errorClass`, but `activeClass` will only be applied when `isActive` is truthy.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:\n\n```html\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\n```\n\n## With Components\n\nWhen you use the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\n\nFor example, if we have a component named `MyComponent` with the following template:\n\n```html\n<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>\n```\n\nThen add some classes when using it:\n\n```html\n<!-- when using the component -->\n<MyComponent class=\"baz boo\" />\n```\n\nThe rendered HTML will be:\n\n```html\n<p class=\"foo bar baz boo\">Hi!</p>\n```\n\nThe same is true for class bindings:\n\n```html\n<MyComponent :class=\"{ active: isActive }\" />\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n```html\n<p class=\"foo bar active\">Hi!</p>\n```\n\nIf your component has multiple root elements, you would need to define which element will receive this class. You can do this using the `$attrs` component property:\n\n```html\n<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>\n```\n\n```html\n<MyComponent class=\"baz\" />\n```\n\nWill render:\n\n```html\n<p class=\"baz\">Hi!</p>\n<span>This is a child component</span>\n```\n\n## Binding Inline Styles\n\n`:style` supports binding to JavaScript object values - it corresponds to an HTML element's `style` property:\n\n```javascript\nconst activeColor = ref('red')\nconst fontSize = ref(30)\n```\n\n```javascript\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n```\n\n```html\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nAlthough camelCase keys are recommended, `:style` also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:\n\n```html\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n```javascript\nconst styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})\n```\n\n```javascript\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n```\n\n```html\n<div :style=\"styleObject\"></div>\n```\n\nAgain, object style binding is often used in conjunction with computed properties that return objects.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\n```html\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\n```\n\nIt will render:\n\n```html\n<h1 style=\"color: red; font-size: 1em;\">hello</h1>\n```\n\n## Binding to Arrays\n\nWe can bind `:style` to an array of multiple style objects. These objects will be merged and applied to the same element:\n\n```html\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\n## Auto-prefixing\n\nWhen you use a CSS property that requires a vendor prefix in `:style`, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported.\n\n## Multiple Values\n\nYou can provide an array of multiple (prefixed) values to a style property, for example:\n\n```html\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis will only render the last value in the array which the browser supports. In this example, it will render `display: flex` for browsers that support the unprefixed version of flexbox.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding html classes in vue-guide?\n\nAssistant: To binding html classes in vue-guide, here's what you do:\nWe can pass an object to `:class` (short for `v-bind:class`) to dynamically toggle classes:\n\n```html\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the truthiness of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `:class` directive can also co-exist with the plain `class` attribute. So given the following state:\n\n```javascript\nconst isActive = ref(true)\nconst hasError = ref(false)\n```\n\nAnd the following template:\n\n```html\n<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n```\n\nIt will render:\n\n```html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n```javascript\nconst classObject = reactive({\n  active: true,\n  'text-danger': false\n})\n```\n\n```javascript\ndata() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\nThis will render:\n\n```html\n<div class=\"active\"></div>\n```\n\nWe can also bind to a computed property that returns an object. This is a common and powerful pattern:\n\n```javascript\nconst isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))\n```\n\n```javascript\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding to arrays in vue-guide?\n\nAssistant: To binding to arrays in vue-guide, here's what you do:\nWe can bind `:class` to an array to apply a list of classes:\n\n```javascript\nconst activeClass = ref('active')\nconst errorClass = ref('text-danger')\n```\n\n```javascript\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n```\n\n```html\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nWhich will render:\n\n```html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n```html\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n```\n\nThis will always apply `errorClass`, but `activeClass` will only be applied when `isActive` is truthy.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:\n\n```html\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I with components in vue-guide?\n\nAssistant: To with components in vue-guide, here's what you do:\nWhen you use the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\n\nFor example, if we have a component named `MyComponent` with the following template:\n\n```html\n<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>\n```\n\nThen add some classes when using it:\n\n```html\n<!-- when using the component -->\n<MyComponent class=\"baz boo\" />\n```\n\nThe rendered HTML will be:\n\n```html\n<p class=\"foo bar baz boo\">Hi!</p>\n```\n\nThe same is true for class bindings:\n\n```html\n<MyComponent :class=\"{ active: isActive }\" />\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n```html\n<p class=\"foo bar active\">Hi!</p>\n```\n\nIf your component has multiple root elements, you would need to define which element will receive this class. You can do this using the `$attrs` component property:\n\n```html\n<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>\n```\n\n```html\n<MyComponent class=\"baz\" />\n```\n\nWill render:\n\n```html\n<p class=\"baz\">Hi!</p>\n<span>This is a child component</span>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding inline styles in vue-guide?\n\nAssistant: To binding inline styles in vue-guide, here's what you do:\n`:style` supports binding to JavaScript object values - it corresponds to an HTML element's `style` property:\n\n```javascript\nconst activeColor = ref('red')\nconst fontSize = ref(30)\n```\n\n```javascript\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n```\n\n```html\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nAlthough camelCase keys are recommended, `:style` also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:\n\n```html\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n```javascript\nconst styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})\n```\n\n```javascript\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n```\n\n```html\n<div :style=\"styleObject\"></div>\n```\n\nAgain, object style binding is often used in conjunction with computed properties that return objects.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\n```html\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\n```\n\nIt will render:\n\n```html\n<h1 style=\"color: red; font-size: 1em;\">hello</h1>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding to arrays in vue-guide?\n\nAssistant: To binding to arrays in vue-guide, here's what you do:\nWe can bind `:style` to an array of multiple style objects. These objects will be merged and applied to the same element:\n\n```html\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I auto-prefixing in vue-guide?\n\nAssistant: To auto-prefixing in vue-guide, here's what you do:\nWhen you use a CSS property that requires a vendor prefix in `:style`, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I multiple values in vue-guide?\n\nAssistant: To multiple values in vue-guide, here's what you do:\nYou can provide an array of multiple (prefixed) values to a style property, for example:\n\n```html\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis will only render the last value in the array which the browser supports. In this example, it will render `display: flex` for browsers that support the unprefixed version of flexbox..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "section_detail", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Class and Style Bindings in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Binding to Objects**:\n\n```yaml\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThis snippet shows you how to binding to objects, which is an important aspect of class and style bindings.\n\n**Binding to Arrays**:\n\n```yaml\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nThis snippet shows you how to binding to arrays, which is an important aspect of class and style bindings.\n\n**With Components**:\n\n```yaml\n<MyComponent class=\"baz boo\" />\n```\n\nThis snippet shows you how to with components, which is an important aspect of class and style bindings.\n\n**Binding Inline Styles**:\n\n```yaml\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nThis snippet shows you how to binding inline styles, which is an important aspect of class and style bindings.\n\n**Multiple Values**:\n\n```yaml\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis snippet shows you how to multiple values, which is an important aspect of class and style bindings.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Class and Style Bindings in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\nWhen using `class` on a component with a single root element, those classes will be added to the component's root element and merged with any existing class.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:25:36", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://vuejs.org/", "og:type": "website", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "title": "Class and Style Bindings | Vue.js", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "og:title": "Vue.js", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "17486d2e-43cf-4c14-adbd-151fb3e84e1d", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style", "url": "https://vuejs.org/guide/essentials/class-and-style", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Transition is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Transition in vue-guide.\n\n# Transition\n\nVue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.Here's a quick rundown of what this is about:\n\n## The `<Transition>` Component\n\n`<Transition>` is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:\n\n- Conditional rendering via `v-if`\n- Conditional display via `v-show`\n- Dynamic components toggling via the `<component>` special element\n- Changing the special `key` attribute\n\nThis is an example of the most basic usage:\n\ntemplate\n\n```\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nToggle Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=)\n\nTIP\n\n`<Transition>` only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nWhen an element in a `<Transition>` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of [CSS transition classes](https://vuejs.org/guide/built-ins/transition.html#transition-classes) will be added / removed at appropriate timings.\n\n2. If there are listeners for [JavaScript hooks](https://vuejs.org/guide/built-ins/transition.html#javascript-hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame.\n\n## CSS-Based Transitions\n\n### Transition Classes\n\nThere are six classes applied for enter / leave transitions.\n\n![Transition Diagram](https://vuejs.org/assets/transition-classes.DYG5-69l.png)\n\n1. `v-enter-from`: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.\n\n2. `v-enter-active`: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.\n\n3. `v-enter-to`: Ending state for enter. Added one frame after the element is inserted (at the same time `v-enter-from` is removed), removed when the transition/animation finishes.\n\n4. `v-leave-from`: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.\n\n5. `v-leave-active`: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.\n\n6. `v-leave-to`: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time `v-leave-from` is removed), removed when the transition/animation finishes.\n\n`v-enter-active` and `v-leave-active` give us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections.\n\n## Named Transitions\n\nA transition can be named via the `name` prop:\n\ntemplate\n\n```\n<Transition name=\"fade\">\n  ...\n</Transition>\n```\n\nFor a named transition, its transition classes will be prefixed with its name instead of `v`. For example, the applied class for the above transition will be `fade-enter-active` instead of `v-enter-active`. The CSS for the fade transition should look like this:\n\ncss\n\n```\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I the `<transition>` component in vue-guide?\n\nAssistant: To the `<transition>` component in vue-guide, here's what you do:\n`<Transition>` is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:\n\n- Conditional rendering via `v-if`\n- Conditional display via `v-show`\n- Dynamic components toggling via the `<component>` special element\n- Changing the special `key` attribute\n\nThis is an example of the most basic usage:\n\ntemplate\n\n```\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\ncss\n\n```\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nToggle Fade\n\nhello\n\n[Try it in the Playground](https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=)\n\nTIP\n\n`<Transition>` only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nWhen an element in a `<Transition>` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of [CSS transition classes](https://vuejs.org/guide/built-ins/transition.html#transition-classes) will be added / removed at appropriate timings.\n\n2. If there are listeners for [JavaScript hooks](https://vuejs.org/guide/built-ins/transition.html#javascript-hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I css-based transitions in vue-guide?\n\nAssistant: To css-based transitions in vue-guide, here's what you do:\n### Transition Classes\n\nThere are six classes applied for enter / leave transitions.\n\n![Transition Diagram](https://vuejs.org/assets/transition-classes.DYG5-69l.png)\n\n1. `v-enter-from`: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.\n\n2. `v-enter-active`: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.\n\n3. `v-enter-to`: Ending state for enter. Added one frame after the element is inserted (at the same time `v-enter-from` is removed), removed when the transition/animation finishes.\n\n4. `v-leave-from`: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.\n\n5. `v-leave-active`: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.\n\n6. `v-leave-to`: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time `v-leave-from` is removed), removed when the transition/animation finishes.\n\n`v-enter-active` and `v-leave-active` give us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I named transitions in vue-guide?\n\nAssistant: To named transitions in vue-guide, here's what you do:\nA transition can be named via the `name` prop:\n\ntemplate\n\n```\n<Transition name=\"fade\">\n  ...\n</Transition>\n```\n\nFor a named transition, its transition classes will be prefixed with its name instead of `v`. For example, the applied class for the above transition will be `fade-enter-active` instead of `v-enter-active`. The CSS for the fade transition should look like this:\n\ncss\n\n```\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Transition in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of `<Transition>`**:\n\n```yaml\n<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>\n```\n\nThis snippet shows you how to basic usage of `<transition>`, which is an important aspect of transition.\n\n**CSS for Basic Transition**:\n\n```yaml\n/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n```\n\nThis snippet shows you how to css for basic transition, which is an important aspect of transition.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Transition in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n<Transition> only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/built-ins/transition.html", "title": "Transition", "description": "Vue offers two built-in components that can help work with transitions and animations in response to changing state: <Transition> for applying animations when an element or component is entering and leaving the DOM. This is covered on this page. <TransitionGroup> for applying animations when an element or component is inserted into, removed from, or moved within a v-for list. This is covered in the next chapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:26:17", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "theme-color": "#3c8772", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "og:image": "https://vuejs.org/images/logo.png", "title": "Transition | Vue.js", "language": "en-US", "scrapeId": "5c76cd7c-f78b-46c6-a00d-e2900584ef24", "sourceURL": "https://vuejs.org/guide/built-ins/transition.html", "url": "https://vuejs.org/guide/built-ins/transition.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Class and Style Bindings is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Class and Style Bindings in vue-guide.\n\n# Class and Style Bindings\n\nA common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.Here's a quick rundown of what this is about:\n\n## Binding HTML Classes\n\nWe can pass an object to `:class` (short for `v-bind:class`) to dynamically toggle classes:\n\n```html\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the truthiness of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `:class` directive can also co-exist with the plain `class` attribute. So given the following state:\n\n```javascript\nconst isActive = ref(true)\nconst hasError = ref(false)\n```\n\nAnd the following template:\n\n```html\n<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n```\n\nIt will render:\n\n```html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n```javascript\nconst classObject = reactive({\n  active: true,\n  'text-danger': false\n})\n```\n\n```javascript\ndata() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\nThis will render:\n\n```html\n<div class=\"active\"></div>\n```\n\nWe can also bind to a computed property that returns an object. This is a common and powerful pattern:\n\n```javascript\nconst isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))\n```\n\n```javascript\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\n## Binding to Arrays\n\nWe can bind `:class` to an array to apply a list of classes:\n\n```javascript\nconst activeClass = ref('active')\nconst errorClass = ref('text-danger')\n```\n\n```javascript\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n```\n\n```html\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nWhich will render:\n\n```html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n```html\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n```\n\nThis will always apply `errorClass`, but `activeClass` will only be applied when `isActive` is truthy.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:\n\n```html\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\n```\n\n## With Components\n\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nWhen you use the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\n\nFor example, if we have a component named `MyComponent` with the following template:\n\n```html\n<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>\n```\n\nThen add some classes when using it:\n\n```html\n<!-- when using the component -->\n<MyComponent class=\"baz boo\" />\n```\n\nThe rendered HTML will be:\n\n```html\n<p class=\"foo bar baz boo\">Hi!</p>\n```\n\nThe same is true for class bindings:\n\n```html\n<MyComponent :class=\"{ active: isActive }\" />\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n```html\n<p class=\"foo bar active\">Hi!</p>\n```\n\nIf your component has multiple root elements, you would need to define which element will receive this class. You can do this using the `$attrs` component property:\n\n```html\n<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>\n```\n\n```html\n<MyComponent class=\"baz\" />\n```\n\nWill render:\n\n```html\n<p class=\"baz\">Hi!</p>\n<span>This is a child component</span>\n```\n\n## Binding Inline Styles\n\n### Binding to Objects\n\n`:style` supports binding to JavaScript object values - it corresponds to an [HTML element's `style` property](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style):\n\n```javascript\nconst activeColor = ref('red')\nconst fontSize = ref(30)\n```\n\n```javascript\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n```\n\n```html\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nAlthough camelCase keys are recommended, `:style` also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:\n\n```html\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n```javascript\nconst styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})\n```\n\n```javascript\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n```\n\n```html\n<div :style=\"styleObject\"></div>\n```\n\nAgain, object style binding is often used in conjunction with computed properties that return objects.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\nTemplate:\n\n```html\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\n```\n\nIt will render:\n\n```html\n<h1 style=\"color: red; font-size: 1em;\">hello</h1>\n```\n\n### Binding to Arrays\n\nWe can bind `:style` to an array of multiple style objects. These objects will be merged and applied to the same element:\n\n```html\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\n### Auto-prefixing\n\nWhen you use a CSS property that requires a [vendor prefix](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) in `:style`, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported.\n\n### Multiple Values\n\nYou can provide an array of multiple (prefixed) values to a style property, for example:\n\n```html\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis will only render the last value in the array which the browser supports. In this example, it will render `display: flex` for browsers that support the unprefixed version of flexbox.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "overview", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding html classes in vue-guide?\n\nAssistant: To binding html classes in vue-guide, here's what you do:\nWe can pass an object to `:class` (short for `v-bind:class`) to dynamically toggle classes:\n\n```html\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the truthiness of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `:class` directive can also co-exist with the plain `class` attribute. So given the following state:\n\n```javascript\nconst isActive = ref(true)\nconst hasError = ref(false)\n```\n\nAnd the following template:\n\n```html\n<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n```\n\nIt will render:\n\n```html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n```javascript\nconst classObject = reactive({\n  active: true,\n  'text-danger': false\n})\n```\n\n```javascript\ndata() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```\n\nThis will render:\n\n```html\n<div class=\"active\"></div>\n```\n\nWe can also bind to a computed property that returns an object. This is a common and powerful pattern:\n\n```javascript\nconst isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))\n```\n\n```javascript\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n}\n```\n\n```html\n<div :class=\"classObject\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding to arrays in vue-guide?\n\nAssistant: To binding to arrays in vue-guide, here's what you do:\nWe can bind `:class` to an array to apply a list of classes:\n\n```javascript\nconst activeClass = ref('active')\nconst errorClass = ref('text-danger')\n```\n\n```javascript\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n```\n\n```html\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nWhich will render:\n\n```html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n```html\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n```\n\nThis will always apply `errorClass`, but `activeClass` will only be applied when `isActive` is truthy.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:\n\n```html\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I with components in vue-guide?\n\nAssistant: To with components in vue-guide, here's what you do:\n> This section assumes knowledge of [Components](https://vuejs.org/guide/essentials/component-basics). Feel free to skip it and come back later.\n\nWhen you use the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\n\nFor example, if we have a component named `MyComponent` with the following template:\n\n```html\n<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>\n```\n\nThen add some classes when using it:\n\n```html\n<!-- when using the component -->\n<MyComponent class=\"baz boo\" />\n```\n\nThe rendered HTML will be:\n\n```html\n<p class=\"foo bar baz boo\">Hi!</p>\n```\n\nThe same is true for class bindings:\n\n```html\n<MyComponent :class=\"{ active: isActive }\" />\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n```html\n<p class=\"foo bar active\">Hi!</p>\n```\n\nIf your component has multiple root elements, you would need to define which element will receive this class. You can do this using the `$attrs` component property:\n\n```html\n<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>\n```\n\n```html\n<MyComponent class=\"baz\" />\n```\n\nWill render:\n\n```html\n<p class=\"baz\">Hi!</p>\n<span>This is a child component</span>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I binding inline styles in vue-guide?\n\nAssistant: To binding inline styles in vue-guide, here's what you do:\n### Binding to Objects\n\n`:style` supports binding to JavaScript object values - it corresponds to an [HTML element's `style` property](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style):\n\n```javascript\nconst activeColor = ref('red')\nconst fontSize = ref(30)\n```\n\n```javascript\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n```\n\n```html\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nAlthough camelCase keys are recommended, `:style` also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:\n\n```html\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n```javascript\nconst styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})\n```\n\n```javascript\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n```\n\n```html\n<div :style=\"styleObject\"></div>\n```\n\nAgain, object style binding is often used in conjunction with computed properties that return objects.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\nTemplate:\n\n```html\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\n```\n\nIt will render:\n\n```html\n<h1 style=\"color: red; font-size: 1em;\">hello</h1>\n```\n\n### Binding to Arrays\n\nWe can bind `:style` to an array of multiple style objects. These objects will be merged and applied to the same element:\n\n```html\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\n### Auto-prefixing\n\nWhen you use a CSS property that requires a [vendor prefix](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) in `:style`, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported.\n\n### Multiple Values\n\nYou can provide an array of multiple (prefixed) values to a style property, for example:\n\n```html\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis will only render the last value in the array which the browser supports. In this example, it will render `display: flex` for browsers that support the unprefixed version of flexbox..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Class and Style Bindings in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Binding to Objects**:\n\n```yaml\n<div :class=\"{ active: isActive }\"></div>\n```\n\nThis snippet shows you how to binding to objects, which is an important aspect of class and style bindings.\n\n**Binding to Arrays**:\n\n```yaml\n<div :class=\"[activeClass, errorClass]\"></div>\n```\n\nThis snippet shows you how to binding to arrays, which is an important aspect of class and style bindings.\n\n**With Components**:\n\n```yaml\n<MyComponent class=\"baz boo\" />\n```\n\nThis snippet shows you how to with components, which is an important aspect of class and style bindings.\n\n**Binding Inline Styles to Objects**:\n\n```yaml\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n\nThis snippet shows you how to binding inline styles to objects, which is an important aspect of class and style bindings.\n\n**Binding Inline Styles to Arrays**:\n\n```yaml\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\nThis snippet shows you how to binding inline styles to arrays, which is an important aspect of class and style bindings.\n\n**Multiple Values**:\n\n```yaml\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n```\n\nThis snippet shows you how to multiple values, which is an important aspect of class and style bindings.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Class and Style Bindings in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner.\n\n`:style` directives can also coexist with regular style attributes, just like `:class`.\n\nWhen using the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/class-and-style.html", "title": "Class and Style Bindings", "description": "A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:53", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "ogTitle": "Vue.js", "title": "Class and Style Bindings | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "language": "en-US", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "twitter:card": "summary", "scrapeId": "78f5819c-5fc8-40e4-9caf-1c3702abf1eb", "sourceURL": "https://vuejs.org/guide/essentials/class-and-style.html", "url": "https://vuejs.org/guide/essentials/class-and-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Components Basics is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Components Basics in vue-guide.\n\n# Components Basics\n\nComponents allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.Here's a quick rundown of what this is about:\n\n## Defining a Component\n\nWhen using a build step, we typically define each Vue component in a dedicated file using the `.vue` extension - known as a [Single-File Component](https://vuejs.org/guide/scaling-up/sfc) (SFC for short):\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\nWhen not using a build step, a Vue component can be defined as a plain JavaScript object containing Vue-specific options:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}\n```\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}\n```\n\nThe template is inlined as a JavaScript string here, which Vue will compile on the fly. You can also use an ID selector pointing to an element (usually native `<template>` elements) - Vue will use its content as the template source.\n\nThe example above defines a single component and exports it as the default export of a `.js` file, but you can use named exports to export multiple components from the same file.\n\n## Using a Component\n\nTIP\n\nWe will be using SFC syntax for the rest of this guide - the concepts around components are the same regardless of whether you are using a build step or not. The [Examples](https://vuejs.org/examples/) section shows component usage in both scenarios.\n\nTo use a child component, we need to import it in the parent component. Assuming we placed our counter component inside a file called `ButtonCounter.vue`, the component will be exposed as the file's default export:\n\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nTo expose the imported component to our template, we need to [register](https://vuejs.org/guide/components/registration) it with the `components` option. The component will then be available as a tag using the key it is registered under.\n\n```vue\n<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nWith `<script setup>`, imported components are automatically made available to the template.\n\nIt's also possible to globally register a component, making it available to all components in a given app without having to import it. The pros and cons of global vs. local registration is discussed in the dedicated [Component Registration](https://vuejs.org/guide/components/registration) section.\n\nComponents can be reused as many times as you want:\n\n```template\n<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />\n```\n\nNotice that when clicking on the buttons, each one maintains its own, separate `count`. That's because each time you use a component, a new **instance** of it is created.\n\nIn SFCs, it's recommended to use `PascalCase` tag names for child components to differentiate from native HTML elements. Although native HTML tag names are case-insensitive, Vue SFC is a compiled format so we are able to use case-sensitive tag names in it. We are also able to use `/>` to close a tag.\n\nIf you are authoring your templates directly in a DOM (e.g. as the content of a native `<template>` element), the template will be subject to the browser's native HTML parsing behavior. In such cases, you will need to use `kebab-case` and explicit closing tags for components:\n\n```template\n<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>\n```\n\n## Passing Props\n\nIf we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.\n\nProps are custom attributes you can register on a component. To pass a title to our blog post component, we must declare it in the list of props this component accepts, using the [`props`](https://vuejs.org/api/options-state#props) option[`defineProps`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\nWhen a value is passed to a prop attribute, it becomes a property on that component instance. The value of that property is accessible within the template and on the component's `this` context, just like any other component property.\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n`defineProps` is a compile-time macro that is only available inside `<script setup>` and does not need to be explicitly imported. Declared props are automatically exposed to the template. `defineProps` also returns an object that contains all the props passed to the component, so that we can access them in JavaScript if needed:\n\n```js\nconst props = defineProps(['title'])\nconsole.log(props.title)\n```\n\nSee also: [Typing Component Props](https://vuejs.org/guide/typescript/composition-api#typing-component-props)\n\nIf you are not using `<script setup>`, props should be declared using the `props` option, and the props object will be passed to `setup()` as the first argument:\n\n```js\nexport default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nA component can have as many props as you like and, by default, any value can be passed to any prop.\n\nOnce a prop is registered, you can pass data to it as a custom attribute, like this:\n\n```template\n<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />\n```\n\nIn a typical app, however, you'll likely have an array of posts in your parent component:\n\n```js\nexport default {\n  // ...\n  data() {\n    return {\n      posts: [\\\n        { id: 1, title: 'My journey with Vue' },\\\n        { id: 2, title: 'Blogging with Vue' },\\\n        { id: 3, title: 'Why Vue is so fun' }\\\n      ]\n    }\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  { id: 1, title: 'My journey with Vue' },\\\n  { id: 2, title: 'Blogging with Vue' },\\\n  { id: 3, title: 'Why Vue is so fun' }\\\n])\n```\n\nThen want to render a component for each one, using `v-for`:\n\n```template\n<BlogPost\n  v-for=\"post in posts\"\n  :key=\"post.id\"\n  :title=\"post.title\"\n />\n```\n\n## Listening to Events\n\nAs we develop our `<BlogPost>` component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page at its default size.\n\nIn the parent, we can support this feature by adding a `postFontSize` data propertyref:\n\n```js\ndata() {\n  return {\n    posts: [\\\n      /* ... */\\\n    ],\n    postFontSize: 1\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  /* ... */\\\n])\n\nconst postFontSize = ref(1)\n```\n\nWhich can be used in the template to control the font size of all blog posts:\n\n```template\n<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>\n```\n\nNow let's add a button to the `<BlogPost>` component's template:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n\nThe button doesn't do anything yet - we want clicking the button to communicate to the parent that it should enlarge the text of all posts. To solve this problem, components provide a custom events system. The parent can choose to listen to any event on the child component instance with `v-on` or `@`, just as we would with a native DOM event:\n\n```template\n<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />\n```\n\nThen the child component can emit an event on itself by calling the built-in [**`$emit`** method](https://vuejs.org/api/component-instance#emit), passing the name of the event:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>\n```\n\nThanks to the `@enlarge-text=\"postFontSize += 0.1\"` listener, the parent will receive the event and update the value of `postFontSize.\n\nWe can optionally declare emitted events using the [`emits`](https://vuejs.org/api/options-state#emits) option[`defineEmits`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['enlarge-text']\n}\n</script>\n```\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\ndefineEmits(['enlarge-text'])\n</script>\n```\n\nThis documents all the events that a component emits and optionally [validates them](https://vuejs.org/guide/components/events#events-validation). It also allows Vue to avoid implicitly applying them as native listeners to the child component's root element.\n\nSimilar to `defineProps`, `defineEmits` is only usable in `<script setup>` and doesn't need to be imported. It returns an `emit` function that is equivalent to the `$emit` method. It can be used to emit events in the `<script setup>` section of a component, where `$emit` isn't directly accessible:\n\n```vue\n<script setup>\nconst emit = defineEmits(['enlarge-text'])\n\nemit('enlarge-text')\n</script>\n```\n\nSee also: [Typing Component Emits](https://vuejs.org/guide/typescript/composition-api#typing-component-emits)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "overview", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I defining a component in vue-guide?\n\nAssistant: To defining a component in vue-guide, here's what you do:\nWhen using a build step, we typically define each Vue component in a dedicated file using the `.vue` extension - known as a [Single-File Component](https://vuejs.org/guide/scaling-up/sfc) (SFC for short):\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\nWhen not using a build step, a Vue component can be defined as a plain JavaScript object containing Vue-specific options:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}\n```\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}\n```\n\nThe template is inlined as a JavaScript string here, which Vue will compile on the fly. You can also use an ID selector pointing to an element (usually native `<template>` elements) - Vue will use its content as the template source.\n\nThe example above defines a single component and exports it as the default export of a `.js` file, but you can use named exports to export multiple components from the same file..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using a component in vue-guide?\n\nAssistant: To using a component in vue-guide, here's what you do:\nTIP\n\nWe will be using SFC syntax for the rest of this guide - the concepts around components are the same regardless of whether you are using a build step or not. The [Examples](https://vuejs.org/examples/) section shows component usage in both scenarios.\n\nTo use a child component, we need to import it in the parent component. Assuming we placed our counter component inside a file called `ButtonCounter.vue`, the component will be exposed as the file's default export:\n\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nTo expose the imported component to our template, we need to [register](https://vuejs.org/guide/components/registration) it with the `components` option. The component will then be available as a tag using the key it is registered under.\n\n```vue\n<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nWith `<script setup>`, imported components are automatically made available to the template.\n\nIt's also possible to globally register a component, making it available to all components in a given app without having to import it. The pros and cons of global vs. local registration is discussed in the dedicated [Component Registration](https://vuejs.org/guide/components/registration) section.\n\nComponents can be reused as many times as you want:\n\n```template\n<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />\n```\n\nNotice that when clicking on the buttons, each one maintains its own, separate `count`. That's because each time you use a component, a new **instance** of it is created.\n\nIn SFCs, it's recommended to use `PascalCase` tag names for child components to differentiate from native HTML elements. Although native HTML tag names are case-insensitive, Vue SFC is a compiled format so we are able to use case-sensitive tag names in it. We are also able to use `/>` to close a tag.\n\nIf you are authoring your templates directly in a DOM (e.g. as the content of a native `<template>` element), the template will be subject to the browser's native HTML parsing behavior. In such cases, you will need to use `kebab-case` and explicit closing tags for components:\n\n```template\n<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing props in vue-guide?\n\nAssistant: To passing props in vue-guide, here's what you do:\nIf we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.\n\nProps are custom attributes you can register on a component. To pass a title to our blog post component, we must declare it in the list of props this component accepts, using the [`props`](https://vuejs.org/api/options-state#props) option[`defineProps`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\nWhen a value is passed to a prop attribute, it becomes a property on that component instance. The value of that property is accessible within the template and on the component's `this` context, just like any other component property.\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n`defineProps` is a compile-time macro that is only available inside `<script setup>` and does not need to be explicitly imported. Declared props are automatically exposed to the template. `defineProps` also returns an object that contains all the props passed to the component, so that we can access them in JavaScript if needed:\n\n```js\nconst props = defineProps(['title'])\nconsole.log(props.title)\n```\n\nSee also: [Typing Component Props](https://vuejs.org/guide/typescript/composition-api#typing-component-props)\n\nIf you are not using `<script setup>`, props should be declared using the `props` option, and the props object will be passed to `setup()` as the first argument:\n\n```js\nexport default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nA component can have as many props as you like and, by default, any value can be passed to any prop.\n\nOnce a prop is registered, you can pass data to it as a custom attribute, like this:\n\n```template\n<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />\n```\n\nIn a typical app, however, you'll likely have an array of posts in your parent component:\n\n```js\nexport default {\n  // ...\n  data() {\n    return {\n      posts: [\\\n        { id: 1, title: 'My journey with Vue' },\\\n        { id: 2, title: 'Blogging with Vue' },\\\n        { id: 3, title: 'Why Vue is so fun' }\\\n      ]\n    }\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  { id: 1, title: 'My journey with Vue' },\\\n  { id: 2, title: 'Blogging with Vue' },\\\n  { id: 3, title: 'Why Vue is so fun' }\\\n])\n```\n\nThen want to render a component for each one, using `v-for`:\n\n```template\n<BlogPost\n  v-for=\"post in posts\"\n  :key=\"post.id\"\n  :title=\"post.title\"\n />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I listening to events in vue-guide?\n\nAssistant: To listening to events in vue-guide, here's what you do:\nAs we develop our `<BlogPost>` component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page at its default size.\n\nIn the parent, we can support this feature by adding a `postFontSize` data propertyref:\n\n```js\ndata() {\n  return {\n    posts: [\\\n      /* ... */\\\n    ],\n    postFontSize: 1\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  /* ... */\\\n])\n\nconst postFontSize = ref(1)\n```\n\nWhich can be used in the template to control the font size of all blog posts:\n\n```template\n<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>\n```\n\nNow let's add a button to the `<BlogPost>` component's template:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n\nThe button doesn't do anything yet - we want clicking the button to communicate to the parent that it should enlarge the text of all posts. To solve this problem, components provide a custom events system. The parent can choose to listen to any event on the child component instance with `v-on` or `@`, just as we would with a native DOM event:\n\n```template\n<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />\n```\n\nThen the child component can emit an event on itself by calling the built-in [**`$emit`** method](https://vuejs.org/api/component-instance#emit), passing the name of the event:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>\n```\n\nThanks to the `@enlarge-text=\"postFontSize += 0.1\"` listener, the parent will receive the event and update the value of `postFontSize.\n\nWe can optionally declare emitted events using the [`emits`](https://vuejs.org/api/options-state#emits) option[`defineEmits`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['enlarge-text']\n}\n</script>\n```\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\ndefineEmits(['enlarge-text'])\n</script>\n```\n\nThis documents all the events that a component emits and optionally [validates them](https://vuejs.org/guide/components/events#events-validation). It also allows Vue to avoid implicitly applying them as native listeners to the child component's root element.\n\nSimilar to `defineProps`, `defineEmits` is only usable in `<script setup>` and doesn't need to be imported. It returns an `emit` function that is equivalent to the `$emit` method. It can be used to emit events in the `<script setup>` section of a component, where `$emit` isn't directly accessible:\n\n```vue\n<script setup>\nconst emit = defineEmits(['enlarge-text'])\n\nemit('enlarge-text')\n</script>\n```\n\nSee also: [Typing Component Emits](https://vuejs.org/guide/typescript/composition-api#typing-component-emits).\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "section_detail", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Components Basics in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Defining a Component**:\n\n```yaml\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n```\n\nThis snippet shows you how to defining a component, which is an important aspect of components basics.\n\n**Using a Component**:\n\n```yaml\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n```\n\nThis snippet shows you how to using a component, which is an important aspect of components basics.\n\n**Passing Props**:\n\n```yaml\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n```\n\nThis snippet shows you how to passing props, which is an important aspect of components basics.\n\n**Listening to Events**:\n\n```yaml\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['enlarge-text']\n}\n</script>\n```\n```\n\nThis snippet shows you how to listening to events, which is an important aspect of components basics.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "code_examples", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Components Basics in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse PascalCase tag names for child components in SFCs to differentiate from native HTML elements.\n\nWhen using in-DOM templates, use kebab-case and explicit closing tags for components.\n\nConsider using `defineProps` and `defineEmits` in `<script setup>` for better prop and event management.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics.html", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:38:45", "type": "best_practices", "page_metadata": {"generator": "VitePress v1.6.3", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "og:type": "website", "ogUrl": "https://vuejs.org/", "theme-color": "#3c8772", "title": "Components Basics | Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogTitle": "Vue.js", "twitter:site": "@vuejs", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "scrapeId": "84abc804-629a-45c0-bf60-f5dc103dcf1b", "sourceURL": "https://vuejs.org/guide/essentials/component-basics.html", "url": "https://vuejs.org/guide/essentials/component-basics.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Computed Properties is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Computed Properties in vue-guide.\n\n# Computed Properties\n\nThis page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.Here's a quick rundown of what this is about:\n\n## Basic Example\n\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\n```js\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\nAnd we want to display different messages depending on if `author` already has some books or not:\n\n```template\n<p>Has published books:</p>\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\n```\n\nAt this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending on `author.books`. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once.\n\nThat's why for complex logic that includes reactive data, it is recommended to use a **computed property**. Here's the same example, refactored:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\n```template\n<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>\n```\n\nHere we have declared a computed property `publishedBooksMessage`. Try to change the value of the `books` array in the application `data` and you will see how `publishedBooksMessage` is changing accordingly. You can data-bind to computed properties in templates just like a normal property. Vue is aware that `this.publishedBooksMessage` depends on `this.author.books`, so it will update any bindings that depend on `this.publishedBooksMessage` when `this.author.books` changes.\n\n## Computed Caching vs. Methods\n\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n```template\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n```js\n// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their reactive dependencies.** A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as `author.books` has not changed, multiple access to `publishedBooksMessage` will immediately return the previously computed result without having to run the getter function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n```js\ncomputed: {\n  now() {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens. Why do we need caching? Imagine we have an expensive computed property `list`, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend on `list`. Without caching, we would be executing `list`‚Äôs getter many more times than necessary! In cases where you do not want caching, use a method call instead.\n\n## Writable Computed\n\nComputed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:\n\n```js\nexport default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}\n```\n\nNow when you run `this.fullName = 'John Doe'`, the setter will be invoked and `this.firstName` and `this.lastName` will be updated accordingly.\n\n## Getting the Previous Value\n\n- Only supported in 3.4+\n\nIn case you need it, you can get the previous value returned by the computed property accessing the first argument of the getter:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}\n```\n\nIn case you're using a writable computed:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "overview", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic example in vue-guide?\n\nAssistant: To basic example in vue-guide, here's what you do:\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}\n```\n\n```js\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\nAnd we want to display different messages depending on if `author` already has some books or not:\n\n```template\n<p>Has published books:</p>\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\n```\n\nAt this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending on `author.books`. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once.\n\nThat's why for complex logic that includes reactive data, it is recommended to use a **computed property**. Here's the same example, refactored:\n\n```js\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\n```template\n<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>\n```\n\nHere we have declared a computed property `publishedBooksMessage`. Try to change the value of the `books` array in the application `data` and you will see how `publishedBooksMessage` is changing accordingly. You can data-bind to computed properties in templates just like a normal property. Vue is aware that `this.publishedBooksMessage` depends on `this.author.books`, so it will update any bindings that depend on `this.publishedBooksMessage` when `this.author.books` changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I computed caching vs. methods in vue-guide?\n\nAssistant: To computed caching vs. methods in vue-guide, here's what you do:\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n```template\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n```js\n// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their reactive dependencies.** A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as `author.books` has not changed, multiple access to `publishedBooksMessage` will immediately return the previously computed result without having to run the getter function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n```js\ncomputed: {\n  now() {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens. Why do we need caching? Imagine we have an expensive computed property `list`, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend on `list`. Without caching, we would be executing `list`‚Äôs getter many more times than necessary! In cases where you do not want caching, use a method call instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I writable computed in vue-guide?\n\nAssistant: To writable computed in vue-guide, here's what you do:\nComputed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:\n\n```js\nexport default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}\n```\n\nNow when you run `this.fullName = 'John Doe'`, the setter will be invoked and `this.firstName` and `this.lastName` will be updated accordingly..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I getting the previous value in vue-guide?\n\nAssistant: To getting the previous value in vue-guide, here's what you do:\n- Only supported in 3.4+\n\nIn case you need it, you can get the previous value returned by the computed property accessing the first argument of the getter:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}\n```\n\nIn case you're using a writable computed:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "section_detail", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Computed Properties in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Example of Computed Property**:\n\n```yaml\nexport default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    publishedBooksMessage() {\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}\n```\n\nThis snippet shows you how to basic example of computed property, which is an important aspect of computed properties.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "code_examples", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Computed Properties in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGetters should be side-effect free: It is important to remember that computed getter functions should only perform pure computation and be free of side effects. For example, don't mutate other state, make async requests, or mutate the DOM inside a computed getter!\n\nAvoid mutating computed value: The returned value from a computed property is derived state. Think of it as a temporary snapshot - every time the source state changes, a new snapshot is created. It does not make sense to mutate a snapshot, so a computed return value should be treated as read-only and never be mutated - instead, update the source state it depends on to trigger new computations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/computed.html", "title": "Computed Properties", "description": "This page covers the concept of computed properties in Vue.js, including their usage, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:11", "type": "best_practices", "page_metadata": {"og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "favicon": "https://vuejs.org/logo.svg", "og:description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Computed Properties | Vue.js", "og:type": "website", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "ogTitle": "Vue.js", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "twitter:site": "@vuejs", "theme-color": "#3c8772", "language": "en-US", "scrapeId": "bfa35c21-df40-4412-a610-ce8a20e808cc", "sourceURL": "https://vuejs.org/guide/essentials/computed.html", "url": "https://vuejs.org/guide/essentials/computed.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Reactivity Fundamentals is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Reactivity Fundamentals in vue-guide.\n\n# Reactivity Fundamentals\n\nThis page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.Here's a quick rundown of what this is about:\n\n## Declaring Reactive State\n\nWith the Options API, we use the `data` option to declare reactive state of a component. The option value should be a function that returns an object. Vue will call the function when creating a new component instance, and wrap the returned object in its reactivity system. Any top-level properties of this object are proxied on the component instance ( `this` in methods and lifecycle hooks):\n\n```js\nexport default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  // `mounted` is a lifecycle hook which we will explain later\n  mounted() {\n    // `this` refers to the component instance.\n    console.log(this.count) // => 1\n\n    // data can be mutated as well\n    this.count = 2\n  }\n}\n```\n\nThese instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the `data` function. Where necessary, use `null`, `undefined` or some other placeholder value for properties where the desired value isn't yet available.\n\nIt is possible to add a new property directly to `this` without including it in `data`. However, properties added this way will not be able to trigger reactive updates.\n\nVue uses a `$` prefix when exposing its own built-in APIs via the component instance. It also reserves the prefix `_` for internal properties. You should avoid using names for top-level `data` properties that start with either of these characters.\n\n## Reactive Proxy vs. Original\n\nIn Vue 3, data is made reactive by leveraging [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). Users coming from Vue 2 should be aware of the following edge case:\n\n```js\nexport default {\n  data() {\n    return {\n      someObject: {}\n    }\n  },\n  mounted() {\n    const newObject = {}\n    this.someObject = newObject\n\n    console.log(newObject === this.someObject) // false\n  }\n}\n```\n\nWhen you access `this.someObject` after assigning it, the value is a reactive proxy of the original `newObject`. **Unlike in Vue 2, the original `newObject` is left intact and will not be made reactive: make sure to always access reactive state as a property of `this`.**\n\n## Declaring Reactive State\n\n### `ref()`\nIn Composition API, the recommended way to declare reactive state is using the [`ref()`](https://vuejs.org/api/reactivity-core#ref) function:\n\n```js\nimport { ref } from 'vue'\n\nconst count = ref(0)\n```\n\n`ref()` takes the argument and returns it wrapped within a ref object with a `.value` property:\n\n```js\nconst count = ref(0)\n\nconsole.log(count) // { value: 0 }\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1\n```\n\nTo access refs in a component's template, declare and return them from a component's `setup()` function:\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  // `setup` is a special hook dedicated for the Composition API.\n  setup() {\n    const count = ref(0)\n\n    // expose the ref to the template\n    return {\n      count\n    }\n  }\n}\n```\n\ntemplate\n\n```html\n<div>{{ count }}</div>\n```\n\nNotice that we did **not** need to append `.value` when using the ref in the template. For convenience, refs are automatically unwrapped when used inside templates (with a few [caveats](https://vuejs.org/guide/essentials/reactivity-fundamentals.html#caveat-when-unwrapping-in-templates)).\n\nYou can also mutate a ref directly in event handlers:\n\ntemplate\n\n```html\n<button @click=\"count++\">\n  {{ count }}\n</button>\n```\n\nFor more complex logic, we can declare functions that mutate refs in the same scope and expose them as methods alongside the state:\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    function increment() {\n      // .value is needed in JavaScript\n      count.value++\n    }\n\n    // don't forget to expose the function as well.\n    return {\n      count,\n      increment\n    }\n  }\n}\n```\n\nExposed methods can then be used as event handlers:\n\ntemplate\n\n```html\n<button @click=\"increment\">\n  {{ count }}\n</button>\n```\n\nHere's the example live on [Codepen](https://codepen.io/vuejs-examples/pen/WNYbaqo), without using any build tools.\n\n## <script setup>\n\nManually exposing state and methods via `setup()` can be verbose. Luckily, it can be avoided when using [Single-File Components (SFCs)](https://vuejs.org/guide/scaling-up/sfc). We can simplify the usage with `<script setup>`:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n```\n\nTop-level imports, variables and functions declared in `<script setup>` are automatically usable in the template of the same component. Think of the template as a JavaScript function declared in the same scope - it naturally has access to everything declared alongside it.\n\n## Why Refs?\n\nYou might be wondering why we need refs with the `.value` instead of plain variables. To explain that, we will need to briefly discuss how Vue's reactivity system works.\n\nWhen you use a ref in a template, and change the ref's value later, Vue automatically detects the change and updates the DOM accordingly. This is made possible with a dependency-tracking based reactivity system. When a component is rendered for the first time, Vue **tracks** every ref that was used during the render. Later on, when a ref is mutated, it will **trigger** a re-render for components that are tracking it.\n\nIn standard JavaScript, there is no way to detect the access or mutation of plain variables. However, we can intercept the get and set operations of an object's properties using getter and setter methods.\n\nThe `.value` property gives Vue the opportunity to detect when a ref has been accessed or mutated. Under the hood, Vue performs the tracking in its getter, and performs triggering in its setter. Conceptually, you can think of a ref as an object that looks like this:\n\n```js\n// pseudo code, not actual implementation\nconst myRef = {\n  _value: 0,\n  get value() {\n    track()\n    return this._value\n  },\n  set value(newValue) {\n    this._value = newValue\n    trigger()\n  }\n}\n```\n\nAnother nice trait of refs is that unlike plain variables, you can pass refs into functions while retaining access to the latest value and the reactivity connection. This is particularly useful when refactoring complex logic into reusable code.\n\n## Declaring Methods\n\nTo add methods to a component instance we use the `methods` option. This should be an object containing the desired methods:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    // methods can be called in lifecycle hooks, or other methods!\n    this.increment()\n  }\n}\n```\n\nVue automatically binds the `this` value for `methods` so that it always refers to the component instance. This ensures that a method retains the correct `this` value if it's used as an event listener or callback. You should avoid using arrow functions when defining `methods`, as that prevents Vue from binding the appropriate `this` value:\n\n```js\nexport default {\n  methods: {\n    increment: () => {\n      // BAD: no `this` access here!\n    }\n  }\n}\n```\n\nJust like all other properties of the component instance, the `methods` are accessible from within the component's template. Inside a template they are most commonly used as event listeners:\n\ntemplate\n\n```html\n<button @click=\"increment\">{{ count }}</button>\n```\n\n## Deep Reactivity\n\nIn Vue, state is deeply reactive by default. This means you can expect changes to be detected even when you mutate nested objects or arrays:\n\n```js\nexport default {\n  data() {\n    return {\n      obj: {\n        nested: { count: 0 },\n        arr: ['foo', 'bar']\n      }\n    }\n  },\n  methods: {\n    mutateDeeply() {\n      // these will work as expected.\n      this.obj.nested.count++\n      this.obj.arr.push('baz')\n    }\n  }\n}\n```\n\nRefs can hold any value type, including deeply nested objects, arrays, or JavaScript built-in data structures like `Map`.\n\nA ref will make its value deeply reactive. This means you can expect changes to be detected even when you mutate nested objects or arrays:\n\n```js\nimport { ref } from 'vue'\n\nconst obj = ref({\n  nested: { count: 0 },\n  arr: ['foo', 'bar']\n})\n\nfunction mutateDeeply() {\n  // these will work as expected.\n  obj.value.nested.count++\n  obj.value.arr.push('baz')\n}\n```\n\nNon-primitive values are turned into reactive proxies via [`reactive()`](https://vuejs.org/guide/essentials/reactivity-fundamentals.html#reactive), which is discussed below.\n\n## DOM Update Timing\n\nWhen you mutate reactive state, the DOM is updated automatically. However, it should be noted that the DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" in the update cycle to ensure that each component updates only once no matter how many state changes you have made.\n\nTo wait for the DOM update to complete after a state change, you can use the [nextTick()](https://vuejs.org/api/general#nexttick) global API:\n\n```js\nimport { nextTick } from 'vue'\n\nasync function increment() {\n  count.value++\n  await nextTick()\n  // Now the DOM is updated\n}\n```\n\n```js\nimport { nextTick } from 'vue'\n\nexport default {\n  methods: {\n    async increment() {\n      this.count++\n      await nextTick()\n      // Now the DOM is updated\n    }\n  }\n}\n```\n\n## `reactive()`\n\nThere is another way to declare reactive state, with the `reactive()` API. Unlike a ref which wraps the inner value in a special object, `reactive()` makes an object itself reactive:\n\n```js\nimport { reactive } from 'vue'\n\nconst state = reactive({ count: 0 })\n```\n\nUsage in template:\n\ntemplate\n\n```html\n<button @click=\"state.count++\">\n  {{ state.count }}\n</button>\n```\n\nReactive objects are [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) and behave just like normal objects. The difference is that Vue is able to intercept the access and mutation of all properties of a reactive object for reactivity tracking and triggering.\n\n## Limitations of `reactive()`\n\nThe `reactive()` API has a few limitations:\n\n1. **Limited value types:** it only works for object types (objects, arrays, and [collection types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections) such as `Map` and `Set`). It cannot hold [primitive types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) such as `string`, `number` or `boolean`.\n\n2. **Cannot replace entire object:** since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily \"replace\" a reactive object because the reactivity connection to the first reference is lost:\n\n```js\nlet state = reactive({ count: 0 })\n\n// the above reference ({ count: 0 }) is no longer being tracked\n// (reactivity connection is lost!)\nstate = reactive({ count: 1 })\n```\n\n3. **Not destructure-friendly:** when we destructure a reactive object's primitive type property into local variables, or when we pass that property into a function, we will lose the reactivity connection:\n\n```js\nconst state = reactive({ count: 0 })\n\n// count is disconnected from state.count when destructured.\nlet { count } = state\n// does not affect original state\ncount++\n\n// the function receives a plain number and\n// won't be able to track changes to state.count\n// we have to pass the entire object in to retain reactivity\ncallSomeFunction(state.count)\n```\n\nDue to these limitations, we recommend using `ref()` as the primary API for declaring reactive state.\n\n## Additional Ref Unwrapping Details\n\n### As Reactive Object Property\nA ref is automatically unwrapped when accessed or mutated as a property of a reactive object. In other words, it behaves like a normal property:\n\n```js\nconst count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n```\n\nIf a new ref is assigned to a property linked to an existing ref, it will replace the old ref:\n\n```js\nconst otherCount = ref(2)\n\nstate.count = otherCount\nconsole.log(state.count) // 2\n// original ref is now disconnected from state.count\nconsole.log(count.value) // 1\n```\n\n### Caveat in Arrays and Collections\nUnlike reactive objects, there is **no** unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type like `Map`:\n\n```js\nconst books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)\n```\n\n### Caveat when Unwrapping in Templates\nRef unwrapping in templates only applies if the ref is a top-level property in the template render context.\n\n## Stateful Methods\n\nIn some cases, we may need to dynamically create a method function, for example creating a debounced event handler:\n\n```js\nimport { debounce } from 'lodash-es'\n\nexport default {\n  methods: {\n    // Debouncing with Lodash\n    click: debounce(function () {\n      // ... respond to click ...\n    }, 500)\n  }\n}\n```\n\nHowever, this approach is problematic for components that are reused because a debounced function is **stateful**: it maintains some internal state on the elapsed time. If multiple component instances share the same debounced function, they will interfere with one another.\n\nTo keep each component instance's debounced function independent of the others, we can create the debounced version in the `created` lifecycle hook:\n\n```js\nexport default {\n  created() {\n    // each instance now has its own copy of debounced handler\n    this.debouncedClick = _.debounce(this.click, 500)\n  },\n  unmounted() {\n    // also a good idea to cancel the timer\n    // when the component is removed\n    this.debouncedClick.cancel()\n  },\n  methods: {\n    click() {\n      // ... respond to click ...\n    }\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "overview", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring reactive state in vue-guide?\n\nAssistant: To declaring reactive state in vue-guide, here's what you do:\nWith the Options API, we use the `data` option to declare reactive state of a component. The option value should be a function that returns an object. Vue will call the function when creating a new component instance, and wrap the returned object in its reactivity system. Any top-level properties of this object are proxied on the component instance ( `this` in methods and lifecycle hooks):\n\n```js\nexport default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  // `mounted` is a lifecycle hook which we will explain later\n  mounted() {\n    // `this` refers to the component instance.\n    console.log(this.count) // => 1\n\n    // data can be mutated as well\n    this.count = 2\n  }\n}\n```\n\nThese instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the `data` function. Where necessary, use `null`, `undefined` or some other placeholder value for properties where the desired value isn't yet available.\n\nIt is possible to add a new property directly to `this` without including it in `data`. However, properties added this way will not be able to trigger reactive updates.\n\nVue uses a `$` prefix when exposing its own built-in APIs via the component instance. It also reserves the prefix `_` for internal properties. You should avoid using names for top-level `data` properties that start with either of these characters..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reactive proxy vs. original in vue-guide?\n\nAssistant: To reactive proxy vs. original in vue-guide, here's what you do:\nIn Vue 3, data is made reactive by leveraging [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). Users coming from Vue 2 should be aware of the following edge case:\n\n```js\nexport default {\n  data() {\n    return {\n      someObject: {}\n    }\n  },\n  mounted() {\n    const newObject = {}\n    this.someObject = newObject\n\n    console.log(newObject === this.someObject) // false\n  }\n}\n```\n\nWhen you access `this.someObject` after assigning it, the value is a reactive proxy of the original `newObject`. **Unlike in Vue 2, the original `newObject` is left intact and will not be made reactive: make sure to always access reactive state as a property of `this`.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring reactive state in vue-guide?\n\nAssistant: To declaring reactive state in vue-guide, here's what you do:\n### `ref()`\nIn Composition API, the recommended way to declare reactive state is using the [`ref()`](https://vuejs.org/api/reactivity-core#ref) function:\n\n```js\nimport { ref } from 'vue'\n\nconst count = ref(0)\n```\n\n`ref()` takes the argument and returns it wrapped within a ref object with a `.value` property:\n\n```js\nconst count = ref(0)\n\nconsole.log(count) // { value: 0 }\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1\n```\n\nTo access refs in a component's template, declare and return them from a component's `setup()` function:\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  // `setup` is a special hook dedicated for the Composition API.\n  setup() {\n    const count = ref(0)\n\n    // expose the ref to the template\n    return {\n      count\n    }\n  }\n}\n```\n\ntemplate\n\n```html\n<div>{{ count }}</div>\n```\n\nNotice that we did **not** need to append `.value` when using the ref in the template. For convenience, refs are automatically unwrapped when used inside templates (with a few [caveats](https://vuejs.org/guide/essentials/reactivity-fundamentals.html#caveat-when-unwrapping-in-templates)).\n\nYou can also mutate a ref directly in event handlers:\n\ntemplate\n\n```html\n<button @click=\"count++\">\n  {{ count }}\n</button>\n```\n\nFor more complex logic, we can declare functions that mutate refs in the same scope and expose them as methods alongside the state:\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    function increment() {\n      // .value is needed in JavaScript\n      count.value++\n    }\n\n    // don't forget to expose the function as well.\n    return {\n      count,\n      increment\n    }\n  }\n}\n```\n\nExposed methods can then be used as event handlers:\n\ntemplate\n\n```html\n<button @click=\"increment\">\n  {{ count }}\n</button>\n```\n\nHere's the example live on [Codepen](https://codepen.io/vuejs-examples/pen/WNYbaqo), without using any build tools..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I <script setup> in vue-guide?\n\nAssistant: To <script setup> in vue-guide, here's what you do:\nManually exposing state and methods via `setup()` can be verbose. Luckily, it can be avoided when using [Single-File Components (SFCs)](https://vuejs.org/guide/scaling-up/sfc). We can simplify the usage with `<script setup>`:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n```\n\nTop-level imports, variables and functions declared in `<script setup>` are automatically usable in the template of the same component. Think of the template as a JavaScript function declared in the same scope - it naturally has access to everything declared alongside it..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why refs? in vue-guide?\n\nAssistant: To why refs? in vue-guide, here's what you do:\nYou might be wondering why we need refs with the `.value` instead of plain variables. To explain that, we will need to briefly discuss how Vue's reactivity system works.\n\nWhen you use a ref in a template, and change the ref's value later, Vue automatically detects the change and updates the DOM accordingly. This is made possible with a dependency-tracking based reactivity system. When a component is rendered for the first time, Vue **tracks** every ref that was used during the render. Later on, when a ref is mutated, it will **trigger** a re-render for components that are tracking it.\n\nIn standard JavaScript, there is no way to detect the access or mutation of plain variables. However, we can intercept the get and set operations of an object's properties using getter and setter methods.\n\nThe `.value` property gives Vue the opportunity to detect when a ref has been accessed or mutated. Under the hood, Vue performs the tracking in its getter, and performs triggering in its setter. Conceptually, you can think of a ref as an object that looks like this:\n\n```js\n// pseudo code, not actual implementation\nconst myRef = {\n  _value: 0,\n  get value() {\n    track()\n    return this._value\n  },\n  set value(newValue) {\n    this._value = newValue\n    trigger()\n  }\n}\n```\n\nAnother nice trait of refs is that unlike plain variables, you can pass refs into functions while retaining access to the latest value and the reactivity connection. This is particularly useful when refactoring complex logic into reusable code..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring methods in vue-guide?\n\nAssistant: To declaring methods in vue-guide, here's what you do:\nTo add methods to a component instance we use the `methods` option. This should be an object containing the desired methods:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    // methods can be called in lifecycle hooks, or other methods!\n    this.increment()\n  }\n}\n```\n\nVue automatically binds the `this` value for `methods` so that it always refers to the component instance. This ensures that a method retains the correct `this` value if it's used as an event listener or callback. You should avoid using arrow functions when defining `methods`, as that prevents Vue from binding the appropriate `this` value:\n\n```js\nexport default {\n  methods: {\n    increment: () => {\n      // BAD: no `this` access here!\n    }\n  }\n}\n```\n\nJust like all other properties of the component instance, the `methods` are accessible from within the component's template. Inside a template they are most commonly used as event listeners:\n\ntemplate\n\n```html\n<button @click=\"increment\">{{ count }}</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I deep reactivity in vue-guide?\n\nAssistant: To deep reactivity in vue-guide, here's what you do:\nIn Vue, state is deeply reactive by default. This means you can expect changes to be detected even when you mutate nested objects or arrays:\n\n```js\nexport default {\n  data() {\n    return {\n      obj: {\n        nested: { count: 0 },\n        arr: ['foo', 'bar']\n      }\n    }\n  },\n  methods: {\n    mutateDeeply() {\n      // these will work as expected.\n      this.obj.nested.count++\n      this.obj.arr.push('baz')\n    }\n  }\n}\n```\n\nRefs can hold any value type, including deeply nested objects, arrays, or JavaScript built-in data structures like `Map`.\n\nA ref will make its value deeply reactive. This means you can expect changes to be detected even when you mutate nested objects or arrays:\n\n```js\nimport { ref } from 'vue'\n\nconst obj = ref({\n  nested: { count: 0 },\n  arr: ['foo', 'bar']\n})\n\nfunction mutateDeeply() {\n  // these will work as expected.\n  obj.value.nested.count++\n  obj.value.arr.push('baz')\n}\n```\n\nNon-primitive values are turned into reactive proxies via [`reactive()`](https://vuejs.org/guide/essentials/reactivity-fundamentals.html#reactive), which is discussed below..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I dom update timing in vue-guide?\n\nAssistant: To dom update timing in vue-guide, here's what you do:\nWhen you mutate reactive state, the DOM is updated automatically. However, it should be noted that the DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" in the update cycle to ensure that each component updates only once no matter how many state changes you have made.\n\nTo wait for the DOM update to complete after a state change, you can use the [nextTick()](https://vuejs.org/api/general#nexttick) global API:\n\n```js\nimport { nextTick } from 'vue'\n\nasync function increment() {\n  count.value++\n  await nextTick()\n  // Now the DOM is updated\n}\n```\n\n```js\nimport { nextTick } from 'vue'\n\nexport default {\n  methods: {\n    async increment() {\n      this.count++\n      await nextTick()\n      // Now the DOM is updated\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `reactive()` in vue-guide?\n\nAssistant: To `reactive()` in vue-guide, here's what you do:\nThere is another way to declare reactive state, with the `reactive()` API. Unlike a ref which wraps the inner value in a special object, `reactive()` makes an object itself reactive:\n\n```js\nimport { reactive } from 'vue'\n\nconst state = reactive({ count: 0 })\n```\n\nUsage in template:\n\ntemplate\n\n```html\n<button @click=\"state.count++\">\n  {{ state.count }}\n</button>\n```\n\nReactive objects are [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) and behave just like normal objects. The difference is that Vue is able to intercept the access and mutation of all properties of a reactive object for reactivity tracking and triggering..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I limitations of `reactive()` in vue-guide?\n\nAssistant: To limitations of `reactive()` in vue-guide, here's what you do:\nThe `reactive()` API has a few limitations:\n\n1. **Limited value types:** it only works for object types (objects, arrays, and [collection types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections) such as `Map` and `Set`). It cannot hold [primitive types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) such as `string`, `number` or `boolean`.\n\n2. **Cannot replace entire object:** since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily \"replace\" a reactive object because the reactivity connection to the first reference is lost:\n\n```js\nlet state = reactive({ count: 0 })\n\n// the above reference ({ count: 0 }) is no longer being tracked\n// (reactivity connection is lost!)\nstate = reactive({ count: 1 })\n```\n\n3. **Not destructure-friendly:** when we destructure a reactive object's primitive type property into local variables, or when we pass that property into a function, we will lose the reactivity connection:\n\n```js\nconst state = reactive({ count: 0 })\n\n// count is disconnected from state.count when destructured.\nlet { count } = state\n// does not affect original state\ncount++\n\n// the function receives a plain number and\n// won't be able to track changes to state.count\n// we have to pass the entire object in to retain reactivity\ncallSomeFunction(state.count)\n```\n\nDue to these limitations, we recommend using `ref()` as the primary API for declaring reactive state..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I additional ref unwrapping details in vue-guide?\n\nAssistant: To additional ref unwrapping details in vue-guide, here's what you do:\n### As Reactive Object Property\nA ref is automatically unwrapped when accessed or mutated as a property of a reactive object. In other words, it behaves like a normal property:\n\n```js\nconst count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n```\n\nIf a new ref is assigned to a property linked to an existing ref, it will replace the old ref:\n\n```js\nconst otherCount = ref(2)\n\nstate.count = otherCount\nconsole.log(state.count) // 2\n// original ref is now disconnected from state.count\nconsole.log(count.value) // 1\n```\n\n### Caveat in Arrays and Collections\nUnlike reactive objects, there is **no** unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type like `Map`:\n\n```js\nconst books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)\n```\n\n### Caveat when Unwrapping in Templates\nRef unwrapping in templates only applies if the ref is a top-level property in the template render context..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I stateful methods in vue-guide?\n\nAssistant: To stateful methods in vue-guide, here's what you do:\nIn some cases, we may need to dynamically create a method function, for example creating a debounced event handler:\n\n```js\nimport { debounce } from 'lodash-es'\n\nexport default {\n  methods: {\n    // Debouncing with Lodash\n    click: debounce(function () {\n      // ... respond to click ...\n    }, 500)\n  }\n}\n```\n\nHowever, this approach is problematic for components that are reused because a debounced function is **stateful**: it maintains some internal state on the elapsed time. If multiple component instances share the same debounced function, they will interfere with one another.\n\nTo keep each component instance's debounced function independent of the others, we can create the debounced version in the `created` lifecycle hook:\n\n```js\nexport default {\n  created() {\n    // each instance now has its own copy of debounced handler\n    this.debouncedClick = _.debounce(this.click, 500)\n  },\n  unmounted() {\n    // also a good idea to cancel the timer\n    // when the component is removed\n    this.debouncedClick.cancel()\n  },\n  methods: {\n    click() {\n      // ... respond to click ...\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Reactivity Fundamentals in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Declaring Reactive State with Options API**:\n\n```yaml\nexport default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // => 1\n    this.count = 2\n  }\n}\n```\n\nThis snippet shows you how to declaring reactive state with options api, which is an important aspect of reactivity fundamentals.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "title": "Reactivity Fundamentals", "description": "This page covers the fundamentals of reactivity in Vue, including how to declare reactive state, methods, and the differences between the Options API and Composition API.", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-03-01 03:41:02", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "title": "Reactivity Fundamentals | Vue.js", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "a8a67b80-a285-4348-9264-ca1314603b07", "sourceURL": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Template Refs is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Template Refs in vue-guide.\n\n# Template Refs\n\nThis page covers how to use template refs in Vue to access DOM elements and child component instances directly.Here's a quick rundown of what this is about:\n\n## Template Refs\n\nWhile Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute:\n\n```html\n<input ref=\"input\">\n```\n\n`ref` is a special attribute, similar to the `key` attribute discussed in the `v-for` chapter. It allows us to obtain a direct reference to a specific DOM element or child component instance after it's mounted. This may be useful when you want to, for example, programmatically focus an input on component mount, or initialize a 3rd party library on an element.\n\n## Accessing the Refs\n\nTo obtain the reference with Composition API, we can use the [`useTemplateRef()`](https://vuejs.org/api/composition-api-helpers#usetemplateref) helper:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n\nWhen using TypeScript, Vue's IDE support and `vue-tsc` will automatically infer the type of `input.value` based on what element or component the matching `ref` attribute is used on.\n\n## Usage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nIf not using `<script setup>`, make sure to also return the ref from `setup()`:\n\n```js\nexport default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}\n```\n\nThe resulting ref is exposed on `this.$refs`:\n\n```vue\n<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nNote that you can only access the ref **after the component is mounted.** If you try to access `$refs.input` in a template expression, it will be `undefined` on the first render. This is because the element doesn't exist until after the first render!\n\nIf you are trying to watch the changes of a template ref, make sure to account for the case where the ref has `null` value:\n\n```js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // not mounted yet, or the element was unmounted (e.g. by v-if)\n  }\n})\n```\n\n## Refs inside v-for\n\n> Requires v3.5 or above\n\nWhen `ref` is used inside `v-for`, the corresponding ref should contain an Array value, which will be populated with the elements after mount:\n\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nUsage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value. The ref should also contain an array value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = ref([])\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"itemRefs\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nWhen `ref` is used inside `v-for`, the resulting ref value will be an array containing the corresponding elements:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      list: [\\\n        /* ... */\\\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\n## Function Refs\n\nInstead of a string key, the `ref` attribute can also be bound to a function, which will be called on each component update and gives you full flexibility on where to store the element reference. The function receives the element reference as the first argument:\n\n```html\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n\nNote we are using a dynamic `:ref` binding so we can pass it a function instead of a ref name string. When the element is unmounted, the argument will be `null`. You can, of course, use a method instead of an inline function.\n\n## Ref on Component\n\n`ref` can also be used on a child component. In this case the reference will be that of a component instance:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nUsage before 3.5\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nIf the child component is using Options API or not using `<script setup>`, the referenced instance will be identical to the child component's `this`, which means the parent component will have full access to every property and method of the child component. This makes it easy to create tightly coupled implementation details between the parent and the child, so component refs should be only used when absolutely needed - in most cases, you should try to implement parent / child interactions using the standard props and emit interfaces first.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I template refs in vue-guide?\n\nAssistant: To template refs in vue-guide, here's what you do:\nWhile Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special `ref` attribute:\n\n```html\n<input ref=\"input\">\n```\n\n`ref` is a special attribute, similar to the `key` attribute discussed in the `v-for` chapter. It allows us to obtain a direct reference to a specific DOM element or child component instance after it's mounted. This may be useful when you want to, for example, programmatically focus an input on component mount, or initialize a 3rd party library on an element..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I accessing the refs in vue-guide?\n\nAssistant: To accessing the refs in vue-guide, here's what you do:\nTo obtain the reference with Composition API, we can use the [`useTemplateRef()`](https://vuejs.org/api/composition-api-helpers#usetemplateref) helper:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n\nWhen using TypeScript, Vue's IDE support and `vue-tsc` will automatically infer the type of `input.value` based on what element or component the matching `ref` attribute is used on..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I usage before 3.5 in vue-guide?\n\nAssistant: To usage before 3.5 in vue-guide, here's what you do:\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// declare a ref to hold the element reference\n// the name must match template ref value\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nIf not using `<script setup>`, make sure to also return the ref from `setup()`:\n\n```js\nexport default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}\n```\n\nThe resulting ref is exposed on `this.$refs`:\n\n```vue\n<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n\nNote that you can only access the ref **after the component is mounted.** If you try to access `$refs.input` in a template expression, it will be `undefined` on the first render. This is because the element doesn't exist until after the first render!\n\nIf you are trying to watch the changes of a template ref, make sure to account for the case where the ref has `null` value:\n\n```js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // not mounted yet, or the element was unmounted (e.g. by v-if)\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I refs inside v-for in vue-guide?\n\nAssistant: To refs inside v-for in vue-guide, here's what you do:\n> Requires v3.5 or above\n\nWhen `ref` is used inside `v-for`, the corresponding ref should contain an Array value, which will be populated with the elements after mount:\n\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nUsage before 3.5\n\nIn versions before 3.5 where `useTemplateRef()` was not introduced, we need to declare a ref with a name that matches the template ref attribute's value. The ref should also contain an array value:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = ref([])\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"itemRefs\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n\nWhen `ref` is used inside `v-for`, the resulting ref value will be an array containing the corresponding elements:\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      list: [\\\n        /* ... */\\\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I function refs in vue-guide?\n\nAssistant: To function refs in vue-guide, here's what you do:\nInstead of a string key, the `ref` attribute can also be bound to a function, which will be called on each component update and gives you full flexibility on where to store the element reference. The function receives the element reference as the first argument:\n\n```html\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n\nNote we are using a dynamic `:ref` binding so we can pass it a function instead of a ref name string. When the element is unmounted, the argument will be `null`. You can, of course, use a method instead of an inline function..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ref on component in vue-guide?\n\nAssistant: To ref on component in vue-guide, here's what you do:\n`ref` can also be used on a child component. In this case the reference will be that of a component instance:\n\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nUsage before 3.5\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n\nIf the child component is using Options API or not using `<script setup>`, the referenced instance will be identical to the child component's `this`, which means the parent component will have full access to every property and method of the child component. This makes it easy to create tightly coupled implementation details between the parent and the child, so component refs should be only used when absolutely needed - in most cases, you should try to implement parent / child interactions using the standard props and emit interfaces first..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Template Refs in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Accessing Refs with Composition API**:\n\n```yaml\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>\n```\n```\n\nThis snippet shows you how to accessing refs with composition api, which is an important aspect of template refs.\n\n**Usage before 3.5**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst input = ref(null)\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>\n```\n```\n\nThis snippet shows you how to usage before 3.5, which is an important aspect of template refs.\n\n**Refs inside v-for**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\\\n  /* ... */\\\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>\n```\n```\n\nThis snippet shows you how to refs inside v-for, which is an important aspect of template refs.\n\n**Function Refs**:\n\n```yaml\n```html\n<input :ref=\"(el) => { /* assign el to a property or ref */ }\">\n```\n```\n\nThis snippet shows you how to function refs, which is an important aspect of template refs.\n\n**Ref on Component**:\n\n```yaml\n```vue\n<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>\n```\n```\n\nThis snippet shows you how to ref on component, which is an important aspect of template refs.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "code_examples", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Template Refs in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can only access the ref after the component is mounted.\n\nIf you try to access `$refs.input` in a template expression, it will be `undefined` on the first render.\n\nWhen using refs inside `v-for`, the resulting ref value will be an array containing the corresponding elements.\n\nThe ref array does not guarantee the same order as the source array.\n\nUse component refs only when absolutely needed; prefer props and emit interfaces for parent/child interactions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/template-refs.html", "title": "Template Refs", "description": "This page covers how to use template refs in Vue to access DOM elements and child component instances directly.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:40", "type": "best_practices", "page_metadata": {"twitter:site": "@vuejs", "viewport": "width=device-width,initial-scale=1", "og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "twitter:card": "summary", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "language": "en-US", "title": "Template Refs | Vue.js", "scrapeId": "67d3f65e-f0a0-4387-9b68-761b03618135", "sourceURL": "https://vuejs.org/guide/essentials/template-refs.html", "url": "https://vuejs.org/guide/essentials/template-refs.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Watchers is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Watchers in vue-guide.\n\n# Watchers\n\nThis page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.Here's a quick rundown of what this is about:\n\n## Basic Example\n\nComputed properties allow us to declaratively compute derived values. However, there are cases where we need to perform \"side effects\" in reaction to state changes - for example, mutating the DOM, or changing another piece of state based on the result of an async operation.\n\nWith the Options API, we can use the `watch` option to trigger a function whenever a reactive property changes:\n\n```js\nexport default {\n  data() {\n    return {\n      question: '',\n      answer: 'Questions usually contain a question mark. ;-)',\n      loading: false\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes('?')) {\n        this.getAnswer()\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.loading = true\n      this.answer = 'Thinking...'\n      try {\n        const res = await fetch('https://yesno.wtf/api')\n        this.answer = (await res.json()).answer\n      } catch (error) {\n        this.answer = 'Error! Could not reach the API. ' + error\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}\n```\n\n```template\n<p>\n  Ask a yes/no question:\n  <input v-model=\"question\" :disabled=\"loading\" />\n</p>\n<p>{{ answer }}</p>\n```\n\nThe `watch` option also supports a dot-delimited path as the key:\n\n```js\nexport default {\n  watch: {\n    // Note: only simple paths. Expressions are not supported.\n    'some.nested.key'(newValue) {\n      // ...\n    }\n  }\n}\n```\n\nWith Composition API, we can use the `watch` function to trigger a callback whenever a piece of reactive state changes:\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\n\nconst question = ref('')\nconst answer = ref('Questions usually contain a question mark. ;-)')\nconst loading = ref(false)\n\n// watch works directly on a ref\nwatch(question, async (newQuestion, oldQuestion) => {\n  if (newQuestion.includes('?')) {\n    loading.value = true\n    answer.value = 'Thinking...'\n    try {\n      const res = await fetch('https://yesno.wtf/api')\n      answer.value = (await res.json()).answer\n    } catch (error) {\n      answer.value = 'Error! Could not reach the API. ' + error\n    } finally {\n      loading.value = false\n    }\n  }\n})\n</script>\n\n<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" :disabled=\"loading\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>\n```\n\n## Watch Source Types\n\n`watch`'s first argument can be different types of reactive \"sources\": it can be a ref (including computed refs), a reactive object, a getter function, or an array of multiple sources:\n\n```js\nconst x = ref(0)\nconst y = ref(0)\n\n// single ref\nwatch(x, (newX) => {\n  console.log(`x is ${newX}`)\n})\n\n// getter\nwatch(\n  () => x.value + y.value,\n  (sum) => {\n    console.log(`sum of x + y is: ${sum}`)\n  }\n)\n\n// array of multiple sources\nwatch([x, () => y.value], ([newX, newY]) => {\n  console.log(`x is ${newX} and y is ${newY}`)\n})\n```\n\nDo note that you can't watch a property of a reactive object like this:\n\n```js\nconst obj = reactive({ count: 0 })\n\n// this won't work because we are passing a number to watch()\nwatch(obj.count, (count) => {\n  console.log(`Count is: ${count}`)\n})\n```\n\nInstead, use a getter:\n\n```js\n// instead, use a getter:\nwatch(\n  () => obj.count,\n  (count) => {\n    console.log(`Count is: ${count}`)\n  }\n)\n```\n\n## Deep Watchers\n\n`watch` is shallow by default: the callback will only trigger when the watched property has been assigned a new value - it won't trigger on nested property changes. If you want the callback to fire on all nested mutations, you need to use a deep watcher:\n\n```js\nexport default {\n  watch: {\n    someObject: {\n      handler(newValue, oldValue) {\n        // Note: `newValue` will be equal to `oldValue` here\n        // on nested mutations as long as the object itself\n        // hasn't been replaced.\n      },\n      deep: true\n    }\n  }\n}\n```\n\nWhen you call `watch()` directly on a reactive object, it will implicitly create a deep watcher - the callback will be triggered on all nested mutations:\n\n```js\nconst obj = reactive({ count: 0 })\n\nwatch(obj, (newValue, oldValue) => {\n  // fires on nested property mutations\n  // Note: `newValue` will be equal to `oldValue` here\n  // because they both point to the same object!\n})\n\nobj.count++\n```\n\nThis should be differentiated with a getter that returns a reactive object - in the latter case, the callback will only fire if the getter returns a different object:\n\n```js\nwatch(\n  () => state.someObject,\n  () => {\n    // fires only when state.someObject is replaced\n  }\n)\n```\n\nYou can, however, force the second case into a deep watcher by explicitly using the `deep` option:\n\n```js\nwatch(\n  () => state.someObject,\n  (newValue, oldValue) => {\n    // Note: `newValue` will be equal to `oldValue` here\n    // *unless* state.someObject has been replaced\n  },\n  { deep: true }\n)\n```\n\n## Eager Watchers\n\n`watch` is lazy by default: the callback won't be called until the watched source has changed. But in some cases we may want the same callback logic to be run eagerly - for example, we may want to fetch some initial data, and then re-fetch the data whenever relevant state changes.\n\nWe can force a watcher's callback to be executed immediately by declaring it using an object with a `handler` function and the `immediate: true` option:\n\n```js\nexport default {\n  // ...\n  watch: {\n    question: {\n      handler(newQuestion) {\n        // this will be run immediately on component creation.\n      },\n      // force eager callback execution\n      immediate: true\n    }\n  }\n  // ...\n}\n```\n\nThe initial execution of the handler function will happen just before the `created` hook. Vue will have already processed the `data`, `computed`, and `methods` options, so those properties will be available on the first invocation.\n\nWe can force a watcher's callback to be executed immediately by passing the `immediate: true` option:\n\n```js\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // executed immediately, then again when `source` changes\n  },\n  { immediate: true }\n)\n```\n\n## Once Watchers\n\n- Only supported in 3.4+\n\nWatcher's callback will execute whenever the watched source changes. If you want the callback to trigger only once when the source changes, use the `once: true` option.\n\n```js\nexport default {\n  watch: {\n    source: {\n      handler(newValue, oldValue) {\n        // when `source` changes, triggers only once\n      },\n      once: true\n    }\n  }\n}\n```\n\n```js\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // when `source` changes, triggers only once\n  },\n  { once: true }\n)\n```\n\n## `watchEffect()`\n\nIt is common for the watcher callback to use exactly the same reactive state as the source. For example, consider the following code, which uses a watcher to load a remote resource whenever the `todoId` ref changes:\n\n```js\nconst todoId = ref(1)\nconst data = ref(null)\n\nwatch(\n  todoId,\n  async () => {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n    )\n    data.value = await response.json()\n  },\n  { immediate: true }\n)\n```\n\nIn particular, notice how the watcher uses `todoId` twice, once as the source and then again inside the callback.\n\nThis can be simplified with `watchEffect()`. `watchEffect()` allows us to track the callback's reactive dependencies automatically. The watcher above can be rewritten as:\n\n```js\nwatchEffect(async () => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n  )\n  data.value = await response.json()\n})\n```\n\nHere, the callback will run immediately, there's no need to specify `immediate: true`. During its execution, it will automatically track `todoId.value` as a dependency (similar to computed properties). Whenever `todoId.value` changes, the callback will be run again. With `watchEffect()`, we no longer need to pass `todoId` explicitly as the source value.\n\nYou can check out [this example](https://vuejs.org/examples/#fetching-data) of `watchEffect()` and reactive data-fetching in action.\n\n## Side Effect Cleanup\n\nSometimes we may perform side effects, e.g. asynchronous requests, in a watcher:\n\n```js\nwatch(id, (newId) => {\n  fetch(`/api/${newId}`).then(() => {\n    // callback logic\n  })\n})\n```\n\n```js\nexport default {\n  watch: {\n    id(newId) {\n      fetch(`/api/${newId}`).then(() => {\n        // callback logic\n      })\n    }\n  }\n}\n```\n\nBut what if `id` changes before the request completes? When the previous request completes, it will still fire the callback with an ID value that is already stale. Ideally, we want to be able to cancel the stale request when `id` changes to a new value.\n\nWe can use the `onWatcherCleanup()` API to register a cleanup function that will be called when the watcher is invalidated and is about to re-run:\n\n```js\nimport { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const controller = new AbortController()\n\n  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n    // callback logic\n  })\n\n  onWatcherCleanup(() => {\n    // abort stale request\n    controller.abort()\n  })\n})\n```\n\nNote that `onWatcherCleanup` is only supported in Vue 3.5+ and must be called during the synchronous execution of a `watchEffect` effect function or `watch` callback function: you cannot call it after an `await` statement in an async function.\n\n## Callback Flush Timing\n\nWhen you mutate reactive state, it may trigger both Vue component updates and watcher callbacks created by you.\n\nSimilar to component updates, user-created watcher callbacks are batched to avoid duplicate invocations. For example, we probably don't want a watcher to fire a thousand times if we synchronously push a thousand items into an array being watched.\n\nBy default, a watcher's callback is called **after** parent component updates (if any), and **before** the owner component's DOM updates. This means if you attempt to access the owner component's own DOM inside a watcher callback, the DOM will be in a pre-update state.\n\n## Post Watchers\n\nIf you want to access the owner component's DOM in a watcher callback **after** Vue has updated it, you need to specify the `flush: 'post'` option:\n\n```js\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'post'\n    }\n  }\n}\n```\n\n```js\nwatch(source, callback, {\n  flush: 'post'\n})\n\nwatchEffect(callback, {\n  flush: 'post'\n})\n```\n\nPost-flush `watchEffect()` also has a convenience alias, `watchPostEffect()`:\n\n```js\nimport { watchPostEffect } from 'vue'\n\nwatchPostEffect(() => {\n  /* executed after Vue updates */\n})\n```\n\n## Sync Watchers\n\nIt's also possible to create a watcher that fires synchronously, before any Vue-managed updates:\n\n```js\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'sync'\n    }\n  }\n}\n```\n\n```js\nwatch(source, callback, {\n  flush: 'sync'\n})\n\nwatchEffect(callback, {\n  flush: 'sync'\n})\n```\n\n## `this.$watch()`\n\nIt's also possible to imperatively create watchers using the `$watch()` instance method:\n\n```js\nexport default {\n  created() {\n    this.$watch('question', (newQuestion) => {\n      // ...\n    })\n  }\n}\n```\n\n## Stopping a Watcher\n\nWatchers declared using the `watch` option or the `$watch()` instance method are automatically stopped when the owner component is unmounted, so in most cases you don't need to worry about stopping the watcher yourself.\n\nIn the rare case where you need to stop a watcher before the owner component unmounts, the `$watch()` API returns a function for that:\n\n```js\nconst unwatch = this.$watch('foo', callback)\n\n// ...when the watcher is no longer needed:\nunwatch()\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "overview", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic example in vue-guide?\n\nAssistant: To basic example in vue-guide, here's what you do:\nComputed properties allow us to declaratively compute derived values. However, there are cases where we need to perform \"side effects\" in reaction to state changes - for example, mutating the DOM, or changing another piece of state based on the result of an async operation.\n\nWith the Options API, we can use the `watch` option to trigger a function whenever a reactive property changes:\n\n```js\nexport default {\n  data() {\n    return {\n      question: '',\n      answer: 'Questions usually contain a question mark. ;-)',\n      loading: false\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes('?')) {\n        this.getAnswer()\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.loading = true\n      this.answer = 'Thinking...'\n      try {\n        const res = await fetch('https://yesno.wtf/api')\n        this.answer = (await res.json()).answer\n      } catch (error) {\n        this.answer = 'Error! Could not reach the API. ' + error\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}\n```\n\n```template\n<p>\n  Ask a yes/no question:\n  <input v-model=\"question\" :disabled=\"loading\" />\n</p>\n<p>{{ answer }}</p>\n```\n\nThe `watch` option also supports a dot-delimited path as the key:\n\n```js\nexport default {\n  watch: {\n    // Note: only simple paths. Expressions are not supported.\n    'some.nested.key'(newValue) {\n      // ...\n    }\n  }\n}\n```\n\nWith Composition API, we can use the `watch` function to trigger a callback whenever a piece of reactive state changes:\n\n```vue\n<script setup>\nimport { ref, watch } from 'vue'\n\nconst question = ref('')\nconst answer = ref('Questions usually contain a question mark. ;-)')\nconst loading = ref(false)\n\n// watch works directly on a ref\nwatch(question, async (newQuestion, oldQuestion) => {\n  if (newQuestion.includes('?')) {\n    loading.value = true\n    answer.value = 'Thinking...'\n    try {\n      const res = await fetch('https://yesno.wtf/api')\n      answer.value = (await res.json()).answer\n    } catch (error) {\n      answer.value = 'Error! Could not reach the API. ' + error\n    } finally {\n      loading.value = false\n    }\n  }\n})\n</script>\n\n<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" :disabled=\"loading\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I watch source types in vue-guide?\n\nAssistant: To watch source types in vue-guide, here's what you do:\n`watch`'s first argument can be different types of reactive \"sources\": it can be a ref (including computed refs), a reactive object, a getter function, or an array of multiple sources:\n\n```js\nconst x = ref(0)\nconst y = ref(0)\n\n// single ref\nwatch(x, (newX) => {\n  console.log(`x is ${newX}`)\n})\n\n// getter\nwatch(\n  () => x.value + y.value,\n  (sum) => {\n    console.log(`sum of x + y is: ${sum}`)\n  }\n)\n\n// array of multiple sources\nwatch([x, () => y.value], ([newX, newY]) => {\n  console.log(`x is ${newX} and y is ${newY}`)\n})\n```\n\nDo note that you can't watch a property of a reactive object like this:\n\n```js\nconst obj = reactive({ count: 0 })\n\n// this won't work because we are passing a number to watch()\nwatch(obj.count, (count) => {\n  console.log(`Count is: ${count}`)\n})\n```\n\nInstead, use a getter:\n\n```js\n// instead, use a getter:\nwatch(\n  () => obj.count,\n  (count) => {\n    console.log(`Count is: ${count}`)\n  }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I deep watchers in vue-guide?\n\nAssistant: To deep watchers in vue-guide, here's what you do:\n`watch` is shallow by default: the callback will only trigger when the watched property has been assigned a new value - it won't trigger on nested property changes. If you want the callback to fire on all nested mutations, you need to use a deep watcher:\n\n```js\nexport default {\n  watch: {\n    someObject: {\n      handler(newValue, oldValue) {\n        // Note: `newValue` will be equal to `oldValue` here\n        // on nested mutations as long as the object itself\n        // hasn't been replaced.\n      },\n      deep: true\n    }\n  }\n}\n```\n\nWhen you call `watch()` directly on a reactive object, it will implicitly create a deep watcher - the callback will be triggered on all nested mutations:\n\n```js\nconst obj = reactive({ count: 0 })\n\nwatch(obj, (newValue, oldValue) => {\n  // fires on nested property mutations\n  // Note: `newValue` will be equal to `oldValue` here\n  // because they both point to the same object!\n})\n\nobj.count++\n```\n\nThis should be differentiated with a getter that returns a reactive object - in the latter case, the callback will only fire if the getter returns a different object:\n\n```js\nwatch(\n  () => state.someObject,\n  () => {\n    // fires only when state.someObject is replaced\n  }\n)\n```\n\nYou can, however, force the second case into a deep watcher by explicitly using the `deep` option:\n\n```js\nwatch(\n  () => state.someObject,\n  (newValue, oldValue) => {\n    // Note: `newValue` will be equal to `oldValue` here\n    // *unless* state.someObject has been replaced\n  },\n  { deep: true }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I eager watchers in vue-guide?\n\nAssistant: To eager watchers in vue-guide, here's what you do:\n`watch` is lazy by default: the callback won't be called until the watched source has changed. But in some cases we may want the same callback logic to be run eagerly - for example, we may want to fetch some initial data, and then re-fetch the data whenever relevant state changes.\n\nWe can force a watcher's callback to be executed immediately by declaring it using an object with a `handler` function and the `immediate: true` option:\n\n```js\nexport default {\n  // ...\n  watch: {\n    question: {\n      handler(newQuestion) {\n        // this will be run immediately on component creation.\n      },\n      // force eager callback execution\n      immediate: true\n    }\n  }\n  // ...\n}\n```\n\nThe initial execution of the handler function will happen just before the `created` hook. Vue will have already processed the `data`, `computed`, and `methods` options, so those properties will be available on the first invocation.\n\nWe can force a watcher's callback to be executed immediately by passing the `immediate: true` option:\n\n```js\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // executed immediately, then again when `source` changes\n  },\n  { immediate: true }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I once watchers in vue-guide?\n\nAssistant: To once watchers in vue-guide, here's what you do:\n- Only supported in 3.4+\n\nWatcher's callback will execute whenever the watched source changes. If you want the callback to trigger only once when the source changes, use the `once: true` option.\n\n```js\nexport default {\n  watch: {\n    source: {\n      handler(newValue, oldValue) {\n        // when `source` changes, triggers only once\n      },\n      once: true\n    }\n  }\n}\n```\n\n```js\nwatch(\n  source,\n  (newValue, oldValue) => {\n    // when `source` changes, triggers only once\n  },\n  { once: true }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `watcheffect()` in vue-guide?\n\nAssistant: To `watcheffect()` in vue-guide, here's what you do:\nIt is common for the watcher callback to use exactly the same reactive state as the source. For example, consider the following code, which uses a watcher to load a remote resource whenever the `todoId` ref changes:\n\n```js\nconst todoId = ref(1)\nconst data = ref(null)\n\nwatch(\n  todoId,\n  async () => {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n    )\n    data.value = await response.json()\n  },\n  { immediate: true }\n)\n```\n\nIn particular, notice how the watcher uses `todoId` twice, once as the source and then again inside the callback.\n\nThis can be simplified with `watchEffect()`. `watchEffect()` allows us to track the callback's reactive dependencies automatically. The watcher above can be rewritten as:\n\n```js\nwatchEffect(async () => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n  )\n  data.value = await response.json()\n})\n```\n\nHere, the callback will run immediately, there's no need to specify `immediate: true`. During its execution, it will automatically track `todoId.value` as a dependency (similar to computed properties). Whenever `todoId.value` changes, the callback will be run again. With `watchEffect()`, we no longer need to pass `todoId` explicitly as the source value.\n\nYou can check out [this example](https://vuejs.org/examples/#fetching-data) of `watchEffect()` and reactive data-fetching in action..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I side effect cleanup in vue-guide?\n\nAssistant: To side effect cleanup in vue-guide, here's what you do:\nSometimes we may perform side effects, e.g. asynchronous requests, in a watcher:\n\n```js\nwatch(id, (newId) => {\n  fetch(`/api/${newId}`).then(() => {\n    // callback logic\n  })\n})\n```\n\n```js\nexport default {\n  watch: {\n    id(newId) {\n      fetch(`/api/${newId}`).then(() => {\n        // callback logic\n      })\n    }\n  }\n}\n```\n\nBut what if `id` changes before the request completes? When the previous request completes, it will still fire the callback with an ID value that is already stale. Ideally, we want to be able to cancel the stale request when `id` changes to a new value.\n\nWe can use the `onWatcherCleanup()` API to register a cleanup function that will be called when the watcher is invalidated and is about to re-run:\n\n```js\nimport { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const controller = new AbortController()\n\n  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n    // callback logic\n  })\n\n  onWatcherCleanup(() => {\n    // abort stale request\n    controller.abort()\n  })\n})\n```\n\nNote that `onWatcherCleanup` is only supported in Vue 3.5+ and must be called during the synchronous execution of a `watchEffect` effect function or `watch` callback function: you cannot call it after an `await` statement in an async function..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I callback flush timing in vue-guide?\n\nAssistant: To callback flush timing in vue-guide, here's what you do:\nWhen you mutate reactive state, it may trigger both Vue component updates and watcher callbacks created by you.\n\nSimilar to component updates, user-created watcher callbacks are batched to avoid duplicate invocations. For example, we probably don't want a watcher to fire a thousand times if we synchronously push a thousand items into an array being watched.\n\nBy default, a watcher's callback is called **after** parent component updates (if any), and **before** the owner component's DOM updates. This means if you attempt to access the owner component's own DOM inside a watcher callback, the DOM will be in a pre-update state..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I post watchers in vue-guide?\n\nAssistant: To post watchers in vue-guide, here's what you do:\nIf you want to access the owner component's DOM in a watcher callback **after** Vue has updated it, you need to specify the `flush: 'post'` option:\n\n```js\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'post'\n    }\n  }\n}\n```\n\n```js\nwatch(source, callback, {\n  flush: 'post'\n})\n\nwatchEffect(callback, {\n  flush: 'post'\n})\n```\n\nPost-flush `watchEffect()` also has a convenience alias, `watchPostEffect()`:\n\n```js\nimport { watchPostEffect } from 'vue'\n\nwatchPostEffect(() => {\n  /* executed after Vue updates */\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I sync watchers in vue-guide?\n\nAssistant: To sync watchers in vue-guide, here's what you do:\nIt's also possible to create a watcher that fires synchronously, before any Vue-managed updates:\n\n```js\nexport default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'sync'\n    }\n  }\n}\n```\n\n```js\nwatch(source, callback, {\n  flush: 'sync'\n})\n\nwatchEffect(callback, {\n  flush: 'sync'\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `this.$watch()` in vue-guide?\n\nAssistant: To `this.$watch()` in vue-guide, here's what you do:\nIt's also possible to imperatively create watchers using the `$watch()` instance method:\n\n```js\nexport default {\n  created() {\n    this.$watch('question', (newQuestion) => {\n      // ...\n    })\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I stopping a watcher in vue-guide?\n\nAssistant: To stopping a watcher in vue-guide, here's what you do:\nWatchers declared using the `watch` option or the `$watch()` instance method are automatically stopped when the owner component is unmounted, so in most cases you don't need to worry about stopping the watcher yourself.\n\nIn the rare case where you need to stop a watcher before the owner component unmounts, the `$watch()` API returns a function for that:\n\n```js\nconst unwatch = this.$watch('foo', callback)\n\n// ...when the watcher is no longer needed:\nunwatch()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "section_detail", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Watchers in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Example**:\n\n```yaml\nexport default {\n  data() {\n    return {\n      question: '',\n      answer: 'Questions usually contain a question mark. ;-)',\n      loading: false\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes('?')) {\n        this.getAnswer()\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.loading = true\n      this.answer = 'Thinking...'\n      try {\n        const res = await fetch('https://yesno.wtf/api')\n        this.answer = (await res.json()).answer\n      } catch (error) {\n        this.answer = 'Error! Could not reach the API. ' + error\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}\n```\n\nThis snippet shows you how to basic example, which is an important aspect of watchers.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "code_examples", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Watchers in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse deep watchers cautiously as they can be expensive on large data structures.\n\nPrefer synchronous creation of watchers to avoid memory leaks.\n\nUse `watchEffect` for simpler dependency tracking when the callback uses the same reactive state as the source.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/watchers.html", "title": "Watchers", "description": "This page covers the use of watchers in Vue.js, including basic examples, types of watchers, and best practices for using them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:44:43", "type": "best_practices", "page_metadata": {"description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "og:title": "Vue.js", "language": "en-US", "twitter:site": "@vuejs", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:type": "website", "ogTitle": "Vue.js", "title": "Watchers | Vue.js", "favicon": "https://vuejs.org/logo.svg", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogImage": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "scrapeId": "25834888-96e3-472b-8af4-5fc6467f0089", "sourceURL": "https://vuejs.org/guide/essentials/watchers.html", "url": "https://vuejs.org/guide/essentials/watchers.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Composition API FAQ is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Composition API FAQ in vue-guide.\n\n# Composition API FAQ\n\nThis FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.Here's a quick rundown of what this is about:\n\n## What is Composition API?\n\nComposition API is a set of APIs that allows us to author Vue components using imported functions instead of declaring options. It is an umbrella term that covers the following APIs:\n\n- Reactivity API, e.g. `ref()` and `reactive()`, that allows us to directly create reactive state, computed state, and watchers.\n\n- Lifecycle Hooks, e.g. `onMounted()` and `onUnmounted()`, that allow us to programmatically hook into the component lifecycle.\n\n- Dependency Injection, i.e. `provide()` and `inject()`, that allow us to leverage Vue's dependency injection system while using Reactivity APIs.\n\nComposition API is a built-in feature of Vue 3 and Vue 2.7. For older Vue 2 versions, use the officially maintained `@vue/composition-api` plugin. In Vue 3, it is also primarily used together with the `<script setup>` syntax in Single-File Components. Here's a basic example of a component using Composition API:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nDespite an API style based on function composition, Composition API is NOT functional programming. Composition API is based on Vue's mutable, fine-grained reactivity paradigm, whereas functional programming emphasizes immutability.\n\nIf you are interested in learning how to use Vue with Composition API, you can set the site-wide API preference to Composition API using the toggle at the top of the left sidebar, and then go through the guide from the beginning.\n\n## Why Composition API?\n\n### Better Logic Reuse\nThe primary advantage of Composition API is that it enables clean, efficient logic reuse in the form of Composable functions. It solves all the drawbacks of mixins, the primary logic reuse mechanism for Options API.\n\nComposition API's logic reuse capability has given rise to impressive community projects such as VueUse, an ever-growing collection of composable utilities. It also serves as a clean mechanism for easily integrating stateful third-party services or libraries into Vue's reactivity system, for example immutable data, state machines, and RxJS.\n\n### More Flexible Code Organization\nMany users love that we write organized code by default with Options API: everything has its place based on the option it falls under. However, Options API poses serious limitations when a single component's logic grows beyond a certain complexity threshold. This limitation is particularly prominent in components that need to deal with multiple logical concerns, which we have witnessed first hand in many production Vue 2 apps.\n\nTake the folder explorer component from Vue CLI's GUI as an example: this component is responsible for the following logical concerns:\n\n- Tracking current folder state and displaying its content\n- Handling folder navigation (opening, closing, refreshing...)\n- Handling new folder creation\n- Toggling show favorite folders only\n- Toggling show hidden folders\n- Handling current working directory changes\n\nThe original version of the component was written in Options API. If we give each line of code a color based on the logical concern it is dealing with, this is how it looks:\n\nNotice how code dealing with the same logical concern is forced to be split under different options, located in different parts of the file. In a component that is several hundred lines long, understanding and navigating a single logical concern requires constantly scrolling up and down the file, making it much more difficult than it should be. In addition, if we ever intend to extract a logical concern into a reusable utility, it takes quite a bit of work to find and extract the right pieces of code from different parts of the file.\n\nHere's the same component, before and after the refactor into Composition API:\n\nNotice how the code related to the same logical concern can now be grouped together: we no longer need to jump between different options blocks while working on a specific logical concern. Moreover, we can now move a group of code into an external file with minimal effort, since we no longer need to shuffle the code around in order to extract them. This reduced friction for refactoring is key to the long-term maintainability in large codebases.\n\n### Better Type Inference\nIn recent years, more and more frontend developers are adopting TypeScript as it helps us write more robust code, make changes with more confidence, and provides a great development experience with IDE support. However, the Options API, originally conceived in 2013, was designed without type inference in mind. We had to implement some absurdly complex type gymnastics to make type inference work with the Options API. Even with all this effort, type inference for Options API can still break down for mixins and dependency injection.\n\nThis had led many developers who wanted to use Vue with TS to lean towards Class API powered by `vue-class-component`. However, a class-based API heavily relies on ES decorators, a language feature that was only a stage 2 proposal when Vue 3 was being developed in 2019. We felt it was too risky to base an official API on an unstable proposal. Since then, the decorators proposal has gone through yet another complete overhaul, and finally reached stage 3 in 2022. In addition, class-based API suffers from logic reuse and organization limitations similar to Options API.\n\nIn comparison, Composition API utilizes mostly plain variables and functions, which are naturally type friendly. Code written in Composition API can enjoy full type inference with little need for manual type hints. Most of the time, Composition API code will look largely identical in TypeScript and plain JavaScript. This also makes it possible for plain JavaScript users to benefit from partial type inference.\n\n### Smaller Production Bundle and Less Overhead\nCode written in Composition API and `<script setup>` is also more efficient and minification-friendly than Options API equivalent. This is because the template in a `<script setup>` component is compiled as a function inlined in the same scope of the `<script setup>` code. Unlike property access from `this`, the compiled template code can directly access variables declared inside `<script setup>`, without an instance proxy in between. This also leads to better minification because all the variable names can be safely shortened.\n\n## Relationship with Options API\n\n### Trade-offs\nSome users moving from Options API found their Composition API code less organized, and concluded that Composition API is \"worse\" in terms of code organization. We recommend users with such opinions to look at that problem from a different perspective.\n\nIt is true that Composition API no longer provides the \"guard rails\" that guide you to put your code into respective buckets. In return, you get to author component code like how you would write normal JavaScript. This means you can and should apply any code organization best practices to your Composition API code as you would when writing normal JavaScript. If you can write well-organized JavaScript, you should also be able to write well-organized Composition API code.\n\nOptions API does allow you to \"think less\" when writing component code, which is why many users love it. However, in reducing the mental overhead, it also locks you into the prescribed code organization pattern with no escape hatch, which can make it difficult to refactor or improve code quality in larger scale projects. In this regard, Composition API provides better long term scalability.\n\n### Does Composition API cover all use cases?\nYes in terms of stateful logic. When using Composition API, there are only a few options that may still be needed: `props`, `emits`, `name`, and `inheritAttrs`.\n\nTIP\nSince 3.3 you can directly use `defineOptions` in `<script setup>` to set the component name or `inheritAttrs` property.\n\nIf you intend to exclusively use Composition API (along with the options listed above), you can shave a few kbs off your production bundle via a compile-time flag that drops Options API related code from Vue. Note this also affects Vue components in your dependencies.\n\n### Can I use both APIs in the same component?\nYes. You can use Composition API via the `setup()` option in an Options API component.\n\nHowever, we only recommend doing so if you have an existing Options API codebase that needs to integrate with new features / external libraries written with Composition API.\n\n### Will Options API be deprecated?\nNo, we do not have any plan to do so. Options API is an integral part of Vue and the reason many developers love it. We also realize that many of the benefits of Composition API only manifest in larger-scale projects, and Options API remains a solid choice for many low-to-medium-complexity scenarios.\n\n## Relationship with Class API\n\nWe no longer recommend using Class API with Vue 3, given that Composition API provides great TypeScript integration with additional logic reuse and code organization benefits.\n\n## Comparison with React Hooks\n\nComposition API provides the same level of logic composition capabilities as React Hooks, but with some important differences.\n\nReact Hooks are invoked repeatedly every time a component updates. This creates a number of caveats that can confuse even seasoned React developers. It also leads to performance optimization issues that can severely affect development experience. Here are some examples:\n\n- Hooks are call-order sensitive and cannot be conditional.\n- Variables declared in a React component can be captured by a hook closure and become \"stale\" if the developer fails to pass in the correct dependencies array. This leads to React developers relying on ESLint rules to ensure correct dependencies are passed. However, the rule is often not smart enough and over-compensates for correctness, which leads to unnecessary invalidation and headaches when edge cases are encountered.\n- Expensive computations require the use of `useMemo`, which again requires manually passing in the correct dependencies array.\n- Event handlers passed to child components cause unnecessary child updates by default, and require explicit `useCallback` as an optimization. This is almost always needed, and again requires a correct dependencies array. Neglecting this leads to over-rendering apps by default and can cause performance issues without realizing it.\n- The stale closure problem, combined with Concurrent features, makes it difficult to reason about when a piece of hooks code is run, and makes working with mutable state that should persist across renders (via `useRef`) cumbersome.\n\nIn comparison, Vue Composition API:\n\n- Invokes `setup()` or `<script setup>` code only once. This makes the code align better with the intuitions of idiomatic JavaScript usage as there are no stale closures to worry about. Composition API calls are also not sensitive to call order and can be conditional.\n- Vue's runtime reactivity system automatically collects reactive dependencies used in computed properties and watchers, so there's no need to manually declare dependencies.\n- No need to manually cache callback functions to avoid unnecessary child updates. In general, Vue's fine-grained reactivity system ensures child components only update when they need to. Manual child-update optimizations are rarely a concern for Vue developers.\n\nWe acknowledge the creativity of React Hooks, and it is a major source of inspiration for Composition API. However, the issues mentioned above do exist in its design and we noticed Vue's reactivity model happens to provide a way around them.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "overview", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is composition api? in vue-guide?\n\nAssistant: To what is composition api? in vue-guide, here's what you do:\nComposition API is a set of APIs that allows us to author Vue components using imported functions instead of declaring options. It is an umbrella term that covers the following APIs:\n\n- Reactivity API, e.g. `ref()` and `reactive()`, that allows us to directly create reactive state, computed state, and watchers.\n\n- Lifecycle Hooks, e.g. `onMounted()` and `onUnmounted()`, that allow us to programmatically hook into the component lifecycle.\n\n- Dependency Injection, i.e. `provide()` and `inject()`, that allow us to leverage Vue's dependency injection system while using Reactivity APIs.\n\nComposition API is a built-in feature of Vue 3 and Vue 2.7. For older Vue 2 versions, use the officially maintained `@vue/composition-api` plugin. In Vue 3, it is also primarily used together with the `<script setup>` syntax in Single-File Components. Here's a basic example of a component using Composition API:\n\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n\nDespite an API style based on function composition, Composition API is NOT functional programming. Composition API is based on Vue's mutable, fine-grained reactivity paradigm, whereas functional programming emphasizes immutability.\n\nIf you are interested in learning how to use Vue with Composition API, you can set the site-wide API preference to Composition API using the toggle at the top of the left sidebar, and then go through the guide from the beginning..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why composition api? in vue-guide?\n\nAssistant: To why composition api? in vue-guide, here's what you do:\n### Better Logic Reuse\nThe primary advantage of Composition API is that it enables clean, efficient logic reuse in the form of Composable functions. It solves all the drawbacks of mixins, the primary logic reuse mechanism for Options API.\n\nComposition API's logic reuse capability has given rise to impressive community projects such as VueUse, an ever-growing collection of composable utilities. It also serves as a clean mechanism for easily integrating stateful third-party services or libraries into Vue's reactivity system, for example immutable data, state machines, and RxJS.\n\n### More Flexible Code Organization\nMany users love that we write organized code by default with Options API: everything has its place based on the option it falls under. However, Options API poses serious limitations when a single component's logic grows beyond a certain complexity threshold. This limitation is particularly prominent in components that need to deal with multiple logical concerns, which we have witnessed first hand in many production Vue 2 apps.\n\nTake the folder explorer component from Vue CLI's GUI as an example: this component is responsible for the following logical concerns:\n\n- Tracking current folder state and displaying its content\n- Handling folder navigation (opening, closing, refreshing...)\n- Handling new folder creation\n- Toggling show favorite folders only\n- Toggling show hidden folders\n- Handling current working directory changes\n\nThe original version of the component was written in Options API. If we give each line of code a color based on the logical concern it is dealing with, this is how it looks:\n\nNotice how code dealing with the same logical concern is forced to be split under different options, located in different parts of the file. In a component that is several hundred lines long, understanding and navigating a single logical concern requires constantly scrolling up and down the file, making it much more difficult than it should be. In addition, if we ever intend to extract a logical concern into a reusable utility, it takes quite a bit of work to find and extract the right pieces of code from different parts of the file.\n\nHere's the same component, before and after the refactor into Composition API:\n\nNotice how the code related to the same logical concern can now be grouped together: we no longer need to jump between different options blocks while working on a specific logical concern. Moreover, we can now move a group of code into an external file with minimal effort, since we no longer need to shuffle the code around in order to extract them. This reduced friction for refactoring is key to the long-term maintainability in large codebases.\n\n### Better Type Inference\nIn recent years, more and more frontend developers are adopting TypeScript as it helps us write more robust code, make changes with more confidence, and provides a great development experience with IDE support. However, the Options API, originally conceived in 2013, was designed without type inference in mind. We had to implement some absurdly complex type gymnastics to make type inference work with the Options API. Even with all this effort, type inference for Options API can still break down for mixins and dependency injection.\n\nThis had led many developers who wanted to use Vue with TS to lean towards Class API powered by `vue-class-component`. However, a class-based API heavily relies on ES decorators, a language feature that was only a stage 2 proposal when Vue 3 was being developed in 2019. We felt it was too risky to base an official API on an unstable proposal. Since then, the decorators proposal has gone through yet another complete overhaul, and finally reached stage 3 in 2022. In addition, class-based API suffers from logic reuse and organization limitations similar to Options API.\n\nIn comparison, Composition API utilizes mostly plain variables and functions, which are naturally type friendly. Code written in Composition API can enjoy full type inference with little need for manual type hints. Most of the time, Composition API code will look largely identical in TypeScript and plain JavaScript. This also makes it possible for plain JavaScript users to benefit from partial type inference.\n\n### Smaller Production Bundle and Less Overhead\nCode written in Composition API and `<script setup>` is also more efficient and minification-friendly than Options API equivalent. This is because the template in a `<script setup>` component is compiled as a function inlined in the same scope of the `<script setup>` code. Unlike property access from `this`, the compiled template code can directly access variables declared inside `<script setup>`, without an instance proxy in between. This also leads to better minification because all the variable names can be safely shortened..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I relationship with options api in vue-guide?\n\nAssistant: To relationship with options api in vue-guide, here's what you do:\n### Trade-offs\nSome users moving from Options API found their Composition API code less organized, and concluded that Composition API is \"worse\" in terms of code organization. We recommend users with such opinions to look at that problem from a different perspective.\n\nIt is true that Composition API no longer provides the \"guard rails\" that guide you to put your code into respective buckets. In return, you get to author component code like how you would write normal JavaScript. This means you can and should apply any code organization best practices to your Composition API code as you would when writing normal JavaScript. If you can write well-organized JavaScript, you should also be able to write well-organized Composition API code.\n\nOptions API does allow you to \"think less\" when writing component code, which is why many users love it. However, in reducing the mental overhead, it also locks you into the prescribed code organization pattern with no escape hatch, which can make it difficult to refactor or improve code quality in larger scale projects. In this regard, Composition API provides better long term scalability.\n\n### Does Composition API cover all use cases?\nYes in terms of stateful logic. When using Composition API, there are only a few options that may still be needed: `props`, `emits`, `name`, and `inheritAttrs`.\n\nTIP\nSince 3.3 you can directly use `defineOptions` in `<script setup>` to set the component name or `inheritAttrs` property.\n\nIf you intend to exclusively use Composition API (along with the options listed above), you can shave a few kbs off your production bundle via a compile-time flag that drops Options API related code from Vue. Note this also affects Vue components in your dependencies.\n\n### Can I use both APIs in the same component?\nYes. You can use Composition API via the `setup()` option in an Options API component.\n\nHowever, we only recommend doing so if you have an existing Options API codebase that needs to integrate with new features / external libraries written with Composition API.\n\n### Will Options API be deprecated?\nNo, we do not have any plan to do so. Options API is an integral part of Vue and the reason many developers love it. We also realize that many of the benefits of Composition API only manifest in larger-scale projects, and Options API remains a solid choice for many low-to-medium-complexity scenarios..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I relationship with class api in vue-guide?\n\nAssistant: To relationship with class api in vue-guide, here's what you do:\nWe no longer recommend using Class API with Vue 3, given that Composition API provides great TypeScript integration with additional logic reuse and code organization benefits..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I comparison with react hooks in vue-guide?\n\nAssistant: To comparison with react hooks in vue-guide, here's what you do:\nComposition API provides the same level of logic composition capabilities as React Hooks, but with some important differences.\n\nReact Hooks are invoked repeatedly every time a component updates. This creates a number of caveats that can confuse even seasoned React developers. It also leads to performance optimization issues that can severely affect development experience. Here are some examples:\n\n- Hooks are call-order sensitive and cannot be conditional.\n- Variables declared in a React component can be captured by a hook closure and become \"stale\" if the developer fails to pass in the correct dependencies array. This leads to React developers relying on ESLint rules to ensure correct dependencies are passed. However, the rule is often not smart enough and over-compensates for correctness, which leads to unnecessary invalidation and headaches when edge cases are encountered.\n- Expensive computations require the use of `useMemo`, which again requires manually passing in the correct dependencies array.\n- Event handlers passed to child components cause unnecessary child updates by default, and require explicit `useCallback` as an optimization. This is almost always needed, and again requires a correct dependencies array. Neglecting this leads to over-rendering apps by default and can cause performance issues without realizing it.\n- The stale closure problem, combined with Concurrent features, makes it difficult to reason about when a piece of hooks code is run, and makes working with mutable state that should persist across renders (via `useRef`) cumbersome.\n\nIn comparison, Vue Composition API:\n\n- Invokes `setup()` or `<script setup>` code only once. This makes the code align better with the intuitions of idiomatic JavaScript usage as there are no stale closures to worry about. Composition API calls are also not sensitive to call order and can be conditional.\n- Vue's runtime reactivity system automatically collects reactive dependencies used in computed properties and watchers, so there's no need to manually declare dependencies.\n- No need to manually cache callback functions to avoid unnecessary child updates. In general, Vue's fine-grained reactivity system ensures child components only update when they need to. Manual child-update optimizations are rarely a concern for Vue developers.\n\nWe acknowledge the creativity of React Hooks, and it is a major source of inspiration for Composition API. However, the issues mentioned above do exist in its design and we noticed Vue's reactivity model happens to provide a way around them..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "section_detail", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Composition API FAQ in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Example of a Component Using Composition API**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>\n```\n```\n\nThis snippet shows you how to basic example of a component using composition api, which is an important aspect of composition api faq.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "code_examples", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Composition API FAQ in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSince 3.3 you can directly use `defineOptions` in `<script setup>` to set the component name or `inheritAttrs` property.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/composition-api-faq.html", "title": "Composition API FAQ", "description": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:46:00", "type": "best_practices", "page_metadata": {"twitter:site": "@vuejs", "language": "en-US", "title": "Composition API FAQ | Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "og:title": "Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "theme-color": "#3c8772", "og:type": "website", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1ac23be4-c936-469b-ab70-3f880621eec9", "sourceURL": "https://vuejs.org/guide/extras/composition-api-faq.html", "url": "https://vuejs.org/guide/extras/composition-api-faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Reactivity Transform is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Reactivity Transform in vue-guide.\n\n# Reactivity Transform\n\nRemoved Experimental FeatureHere's a quick rundown of what this is about:\n\n## Removed Experimental Feature\n\nReactivity Transform was an experimental feature, and has been removed in the latest 3.4 release. Please read about the reasoning here.\n\n## Refs vs. Reactive Variables\n\nEver since the introduction of the Composition API, one of the primary unresolved questions is the use of refs vs. reactive objects. It's easy to lose reactivity when destructuring reactive objects, while it can be cumbersome to use `.value` everywhere when using refs. Also, `.value` is easy to miss if not using a type system.\n\n[Vue Reactivity Transform](https://github.com/vuejs/core/tree/main/packages/reactivity-transform) is a compile-time transform that allows us to write code like this:\n\n```vue\n<script setup>\nlet count = $ref(0)\n\nconsole.log(count)\n\nfunction increment() {\n  count++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThe `$ref()` method here is a **compile-time macro**: it is not an actual method that will be called at runtime. Instead, the Vue compiler uses it as a hint to treat the resulting `count` variable as a **reactive variable.**\n\nReactive variables can be accessed and re-assigned just like normal variables, but these operations are compiled into refs with `.value`. For example, the `<script>` part of the above component is compiled into:\n\n```js\nimport { ref } from 'vue'\n\nlet count = ref(0)\n\nconsole.log(count.value)\n\nfunction increment() {\n  count.value++\n}\n```\n\nEvery reactivity API that returns refs will have a `$`-prefixed macro equivalent. These APIs include:\n\n- [`ref`](https://vuejs.org/api/reactivity-core#ref) -> `$ref`\n- [`computed`](https://vuejs.org/api/reactivity-core#computed) -> `$computed`\n- [`shallowRef`](https://vuejs.org/api/reactivity-advanced#shallowref) -> `$shallowRef`\n- [`customRef`](https://vuejs.org/api/reactivity-advanced#customref) -> `$customRef`\n- [`toRef`](https://vuejs.org/api/reactivity-utilities#toref) -> `$toRef`\n\nThese macros are globally available and do not need to be imported when Reactivity Transform is enabled, but you can optionally import them from `vue/macros` if you want to be more explicit:\n\n```js\nimport { $ref } from 'vue/macros'\n\nlet count = $ref(0)\n```\n\n## Destructuring with `$()`\n\nIt is common for a composition function to return an object of refs, and use destructuring to retrieve these refs. For this purpose, reactivity transform provides the **`$()`** macro:\n\n```js\nimport { useMouse } from '@vueuse/core'\n\nconst { x, y } = $(useMouse())\n\nconsole.log(x, y)\n```\n\nCompiled output:\n\n```js\nimport { toRef } from 'vue'\nimport { useMouse } from '@vueuse/core'\n\nconst __temp = useMouse(),\n  x = toRef(__temp, 'x'),\n  y = toRef(__temp, 'y')\n\nconsole.log(x.value, y.value)\n```\n\nNote that if `x` is already a ref, `toRef(__temp, 'x')` will simply return it as-is and no additional ref will be created. If a destructured value is not a ref (e.g. a function), it will still work - the value will be wrapped in a ref so the rest of the code works as expected.\n\n`$()` destructure works on both reactive objects **and** plain objects containing refs.\n\n## Convert Existing Refs to Reactive Variables with `$()`\n\nIn some cases we may have wrapped functions that also return refs. However, the Vue compiler won't be able to know ahead of time that a function is going to return a ref. In such cases, the `$()` macro can also be used to convert any existing refs into reactive variables:\n\n```js\nfunction myCreateRef() {\n  return ref(0)\n}\n\nlet count = $(myCreateRef())\n```\n\n## Reactive Props Destructure\n\nThere are two pain points with the current `defineProps()` usage in `<script setup>`:\n\n1. Similar to `.value`, you need to always access props as `props.x` in order to retain reactivity. This means you cannot destructure `defineProps` because the resulting destructured variables are not reactive and will not update.\n2. When using the [type-only props declaration](https://vuejs.org/api/sfc-script-setup#type-only-props-emit-declarations), there is no easy way to declare default values for the props. We introduced the `withDefaults()` API for this exact purpose, but it's still clunky to use.\n\nWe can address these issues by applying a compile-time transform when `defineProps` is used with destructuring, similar to what we saw earlier with `$()`:\n\n```html\n<script setup lang=\"ts\">\n  interface Props {\n    msg: string\n    count?: number\n    foo?: string\n  }\n\n  const {\n    msg,\n    // default value just works\n    count = 1,\n    // local aliasing also just works\n    // here we are aliasing `props.foo` to `bar`\n    foo: bar\n  } = defineProps<Props>()\n\n  watchEffect(() => {\n    // will log whenever the props change\n    console.log(msg, count, bar)\n  })\n</script>\n```\n\nThe above will be compiled into the following runtime declaration equivalent:\n\n```js\nexport default {\n  props: {\n    msg: { type: String, required: true },\n    count: { type: Number, default: 1 },\n    foo: String\n  },\n  setup(props) {\n    watchEffect(() => {\n      console.log(props.msg, props.count, props.foo)\n    })\n  }\n}\n```\n\n## Retaining Reactivity Across Function Boundaries\n\nWhile reactive variables relieve us from having to use `.value` everywhere, it creates an issue of \"reactivity loss\" when we pass reactive variables across function boundaries. This can happen in two cases:\n\n### Passing into function as argument\nGiven a function that expects a ref as an argument, e.g.:\n\n```ts\nfunction trackChange(x: Ref<number>) {\n  watch(x, (x) => {\n    console.log('x changed!')\n  })\n}\n\nlet count = $ref(0)\ntrackChange(count) // doesn't work!\n```\n\nThe above case will not work as expected because it compiles to:\n\n```ts\nlet count = ref(0)\ntrackChange(count.value)\n```\n\nHere `count.value` is passed as a number, whereas `trackChange` expects an actual ref. This can be fixed by wrapping `count` with `$$()` before passing it:\n\n```diff\nlet count = $ref(0)\n- trackChange(count)\n+ trackChange($$(count))\n```\n\nThe above compiles to:\n\n```js\nimport { ref } from 'vue'\n\nlet count = ref(0)\ntrackChange(count)\n```\n\nAs we can see, `$$()` is a macro that serves as an **escape hint**: reactive variables inside `$$()` will not get `.value` appended.\n\n### Returning inside function scope\nReactivity can also be lost if reactive variables are used directly in a returned expression:\n\n```ts\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // doesn't work!\n  return {\n    x,\n    y\n  }\n}\n```\n\nThe above return statement compiles to:\n\n```ts\nreturn {\n  x: x.value,\n  y: y.value\n}\n```\n\nIn order to retain reactivity, we should be returning the actual refs, not the current value at return time.\n\nAgain, we can use `$$()` to fix this. In this case, `$$()` can be used directly on the returned object - any reference to reactive variables inside the `$$()` call will retain the reference to their underlying refs:\n\n```ts\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // fixed\n  return $$({\n    x,\n    y\n  })\n}\n```\n\n## Using `$$()` on destructured props\n\n`$$()` works on destructured props since they are reactive variables as well. The compiler will convert it with `toRef` for efficiency:\n\n```ts\nconst { count } = defineProps<{ count: number }>()\n\npassAsRef($$(count))\n```\n\ncompiles to:\n\n```js\nsetup(props) {\n  const __props_count = toRef(props, 'count')\n  passAsRef(__props_count)\n}\n```\n\n## TypeScript Integration\n\nVue provides typings for these macros (available globally) and all types will work as expected. There are no incompatibilities with standard TypeScript semantics, so the syntax will work with all existing tooling.\n\nThis also means the macros can work in any files where valid JS / TS are allowed - not just inside Vue SFCs.\n\nSince the macros are available globally, their types need to be explicitly referenced (e.g. in a `env.d.ts` file):\n\n```ts\n/// <reference types=\"vue/macros-global\" />\n```\n\nWhen explicitly importing the macros from `vue/macros`, the type will work without declaring the globals.\n\n## Explicit Opt-in\n\nNo longer supported in core\n\nThe following only applies up to Vue version 3.3 and below. Support has been removed in Vue core 3.4 and above, and `@vitejs/plugin-vue` 5.0 and above. If you intend to continue using the transform, please migrate to Vue Macros instead.\n\n## Vite\n\n- Requires `@vitejs/plugin-vue@>=2.0.0`\n- Applies to SFCs and js(x)/ts(x) files. A fast usage check is performed on files before applying the transform so there should be no performance cost for files not using the macros.\n- Note `reactivityTransform` is now a plugin root-level option instead of nested as `script.refSugar`, since it affects not just SFCs.\n\n```js\n// vite.config.js\nexport default {\n  plugins: [\n    vue({\n      reactivityTransform: true\n    })\n  ]\n}\n```\n\n## `vue-cli`\n\n- Currently only affects SFCs\n- Requires `vue-loader@>=17.0.0`\n\n```js\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => {\n        return {\n          ...options,\n          reactivityTransform: true\n        }\n      })\n  }\n}\n```\n\n## Plain `webpack` + `vue-loader`\n\n- Currently only affects SFCs\n- Requires `vue-loader@>=17.0.0`\n\n```js\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          reactivityTransform: true\n        }\n      }\n    ]\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "overview", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I removed experimental feature in vue-guide?\n\nAssistant: To removed experimental feature in vue-guide, here's what you do:\nReactivity Transform was an experimental feature, and has been removed in the latest 3.4 release. Please read about the reasoning here..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I refs vs. reactive variables in vue-guide?\n\nAssistant: To refs vs. reactive variables in vue-guide, here's what you do:\nEver since the introduction of the Composition API, one of the primary unresolved questions is the use of refs vs. reactive objects. It's easy to lose reactivity when destructuring reactive objects, while it can be cumbersome to use `.value` everywhere when using refs. Also, `.value` is easy to miss if not using a type system.\n\n[Vue Reactivity Transform](https://github.com/vuejs/core/tree/main/packages/reactivity-transform) is a compile-time transform that allows us to write code like this:\n\n```vue\n<script setup>\nlet count = $ref(0)\n\nconsole.log(count)\n\nfunction increment() {\n  count++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThe `$ref()` method here is a **compile-time macro**: it is not an actual method that will be called at runtime. Instead, the Vue compiler uses it as a hint to treat the resulting `count` variable as a **reactive variable.**\n\nReactive variables can be accessed and re-assigned just like normal variables, but these operations are compiled into refs with `.value`. For example, the `<script>` part of the above component is compiled into:\n\n```js\nimport { ref } from 'vue'\n\nlet count = ref(0)\n\nconsole.log(count.value)\n\nfunction increment() {\n  count.value++\n}\n```\n\nEvery reactivity API that returns refs will have a `$`-prefixed macro equivalent. These APIs include:\n\n- [`ref`](https://vuejs.org/api/reactivity-core#ref) -> `$ref`\n- [`computed`](https://vuejs.org/api/reactivity-core#computed) -> `$computed`\n- [`shallowRef`](https://vuejs.org/api/reactivity-advanced#shallowref) -> `$shallowRef`\n- [`customRef`](https://vuejs.org/api/reactivity-advanced#customref) -> `$customRef`\n- [`toRef`](https://vuejs.org/api/reactivity-utilities#toref) -> `$toRef`\n\nThese macros are globally available and do not need to be imported when Reactivity Transform is enabled, but you can optionally import them from `vue/macros` if you want to be more explicit:\n\n```js\nimport { $ref } from 'vue/macros'\n\nlet count = $ref(0)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I destructuring with `$()` in vue-guide?\n\nAssistant: To destructuring with `$()` in vue-guide, here's what you do:\nIt is common for a composition function to return an object of refs, and use destructuring to retrieve these refs. For this purpose, reactivity transform provides the **`$()`** macro:\n\n```js\nimport { useMouse } from '@vueuse/core'\n\nconst { x, y } = $(useMouse())\n\nconsole.log(x, y)\n```\n\nCompiled output:\n\n```js\nimport { toRef } from 'vue'\nimport { useMouse } from '@vueuse/core'\n\nconst __temp = useMouse(),\n  x = toRef(__temp, 'x'),\n  y = toRef(__temp, 'y')\n\nconsole.log(x.value, y.value)\n```\n\nNote that if `x` is already a ref, `toRef(__temp, 'x')` will simply return it as-is and no additional ref will be created. If a destructured value is not a ref (e.g. a function), it will still work - the value will be wrapped in a ref so the rest of the code works as expected.\n\n`$()` destructure works on both reactive objects **and** plain objects containing refs..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I convert existing refs to reactive variables with `$()` in vue-guide?\n\nAssistant: To convert existing refs to reactive variables with `$()` in vue-guide, here's what you do:\nIn some cases we may have wrapped functions that also return refs. However, the Vue compiler won't be able to know ahead of time that a function is going to return a ref. In such cases, the `$()` macro can also be used to convert any existing refs into reactive variables:\n\n```js\nfunction myCreateRef() {\n  return ref(0)\n}\n\nlet count = $(myCreateRef())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I reactive props destructure in vue-guide?\n\nAssistant: To reactive props destructure in vue-guide, here's what you do:\nThere are two pain points with the current `defineProps()` usage in `<script setup>`:\n\n1. Similar to `.value`, you need to always access props as `props.x` in order to retain reactivity. This means you cannot destructure `defineProps` because the resulting destructured variables are not reactive and will not update.\n2. When using the [type-only props declaration](https://vuejs.org/api/sfc-script-setup#type-only-props-emit-declarations), there is no easy way to declare default values for the props. We introduced the `withDefaults()` API for this exact purpose, but it's still clunky to use.\n\nWe can address these issues by applying a compile-time transform when `defineProps` is used with destructuring, similar to what we saw earlier with `$()`:\n\n```html\n<script setup lang=\"ts\">\n  interface Props {\n    msg: string\n    count?: number\n    foo?: string\n  }\n\n  const {\n    msg,\n    // default value just works\n    count = 1,\n    // local aliasing also just works\n    // here we are aliasing `props.foo` to `bar`\n    foo: bar\n  } = defineProps<Props>()\n\n  watchEffect(() => {\n    // will log whenever the props change\n    console.log(msg, count, bar)\n  })\n</script>\n```\n\nThe above will be compiled into the following runtime declaration equivalent:\n\n```js\nexport default {\n  props: {\n    msg: { type: String, required: true },\n    count: { type: Number, default: 1 },\n    foo: String\n  },\n  setup(props) {\n    watchEffect(() => {\n      console.log(props.msg, props.count, props.foo)\n    })\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I retaining reactivity across function boundaries in vue-guide?\n\nAssistant: To retaining reactivity across function boundaries in vue-guide, here's what you do:\nWhile reactive variables relieve us from having to use `.value` everywhere, it creates an issue of \"reactivity loss\" when we pass reactive variables across function boundaries. This can happen in two cases:\n\n### Passing into function as argument\nGiven a function that expects a ref as an argument, e.g.:\n\n```ts\nfunction trackChange(x: Ref<number>) {\n  watch(x, (x) => {\n    console.log('x changed!')\n  })\n}\n\nlet count = $ref(0)\ntrackChange(count) // doesn't work!\n```\n\nThe above case will not work as expected because it compiles to:\n\n```ts\nlet count = ref(0)\ntrackChange(count.value)\n```\n\nHere `count.value` is passed as a number, whereas `trackChange` expects an actual ref. This can be fixed by wrapping `count` with `$$()` before passing it:\n\n```diff\nlet count = $ref(0)\n- trackChange(count)\n+ trackChange($$(count))\n```\n\nThe above compiles to:\n\n```js\nimport { ref } from 'vue'\n\nlet count = ref(0)\ntrackChange(count)\n```\n\nAs we can see, `$$()` is a macro that serves as an **escape hint**: reactive variables inside `$$()` will not get `.value` appended.\n\n### Returning inside function scope\nReactivity can also be lost if reactive variables are used directly in a returned expression:\n\n```ts\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // doesn't work!\n  return {\n    x,\n    y\n  }\n}\n```\n\nThe above return statement compiles to:\n\n```ts\nreturn {\n  x: x.value,\n  y: y.value\n}\n```\n\nIn order to retain reactivity, we should be returning the actual refs, not the current value at return time.\n\nAgain, we can use `$$()` to fix this. In this case, `$$()` can be used directly on the returned object - any reference to reactive variables inside the `$$()` call will retain the reference to their underlying refs:\n\n```ts\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // fixed\n  return $$({\n    x,\n    y\n  })\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using `$$()` on destructured props in vue-guide?\n\nAssistant: To using `$$()` on destructured props in vue-guide, here's what you do:\n`$$()` works on destructured props since they are reactive variables as well. The compiler will convert it with `toRef` for efficiency:\n\n```ts\nconst { count } = defineProps<{ count: number }>()\n\npassAsRef($$(count))\n```\n\ncompiles to:\n\n```js\nsetup(props) {\n  const __props_count = toRef(props, 'count')\n  passAsRef(__props_count)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typescript integration in vue-guide?\n\nAssistant: To typescript integration in vue-guide, here's what you do:\nVue provides typings for these macros (available globally) and all types will work as expected. There are no incompatibilities with standard TypeScript semantics, so the syntax will work with all existing tooling.\n\nThis also means the macros can work in any files where valid JS / TS are allowed - not just inside Vue SFCs.\n\nSince the macros are available globally, their types need to be explicitly referenced (e.g. in a `env.d.ts` file):\n\n```ts\n/// <reference types=\"vue/macros-global\" />\n```\n\nWhen explicitly importing the macros from `vue/macros`, the type will work without declaring the globals..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I explicit opt-in in vue-guide?\n\nAssistant: To explicit opt-in in vue-guide, here's what you do:\nNo longer supported in core\n\nThe following only applies up to Vue version 3.3 and below. Support has been removed in Vue core 3.4 and above, and `@vitejs/plugin-vue` 5.0 and above. If you intend to continue using the transform, please migrate to Vue Macros instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I vite in vue-guide?\n\nAssistant: To vite in vue-guide, here's what you do:\n- Requires `@vitejs/plugin-vue@>=2.0.0`\n- Applies to SFCs and js(x)/ts(x) files. A fast usage check is performed on files before applying the transform so there should be no performance cost for files not using the macros.\n- Note `reactivityTransform` is now a plugin root-level option instead of nested as `script.refSugar`, since it affects not just SFCs.\n\n```js\n// vite.config.js\nexport default {\n  plugins: [\n    vue({\n      reactivityTransform: true\n    })\n  ]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `vue-cli` in vue-guide?\n\nAssistant: To `vue-cli` in vue-guide, here's what you do:\n- Currently only affects SFCs\n- Requires `vue-loader@>=17.0.0`\n\n```js\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => {\n        return {\n          ...options,\n          reactivityTransform: true\n        }\n      })\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I plain `webpack` + `vue-loader` in vue-guide?\n\nAssistant: To plain `webpack` + `vue-loader` in vue-guide, here's what you do:\n- Currently only affects SFCs\n- Requires `vue-loader@>=17.0.0`\n\n```js\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          reactivityTransform: true\n        }\n      }\n    ]\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "section_detail", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Reactivity Transform in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Reactivity Transform Example**:\n\n```yaml\n<script setup>\nlet count = $ref(0)\n\nconsole.log(count)\n\nfunction increment() {\n  count++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\nThis snippet shows you how to reactivity transform example, which is an important aspect of reactivity transform.\n\n**Compiled Output of Reactivity Transform Example**:\n\n```yaml\nimport { ref } from 'vue'\n\nlet count = ref(0)\n\nconsole.log(count.value)\n\nfunction increment() {\n  count.value++\n}\n```\n\nThis snippet shows you how to compiled output of reactivity transform example, which is an important aspect of reactivity transform.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "code_examples", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Reactivity Transform in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `$ref()` for compile-time macros to treat variables as reactive variables.\n\nUse `$$()` to retain reactivity when passing reactive variables across function boundaries.\n\nDestructure props using `defineProps()` to maintain reactivity.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/reactivity-transform.html", "title": "Reactivity Transform", "description": "Removed Experimental Feature", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 03:46:51", "type": "best_practices", "page_metadata": {"ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:type": "website", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:site": "@vuejs", "twitter:card": "summary", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Reactivity Transform | Vue.js", "scrapeId": "79deec7b-767b-4b19-8768-4b70b896680b", "sourceURL": "https://vuejs.org/guide/extras/reactivity-transform.html", "url": "https://vuejs.org/guide/extras/reactivity-transform.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Render Functions & JSX is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Render Functions & JSX in vue-guide.\n\n# Render Functions & JSX\n\nVue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nVue provides an `h()` function for creating vnodes:\n\n```js\nimport { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)\n```\n\n`h()` is short for **hyperscript** - which means \"JavaScript that produces HTML (hypertext markup language)\". This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could be `createVNode()`, but a shorter name helps when you have to call this function many times in a render function.\n\nThe `h()` function is designed to be very flexible:\n\n```js\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// props modifiers such as `.prop` and `.attr` can be added\n// with `.` and `^` prefixes respectively\nh('div', { '.name': 'some-name', '^width': '100' })\n\n// class and style have the same object / array\n// value support that they have in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThe resulting vnode has the following shape:\n\n```js\nconst vnode = h('div', { id: 'foo' }, [])\n\nvnode.type // 'div'\nvnode.props // { id: 'foo' }\nvnode.children // []\nvnode.key // null\n```\n\nNote\n\nThe full `VNode` interface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed.\n\n## Declaring Render Functions\n\nWhen using templates with Composition API, the return value of the `setup()` hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:\n\n```js\nimport { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}\n```\n\nThe render function is declared inside `setup()` so it naturally has access to the props and any reactive state declared in the same scope.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  setup() {\n    return () => 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nTIP\n\nMake sure to return a function instead of directly returning values! The `setup()` function is called only once per component, while the returned render function will be called multiple times.\n\nWe can declare render functions using the `render` option:\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}\n```\n\nThe `render()` function has access to the component instance via `this`.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  render() {\n    return 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nIf a render function component doesn't need any instance state, they can also be declared directly as a function for brevity:\n\n```js\nfunction Hello() {\n  return 'hello world!'\n}\n```\n\nThat's right, this is a valid Vue component! See [Functional Components](https://vuejs.org/guide/extras/render-function.html#functional-components) for more details on this syntax.\n\n## Vnodes Must Be Unique\n\nAll vnodes in the component tree must be unique. That means the following render function is invalid:\n\n```js\nfunction render() {\n  const p = h('p', 'hi')\n  return h('div', [\n    // Yikes - duplicate vnodes!\n    p,\n    p\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n```js\nfunction render() {\n  return h(\n    'div',\n    Array.from({ length: 20 }).map(() => {\n      return h('p', 'hi')\n    })\n  )\n}\n```\n\n## JSX / TSX\n\n[JSX](https://facebook.github.io/jsx/) is an XML-like extension to JavaScript that allows us to write code like this:\n\n```jsx\nconst vnode = <div>hello</div>\n```\n\nInside JSX expressions, use curly braces to embed dynamic values:\n\n```jsx\nconst vnode = <div id={dynamicId}>hello, {userName}</div>\n```\n\n`create-vue` and Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of [`@vue/babel-plugin-jsx`](https://github.com/vuejs/jsx-next) for details.\n\nAlthough first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note that **Vue JSX transform is different from React's JSX transform**, so you can't use React's JSX transform in Vue applications. Some notable differences from React JSX include:\n\n- You can use HTML attributes such as `class` and `for` as props - no need to use `className` or `htmlFor`.\n- Passing children to components (i.e. slots) [works differently](https://vuejs.org/guide/extras/render-function.html#passing-slots).\n\nVue's type definition also provides type inference for TSX usage. When using TSX, make sure to specify `\"jsx\": \"preserve\"` in `tsconfig.json` so that TypeScript leaves the JSX syntax intact for Vue JSX transform to process.\n\n## JSX Type Inference\n\nSimilar to the transform, Vue's JSX also needs different type definitions.\n\nStarting in Vue 3.4, Vue no longer implicitly registers the global `JSX` namespace. To instruct TypeScript to use Vue's JSX type definitions, make sure to include the following in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"vue\"\n    // ...\n  }\n}\n```\n\nYou can also opt-in per file by adding a `/* @jsxImportSource vue */` comment at the top of the file.\n\nIf there is code that depends on the presence of the global `JSX` namespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencing `vue/jsx` in your project, which registers the global `JSX` namespace.\n\n## Render Function Recipes\n\nBelow we will provide some common recipes for implementing template features as their equivalent render functions / JSX.\n\n## `v-if`\n\nTemplate:\n\n```template\n<div>\n  <div v-if=\"ok\">yes</div>\n  <span v-else>no</span>\n</div>\n```\n\nEquivalent render function / JSX:\n\n```js\nh('div', [ok.value ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{ok.value ? <div>yes</div> : <span>no</span>}</div>\n```\n\n```js\nh('div', [this.ok ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{this.ok ? <div>yes</div> : <span>no</span>}</div>\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "overview", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic usage in vue-guide?\n\nAssistant: To basic usage in vue-guide, here's what you do:\nVue provides an `h()` function for creating vnodes:\n\n```js\nimport { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)\n```\n\n`h()` is short for **hyperscript** - which means \"JavaScript that produces HTML (hypertext markup language)\". This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could be `createVNode()`, but a shorter name helps when you have to call this function many times in a render function.\n\nThe `h()` function is designed to be very flexible:\n\n```js\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// props modifiers such as `.prop` and `.attr` can be added\n// with `.` and `^` prefixes respectively\nh('div', { '.name': 'some-name', '^width': '100' })\n\n// class and style have the same object / array\n// value support that they have in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])\n```\n\nThe resulting vnode has the following shape:\n\n```js\nconst vnode = h('div', { id: 'foo' }, [])\n\nvnode.type // 'div'\nvnode.props // { id: 'foo' }\nvnode.children // []\nvnode.key // null\n```\n\nNote\n\nThe full `VNode` interface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I declaring render functions in vue-guide?\n\nAssistant: To declaring render functions in vue-guide, here's what you do:\nWhen using templates with Composition API, the return value of the `setup()` hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:\n\n```js\nimport { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}\n```\n\nThe render function is declared inside `setup()` so it naturally has access to the props and any reactive state declared in the same scope.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  setup() {\n    return () => 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nTIP\n\nMake sure to return a function instead of directly returning values! The `setup()` function is called only once per component, while the returned render function will be called multiple times.\n\nWe can declare render functions using the `render` option:\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}\n```\n\nThe `render()` function has access to the component instance via `this`.\n\nIn addition to returning a single vnode, you can also return strings or arrays:\n\n```js\nexport default {\n  render() {\n    return 'hello world!'\n  }\n}\n```\n\n```js\nimport { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}\n```\n\nIf a render function component doesn't need any instance state, they can also be declared directly as a function for brevity:\n\n```js\nfunction Hello() {\n  return 'hello world!'\n}\n```\n\nThat's right, this is a valid Vue component! See [Functional Components](https://vuejs.org/guide/extras/render-function.html#functional-components) for more details on this syntax..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I vnodes must be unique in vue-guide?\n\nAssistant: To vnodes must be unique in vue-guide, here's what you do:\nAll vnodes in the component tree must be unique. That means the following render function is invalid:\n\n```js\nfunction render() {\n  const p = h('p', 'hi')\n  return h('div', [\n    // Yikes - duplicate vnodes!\n    p,\n    p\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n```js\nfunction render() {\n  return h(\n    'div',\n    Array.from({ length: 20 }).map(() => {\n      return h('p', 'hi')\n    })\n  )\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I jsx / tsx in vue-guide?\n\nAssistant: To jsx / tsx in vue-guide, here's what you do:\n[JSX](https://facebook.github.io/jsx/) is an XML-like extension to JavaScript that allows us to write code like this:\n\n```jsx\nconst vnode = <div>hello</div>\n```\n\nInside JSX expressions, use curly braces to embed dynamic values:\n\n```jsx\nconst vnode = <div id={dynamicId}>hello, {userName}</div>\n```\n\n`create-vue` and Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of [`@vue/babel-plugin-jsx`](https://github.com/vuejs/jsx-next) for details.\n\nAlthough first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note that **Vue JSX transform is different from React's JSX transform**, so you can't use React's JSX transform in Vue applications. Some notable differences from React JSX include:\n\n- You can use HTML attributes such as `class` and `for` as props - no need to use `className` or `htmlFor`.\n- Passing children to components (i.e. slots) [works differently](https://vuejs.org/guide/extras/render-function.html#passing-slots).\n\nVue's type definition also provides type inference for TSX usage. When using TSX, make sure to specify `\"jsx\": \"preserve\"` in `tsconfig.json` so that TypeScript leaves the JSX syntax intact for Vue JSX transform to process..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I jsx type inference in vue-guide?\n\nAssistant: To jsx type inference in vue-guide, here's what you do:\nSimilar to the transform, Vue's JSX also needs different type definitions.\n\nStarting in Vue 3.4, Vue no longer implicitly registers the global `JSX` namespace. To instruct TypeScript to use Vue's JSX type definitions, make sure to include the following in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"vue\"\n    // ...\n  }\n}\n```\n\nYou can also opt-in per file by adding a `/* @jsxImportSource vue */` comment at the top of the file.\n\nIf there is code that depends on the presence of the global `JSX` namespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencing `vue/jsx` in your project, which registers the global `JSX` namespace..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I render function recipes in vue-guide?\n\nAssistant: To render function recipes in vue-guide, here's what you do:\nBelow we will provide some common recipes for implementing template features as their equivalent render functions / JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I `v-if` in vue-guide?\n\nAssistant: To `v-if` in vue-guide, here's what you do:\nTemplate:\n\n```template\n<div>\n  <div v-if=\"ok\">yes</div>\n  <span v-else>no</span>\n</div>\n```\n\nEquivalent render function / JSX:\n\n```js\nh('div', [ok.value ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{ok.value ? <div>yes</div> : <span>no</span>}</div>\n```\n\n```js\nh('div', [this.ok ? h('div', 'yes') : h('span', 'no')])\n```\n\n```jsx\n<div>{this.ok ? <div>yes</div> : <span>no</span>}</div>\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/render-function.html", "title": "Render Functions & JSX", "description": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use the render function.", "has_code_examples": false, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:47:27", "type": "section_detail", "page_metadata": {"theme-color": "#3c8772", "ogImage": "https://vuejs.org/images/logo.png", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "twitter:card": "summary", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "og:title": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "generator": "VitePress v1.6.3", "og:image": "https://vuejs.org/images/logo.png", "title": "Render Functions & JSX | Vue.js", "ogTitle": "Vue.js", "og:type": "website", "favicon": "https://vuejs.org/logo.svg", "scrapeId": "41d3cdd0-696c-4d78-9566-eb9b938b0dc5", "sourceURL": "https://vuejs.org/guide/extras/render-function.html", "url": "https://vuejs.org/guide/extras/render-function.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Composables is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Composables in vue-guide.\n\n# Composables\n\nThis page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.Here's a quick rundown of what this is about:\n\n## What is a \"Composable\"?\n\nIn the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic.\n\nWhen building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulates stateless logic: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for example lodash and date-fns, which you may have heard of.\n\nBy contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database.\n\n## Mouse Tracker Example\n\nIf we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:\n\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nBut what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:\n\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}\n```\n\nAnd this is how it can be used in components:\n\n```vue\n<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nMouse position is at: 0, 0\n\nAs we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range of Composition API functions in composables. The same `useMouse()` functionality can now be used in any component.\n\n## Async State Example\n\nThe `useMouse()` composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\nIt would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:\n\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n\nNow in our component we can just do:\n\n```vue\n<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>\n```\n\n## Conventions and Best Practices\n\n### Naming\nIt is a convention to name composable functions with camelCase names that start with \"use\".\n\n### Input Arguments\nA composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. The `toValue()` utility function will come in handy for this purpose:\n\n```js\nimport { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  const value = toValue(maybeRefOrGetter)\n}\n```\n\n### Return Values\nThe recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:\n\n```js\nconst { x, y } = useMouse()\n```\n\n### Side Effects\nIt is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:\n- If you are working on an application that uses Server-Side Rendering (SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g. `onMounted()`. \n- Remember to clean up side effects in `onUnmounted()`. \n\n### Usage Restrictions\nComposables should only be called in `<script setup>` or the `setup()` hook. They should also be called synchronously in these contexts.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is a \"composable\"? in vue-guide?\n\nAssistant: To what is a \"composable\"? in vue-guide, here's what you do:\nIn the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic.\n\nWhen building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulates stateless logic: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for example lodash and date-fns, which you may have heard of.\n\nBy contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mouse tracker example in vue-guide?\n\nAssistant: To mouse tracker example in vue-guide, here's what you do:\nIf we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:\n\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nBut what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:\n\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}\n```\n\nAnd this is how it can be used in components:\n\n```vue\n<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nMouse position is at: 0, 0\n\nAs we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range of Composition API functions in composables. The same `useMouse()` functionality can now be used in any component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I async state example in vue-guide?\n\nAssistant: To async state example in vue-guide, here's what you do:\nThe `useMouse()` composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\nIt would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:\n\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n\nNow in our component we can just do:\n\n```vue\n<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I conventions and best practices in vue-guide?\n\nAssistant: To conventions and best practices in vue-guide, here's what you do:\n### Naming\nIt is a convention to name composable functions with camelCase names that start with \"use\".\n\n### Input Arguments\nA composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. The `toValue()` utility function will come in handy for this purpose:\n\n```js\nimport { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  const value = toValue(maybeRefOrGetter)\n}\n```\n\n### Return Values\nThe recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:\n\n```js\nconst { x, y } = useMouse()\n```\n\n### Side Effects\nIt is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:\n- If you are working on an application that uses Server-Side Rendering (SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g. `onMounted()`. \n- Remember to clean up side effects in `onUnmounted()`. \n\n### Usage Restrictions\nComposables should only be called in `<script setup>` or the `setup()` hook. They should also be called synchronously in these contexts..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Composables in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Mouse Tracker Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n```\n\nThis snippet shows you how to mouse tracker example, which is an important aspect of composables.\n\n**Composable Function Example**:\n\n```yaml\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  return { x, y }\n}\n```\n```\n\nThis snippet shows you how to composable function example, which is an important aspect of composables.\n\n**Async Fetch Example**:\n\n```yaml\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n```\n\nThis snippet shows you how to async fetch example, which is an important aspect of composables.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Composables in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEach component instance calling `useMouse()` will create its own copies of `x` and `y` state so they won't interfere with one another. If you want to manage shared state between components, read the State Management chapter.\n\n<script setup> is the only place where you can call composables after using await. The compiler automatically restores the active instance context for you after the async operation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables.html", "title": "Composables", "description": "This page covers the concept of composables in Vue, explaining how to create and use them for reusability of stateful logic in applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:56", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "ogTitle": "Vue.js", "og:type": "website", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "description": "Vue.js - The Progressive JavaScript Framework", "title": "Composables | Vue.js", "twitter:site": "@vuejs", "favicon": "https://vuejs.org/logo.svg", "language": "en-US", "scrapeId": "875e745c-9a37-487d-a55d-ed2608e253d9", "sourceURL": "https://vuejs.org/guide/reusability/composables.html", "url": "https://vuejs.org/guide/reusability/composables.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Composables is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Composables in vue-guide.\n\n# Composables\n\nThis page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.Here's a quick rundown of what this is about:\n\n## What is a \"Composable\"?\n\nIn the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic.\n\nWhen building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulates stateless logic: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for example lodash and date-fns, which you may have heard of.\n\nBy contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database.\n\n## Mouse Tracker Example\n\nIf we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:\n\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nBut what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:\n\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}\n```\n\nAnd this is how it can be used in components:\n\n```vue\n<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nMouse position is at: 0, 0\n\nAs we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range of Composition API functions in composables. The same `useMouse()` functionality can now be used in any component.\n\n## Async State Example\n\nThe `useMouse()` composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\nIt would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:\n\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n\nNow in our component we can just do:\n\n```vue\n<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>\n```\n\n## Conventions and Best Practices\n\n### Naming\nIt is a convention to name composable functions with camelCase names that start with \"use\".\n\n### Input Arguments\nA composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. The `toValue()` utility function will come in handy for this purpose:\n\n```js\nimport { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  const value = toValue(maybeRefOrGetter)\n}\n```\n\n### Return Values\nThe recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:\n\n```js\nconst { x, y } = useMouse()\n```\n\n### Side Effects\nIt is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:\n- If you are working on an application that uses Server-Side Rendering (SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g. `onMounted()`. \n- Remember to clean up side effects in `onUnmounted()`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "overview", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I what is a \"composable\"? in vue-guide?\n\nAssistant: To what is a \"composable\"? in vue-guide, here's what you do:\nIn the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic.\n\nWhen building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulates stateless logic: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for example lodash and date-fns, which you may have heard of.\n\nBy contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "section_detail", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I mouse tracker example in vue-guide?\n\nAssistant: To mouse tracker example in vue-guide, here's what you do:\nIf we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:\n\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nBut what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:\n\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}\n```\n\nAnd this is how it can be used in components:\n\n```vue\n<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nMouse position is at: 0, 0\n\nAs we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range of Composition API functions in composables. The same `useMouse()` functionality can now be used in any component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "section_detail", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I async state example in vue-guide?\n\nAssistant: To async state example in vue-guide, here's what you do:\nThe `useMouse()` composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\nIt would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:\n\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n\nNow in our component we can just do:\n\n```vue\n<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "section_detail", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I conventions and best practices in vue-guide?\n\nAssistant: To conventions and best practices in vue-guide, here's what you do:\n### Naming\nIt is a convention to name composable functions with camelCase names that start with \"use\".\n\n### Input Arguments\nA composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. The `toValue()` utility function will come in handy for this purpose:\n\n```js\nimport { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  const value = toValue(maybeRefOrGetter)\n}\n```\n\n### Return Values\nThe recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:\n\n```js\nconst { x, y } = useMouse()\n```\n\n### Side Effects\nIt is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:\n- If you are working on an application that uses Server-Side Rendering (SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g. `onMounted()`. \n- Remember to clean up side effects in `onUnmounted()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "section_detail", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Composables in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Mouse Tracker Example**:\n\n```yaml\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n```\n\nThis snippet shows you how to mouse tracker example, which is an important aspect of composables.\n\n**Composable Function Example**:\n\n```yaml\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  return { x, y }\n}\n```\n```\n\nThis snippet shows you how to composable function example, which is an important aspect of composables.\n\n**Async Fetch Example**:\n\n```yaml\n```js\n// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}\n```\n```\n\nThis snippet shows you how to async fetch example, which is an important aspect of composables.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "code_examples", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Composables in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEach component instance calling `useMouse()` will create its own copies of `x` and `y` state so they won't interfere with one another. If you want to manage shared state between components, read the State Management chapter.\n\n<script setup> is the only place where you can call composables after using await. The compiler automatically restores the active instance context for you after the async operation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/reusability/composables", "title": "Composables", "description": "This page covers the concept of composables in Vue applications, explaining their purpose, usage, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:03", "type": "best_practices", "page_metadata": {"title": "Composables | Vue.js", "og:type": "website", "og:title": "Vue.js", "viewport": "width=device-width,initial-scale=1", "language": "en-US", "ogTitle": "Vue.js", "generator": "VitePress v1.6.3", "ogImage": "https://vuejs.org/images/logo.png", "og:image": "https://vuejs.org/images/logo.png", "twitter:site": "@vuejs", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "ogUrl": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "favicon": "https://vuejs.org/logo.svg", "theme-color": "#3c8772", "og:url": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "scrapeId": "74efcc3e-61f8-49f2-a9ee-97d375a34d73", "sourceURL": "https://vuejs.org/guide/reusability/composables", "url": "https://vuejs.org/guide/reusability/composables", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Vue and Web Components is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Vue and Web Components in vue-guide.\n\n# Vue and Web Components\n\nWeb Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.Here's a quick rundown of what this is about:\n\n## Using Custom Elements in Vue\n\nVue scores a perfect 100% in the Custom Elements Everywhere tests. Consuming custom elements inside a Vue application largely works the same as using native HTML elements, with a few things to keep in mind.\n\n## Skipping Component Resolution\n\nBy default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify the `compilerOptions.isCustomElement` option. If you are using Vue with a build setup, the option should be passed via build configs since it is a compile-time option.\n\n## Example In-Browser Config\n\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')\n\n## Example Vite Config\n\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}\n\n## Example Vue CLI Config\n\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}\n\n## Passing DOM Properties\n\nSince DOM attributes can only be strings, we need to pass complex data to custom elements as DOM properties. When setting props on a custom element, Vue 3 automatically checks DOM-property presence using the `in` operator and will prefer setting the value as a DOM property if the key is present. This means that, in most cases, you won't need to think about this if the custom element follows the recommended best practices. However, there could be rare cases where the data must be passed as a DOM property, but the custom element does not properly define/reflect the property (causing the `in` check to fail). In this case, you can force a `v-bind` binding to be set as a DOM property using the `.prop` modifier.\n\n## Building Custom Elements with Vue\n\nThe primary benefit of custom elements is that they can be used with any framework, or even without a framework. This makes them ideal for distributing components where the end consumer may not be using the same frontend stack, or when you want to insulate the end application from the implementation details of the components it uses.\n\n## defineCustomElement\n\nVue supports creating custom elements using exactly the same Vue component APIs via the `defineCustomElement` method. The method accepts the same argument as `defineComponent`, but instead returns a custom element constructor that extends `HTMLElement`.\n\n## Lifecycle\n\nA Vue custom element will mount an internal Vue component instance inside its shadow root when the element's `connectedCallback` is called for the first time. When the element's `disconnectedCallback` is invoked, Vue will check whether the element is detached from the document after a microtask tick. If the element is still in the document, it's a move and the component instance will be preserved; If the element is detached from the document, it's a removal and the component instance will be unmounted.\n\n## Props\n\nAll props declared using the `props` option will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate. Attributes are always reflected to corresponding properties. Properties with primitive values ( `string`, `boolean` or `number`) are reflected as attributes. Vue also automatically casts props declared with `Boolean` or `Number` types into the desired type when they are set as attributes (which are always strings).\n\n## Events\n\nEvents emitted via `this.$emit` or setup `emit` are dispatched as native CustomEvents on the custom element. Additional event arguments (payload) will be exposed as an array on the CustomEvent object as its `detail` property.\n\n## Slots\n\nInside the component, slots can be rendered using the `<slot/>` element as usual. However, when consuming the resulting element, it only accepts native slots syntax: Scoped slots are not supported. When passing named slots, use the `slot` attribute instead of the `v-slot` directive.\n\n## Provide / Inject\n\nThe Provide / Inject API and its Composition API equivalent also work between Vue-defined custom elements. However, note that this works only between custom elements. i.e. a Vue-defined custom element won't be able to inject properties provided by a non-custom-element Vue component.\n\n## App Level Config\n\nYou can configure the app instance of a Vue custom element using the `configureApp` option.\n\n## SFC as Custom Element\n\n`defineCustomElement` also works with Vue Single-File Components (SFCs). However, with the default tooling setup, the `<style>` inside the SFCs will still be extracted and merged into a single CSS file during production build. When using an SFC as a custom element, it is often desirable to inject the `<style>` tags into the custom element's shadow root instead.\n\n## Tips for a Vue Custom Elements Library\n\nWhen building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used. This means it is not ideal to use Vue if you are shipping a single custom element - you may want to use vanilla JavaScript, petite-vue, or frameworks that specialize in small runtime size. However, the base size is more than justifiable if you are shipping a collection of custom elements with complex logic, as Vue will allow each component to be authored with much less code. The more elements you are shipping together, the better the trade-off.\n\n## Vue-based Web Components and TypeScript\n\nWhen writing Vue SFC templates, you may want to type check your Vue components, including those that are defined as custom elements.\n\n## Non-Vue Web Components and TypeScript\n\nHere is the recommended way to enable type checking in SFC templates of Custom Elements that are not built with Vue.\n\n## Web Components vs. Vue Components\n\nSome developers believe that framework-proprietary component models should be avoided, and that exclusively using Custom Elements makes an application \"future-proof\". Here we will try to explain why we believe that this is an overly simplistic take on the problem.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "overview", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using custom elements in vue in vue-guide?\n\nAssistant: To using custom elements in vue in vue-guide, here's what you do:\nVue scores a perfect 100% in the Custom Elements Everywhere tests. Consuming custom elements inside a Vue application largely works the same as using native HTML elements, with a few things to keep in mind..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I skipping component resolution in vue-guide?\n\nAssistant: To skipping component resolution in vue-guide, here's what you do:\nBy default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify the `compilerOptions.isCustomElement` option. If you are using Vue with a build setup, the option should be passed via build configs since it is a compile-time option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example in-browser config in vue-guide?\n\nAssistant: To example in-browser config in vue-guide, here's what you do:\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-').\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example vite config in vue-guide?\n\nAssistant: To example vite config in vue-guide, here's what you do:\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I example vue cli config in vue-guide?\n\nAssistant: To example vue cli config in vue-guide, here's what you do:\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing dom properties in vue-guide?\n\nAssistant: To passing dom properties in vue-guide, here's what you do:\nSince DOM attributes can only be strings, we need to pass complex data to custom elements as DOM properties. When setting props on a custom element, Vue 3 automatically checks DOM-property presence using the `in` operator and will prefer setting the value as a DOM property if the key is present. This means that, in most cases, you won't need to think about this if the custom element follows the recommended best practices. However, there could be rare cases where the data must be passed as a DOM property, but the custom element does not properly define/reflect the property (causing the `in` check to fail). In this case, you can force a `v-bind` binding to be set as a DOM property using the `.prop` modifier..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I building custom elements with vue in vue-guide?\n\nAssistant: To building custom elements with vue in vue-guide, here's what you do:\nThe primary benefit of custom elements is that they can be used with any framework, or even without a framework. This makes them ideal for distributing components where the end consumer may not be using the same frontend stack, or when you want to insulate the end application from the implementation details of the components it uses..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I definecustomelement in vue-guide?\n\nAssistant: To definecustomelement in vue-guide, here's what you do:\nVue supports creating custom elements using exactly the same Vue component APIs via the `defineCustomElement` method. The method accepts the same argument as `defineComponent`, but instead returns a custom element constructor that extends `HTMLElement`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I lifecycle in vue-guide?\n\nAssistant: To lifecycle in vue-guide, here's what you do:\nA Vue custom element will mount an internal Vue component instance inside its shadow root when the element's `connectedCallback` is called for the first time. When the element's `disconnectedCallback` is invoked, Vue will check whether the element is detached from the document after a microtask tick. If the element is still in the document, it's a move and the component instance will be preserved; If the element is detached from the document, it's a removal and the component instance will be unmounted..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I props in vue-guide?\n\nAssistant: To props in vue-guide, here's what you do:\nAll props declared using the `props` option will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate. Attributes are always reflected to corresponding properties. Properties with primitive values ( `string`, `boolean` or `number`) are reflected as attributes. Vue also automatically casts props declared with `Boolean` or `Number` types into the desired type when they are set as attributes (which are always strings)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I events in vue-guide?\n\nAssistant: To events in vue-guide, here's what you do:\nEvents emitted via `this.$emit` or setup `emit` are dispatched as native CustomEvents on the custom element. Additional event arguments (payload) will be exposed as an array on the CustomEvent object as its `detail` property..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I slots in vue-guide?\n\nAssistant: To slots in vue-guide, here's what you do:\nInside the component, slots can be rendered using the `<slot/>` element as usual. However, when consuming the resulting element, it only accepts native slots syntax: Scoped slots are not supported. When passing named slots, use the `slot` attribute instead of the `v-slot` directive..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I provide / inject in vue-guide?\n\nAssistant: To provide / inject in vue-guide, here's what you do:\nThe Provide / Inject API and its Composition API equivalent also work between Vue-defined custom elements. However, note that this works only between custom elements. i.e. a Vue-defined custom element won't be able to inject properties provided by a non-custom-element Vue component..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I app level config in vue-guide?\n\nAssistant: To app level config in vue-guide, here's what you do:\nYou can configure the app instance of a Vue custom element using the `configureApp` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I sfc as custom element in vue-guide?\n\nAssistant: To sfc as custom element in vue-guide, here's what you do:\n`defineCustomElement` also works with Vue Single-File Components (SFCs). However, with the default tooling setup, the `<style>` inside the SFCs will still be extracted and merged into a single CSS file during production build. When using an SFC as a custom element, it is often desirable to inject the `<style>` tags into the custom element's shadow root instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I tips for a vue custom elements library in vue-guide?\n\nAssistant: To tips for a vue custom elements library in vue-guide, here's what you do:\nWhen building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used. This means it is not ideal to use Vue if you are shipping a single custom element - you may want to use vanilla JavaScript, petite-vue, or frameworks that specialize in small runtime size. However, the base size is more than justifiable if you are shipping a collection of custom elements with complex logic, as Vue will allow each component to be authored with much less code. The more elements you are shipping together, the better the trade-off..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I vue-based web components and typescript in vue-guide?\n\nAssistant: To vue-based web components and typescript in vue-guide, here's what you do:\nWhen writing Vue SFC templates, you may want to type check your Vue components, including those that are defined as custom elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I non-vue web components and typescript in vue-guide?\n\nAssistant: To non-vue web components and typescript in vue-guide, here's what you do:\nHere is the recommended way to enable type checking in SFC templates of Custom Elements that are not built with Vue..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I web components vs. vue components in vue-guide?\n\nAssistant: To web components vs. vue components in vue-guide, here's what you do:\nSome developers believe that framework-proprietary component models should be avoided, and that exclusively using Custom Elements makes an application \"future-proof\". Here we will try to explain why we believe that this is an overly simplistic take on the problem..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "section_detail", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Vue and Web Components in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example In-Browser Config**:\n\n```yaml\n// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')\n```\n\nThis snippet shows you how to example in-browser config, which is an important aspect of vue and web components.\n\n**Example Vite Config**:\n\n```yaml\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}\n```\n\nThis snippet shows you how to example vite config, which is an important aspect of vue and web components.\n\n**Example Vue CLI Config**:\n\n```yaml\n// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}\n```\n\nThis snippet shows you how to example vue cli config, which is an important aspect of vue and web components.\n\n**Passing DOM Properties**:\n\n```yaml\n<my-element :user.prop=\"{ name: 'jack' }\"></my-element>\n\n<!-- shorthand equivalent -->\n<my-element .user=\"{ name: 'jack' }\"></my-element>\n```\n\nThis snippet shows you how to passing dom properties, which is an important aspect of vue and web components.\n\n**defineCustomElement**:\n\n```yaml\nimport { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  // normal Vue component options here\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement only: CSS to be injected into shadow root\n  styles: [`/* inlined css */`]\n})\n\n// Register the custom element.\n// After registration, all `<my-vue-element>` tags\n// on the page will be upgraded.\ncustomElements.define('my-vue-element', MyVueElement)\n\n// You can also programmatically instantiate the element:\n// (can only be done after registration)\ndocument.body.appendChild(\n  new MyVueElement({\n    // initial props (optional)\n  })\n)\n```\n\nThis snippet shows you how to definecustomelement, which is an important aspect of vue and web components.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "code_examples", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Vue and Web Components in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is recommended to export the individual element constructors to give your users the flexibility to import them on-demand and register them with desired tag names.\n\nYou can choose to externalize Vue from the built bundle so that the elements will be using the same copy of Vue from the host application.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/extras/web-components", "title": "Vue and Web Components", "description": "Web Components is an umbrella term for a set of web native APIs that allows developers to create reusable custom elements. We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-03-01 04:02:48", "type": "best_practices", "page_metadata": {"og:type": "website", "theme-color": "#3c8772", "ogTitle": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:card": "summary", "twitter:site": "@vuejs", "ogUrl": "https://vuejs.org/", "og:title": "Vue.js", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "title": "Vue and Web Components | Vue.js", "og:url": "https://vuejs.org/", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42d32a24-3927-4dd4-a4dc-e2730c283465", "sourceURL": "https://vuejs.org/guide/extras/web-components", "url": "https://vuejs.org/guide/extras/web-components", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Testing is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Testing in vue-guide.\n\n# Testing\n\nThis page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.Here's a quick rundown of what this is about:\n\n## Why Test?\n\nAutomated tests help you and your team build complex Vue applications quickly and confidently by preventing regressions and encouraging you to break apart your application into testable functions, modules, classes, and components. As with any application, your new Vue app can break in many ways, and it's important that you can catch these issues and fix them before releasing. In this guide, we'll cover basic terminology and provide our recommendations on which tools to choose for your Vue 3 application. There is one Vue-specific section covering composables.\n\n## When to Test\n\nStart testing early! We recommend you begin writing tests as soon as you can. The longer you wait to add tests to your application, the more dependencies your application will have, and the harder it will be to start.\n\n## Testing Types\n\nWhen designing your Vue application's testing strategy, you should leverage the following testing types:\n\n- **Unit**: Checks that inputs to a given function, class, or composable are producing the expected output or side effects.\n- **Component**: Checks that your component mounts, renders, can be interacted with, and behaves as expected. These tests import more code than unit tests, are more complex, and require more time to execute.\n- **End-to-end**: Checks features that span multiple pages and makes real network requests against your production-built Vue application. These tests often involve standing up a database or other backend.\n\nEach testing type plays a role in your application's testing strategy, and each will protect you against different types of issues.\n\n## Overview\n\nWe will briefly discuss what each of these are, how they can be implemented for Vue applications, and provide some general recommendations.\n\n## Unit Testing\n\nUnit tests are written to verify that small, isolated units of code are working as expected. A unit test usually covers a single function, class, composable, or module. Unit tests focus on logical correctness and only concern themselves with a small portion of the application's overall functionality. They may mock large parts of your application's environment (e.g. initial state, complex classes, 3rd party modules, and network requests).\n\nIn general, unit tests will catch issues with a function's business logic and logical correctness.\n\n## Composables\n\nOne category of functions specific to Vue applications is Composables, which may require special handling during tests.\n\n## Unit Testing Components\n\nA component can be tested in two ways:\n\n1. Whitebox: Unit Testing\n\nTests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused on **isolating** the component under test.\n\n2. Blackbox: Component Testing\n\nTests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system.\n\n## Recommendation\n\n- [Vitest](https://vitest.dev/)\n\nSince the official setup created by `create-vue` is based on [Vite](https://vitejs.dev/), we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite. [Vitest](https://vitest.dev/) is a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members.\n\n## Other Options\n\n- [Jest](https://jestjs.io/) is a popular unit testing framework. However, we only recommend Jest if you have an existing Jest test suite that needs to be migrated over to a Vite-based project, as Vitest offers a more seamless integration and better performance.\n\n## Component Testing\n\nIn Vue applications, components are the main building blocks of the UI. Components are therefore the natural unit of isolation when it comes to validating your application's behavior. From a granularity perspective, component testing sits somewhere above unit testing and can be considered a form of integration testing.\n\n## E2E Testing\n\nWhile unit tests provide developers with some degree of confidence, unit and component tests are limited in their abilities to provide holistic coverage of an application when deployed to production. As a result, end-to-end (E2E) tests provide coverage on what is arguably the most important aspect of an application: what happens when users actually use your applications.\n\n## Choosing an E2E Testing Solution\n\nWhile end-to-end (E2E) testing on the web has gained a negative reputation for unreliable (flaky) tests and slowing down development processes, modern E2E tools have made strides forward to create more reliable, interactive, and useful tests.\n\n## Recommendation\n\n- [Playwright](https://playwright.dev/) is a great E2E testing solution that supports Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.\n\n## Other Options\n\n- [Nightwatch](https://nightwatchjs.org/) is an E2E testing solution based on [Selenium WebDriver](https://www.npmjs.com/package/selenium-webdriver). This gives it the widest browser support range, including native mobile testing.\n\n## Recipes\n\n### Adding Vitest to a Project\nIn a Vite-based Vue project, run:\n\n```sh\n> npm install -D vitest happy-dom @testing-library/vue\n```\n\nNext, update the Vite configuration to add the `test` option block:\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})\n```\n\nTIP\nIf you use TypeScript, add `vitest/globals` to the `types` field in your `tsconfig.json`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "overview", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why test? in vue-guide?\n\nAssistant: To why test? in vue-guide, here's what you do:\nAutomated tests help you and your team build complex Vue applications quickly and confidently by preventing regressions and encouraging you to break apart your application into testable functions, modules, classes, and components. As with any application, your new Vue app can break in many ways, and it's important that you can catch these issues and fix them before releasing. In this guide, we'll cover basic terminology and provide our recommendations on which tools to choose for your Vue 3 application. There is one Vue-specific section covering composables..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I when to test in vue-guide?\n\nAssistant: To when to test in vue-guide, here's what you do:\nStart testing early! We recommend you begin writing tests as soon as you can. The longer you wait to add tests to your application, the more dependencies your application will have, and the harder it will be to start..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I testing types in vue-guide?\n\nAssistant: To testing types in vue-guide, here's what you do:\nWhen designing your Vue application's testing strategy, you should leverage the following testing types:\n\n- **Unit**: Checks that inputs to a given function, class, or composable are producing the expected output or side effects.\n- **Component**: Checks that your component mounts, renders, can be interacted with, and behaves as expected. These tests import more code than unit tests, are more complex, and require more time to execute.\n- **End-to-end**: Checks features that span multiple pages and makes real network requests against your production-built Vue application. These tests often involve standing up a database or other backend.\n\nEach testing type plays a role in your application's testing strategy, and each will protect you against different types of issues..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I overview in vue-guide?\n\nAssistant: To overview in vue-guide, here's what you do:\nWe will briefly discuss what each of these are, how they can be implemented for Vue applications, and provide some general recommendations..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I unit testing in vue-guide?\n\nAssistant: To unit testing in vue-guide, here's what you do:\nUnit tests are written to verify that small, isolated units of code are working as expected. A unit test usually covers a single function, class, composable, or module. Unit tests focus on logical correctness and only concern themselves with a small portion of the application's overall functionality. They may mock large parts of your application's environment (e.g. initial state, complex classes, 3rd party modules, and network requests).\n\nIn general, unit tests will catch issues with a function's business logic and logical correctness..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I composables in vue-guide?\n\nAssistant: To composables in vue-guide, here's what you do:\nOne category of functions specific to Vue applications is Composables, which may require special handling during tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I unit testing components in vue-guide?\n\nAssistant: To unit testing components in vue-guide, here's what you do:\nA component can be tested in two ways:\n\n1. Whitebox: Unit Testing\n\nTests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused on **isolating** the component under test.\n\n2. Blackbox: Component Testing\n\nTests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recommendation in vue-guide?\n\nAssistant: To recommendation in vue-guide, here's what you do:\n- [Vitest](https://vitest.dev/)\n\nSince the official setup created by `create-vue` is based on [Vite](https://vitejs.dev/), we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite. [Vitest](https://vitest.dev/) is a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I other options in vue-guide?\n\nAssistant: To other options in vue-guide, here's what you do:\n- [Jest](https://jestjs.io/) is a popular unit testing framework. However, we only recommend Jest if you have an existing Jest test suite that needs to be migrated over to a Vite-based project, as Vitest offers a more seamless integration and better performance..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I component testing in vue-guide?\n\nAssistant: To component testing in vue-guide, here's what you do:\nIn Vue applications, components are the main building blocks of the UI. Components are therefore the natural unit of isolation when it comes to validating your application's behavior. From a granularity perspective, component testing sits somewhere above unit testing and can be considered a form of integration testing..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I e2e testing in vue-guide?\n\nAssistant: To e2e testing in vue-guide, here's what you do:\nWhile unit tests provide developers with some degree of confidence, unit and component tests are limited in their abilities to provide holistic coverage of an application when deployed to production. As a result, end-to-end (E2E) tests provide coverage on what is arguably the most important aspect of an application: what happens when users actually use your applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I choosing an e2e testing solution in vue-guide?\n\nAssistant: To choosing an e2e testing solution in vue-guide, here's what you do:\nWhile end-to-end (E2E) testing on the web has gained a negative reputation for unreliable (flaky) tests and slowing down development processes, modern E2E tools have made strides forward to create more reliable, interactive, and useful tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recommendation in vue-guide?\n\nAssistant: To recommendation in vue-guide, here's what you do:\n- [Playwright](https://playwright.dev/) is a great E2E testing solution that supports Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I other options in vue-guide?\n\nAssistant: To other options in vue-guide, here's what you do:\n- [Nightwatch](https://nightwatchjs.org/) is an E2E testing solution based on [Selenium WebDriver](https://www.npmjs.com/package/selenium-webdriver). This gives it the widest browser support range, including native mobile testing..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I recipes in vue-guide?\n\nAssistant: To recipes in vue-guide, here's what you do:\n### Adding Vitest to a Project\nIn a Vite-based Vue project, run:\n\n```sh\n> npm install -D vitest happy-dom @testing-library/vue\n```\n\nNext, update the Vite configuration to add the `test` option block:\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})\n```\n\nTIP\nIf you use TypeScript, add `vitest/globals` to the `types` field in your `tsconfig.json`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "section_detail", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Testing in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Increment Function**:\n\n```yaml\n// helpers.js\nexport function increment(current, max = 10) {\n  if (current < max) {\n    return current + 1\n  }\n  return current\n}\n```\n\nThis snippet shows you how to increment function, which is an important aspect of testing.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "code_examples", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Testing in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStart testing early!\n\nTest what a component does, not how it does it.\n\nFor Visual logic: assert correct render output based on inputted props and slots.\n\nFor Behavioral logic: assert correct render updates or emitted events in response to user input events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/testing", "title": "Testing", "description": "This page covers the importance of testing in Vue applications, types of tests, and recommendations for testing tools and strategies.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 04:33:50", "type": "best_practices", "page_metadata": {"og:title": "Vue.js", "theme-color": "#3c8772", "og:type": "website", "generator": "VitePress v1.6.3", "language": "en-US", "og:image": "https://vuejs.org/images/logo.png", "twitter:card": "summary", "og:description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "description": "Vue.js - The Progressive JavaScript Framework", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "ogTitle": "Vue.js", "title": "Testing | Vue.js", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "ogUrl": "https://vuejs.org/", "scrapeId": "556cbb57-034e-4f65-a431-2844a8eadd57", "sourceURL": "https://vuejs.org/guide/scaling-up/testing", "url": "https://vuejs.org/guide/scaling-up/testing", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Components Basics is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Components Basics in vue-guide.\n\n# Components Basics\n\nComponents allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.Here's a quick rundown of what this is about:\n\n## Defining a Component\n\nWhen using a build step, we typically define each Vue component in a dedicated file using the `.vue` extension - known as a [Single-File Component](https://vuejs.org/guide/scaling-up/sfc) (SFC for short):\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\nWhen not using a build step, a Vue component can be defined as a plain JavaScript object containing Vue-specific options:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}\n```\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}\n```\n\nThe template is inlined as a JavaScript string here, which Vue will compile on the fly. You can also use an ID selector pointing to an element (usually native `<template>` elements) - Vue will use its content as the template source.\n\nThe example above defines a single component and exports it as the default export of a `.js` file, but you can use named exports to export multiple components from the same file.\n\n## Using a Component\n\nTIP\n\nWe will be using SFC syntax for the rest of this guide - the concepts around components are the same regardless of whether you are using a build step or not. The [Examples](https://vuejs.org/examples/) section shows component usage in both scenarios.\n\nTo use a child component, we need to import it in the parent component. Assuming we placed our counter component inside a file called `ButtonCounter.vue`, the component will be exposed as the file's default export:\n\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nTo expose the imported component to our template, we need to [register](https://vuejs.org/guide/components/registration) it with the `components` option. The component will then be available as a tag using the key it is registered under.\n\n```vue\n<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nWith `<script setup>`, imported components are automatically made available to the template.\n\nIt's also possible to globally register a component, making it available to all components in a given app without having to import it. The pros and cons of global vs. local registration is discussed in the dedicated [Component Registration](https://vuejs.org/guide/components/registration) section.\n\nComponents can be reused as many times as you want:\n\n```template\n<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />\n```\n\nNotice that when clicking on the buttons, each one maintains its own, separate `count`. That's because each time you use a component, a new **instance** of it is created.\n\nIn SFCs, it's recommended to use `PascalCase` tag names for child components to differentiate from native HTML elements. Although native HTML tag names are case-insensitive, Vue SFC is a compiled format so we are able to use case-sensitive tag names in it. We are also able to use `/>` to close a tag.\n\nIf you are authoring your templates directly in a DOM (e.g. as the content of a native `<template>` element), the template will be subject to the browser's native HTML parsing behavior. In such cases, you will need to use `kebab-case` and explicit closing tags for components:\n\n```template\n<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>\n```\n\n## Passing Props\n\nIf we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.\n\nProps are custom attributes you can register on a component. To pass a title to our blog post component, we must declare it in the list of props this component accepts, using the [`props`](https://vuejs.org/api/options-state#props) option[`defineProps`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\nWhen a value is passed to a prop attribute, it becomes a property on that component instance. The value of that property is accessible within the template and on the component's `this` context, just like any other component property.\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n`defineProps` is a compile-time macro that is only available inside `<script setup>` and does not need to be explicitly imported. Declared props are automatically exposed to the template. `defineProps` also returns an object that contains all the props passed to the component, so that we can access them in JavaScript if needed:\n\n```js\nconst props = defineProps(['title'])\nconsole.log(props.title)\n```\n\nSee also: [Typing Component Props](https://vuejs.org/guide/typescript/composition-api#typing-component-props)\n\nIf you are not using `<script setup>`, props should be declared using the `props` option, and the props object will be passed to `setup()` as the first argument:\n\n```js\nexport default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nA component can have as many props as you like and, by default, any value can be passed to any prop.\n\nOnce a prop is registered, you can pass data to it as a custom attribute, like this:\n\n```template\n<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />\n```\n\nIn a typical app, however, you'll likely have an array of posts in your parent component:\n\n```js\nexport default {\n  // ...\n  data() {\n    return {\n      posts: [\\\n        { id: 1, title: 'My journey with Vue' },\\\n        { id: 2, title: 'Blogging with Vue' },\\\n        { id: 3, title: 'Why Vue is so fun' }\\\n      ]\n    }\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  { id: 1, title: 'My journey with Vue' },\\\n  { id: 2, title: 'Blogging with Vue' },\\\n  { id: 3, title: 'Why Vue is so fun' }\\\n])\n```\n\nThen want to render a component for each one, using `v-for`:\n\n```template\n<BlogPost\n  v-for=\"post in posts\"\n  :key=\"post.id\"\n  :title=\"post.title\"\n />\n```\n\n## Listening to Events\n\nAs we develop our `<BlogPost>` component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page at its default size.\n\nIn the parent, we can support this feature by adding a `postFontSize` data propertyref:\n\n```js\ndata() {\n  return {\n    posts: [\\\n      /* ... */\\\n    ],\n    postFontSize: 1\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  /* ... */\\\n])\n\nconst postFontSize = ref(1)\n```\n\nWhich can be used in the template to control the font size of all blog posts:\n\n```template\n<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>\n```\n\nNow let's add a button to the `<BlogPost>` component's template:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n\nThe button doesn't do anything yet - we want clicking the button to communicate to the parent that it should enlarge the text of all posts. To solve this problem, components provide a custom events system. The parent can choose to listen to any event on the child component instance with `v-on` or `@`, just as we would with a native DOM event:\n\n```template\n<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />\n```\n\nThen the child component can emit an event on itself by calling the built-in [**`$emit`** method](https://vuejs.org/api/component-instance#emit), passing the name of the event:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>\n```\n\nThanks to the `@enlarge-text=\"postFontSize += 0.1\"` listener, the parent will receive the event and update the value of `postFontSize.\n\n## Content Distribution with Slots\n\nJust like with HTML elements, it's often useful to be able to pass content to a component, like this:\n\n```template\n<AlertBox>\n  Something bad happened.\n</AlertBox>\n```\n\nWhich might render something like:\n\nThis is an Error for Demo Purposes\n\nSomething bad happened.\n\nThis can be achieved using Vue's custom `<slot>` element:\n\n```vue\n<!-- AlertBox.vue -->\n<template>\n  <div class=\"alert-box\">\n    <strong>This is an Error for Demo Purposes</strong>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\n.alert-box {\n  /* ... */\n}\n</style>\n```\n\n## Dynamic Components\n\nSometimes, it's useful to dynamically switch between components, like in a tabbed interface:\n\n```template\n<!-- Component changes when currentTab changes -->\n<component :is=\"currentTab\"></component>\n```\n\n```template\n<!-- Component changes when currentTab changes -->\n<component :is=\"tabs[currentTab]\"></component>\n```\n\nIn the example above, the value passed to `:is` can contain either:\n\n- the name string of a registered component, OR\n- the actual imported component object\n\nYou can also use the `is` attribute to create regular HTML elements.\n\nWhen switching between multiple components with `<component :is=\"...\">`, a component will be unmounted when it is switched away from. We can force the inactive components to stay \"alive\" with the built-in [`<KeepAlive>` component](https://vuejs.org/guide/built-ins/keep-alive).\n\n## in-DOM Template Parsing Caveats\n\nIf you are writing your Vue templates directly in the DOM, Vue will have to retrieve the template string from the DOM. This leads to some caveats due to browsers' native HTML parsing behavior.\n\nTIP\n\nIt should be noted that the limitations discussed below only apply if you are writing your templates directly in the DOM. They do NOT apply if you are using string templates from the following sources:\n\n- Single-File Components\n- Inlined template strings (e.g. `template: '...'`)\n- `<script type=\"text/x-template\">`\n\n### Case Insensitivity\n\nHTML tags and attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you‚Äôre using in-DOM templates, PascalCase component names and camelCased prop names or `v-on` event names all need to use their kebab-cased (hyphen-delimited) equivalents:\n\n```js\n// camelCase in JavaScript\nconst BlogPost = {\n  props: ['postTitle'],\n  emits: ['updatePost'],\n  template: `\n    <h3>{{ postTitle }}</h3>\n  `\n}\n```\n\n```template\n<!-- kebab-case in HTML -->\n<blog-post post-title=\"hello!\" @update-post=\"onUpdatePost\"></blog-post>\n```\n\n### Self Closing Tags\n\nWe have been using self-closing tags for components in previous code samples:\n\n```template\n<MyComponent />\n```\n\nThis is because Vue's template parser respects `/>` as an indication to end any tag, regardless of its type.\n\nIn in-DOM templates, however, we must always include explicit closing tags:\n\n```template\n<my-component></my-component>\n```\n\nThis is because the HTML spec only allows [a few specific elements](https://html.spec.whatwg.org/multipage/syntax.html#void-elements) to omit closing tags, the most common being `<input>` and `<img>`. For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag. For example, the following snippet:\n\n```template\n<my-component /> <!-- we intend to close the tag here... -->\n<span>hello</span>\n```\n\nwill be parsed as:\n\n```template\n<my-component>\n  <span>hello</span>\n</my-component> <!-- but the browser will close it here. -->\n```\n\n### Element Placement Restrictions\n\nSome HTML elements, such as `<ul>`, `<ol>`, `<table>` and `<select>` have restrictions on what elements can appear inside them, and some elements such as `<li>`, `<tr>`, and `<option>` can only appear inside certain other elements.\n\nThis will lead to issues when using components with elements that have such restrictions. For example:\n\n```template\n<table>\n  <blog-post-row></blog-post-row>\n</table>\n```\n\nThe custom component `<blog-post-row>` will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the special [`is` attribute](https://vuejs.org/api/built-in-special-attributes#is) as a workaround:\n\n```template\n<table>\n  <tr is=\"vue:blog-post-row\"></tr>\n</table>\n```\n\nTIP\n\nWhen used on native HTML elements, the value of `is` must be prefixed with `vue:` in order to be interpreted as a Vue component. This is required to avoid confusion with native [customized built-in elements](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "overview", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I defining a component in vue-guide?\n\nAssistant: To defining a component in vue-guide, here's what you do:\nWhen using a build step, we typically define each Vue component in a dedicated file using the `.vue` extension - known as a [Single-File Component](https://vuejs.org/guide/scaling-up/sfc) (SFC for short):\n\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\nWhen not using a build step, a Vue component can be defined as a plain JavaScript object containing Vue-specific options:\n\n```js\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}\n```\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}\n```\n\nThe template is inlined as a JavaScript string here, which Vue will compile on the fly. You can also use an ID selector pointing to an element (usually native `<template>` elements) - Vue will use its content as the template source.\n\nThe example above defines a single component and exports it as the default export of a `.js` file, but you can use named exports to export multiple components from the same file..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I using a component in vue-guide?\n\nAssistant: To using a component in vue-guide, here's what you do:\nTIP\n\nWe will be using SFC syntax for the rest of this guide - the concepts around components are the same regardless of whether you are using a build step or not. The [Examples](https://vuejs.org/examples/) section shows component usage in both scenarios.\n\nTo use a child component, we need to import it in the parent component. Assuming we placed our counter component inside a file called `ButtonCounter.vue`, the component will be exposed as the file's default export:\n\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nTo expose the imported component to our template, we need to [register](https://vuejs.org/guide/components/registration) it with the `components` option. The component will then be available as a tag using the key it is registered under.\n\n```vue\n<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n\nWith `<script setup>`, imported components are automatically made available to the template.\n\nIt's also possible to globally register a component, making it available to all components in a given app without having to import it. The pros and cons of global vs. local registration is discussed in the dedicated [Component Registration](https://vuejs.org/guide/components/registration) section.\n\nComponents can be reused as many times as you want:\n\n```template\n<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />\n```\n\nNotice that when clicking on the buttons, each one maintains its own, separate `count`. That's because each time you use a component, a new **instance** of it is created.\n\nIn SFCs, it's recommended to use `PascalCase` tag names for child components to differentiate from native HTML elements. Although native HTML tag names are case-insensitive, Vue SFC is a compiled format so we are able to use case-sensitive tag names in it. We are also able to use `/>` to close a tag.\n\nIf you are authoring your templates directly in a DOM (e.g. as the content of a native `<template>` element), the template will be subject to the browser's native HTML parsing behavior. In such cases, you will need to use `kebab-case` and explicit closing tags for components:\n\n```template\n<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I passing props in vue-guide?\n\nAssistant: To passing props in vue-guide, here's what you do:\nIf we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.\n\nProps are custom attributes you can register on a component. To pass a title to our blog post component, we must declare it in the list of props this component accepts, using the [`props`](https://vuejs.org/api/options-state#props) option[`defineProps`](https://vuejs.org/api/sfc-script-setup#defineprops-defineemits) macro:\n\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\nWhen a value is passed to a prop attribute, it becomes a property on that component instance. The value of that property is accessible within the template and on the component's `this` context, just like any other component property.\n\n```vue\n<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n\n`defineProps` is a compile-time macro that is only available inside `<script setup>` and does not need to be explicitly imported. Declared props are automatically exposed to the template. `defineProps` also returns an object that contains all the props passed to the component, so that we can access them in JavaScript if needed:\n\n```js\nconst props = defineProps(['title'])\nconsole.log(props.title)\n```\n\nSee also: [Typing Component Props](https://vuejs.org/guide/typescript/composition-api#typing-component-props)\n\nIf you are not using `<script setup>`, props should be declared using the `props` option, and the props object will be passed to `setup()` as the first argument:\n\n```js\nexport default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}\n```\n\nA component can have as many props as you like and, by default, any value can be passed to any prop.\n\nOnce a prop is registered, you can pass data to it as a custom attribute, like this:\n\n```template\n<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />\n```\n\nIn a typical app, however, you'll likely have an array of posts in your parent component:\n\n```js\nexport default {\n  // ...\n  data() {\n    return {\n      posts: [\\\n        { id: 1, title: 'My journey with Vue' },\\\n        { id: 2, title: 'Blogging with Vue' },\\\n        { id: 3, title: 'Why Vue is so fun' }\\\n      ]\n    }\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  { id: 1, title: 'My journey with Vue' },\\\n  { id: 2, title: 'Blogging with Vue' },\\\n  { id: 3, title: 'Why Vue is so fun' }\\\n])\n```\n\nThen want to render a component for each one, using `v-for`:\n\n```template\n<BlogPost\n  v-for=\"post in posts\"\n  :key=\"post.id\"\n  :title=\"post.title\"\n />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I listening to events in vue-guide?\n\nAssistant: To listening to events in vue-guide, here's what you do:\nAs we develop our `<BlogPost>` component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page at its default size.\n\nIn the parent, we can support this feature by adding a `postFontSize` data propertyref:\n\n```js\ndata() {\n  return {\n    posts: [\\\n      /* ... */\\\n    ],\n    postFontSize: 1\n  }\n}\n```\n\n```js\nconst posts = ref([\\\n  /* ... */\\\n])\n\nconst postFontSize = ref(1)\n```\n\nWhich can be used in the template to control the font size of all blog posts:\n\n```template\n<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>\n```\n\nNow let's add a button to the `<BlogPost>` component's template:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n\nThe button doesn't do anything yet - we want clicking the button to communicate to the parent that it should enlarge the text of all posts. To solve this problem, components provide a custom events system. The parent can choose to listen to any event on the child component instance with `v-on` or `@`, just as we would with a native DOM event:\n\n```template\n<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />\n```\n\nThen the child component can emit an event on itself by calling the built-in [**`$emit`** method](https://vuejs.org/api/component-instance#emit), passing the name of the event:\n\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>\n```\n\nThanks to the `@enlarge-text=\"postFontSize += 0.1\"` listener, the parent will receive the event and update the value of `postFontSize..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I content distribution with slots in vue-guide?\n\nAssistant: To content distribution with slots in vue-guide, here's what you do:\nJust like with HTML elements, it's often useful to be able to pass content to a component, like this:\n\n```template\n<AlertBox>\n  Something bad happened.\n</AlertBox>\n```\n\nWhich might render something like:\n\nThis is an Error for Demo Purposes\n\nSomething bad happened.\n\nThis can be achieved using Vue's custom `<slot>` element:\n\n```vue\n<!-- AlertBox.vue -->\n<template>\n  <div class=\"alert-box\">\n    <strong>This is an Error for Demo Purposes</strong>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\n.alert-box {\n  /* ... */\n}\n</style>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I dynamic components in vue-guide?\n\nAssistant: To dynamic components in vue-guide, here's what you do:\nSometimes, it's useful to dynamically switch between components, like in a tabbed interface:\n\n```template\n<!-- Component changes when currentTab changes -->\n<component :is=\"currentTab\"></component>\n```\n\n```template\n<!-- Component changes when currentTab changes -->\n<component :is=\"tabs[currentTab]\"></component>\n```\n\nIn the example above, the value passed to `:is` can contain either:\n\n- the name string of a registered component, OR\n- the actual imported component object\n\nYou can also use the `is` attribute to create regular HTML elements.\n\nWhen switching between multiple components with `<component :is=\"...\">`, a component will be unmounted when it is switched away from. We can force the inactive components to stay \"alive\" with the built-in [`<KeepAlive>` component](https://vuejs.org/guide/built-ins/keep-alive)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I in-dom template parsing caveats in vue-guide?\n\nAssistant: To in-dom template parsing caveats in vue-guide, here's what you do:\nIf you are writing your Vue templates directly in the DOM, Vue will have to retrieve the template string from the DOM. This leads to some caveats due to browsers' native HTML parsing behavior.\n\nTIP\n\nIt should be noted that the limitations discussed below only apply if you are writing your templates directly in the DOM. They do NOT apply if you are using string templates from the following sources:\n\n- Single-File Components\n- Inlined template strings (e.g. `template: '...'`)\n- `<script type=\"text/x-template\">`\n\n### Case Insensitivity\n\nHTML tags and attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you‚Äôre using in-DOM templates, PascalCase component names and camelCased prop names or `v-on` event names all need to use their kebab-cased (hyphen-delimited) equivalents:\n\n```js\n// camelCase in JavaScript\nconst BlogPost = {\n  props: ['postTitle'],\n  emits: ['updatePost'],\n  template: `\n    <h3>{{ postTitle }}</h3>\n  `\n}\n```\n\n```template\n<!-- kebab-case in HTML -->\n<blog-post post-title=\"hello!\" @update-post=\"onUpdatePost\"></blog-post>\n```\n\n### Self Closing Tags\n\nWe have been using self-closing tags for components in previous code samples:\n\n```template\n<MyComponent />\n```\n\nThis is because Vue's template parser respects `/>` as an indication to end any tag, regardless of its type.\n\nIn in-DOM templates, however, we must always include explicit closing tags:\n\n```template\n<my-component></my-component>\n```\n\nThis is because the HTML spec only allows [a few specific elements](https://html.spec.whatwg.org/multipage/syntax.html#void-elements) to omit closing tags, the most common being `<input>` and `<img>`. For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag. For example, the following snippet:\n\n```template\n<my-component /> <!-- we intend to close the tag here... -->\n<span>hello</span>\n```\n\nwill be parsed as:\n\n```template\n<my-component>\n  <span>hello</span>\n</my-component> <!-- but the browser will close it here. -->\n```\n\n### Element Placement Restrictions\n\nSome HTML elements, such as `<ul>`, `<ol>`, `<table>` and `<select>` have restrictions on what elements can appear inside them, and some elements such as `<li>`, `<tr>`, and `<option>` can only appear inside certain other elements.\n\nThis will lead to issues when using components with elements that have such restrictions. For example:\n\n```template\n<table>\n  <blog-post-row></blog-post-row>\n</table>\n```\n\nThe custom component `<blog-post-row>` will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the special [`is` attribute](https://vuejs.org/api/built-in-special-attributes#is) as a workaround:\n\n```template\n<table>\n  <tr is=\"vue:blog-post-row\"></tr>\n</table>\n```\n\nTIP\n\nWhen used on native HTML elements, the value of `is` must be prefixed with `vue:` in order to be interpreted as a Vue component. This is required to avoid confusion with native [customized built-in elements](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example)..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "section_detail", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Components Basics in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Defining a Component**:\n\n```yaml\n```vue\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n```\n\nThis snippet shows you how to defining a component, which is an important aspect of components basics.\n\n**Using a Component**:\n\n```yaml\n```vue\n<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>\n```\n```\n\nThis snippet shows you how to using a component, which is an important aspect of components basics.\n\n**Passing Props**:\n\n```yaml\n```vue\n<!-- BlogPost.vue -->\n<script>\nexport default {\n  props: ['title']\n}\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>\n```\n```\n\nThis snippet shows you how to passing props, which is an important aspect of components basics.\n\n**Listening to Events**:\n\n```yaml\n```vue\n<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>\n```\n```\n\nThis snippet shows you how to listening to events, which is an important aspect of components basics.\n\n**Content Distribution with Slots**:\n\n```yaml\n```vue\n<!-- AlertBox.vue -->\n<template>\n  <div class=\"alert-box\">\n    <strong>This is an Error for Demo Purposes</strong>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\n.alert-box {\n  /* ... */\n}\n</style>\n```\n```\n\nThis snippet shows you how to content distribution with slots, which is an important aspect of components basics.\n\n**Dynamic Components**:\n\n```yaml\n```template\n<!-- Component changes when currentTab changes -->\n<component :is=\"currentTab\"></component>\n```\n```\n\nThis snippet shows you how to dynamic components, which is an important aspect of components basics.\n\n**in-DOM Template Parsing Caveats**:\n\n```yaml\n```js\n// camelCase in JavaScript\nconst BlogPost = {\n  props: ['postTitle'],\n  emits: ['updatePost'],\n  template: `\n    <h3>{{ postTitle }}</h3>\n  `\n}\n```\n```\n\nThis snippet shows you how to in-dom template parsing caveats, which is an important aspect of components basics.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "code_examples", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Components Basics in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse PascalCase tag names for child components in SFCs to differentiate from native HTML elements.\n\nWhen using in-DOM templates, use kebab-case and explicit closing tags for components.\n\nConsider using the `is` attribute for dynamic components and to create regular HTML elements.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/essentials/component-basics", "title": "Components Basics", "description": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:35:42", "type": "best_practices", "page_metadata": {"ogTitle": "Vue.js", "og:type": "website", "title": "Components Basics | Vue.js", "favicon": "https://vuejs.org/logo.svg", "og:url": "https://vuejs.org/", "og:description": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogImage": "https://vuejs.org/images/logo.png", "theme-color": "#3c8772", "ogUrl": "https://vuejs.org/", "description": "Vue.js - The Progressive JavaScript Framework", "viewport": "width=device-width,initial-scale=1", "generator": "VitePress v1.6.3", "twitter:card": "summary", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "scrapeId": "8b4773af-7c04-43d0-b916-05cba0a2b58c", "sourceURL": "https://vuejs.org/guide/essentials/component-basics", "url": "https://vuejs.org/guide/essentials/component-basics", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what Server-Side Rendering (SSR) is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain Server-Side Rendering (SSR) in vue-guide.\n\n# Server-Side Rendering (SSR)\n\nThis page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.Here's a quick rundown of what this is about:\n\n## Overview\n\nVue.js is a framework for building client-side applications. By default, Vue components produce and manipulate DOM in the browser as output. However, it is also possible to render the same components into HTML strings on the server, send them directly to the browser, and finally \"hydrate\" the static markup into a fully interactive app on the client.\n\nA server-rendered Vue.js app can also be considered \"isomorphic\" or \"universal\", in the sense that the majority of your app's code runs on both the server and the client.\n\n## Why SSR?\n\nCompared to a client-side Single-Page Application (SPA), the advantage of SSR primarily lies in:\n\n- **Faster time-to-content**: this is more prominent on slow internet or slow devices. Server-rendered markup doesn't need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. In addition, data fetching is done on the server-side for the initial visit, which likely has a faster connection to your database than the client. This generally results in improved [Core Web Vitals](https://web.dev/vitals/) metrics, better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate.\n\n- **Unified mental model**: you get to use the same language and the same declarative, component-oriented mental model for developing your entire app, instead of jumping back and forth between a backend templating system and a frontend framework.\n\n- **Better SEO**: the search engine crawlers will directly see the fully rendered page.\n\n## SSR vs. SSG\n\n**Static Site Generation (SSG)**, also referred to as pre-rendering, is another popular technique for building fast websites. If the data needed to server-render a page is the same for every user, then instead of rendering the page every time a request comes in, we can render it only once, ahead of time, during the build process. Pre-rendered pages are generated and served as static HTML files.\n\nSSG retains the same performance characteristics of SSR apps: it provides great time-to-content performance. At the same time, it is cheaper and easier to deploy than SSR apps because the output is static HTML and assets. The keyword here is **static**: SSG can only be applied to pages providing static data, i.e. data that is known at build time and can not change between requests. Every time the data changes, a new deployment is needed.\n\n## Basic Tutorial\n\nLet's take a look at the most bare-bones example of Vue SSR in action.\n\n1. Create a new directory and `cd` into it\n2. Run `npm init -y`\n3. Add `\"type\": \"module\"` in `package.json` so that Node.js runs in [ES modules mode](https://nodejs.org/api/esm.html#modules-ecmascript-modules).\n4. Run `npm install vue`\n5. Create an `example.js` file:\n\n```javascript\n// this runs in Node.js on the server.\nimport { createSSRApp } from 'vue'\n// Vue's server-rendering API is exposed under `vue/server-renderer`.\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})\n```\n\nThen run:\n\n```sh\n> node example.js\n```\n\nIt should print the following to the command line:\n\n```\n<button>1</button>\n```\n\n[`renderToString()`](https://vuejs.org/api/ssr#rendertostring) takes a Vue app instance and returns a Promise that resolves to the rendered HTML of the app.\n\n## Client Hydration\n\nIf you click the button, you'll notice the number doesn't change. The HTML is completely static on the client since we are not loading Vue in the browser.\n\nTo make the client-side app interactive, Vue needs to perform the **hydration** step. During hydration, it creates the same Vue application that was run on the server, matches each component to the DOM nodes it should control, and attaches DOM event listeners.\n\n## Code Structure\n\nNotice how we need to reuse the same app implementation as on the server. This is where we need to start thinking about code structure in an SSR app - how do we share the same application code between the server and the client?\n\n## Higher Level Solutions\n\nMoving from the example to a production-ready SSR app involves a lot more. We will need to:\n\n- Support Vue SFCs and other build step requirements. In fact, we will need to coordinate two builds for the same app: one for the client, and one for the server.\n\n## Writing SSR-friendly Code\n\nRegardless of your build setup or higher-level framework choice, there are some principles that apply in all Vue SSR applications.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "overview", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I overview in vue-guide?\n\nAssistant: To overview in vue-guide, here's what you do:\nVue.js is a framework for building client-side applications. By default, Vue components produce and manipulate DOM in the browser as output. However, it is also possible to render the same components into HTML strings on the server, send them directly to the browser, and finally \"hydrate\" the static markup into a fully interactive app on the client.\n\nA server-rendered Vue.js app can also be considered \"isomorphic\" or \"universal\", in the sense that the majority of your app's code runs on both the server and the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I why ssr? in vue-guide?\n\nAssistant: To why ssr? in vue-guide, here's what you do:\nCompared to a client-side Single-Page Application (SPA), the advantage of SSR primarily lies in:\n\n- **Faster time-to-content**: this is more prominent on slow internet or slow devices. Server-rendered markup doesn't need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. In addition, data fetching is done on the server-side for the initial visit, which likely has a faster connection to your database than the client. This generally results in improved [Core Web Vitals](https://web.dev/vitals/) metrics, better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate.\n\n- **Unified mental model**: you get to use the same language and the same declarative, component-oriented mental model for developing your entire app, instead of jumping back and forth between a backend templating system and a frontend framework.\n\n- **Better SEO**: the search engine crawlers will directly see the fully rendered page..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I ssr vs. ssg in vue-guide?\n\nAssistant: To ssr vs. ssg in vue-guide, here's what you do:\n**Static Site Generation (SSG)**, also referred to as pre-rendering, is another popular technique for building fast websites. If the data needed to server-render a page is the same for every user, then instead of rendering the page every time a request comes in, we can render it only once, ahead of time, during the build process. Pre-rendered pages are generated and served as static HTML files.\n\nSSG retains the same performance characteristics of SSR apps: it provides great time-to-content performance. At the same time, it is cheaper and easier to deploy than SSR apps because the output is static HTML and assets. The keyword here is **static**: SSG can only be applied to pages providing static data, i.e. data that is known at build time and can not change between requests. Every time the data changes, a new deployment is needed..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I basic tutorial in vue-guide?\n\nAssistant: To basic tutorial in vue-guide, here's what you do:\nLet's take a look at the most bare-bones example of Vue SSR in action.\n\n1. Create a new directory and `cd` into it\n2. Run `npm init -y`\n3. Add `\"type\": \"module\"` in `package.json` so that Node.js runs in [ES modules mode](https://nodejs.org/api/esm.html#modules-ecmascript-modules).\n4. Run `npm install vue`\n5. Create an `example.js` file:\n\n```javascript\n// this runs in Node.js on the server.\nimport { createSSRApp } from 'vue'\n// Vue's server-rendering API is exposed under `vue/server-renderer`.\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})\n```\n\nThen run:\n\n```sh\n> node example.js\n```\n\nIt should print the following to the command line:\n\n```\n<button>1</button>\n```\n\n[`renderToString()`](https://vuejs.org/api/ssr#rendertostring) takes a Vue app instance and returns a Promise that resolves to the rendered HTML of the app..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I client hydration in vue-guide?\n\nAssistant: To client hydration in vue-guide, here's what you do:\nIf you click the button, you'll notice the number doesn't change. The HTML is completely static on the client since we are not loading Vue in the browser.\n\nTo make the client-side app interactive, Vue needs to perform the **hydration** step. During hydration, it creates the same Vue application that was run on the server, matches each component to the DOM nodes it should control, and attaches DOM event listeners..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I code structure in vue-guide?\n\nAssistant: To code structure in vue-guide, here's what you do:\nNotice how we need to reuse the same app implementation as on the server. This is where we need to start thinking about code structure in an SSR app - how do we share the same application code between the server and the client?.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I higher level solutions in vue-guide?\n\nAssistant: To higher level solutions in vue-guide, here's what you do:\nMoving from the example to a production-ready SSR app involves a lot more. We will need to:\n\n- Support Vue SFCs and other build step requirements. In fact, we will need to coordinate two builds for the same app: one for the client, and one for the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I writing ssr-friendly code in vue-guide?\n\nAssistant: To writing ssr-friendly code in vue-guide, here's what you do:\nRegardless of your build setup or higher-level framework choice, there are some principles that apply in all Vue SSR applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "section_detail", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for Server-Side Rendering (SSR) in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic SSR Example**:\n\n```yaml\n// this runs in Node.js on the server.\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})\n```\n\nThis snippet shows you how to basic ssr example, which is an important aspect of server-side rendering (ssr).\n\n**Server Example with Express**:\n\n```yaml\nimport express from 'express'\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst server = express()\n\nserver.get('/', (req, res) => {\n  const app = createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n\n  renderToString(app).then((html) => {\n    res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Vue SSR Example</title>\n      </head>\n      <body>\n        <div id=\"app\">${html}</div>\n      </body>\n    </html>\n    `)\n  })\n})\n\nserver.listen(3000, () => {\n  console.log('ready')\n})\n```\n\nThis snippet shows you how to server example with express, which is an important aspect of server-side rendering (ssr).\n\n**Client Hydration Example**:\n\n```yaml\n// this runs in the browser.\nimport { createSSRApp } from 'vue'\n\nconst app = createSSRApp({\n  // ...same app as on server\n})\n\napp.mount('#app')\n```\n\nThis snippet shows you how to client hydration example, which is an important aspect of server-side rendering (ssr).\n\n", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "code_examples", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using Server-Side Rendering (SSR) in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAs of now, Google and Bing can index synchronous JavaScript applications just fine. Synchronous being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish. This means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary.\n\nVue components are compiled differently when used for SSR - templates are compiled into string concatenations instead of Virtual DOM render functions for more efficient rendering performance.\n\nAvoid targeting `body` when using Teleports and SSR together - usually, `<body>` will contain other server-rendered content which makes it impossible for Teleports to determine the correct starting location for hydration. Instead, prefer a dedicated container, e.g. `<div id=\"teleported\"></div>` which contains only teleported content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/scaling-up/ssr.html", "title": "Server-Side Rendering (SSR)", "description": "This page covers the concepts, advantages, and implementation details of Server-Side Rendering (SSR) in Vue.js, including comparisons with Static Site Generation (SSG) and best practices for writing SSR-friendly code.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 05:14:41", "type": "best_practices", "page_metadata": {"og:type": "website", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "og:url": "https://vuejs.org/", "twitter:card": "summary", "twitter:site": "@vuejs", "ogImage": "https://vuejs.org/images/logo.png", "title": "Server-Side Rendering (SSR) | Vue.js", "generator": "VitePress v1.6.3", "ogUrl": "https://vuejs.org/", "language": "en-US", "viewport": "width=device-width,initial-scale=1", "favicon": "https://vuejs.org/logo.svg", "ogTitle": "Vue.js", "description": "Vue.js - The Progressive JavaScript Framework", "theme-color": "#3c8772", "og:title": "Vue.js", "og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "scrapeId": "0b8c62ba-88f5-4827-ae7a-3c957d3ea41f", "sourceURL": "https://vuejs.org/guide/scaling-up/ssr.html", "url": "https://vuejs.org/guide/scaling-up/ssr.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you explain what TypeScript with Composition API is in vue-guide?\n\nAssistant: Sure, I'd be happy to explain TypeScript with Composition API in vue-guide.\n\n# TypeScript with Composition API\n\nThis page assumes you've already read the overview on Using Vue with TypeScript.Here's a quick rundown of what this is about:\n\n## Typing Component Props\n\n### Using `<script setup>`\nWhen using `<script setup>`, the `defineProps()` macro supports inferring the props types based on its argument:\n\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>\n```\n\nThis is called \"runtime declaration\", because the argument passed to `defineProps()` will be used as the runtime `props` option.\n\nHowever, it is usually more straightforward to define props with pure types via a generic type argument:\n\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n</script>\n```\n\nThis is called \"type-based declaration\". The compiler will try to do its best to infer the equivalent runtime options based on the type argument. In this case, our second example compiles into the exact same runtime options as the first example.\n\nYou can use either type-based declaration OR runtime declaration, but you cannot use both at the same time.\n\nWe can also move the props types into a separate interface:\n\n```vue\n<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>\n```\n\nThis also works if `Props` is imported from an external source. This feature requires TypeScript to be a peer dependency of Vue.\n\n```vue\n<script setup lang=\"ts\">\nimport type { Props } from './foo'\n\nconst props = defineProps<Props>()\n</script>\n```\n\n#### Syntax Limitations\nIn version 3.2 and below, the generic type parameter for `defineProps()` were limited to a type literal or a reference to a local interface.\n\nThis limitation has been resolved in 3.3. The latest version of Vue supports referencing imported and a limited set of complex types in the type parameter position. However, because the type to runtime conversion is still AST-based, some complex types that require actual type analysis, e.g. conditional types, are not supported. You can use conditional types for the type of a single prop, but not the entire props object.\n\n### Props Default Values\nWhen using type-based declaration, we lose the ability to declare default values for the props. This can be resolved by using [Reactive Props Destructure](https://vuejs.org/guide/components/props#reactive-props-destructure):\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()\n```\n\nIn 3.4 and below, Reactive Props Destructure is not enabled by default. An alternative is to use the `withDefaults` compiler macro:\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n\nThis will be compiled to equivalent runtime props `default` options. In addition, the `withDefaults` helper provides type checks for the default values, and ensures the returned `props` type has the optional flags removed for properties that do have default values declared.\n\nINFO\nNote that default values for mutable reference types (like arrays or objects) should be wrapped in functions when using `withDefaults` to avoid accidental modification and external side effects. This ensures each component instance gets its own copy of the default value. This is **not** necessary when using default values with destructure.\n\n### Without `<script setup>`\nIf not using `<script setup>`, it is necessary to use `defineComponent()` to enable props type inference. The type of the props object passed to `setup()` is inferred from the `props` option.\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // <-- type: string\n  }\n})\n```\n\n### Complex prop types\nWith type-based declaration, a prop can use a complex type much like any other type:\n\n```vue\n<script setup lang=\"ts\">\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nconst props = defineProps<{\n  book: Book\n}>()\n</script>\n```\n\nFor runtime declaration, we can use the `PropType` utility type:\n\n```ts\nimport type { PropType } from 'vue'\n\nconst props = defineProps({\n  book: Object as PropType<Book>\n})\n```\n\nThis works in much the same way if we're specifying the `props` option directly:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    book: Object as PropType<Book>\n  }\n})\n```\n\nThe `props` option is more commonly used with the Options API, so you'll find more detailed examples in the guide to [TypeScript with Options API](https://vuejs.org/guide/typescript/options-api#typing-component-props). The techniques shown in those examples also apply to runtime declarations using `defineProps()`.\n\n## Typing Component Emits\n\nIn `<script setup>`, the `emit` function can also be typed using either runtime declaration OR type declaration:\n\n```vue\n<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n\n// type-based\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number]\n  update: [value: string]\n}>()\n</script>\n```\n\nThe type argument can be one of the following:\n\n1. A callable function type, but written as a type literal with [Call Signatures](https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures). It will be used as the type of the returned `emit` function.\n2. A type literal where the keys are the event names, and values are array / tuple types representing the additional accepted parameters for the event. The example above is using named tuples so each argument can have an explicit name.\n\nAs we can see, the type declaration gives us much finer-grained control over the type constraints of emitted events.\n\nWhen not using `<script setup>`, `defineComponent()` is able to infer the allowed events for the `emit` function exposed on the setup context:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: ['change'],\n  setup(props, { emit }) {\n    emit('change') // <-- type check / auto-completion\n  }\n})\n```\n\n## Typing `ref()`\n\nRefs infer the type from the initial value:\n\n```ts\nimport { ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// => TS Error: Type 'string' is not assignable to type 'number'.\nyear.value = '2020'\n```\n\nSometimes we may need to specify complex types for a ref's inner value. We can do that by using the `Ref` type:\n\n```ts\nimport { ref } from 'vue'\nimport type { Ref } from 'vue'\n\nconst year: Ref<string | number> = ref('2020')\n\nyear.value = 2020 // ok!\n```\n\nOr, by passing a generic argument when calling `ref()` to override the default inference:\n\n```ts\n// resulting type: Ref<string | number>\nconst year = ref<string | number>('2020')\n\nyear.value = 2020 // ok!\n```\n\nIf you specify a generic type argument but omit the initial value, the resulting type will be a union type that includes `undefined`:\n\n```ts\n// inferred type: Ref<number | undefined>\nconst n = ref<number>()\n```\n\n## Typing `reactive()`\n\n`reactive()` also implicitly infers the type from its argument:\n\n```ts\nimport { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })\n```\n\nTo explicitly type a `reactive` property, we can use interfaces:\n\n```ts\nimport { reactive } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })\n```\n\nTIP\nIt's not recommended to use the generic argument of `reactive()` because the returned type, which handles nested ref unwrapping, is different from the generic argument type.\n\n## Typing `computed()`\n\n`computed()` infers its type based on the getter's return value:\n\n```ts\nimport { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n\n// => TS Error: Property 'split' does not exist on type 'number'\nconst result = double.value.split('')\n```\n\nYou can also specify an explicit type via a generic argument:\n\n```ts\nconst double = computed<number>(() => {\n  // type error if this doesn't return a number\n})\n```\n\n## Typing Event Handlers\n\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script setup lang=\"ts\">\nfunction handleChange(event) {\n  // `event` implicitly has `any` type\n  console.log(event.target.value)\n}\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if \"strict\": true or \"noImplicitAny\": true are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nfunction handleChange(event: Event) {\n  console.log((event.target as HTMLInputElement).value)\n}\n```\n\n## Typing Provide / Inject\n\nProvide and inject are usually performed in separate components. To properly type injected values, Vue provides an `InjectionKey` interface, which is a generic type that extends `Symbol`. It can be used to sync the type of the injected value between the provider and the consumer:\n\n```ts\nimport { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined\n```\n\nIt's recommended to place the injection key in a separate file so that it can be imported in multiple components.\n\nWhen using string injection keys, the type of the injected value will be `unknown`, and needs to be explicitly declared via a generic type argument:\n\n```ts\nconst foo = inject<string>('foo') // type: string | undefined\n```\n\nNotice the injected value can still be `undefined`, because there is no guarantee that a provider will provide this value at runtime.\n\nThe `undefined` type can be removed by providing a default value:\n\n```ts\nconst foo = inject<string>('foo', 'bar') // type: string\n```\n\nIf you are sure that the value is always provided, you can also force cast the value:\n\n```ts\nconst foo = inject('foo') as string\n```\n\n## Typing Template Refs\n\nWith Vue 3.5 and `@vue/language-tools` 2.1 (powering both the IDE language service and `vue-tsc`), the type of refs created by `useTemplateRef()` in SFCs can be **automatically inferred** for static refs based on what element the matching `ref` attribute is used on.\n\nIn cases where auto-inference is not possible, you can still cast the template ref to an explicit type via the generic argument:\n\n```ts\nconst el = useTemplateRef<HTMLInputElement>('el')\n```\n\nUsage before 3.5\nTemplate refs should be created with an explicit generic type argument and an initial value of `null`:\n\n```vue\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\n\nconst el = ref<HTMLInputElement | null>(null)\n\nonMounted(() => {\n  el.value?.focus()\n})\n</script>\n\n<template>\n  <input ref=\"el\" />\n</template>\n```\n\nTo get the right DOM interface you can check pages like [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#technical_summary).\n\nNote that for strict type safety, it is necessary to use optional chaining or type guards when accessing `el.value`. This is because the initial ref value is `null` until the component is mounted, and it can also be set to `null` if the referenced element is unmounted by `v-if`.\n\n## Typing Component Template Refs\n\nWith Vue 3.5 and `@vue/language-tools` 2.1 (powering both the IDE language service and `vue-tsc`), the type of refs created by `useTemplateRef()` in SFCs can be **automatically inferred** for static refs based on what element or component the matching `ref` attribute is used on.\n\nIn cases where auto-inference is not possible (e.g. non-SFC usage or dynamic components), you can still cast the template ref to an explicit type via the generic argument.\n\nIn order to get the instance type of an imported component, we need to first get its type via `typeof`, then use TypeScript's built-in `InstanceType` utility to extract its instance type:\n\n```vue\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\ntype FooType = InstanceType<typeof Foo>\ntype BarType = InstanceType<typeof Bar>\n\nconst compRef = useTemplateRef<FooType | BarType>('comp')\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" ref=\"comp\" />\n</template>\n```\n\nIn cases where the exact type of the component isn't available or isn't important, `ComponentPublicInstance` can be used instead. This will only include properties that are shared by all components, such as `$el`:\n\n```ts\nimport { useTemplateRef } from 'vue'\nimport type { ComponentPublicInstance } from 'vue'\n\nconst child = useTemplateRef<ComponentPublicInstance>('child')\n```\n\nIn cases where the component referenced is a [generic component](https://vuejs.org/guide/typescript/overview#generic-components), for instance `MyGenericModal`:\n\n```vue\n<!-- MyGenericModal.vue -->\n<script setup lang=\"ts\" generic=\"ContentType extends string | number\">\nimport { ref } from 'vue'\n\nconst content = ref<ContentType | null>(null)\n\nconst open = (newContent: ContentType) => (content.value = newContent)\n\ndefineExpose({\n  open\n})\n</script>\n```\n\nIt needs to be referenced using `ComponentExposed` from the [`vue-component-type-helpers`](https://www.npmjs.com/package/vue-component-type-helpers) library as `InstanceType` won't work.\n\n```vue\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport MyGenericModal from './MyGenericModal.vue'\nimport type { ComponentExposed } from 'vue-component-type-helpers'\n\nconst modal = useTemplateRef<ComponentExposed<typeof MyGenericModal>>('modal')\n\nconst openModal = () => {\n  modal.value?.open('newValue')\n}\n</script>\n```\n\nNote that with `@vue/language-tools` 2.1+, static template refs' types can be automatically inferred and the above is only needed in edge cases.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "overview", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component props in vue-guide?\n\nAssistant: To typing component props in vue-guide, here's what you do:\n### Using `<script setup>`\nWhen using `<script setup>`, the `defineProps()` macro supports inferring the props types based on its argument:\n\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>\n```\n\nThis is called \"runtime declaration\", because the argument passed to `defineProps()` will be used as the runtime `props` option.\n\nHowever, it is usually more straightforward to define props with pure types via a generic type argument:\n\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n</script>\n```\n\nThis is called \"type-based declaration\". The compiler will try to do its best to infer the equivalent runtime options based on the type argument. In this case, our second example compiles into the exact same runtime options as the first example.\n\nYou can use either type-based declaration OR runtime declaration, but you cannot use both at the same time.\n\nWe can also move the props types into a separate interface:\n\n```vue\n<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>\n```\n\nThis also works if `Props` is imported from an external source. This feature requires TypeScript to be a peer dependency of Vue.\n\n```vue\n<script setup lang=\"ts\">\nimport type { Props } from './foo'\n\nconst props = defineProps<Props>()\n</script>\n```\n\n#### Syntax Limitations\nIn version 3.2 and below, the generic type parameter for `defineProps()` were limited to a type literal or a reference to a local interface.\n\nThis limitation has been resolved in 3.3. The latest version of Vue supports referencing imported and a limited set of complex types in the type parameter position. However, because the type to runtime conversion is still AST-based, some complex types that require actual type analysis, e.g. conditional types, are not supported. You can use conditional types for the type of a single prop, but not the entire props object.\n\n### Props Default Values\nWhen using type-based declaration, we lose the ability to declare default values for the props. This can be resolved by using [Reactive Props Destructure](https://vuejs.org/guide/components/props#reactive-props-destructure):\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()\n```\n\nIn 3.4 and below, Reactive Props Destructure is not enabled by default. An alternative is to use the `withDefaults` compiler macro:\n\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n\nThis will be compiled to equivalent runtime props `default` options. In addition, the `withDefaults` helper provides type checks for the default values, and ensures the returned `props` type has the optional flags removed for properties that do have default values declared.\n\nINFO\nNote that default values for mutable reference types (like arrays or objects) should be wrapped in functions when using `withDefaults` to avoid accidental modification and external side effects. This ensures each component instance gets its own copy of the default value. This is **not** necessary when using default values with destructure.\n\n### Without `<script setup>`\nIf not using `<script setup>`, it is necessary to use `defineComponent()` to enable props type inference. The type of the props object passed to `setup()` is inferred from the `props` option.\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // <-- type: string\n  }\n})\n```\n\n### Complex prop types\nWith type-based declaration, a prop can use a complex type much like any other type:\n\n```vue\n<script setup lang=\"ts\">\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nconst props = defineProps<{\n  book: Book\n}>()\n</script>\n```\n\nFor runtime declaration, we can use the `PropType` utility type:\n\n```ts\nimport type { PropType } from 'vue'\n\nconst props = defineProps({\n  book: Object as PropType<Book>\n})\n```\n\nThis works in much the same way if we're specifying the `props` option directly:\n\n```ts\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    book: Object as PropType<Book>\n  }\n})\n```\n\nThe `props` option is more commonly used with the Options API, so you'll find more detailed examples in the guide to [TypeScript with Options API](https://vuejs.org/guide/typescript/options-api#typing-component-props). The techniques shown in those examples also apply to runtime declarations using `defineProps()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component emits in vue-guide?\n\nAssistant: To typing component emits in vue-guide, here's what you do:\nIn `<script setup>`, the `emit` function can also be typed using either runtime declaration OR type declaration:\n\n```vue\n<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n\n// type-based\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number]\n  update: [value: string]\n}>()\n</script>\n```\n\nThe type argument can be one of the following:\n\n1. A callable function type, but written as a type literal with [Call Signatures](https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures). It will be used as the type of the returned `emit` function.\n2. A type literal where the keys are the event names, and values are array / tuple types representing the additional accepted parameters for the event. The example above is using named tuples so each argument can have an explicit name.\n\nAs we can see, the type declaration gives us much finer-grained control over the type constraints of emitted events.\n\nWhen not using `<script setup>`, `defineComponent()` is able to infer the allowed events for the `emit` function exposed on the setup context:\n\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: ['change'],\n  setup(props, { emit }) {\n    emit('change') // <-- type check / auto-completion\n  }\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing `ref()` in vue-guide?\n\nAssistant: To typing `ref()` in vue-guide, here's what you do:\nRefs infer the type from the initial value:\n\n```ts\nimport { ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// => TS Error: Type 'string' is not assignable to type 'number'.\nyear.value = '2020'\n```\n\nSometimes we may need to specify complex types for a ref's inner value. We can do that by using the `Ref` type:\n\n```ts\nimport { ref } from 'vue'\nimport type { Ref } from 'vue'\n\nconst year: Ref<string | number> = ref('2020')\n\nyear.value = 2020 // ok!\n```\n\nOr, by passing a generic argument when calling `ref()` to override the default inference:\n\n```ts\n// resulting type: Ref<string | number>\nconst year = ref<string | number>('2020')\n\nyear.value = 2020 // ok!\n```\n\nIf you specify a generic type argument but omit the initial value, the resulting type will be a union type that includes `undefined`:\n\n```ts\n// inferred type: Ref<number | undefined>\nconst n = ref<number>()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing `reactive()` in vue-guide?\n\nAssistant: To typing `reactive()` in vue-guide, here's what you do:\n`reactive()` also implicitly infers the type from its argument:\n\n```ts\nimport { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })\n```\n\nTo explicitly type a `reactive` property, we can use interfaces:\n\n```ts\nimport { reactive } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })\n```\n\nTIP\nIt's not recommended to use the generic argument of `reactive()` because the returned type, which handles nested ref unwrapping, is different from the generic argument type..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing `computed()` in vue-guide?\n\nAssistant: To typing `computed()` in vue-guide, here's what you do:\n`computed()` infers its type based on the getter's return value:\n\n```ts\nimport { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n\n// => TS Error: Property 'split' does not exist on type 'number'\nconst result = double.value.split('')\n```\n\nYou can also specify an explicit type via a generic argument:\n\n```ts\nconst double = computed<number>(() => {\n  // type error if this doesn't return a number\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing event handlers in vue-guide?\n\nAssistant: To typing event handlers in vue-guide, here's what you do:\nWhen dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:\n\n```vue\n<script setup lang=\"ts\">\nfunction handleChange(event) {\n  // `event` implicitly has `any` type\n  console.log(event.target.value)\n}\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>\n```\n\nWithout type annotation, the `event` argument will implicitly have a type of `any`. This will also result in a TS error if \"strict\": true or \"noImplicitAny\": true are used in `tsconfig.json`. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties of `event`:\n\n```ts\nfunction handleChange(event: Event) {\n  console.log((event.target as HTMLInputElement).value)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing provide / inject in vue-guide?\n\nAssistant: To typing provide / inject in vue-guide, here's what you do:\nProvide and inject are usually performed in separate components. To properly type injected values, Vue provides an `InjectionKey` interface, which is a generic type that extends `Symbol`. It can be used to sync the type of the injected value between the provider and the consumer:\n\n```ts\nimport { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined\n```\n\nIt's recommended to place the injection key in a separate file so that it can be imported in multiple components.\n\nWhen using string injection keys, the type of the injected value will be `unknown`, and needs to be explicitly declared via a generic type argument:\n\n```ts\nconst foo = inject<string>('foo') // type: string | undefined\n```\n\nNotice the injected value can still be `undefined`, because there is no guarantee that a provider will provide this value at runtime.\n\nThe `undefined` type can be removed by providing a default value:\n\n```ts\nconst foo = inject<string>('foo', 'bar') // type: string\n```\n\nIf you are sure that the value is always provided, you can also force cast the value:\n\n```ts\nconst foo = inject('foo') as string\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing template refs in vue-guide?\n\nAssistant: To typing template refs in vue-guide, here's what you do:\nWith Vue 3.5 and `@vue/language-tools` 2.1 (powering both the IDE language service and `vue-tsc`), the type of refs created by `useTemplateRef()` in SFCs can be **automatically inferred** for static refs based on what element the matching `ref` attribute is used on.\n\nIn cases where auto-inference is not possible, you can still cast the template ref to an explicit type via the generic argument:\n\n```ts\nconst el = useTemplateRef<HTMLInputElement>('el')\n```\n\nUsage before 3.5\nTemplate refs should be created with an explicit generic type argument and an initial value of `null`:\n\n```vue\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\n\nconst el = ref<HTMLInputElement | null>(null)\n\nonMounted(() => {\n  el.value?.focus()\n})\n</script>\n\n<template>\n  <input ref=\"el\" />\n</template>\n```\n\nTo get the right DOM interface you can check pages like [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#technical_summary).\n\nNote that for strict type safety, it is necessary to use optional chaining or type guards when accessing `el.value`. This is because the initial ref value is `null` until the component is mounted, and it can also be set to `null` if the referenced element is unmounted by `v-if`..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: How do I typing component template refs in vue-guide?\n\nAssistant: To typing component template refs in vue-guide, here's what you do:\nWith Vue 3.5 and `@vue/language-tools` 2.1 (powering both the IDE language service and `vue-tsc`), the type of refs created by `useTemplateRef()` in SFCs can be **automatically inferred** for static refs based on what element or component the matching `ref` attribute is used on.\n\nIn cases where auto-inference is not possible (e.g. non-SFC usage or dynamic components), you can still cast the template ref to an explicit type via the generic argument.\n\nIn order to get the instance type of an imported component, we need to first get its type via `typeof`, then use TypeScript's built-in `InstanceType` utility to extract its instance type:\n\n```vue\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\ntype FooType = InstanceType<typeof Foo>\ntype BarType = InstanceType<typeof Bar>\n\nconst compRef = useTemplateRef<FooType | BarType>('comp')\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" ref=\"comp\" />\n</template>\n```\n\nIn cases where the exact type of the component isn't available or isn't important, `ComponentPublicInstance` can be used instead. This will only include properties that are shared by all components, such as `$el`:\n\n```ts\nimport { useTemplateRef } from 'vue'\nimport type { ComponentPublicInstance } from 'vue'\n\nconst child = useTemplateRef<ComponentPublicInstance>('child')\n```\n\nIn cases where the component referenced is a [generic component](https://vuejs.org/guide/typescript/overview#generic-components), for instance `MyGenericModal`:\n\n```vue\n<!-- MyGenericModal.vue -->\n<script setup lang=\"ts\" generic=\"ContentType extends string | number\">\nimport { ref } from 'vue'\n\nconst content = ref<ContentType | null>(null)\n\nconst open = (newContent: ContentType) => (content.value = newContent)\n\ndefineExpose({\n  open\n})\n</script>\n```\n\nIt needs to be referenced using `ComponentExposed` from the [`vue-component-type-helpers`](https://www.npmjs.com/package/vue-component-type-helpers) library as `InstanceType` won't work.\n\n```vue\n<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport MyGenericModal from './MyGenericModal.vue'\nimport type { ComponentExposed } from 'vue-component-type-helpers'\n\nconst modal = useTemplateRef<ComponentExposed<typeof MyGenericModal>>('modal')\n\nconst openModal = () => {\n  modal.value?.open('newValue')\n}\n</script>\n```\n\nNote that with `@vue/language-tools` 2.1+, static template refs' types can be automatically inferred and the above is only needed in edge cases..\nPretty straightforward, right?", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "section_detail", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: Can you give me some code examples for TypeScript with Composition API in vue-guide?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using `<script setup>`**:\n\n```yaml\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>\n```\n```\n\nThis snippet shows you how to using `<script setup>`, which is an important aspect of typescript with composition api.\n\n**Type-based declaration**:\n\n```yaml\n```vue\n<script setup lang=\"ts\">\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n</script>\n```\n```\n\nThis snippet shows you how to type-based declaration, which is an important aspect of typescript with composition api.\n\n**Moving props types into a separate interface**:\n\n```yaml\n```vue\n<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>\n```\n```\n\nThis snippet shows you how to moving props types into a separate interface, which is an important aspect of typescript with composition api.\n\n**Using `withDefaults` compiler macro**:\n\n```yaml\n```ts\ninterface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})\n```\n```\n\nThis snippet shows you how to using `withdefaults` compiler macro, which is an important aspect of typescript with composition api.\n\n**Using `defineComponent()`**:\n\n```yaml\n```ts\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // <-- type: string\n  }\n})\n```\n```\n\nThis snippet shows you how to using `definecomponent()`, which is an important aspect of typescript with composition api.\n\n**Complex prop types**:\n\n```yaml\n```vue\n<script setup lang=\"ts\">\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nconst props = defineProps<{\n  book: Book\n}>()\n</script>\n```\n```\n\nThis snippet shows you how to complex prop types, which is an important aspect of typescript with composition api.\n\n**Using `PropType` utility type**:\n\n```yaml\n```ts\nimport type { PropType } from 'vue'\n\nconst props = defineProps({\n  book: Object as PropType<Book>\n})\n```\n```\n\nThis snippet shows you how to using `proptype` utility type, which is an important aspect of typescript with composition api.\n\n**Typing `emit` function**:\n\n```yaml\n```vue\n<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n\n// type-based\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number]\n  update: [value: string]\n}>()\n</script>\n```\n```\n\nThis snippet shows you how to typing `emit` function, which is an important aspect of typescript with composition api.\n\n**Typing `ref()`**:\n\n```yaml\n```ts\nimport { ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// => TS Error: Type 'string' is not assignable to type 'number'.\nyear.value = '2020'\n```\n```\n\nThis snippet shows you how to typing `ref()`, which is an important aspect of typescript with composition api.\n\n**Typing `reactive()`**:\n\n```yaml\n```ts\nimport { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })\n```\n```\n\nThis snippet shows you how to typing `reactive()`, which is an important aspect of typescript with composition api.\n\n**Typing `computed()`**:\n\n```yaml\n```ts\nimport { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n```\n```\n\nThis snippet shows you how to typing `computed()`, which is an important aspect of typescript with composition api.\n\n**Typing Provide / Inject**:\n\n```yaml\n```ts\nimport { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined\n```\n```\n\nThis snippet shows you how to typing provide / inject, which is an important aspect of typescript with composition api.\n\n", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "code_examples", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful vue-guide expert.\n\nUser: What are some tips for using TypeScript with Composition API in vue-guide effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt's not recommended to use the generic argument of `reactive()` because the returned type, which handles nested ref unwrapping, is different from the generic argument type.\n\nNote that default values for mutable reference types (like arrays or objects) should be wrapped in functions when using `withDefaults` to avoid accidental modification and external side effects. This ensures each component instance gets its own copy of the default value. This is **not** necessary when using default values with destructure.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://vuejs.org/guide/typescript/composition-api.html", "title": "TypeScript with Composition API", "description": "This page assumes you've already read the overview on Using Vue with TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 06:53:37", "type": "best_practices", "page_metadata": {"og:description": "Vue.js - The Progressive JavaScript Framework", "og:image": "https://vuejs.org/images/logo.png", "ogDescription": "Vue.js - The Progressive JavaScript Framework", "language": "en-US", "ogUrl": "https://vuejs.org/", "favicon": "https://vuejs.org/logo.svg", "generator": "VitePress v1.6.3", "og:url": "https://vuejs.org/", "viewport": "width=device-width,initial-scale=1", "theme-color": "#3c8772", "description": "Vue.js - The Progressive JavaScript Framework", "twitter:site": "@vuejs", "og:title": "Vue.js", "og:type": "website", "twitter:card": "summary", "ogTitle": "Vue.js", "ogImage": "https://vuejs.org/images/logo.png", "title": "TypeScript with Composition API | Vue.js", "scrapeId": "d0bd35fb-6791-450e-9d34-1e3c75e080e6", "sourceURL": "https://vuejs.org/guide/typescript/composition-api.html", "url": "https://vuejs.org/guide/typescript/composition-api.html", "statusCode": 200}}}
