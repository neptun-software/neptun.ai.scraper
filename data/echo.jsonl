{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Features is in echo?\n\nAssistant: Sure, I'd be happy to explain Features in echo.\n\n# Features\n\nThis page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.Here's a quick rundown of what this is about:\n\n## Optimized Router\n\nEcho boasts a highly optimized HTTP router that operates without dynamic memory allocation. This router intelligently prioritizes routes for efficient routing and processing of incoming HTTP requests. The absence of dynamic memory allocation contributes to better performance and resource utilization.\n\n## Scalable\n\nEcho framework empowers developers to build robust and scalable RESTful APIs effortlessly. It facilitates the organization of endpoints into logical groups, simplifying the management of complex APIs. This scalability ensures that your application can grow and handle increased traffic or functionality seamlessly.\n\n## Automatic TLS\n\nEcho streamlines the process of enabling secure communication by automatically handling TLS certificate installation from Let's Encrypt. This automation simplifies the setup of secure connections, allowing you to secure your application with minimal effort.\n\n## HTTP/2 Support\n\nEcho embraces the HTTP/2 protocol, which enhances the speed and responsiveness of your web applications. HTTP/2 is designed to provide a faster and more efficient user experience by optimizing the way data is transmitted between the server and the client.\n\n## Middleware\n\nEcho offers a rich collection of built-in middleware functions that can be utilized to enhance your application's functionality and security. You can apply middleware at different levels: globally at the root level, within specific route groups, or on individual routes. Additionally, Echo allows developers to define their custom middleware to tailor the application's behavior to specific needs.\n\n## Data Binding\n\nEcho simplifies the process of binding HTTP request payloads, including JSON, XML, or form-data. This feature makes it easy to extract and work with data sent in the request body, enabling seamless integration with your application logic.\n\n## Data Rendering\n\nEcho provides a versatile API for sending various types of HTTP responses. You can easily send responses in formats such as JSON, XML, HTML, files, attachments, inline content, streams, or blobs. This flexibility ensures that your application can generate and serve different types of content to clients based on their needs.\n\n## Templates\n\nEcho supports template rendering using any template engine of your choice. This feature allows you to generate dynamic HTML content for rendering web pages, email templates, or other view-based responses. You have the freedom to select the template engine that best suits your project.\n\n## Extensible\n\nEcho offers extensibility at various levels. You can customize centralized HTTP error handling to gracefully manage errors and exceptions. Moreover, the framework provides an easily extendable API, allowing you to create custom middleware, plugins, or components to tailor Echo to your specific requirements and integrate third-party functionality seamlessly.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "overview", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I optimized router in echo?\n\nAssistant: To optimized router in echo, here's what you do:\nEcho boasts a highly optimized HTTP router that operates without dynamic memory allocation. This router intelligently prioritizes routes for efficient routing and processing of incoming HTTP requests. The absence of dynamic memory allocation contributes to better performance and resource utilization..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I scalable in echo?\n\nAssistant: To scalable in echo, here's what you do:\nEcho framework empowers developers to build robust and scalable RESTful APIs effortlessly. It facilitates the organization of endpoints into logical groups, simplifying the management of complex APIs. This scalability ensures that your application can grow and handle increased traffic or functionality seamlessly..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I automatic tls in echo?\n\nAssistant: To automatic tls in echo, here's what you do:\nEcho streamlines the process of enabling secure communication by automatically handling TLS certificate installation from Let's Encrypt. This automation simplifies the setup of secure connections, allowing you to secure your application with minimal effort..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http/2 support in echo?\n\nAssistant: To http/2 support in echo, here's what you do:\nEcho embraces the HTTP/2 protocol, which enhances the speed and responsiveness of your web applications. HTTP/2 is designed to provide a faster and more efficient user experience by optimizing the way data is transmitted between the server and the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I middleware in echo?\n\nAssistant: To middleware in echo, here's what you do:\nEcho offers a rich collection of built-in middleware functions that can be utilized to enhance your application's functionality and security. You can apply middleware at different levels: globally at the root level, within specific route groups, or on individual routes. Additionally, Echo allows developers to define their custom middleware to tailor the application's behavior to specific needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I data binding in echo?\n\nAssistant: To data binding in echo, here's what you do:\nEcho simplifies the process of binding HTTP request payloads, including JSON, XML, or form-data. This feature makes it easy to extract and work with data sent in the request body, enabling seamless integration with your application logic..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I data rendering in echo?\n\nAssistant: To data rendering in echo, here's what you do:\nEcho provides a versatile API for sending various types of HTTP responses. You can easily send responses in formats such as JSON, XML, HTML, files, attachments, inline content, streams, or blobs. This flexibility ensures that your application can generate and serve different types of content to clients based on their needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I templates in echo?\n\nAssistant: To templates in echo, here's what you do:\nEcho supports template rendering using any template engine of your choice. This feature allows you to generate dynamic HTML content for rendering web pages, email templates, or other view-based responses. You have the freedom to select the template engine that best suits your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I extensible in echo?\n\nAssistant: To extensible in echo, here's what you do:\nEcho offers extensibility at various levels. You can customize centralized HTTP error handling to gracefully manage errors and exceptions. Moreover, the framework provides an easily extendable API, allowing you to create custom middleware, plugins, or components to tailor Echo to your specific requirements and integrate third-party functionality seamlessly..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com", "title": "Features", "description": "This page covers the various features of the Echo framework, highlighting its capabilities and advantages for building web applications.", "has_code_examples": false, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 02:51:21", "type": "section_detail", "page_metadata": {"title": "High performance, extensible, minimalist Go web framework | Echo", "ogTitle": "High performance, extensible, minimalist Go web framework | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docsearch:docusaurus_tag": "default", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/", "docsearch:language": "en", "og:locale": "en", "og:url": "https://echo.labstack.com/", "og:title": "High performance, extensible, minimalist Go web framework | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "docusaurus_tag": "default", "docusaurus_locale": "en", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Echo is a high-performance web framework for building robust and scalable applications in Go.\n  With its minimalist design and powerful features, Echo enables developers to create efficient APIs and web\n  applications with ease. Harness the speed, flexibility, and simplicity of Echo to accelerate your Go development\n  projects.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "0348b961-201c-4d51-8d9a-de2f68e05388", "sourceURL": "https://echo.labstack.com", "url": "https://echo.labstack.com/", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Search the documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Search the documentation in echo.\n\n# Search the documentation\n\nThis page provides a search functionality for the documentation using Algolia.", "metadata": {"source_url": "https://echo.labstack.com/search", "title": "Search the documentation", "description": "This page provides a search functionality for the documentation using Algolia.", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-03-01 02:52:29", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/search", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Search the documentation | Echo", "docusaurus_locale": "en", "docusaurus_tag": "default", "docsearch:language": "en", "docsearch:docusaurus_tag": "default", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:title": "Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Echo", "robots": "noindex, follow", "og:url": "https://echo.labstack.com/search", "scrapeId": "5cc4fa1c-ecb1-4aab-95eb-245d29c7e1d0", "sourceURL": "https://echo.labstack.com/search", "url": "https://echo.labstack.com/search", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Echo Project is in echo?\n\nAssistant: Sure, I'd be happy to explain Echo Project in echo.\n\n# Echo Project\n\nThe Echo project is a powerful and versatile web framework for building scalable and high-performance web applications in the Go programming language. It follows the principles of simplicity, flexibility, and performance to provide developers with an efficient toolkit for building robust web applications.Here's a quick rundown of what this is about:\n\n## Key Features\n\n- **Fast and Lightweight**: Echo is designed for speed and efficiency, ensuring minimal overhead and high performance for handling HTTP requests and responses.\n- **Routing**: The framework offers a flexible and intuitive routing system that allows developers to define routes with parameters, query strings, and custom handlers.\n- **Middleware Support**: Echo provides extensive middleware support, enabling developers to easily implement cross-cutting concerns such as logging, authentication, error handling, and more.\n- **Context-based Request Handling**: With its context-based request handling, Echo offers easy access to request-specific data and parameters, simplifying the development of web applications.\n- **Powerful Template Rendering**: Echo includes a powerful template rendering engine that supports various template languages, allowing developers to generate dynamic HTML content effortlessly.\n- **Validation and Binding**: The framework provides robust validation and data binding capabilities, making it straightforward to validate incoming request data and bind it to Go structs.\n- **Extensibility**: Echo is highly extensible, with support for custom middleware, template engines, and other components, enabling developers to tailor the framework to their specific needs.\n- **Community and Ecosystem**: The Echo project benefits from a vibrant and active community that contributes libraries, plugins, and extensions, fostering an ecosystem of reusable components.\n\n## Resources and Documentation\n\nTo learn more about the Echo project, you can refer to the following resources:\n\n- Official Website: [https://echo.labstack.com](https://echo.labstack.com/)\n- GitHub Repository: [https://github.com/labstack/echo](https://github.com/labstack/echo)\n- Documentation: [https://echo.labstack.com/docs](https://echo.labstack.com/guide)\n- Community Forum: [https://github.com/labstack/echo/discussions](https://github.com/labstack/echo/discussions)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs", "title": "Echo Project", "description": "The Echo project is a powerful and versatile web framework for building scalable and high-performance web applications in the Go programming language. It follows the principles of simplicity, flexibility, and performance to provide developers with an efficient toolkit for building robust web applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:52:58", "type": "overview", "page_metadata": {"docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "LabStack Echo Project", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "description": "LabStack Echo Project", "ogUrl": "https://echo.labstack.com/docs", "og:locale": "en", "title": "Introduction | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "LabStack Echo Project", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs", "docsearch:language": "en", "docsearch:version": "current", "ogTitle": "Introduction | Echo", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Introduction | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "22b4fffb-e0a1-4646-81a7-b1271bdd6d8e", "sourceURL": "https://echo.labstack.com/docs", "url": "https://echo.labstack.com/docs", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I key features in echo?\n\nAssistant: To key features in echo, here's what you do:\n- **Fast and Lightweight**: Echo is designed for speed and efficiency, ensuring minimal overhead and high performance for handling HTTP requests and responses.\n- **Routing**: The framework offers a flexible and intuitive routing system that allows developers to define routes with parameters, query strings, and custom handlers.\n- **Middleware Support**: Echo provides extensive middleware support, enabling developers to easily implement cross-cutting concerns such as logging, authentication, error handling, and more.\n- **Context-based Request Handling**: With its context-based request handling, Echo offers easy access to request-specific data and parameters, simplifying the development of web applications.\n- **Powerful Template Rendering**: Echo includes a powerful template rendering engine that supports various template languages, allowing developers to generate dynamic HTML content effortlessly.\n- **Validation and Binding**: The framework provides robust validation and data binding capabilities, making it straightforward to validate incoming request data and bind it to Go structs.\n- **Extensibility**: Echo is highly extensible, with support for custom middleware, template engines, and other components, enabling developers to tailor the framework to their specific needs.\n- **Community and Ecosystem**: The Echo project benefits from a vibrant and active community that contributes libraries, plugins, and extensions, fostering an ecosystem of reusable components..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs", "title": "Echo Project", "description": "The Echo project is a powerful and versatile web framework for building scalable and high-performance web applications in the Go programming language. It follows the principles of simplicity, flexibility, and performance to provide developers with an efficient toolkit for building robust web applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:52:58", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "LabStack Echo Project", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "description": "LabStack Echo Project", "ogUrl": "https://echo.labstack.com/docs", "og:locale": "en", "title": "Introduction | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "LabStack Echo Project", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs", "docsearch:language": "en", "docsearch:version": "current", "ogTitle": "Introduction | Echo", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Introduction | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "22b4fffb-e0a1-4646-81a7-b1271bdd6d8e", "sourceURL": "https://echo.labstack.com/docs", "url": "https://echo.labstack.com/docs", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I resources and documentation in echo?\n\nAssistant: To resources and documentation in echo, here's what you do:\nTo learn more about the Echo project, you can refer to the following resources:\n\n- Official Website: [https://echo.labstack.com](https://echo.labstack.com/)\n- GitHub Repository: [https://github.com/labstack/echo](https://github.com/labstack/echo)\n- Documentation: [https://echo.labstack.com/docs](https://echo.labstack.com/guide)\n- Community Forum: [https://github.com/labstack/echo/discussions](https://github.com/labstack/echo/discussions).\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs", "title": "Echo Project", "description": "The Echo project is a powerful and versatile web framework for building scalable and high-performance web applications in the Go programming language. It follows the principles of simplicity, flexibility, and performance to provide developers with an efficient toolkit for building robust web applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:52:58", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "LabStack Echo Project", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "description": "LabStack Echo Project", "ogUrl": "https://echo.labstack.com/docs", "og:locale": "en", "title": "Introduction | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "LabStack Echo Project", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs", "docsearch:language": "en", "docsearch:version": "current", "ogTitle": "Introduction | Echo", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Introduction | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "22b4fffb-e0a1-4646-81a7-b1271bdd6d8e", "sourceURL": "https://echo.labstack.com/docs", "url": "https://echo.labstack.com/docs", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Echo Project in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nJoin the vibrant community of Echo developers, explore the vast ecosystem of plugins and extensions, and unleash the power of Echo for your web development needs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs", "title": "Echo Project", "description": "The Echo project is a powerful and versatile web framework for building scalable and high-performance web applications in the Go programming language. It follows the principles of simplicity, flexibility, and performance to provide developers with an efficient toolkit for building robust web applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:52:58", "type": "best_practices", "page_metadata": {"docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "LabStack Echo Project", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "description": "LabStack Echo Project", "ogUrl": "https://echo.labstack.com/docs", "og:locale": "en", "title": "Introduction | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "LabStack Echo Project", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs", "docsearch:language": "en", "docsearch:version": "current", "ogTitle": "Introduction | Echo", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Introduction | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "22b4fffb-e0a1-4646-81a7-b1271bdd6d8e", "sourceURL": "https://echo.labstack.com/docs", "url": "https://echo.labstack.com/docs", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Binding in Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Binding in Echo in echo.\n\n# Binding in Echo\n\nParsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.Here's a quick rundown of what this is about:\n\n## Struct Tag Binding\n\nWith struct binding you define a Go struct with tags specifying the data source and corresponding key. In your request handler you simply call `Context#Bind(i interface{})` with a pointer to your struct. The tags tell the binder everything it needs to know to load data from the request.\n\nIn this example a struct type `User` tells the binder to bind the query string parameter `id` to its string field `ID`:\n\n```go\ntype User struct {\n  ID string `query:\"id\"`\n}\n\n// in the handler for /users?id=<userID>\nvar user User\nerr := c.Bind(&user); if err != nil {\n    return c.String(http.StatusBadRequest, \"bad request\")\n}\n```\n\n\n## Data Sources\n\nEcho supports the following tags specifying data sources:\n\n- `query` - query parameter\n- `param` - path parameter (also called route)\n- `header` - header parameter\n- `json` - request body. Uses builtin Go [json](https://golang.org/pkg/encoding/json/) package for unmarshalling.\n- `xml` - request body. Uses builtin Go [xml](https://golang.org/pkg/encoding/xml/) package for unmarshalling.\n- `form` - form data. Values are taken from query and request body. Uses Go standard library form parsing.\n\n## Data Types\n\nWhen decoding the request body, the following data types are supported as specified by the `Content-Type` header:\n\n- `application/json`\n- `application/xml`\n- `application/x-www-form-urlencoded`\n\nWhen binding path parameter, query parameter, header, or form data, tags must be explicitly set on each struct field. However, JSON and XML binding is done on the struct field name if the tag is omitted. This is according to the behaviour of [Go's json package](https://pkg.go.dev/encoding/json#Unmarshal).\n\nFor form data, Echo uses Go standard library form parsing. This parses form data from both the request URL and body if content type is not `MIMEMultipartForm`. See documentation for [non-MIMEMultipartForm](https://golang.org/pkg/net/http/#Request.ParseForm) and [MIMEMultipartForm](https://golang.org/pkg/net/http/#Request.ParseMultipartForm).\n\n## Multiple Sources\n\nIt is possible to specify multiple sources on the same field. In this case request data is bound in this order:\n\n1. Path parameters\n2. Query parameters (only for GET/DELETE methods)\n3. Request body\n\n```go\ntype User struct {\n  ID string `param:\"id\" query:\"id\" form:\"id\" json:\"id\" xml:\"id\"`\n}\n```\n\nNote that binding at each stage will overwrite data bound in a previous stage. This means if your JSON request contains the query param `name=query` and body `{\"name\": \"body\"}` then the result will be `User{Name: \"body\"}`.\n\n## Direct Source\n\nIt is also possible to bind data directly from a specific source:\n\nRequest body:\n\n```go\nerr := (&DefaultBinder{}).BindBody(c, &payload)\n```\n\nQuery parameters:\n\n```go\nerr := (&DefaultBinder{}).BindQueryParams(c, &payload)\n```\n\nPath parameters:\n\n```go\nerr := (&DefaultBinder{}).BindPathParams(c, &payload)\n```\n\nHeader parameters:\n\n```go\nerr := (&DefaultBinder{}).BindHeaders(c, &payload)\n```\n\nNote that headers is not one of the included sources with `Context#Bind`. The only way to bind header data is by calling `BindHeaders` directly.\n\n## Security\n\nTo keep your application secure, avoid passing bound structs directly to other methods if these structs contain fields that should not be bindable. It is advisable to have a separate struct for binding and map it explicitly to your business struct.\n\nConsider what will happen if your bound struct has an Exported field `IsAdmin bool` and the request body contains `{IsAdmin: true, Name: \"hacker\"}`.\n\n## Example\n\nIn this example we define a `User` struct type with field tags to bind from `json`, `form`, or `query` request data:\n\n```go\ntype UserDTO struct {\n  Name  string `json:\"name\" form:\"name\" query:\"name\"`\n  Email string `json:\"email\" form:\"email\" query:\"email\"`\n}\n\ntype User struct {\n  Name    string\n  Email   string\n  IsAdmin bool\n}\n```\n\nAnd a handler at the POST `/users` route binds request data to the struct:\n\n```go\ne.POST(\"/users\", func(c echo.Context) (err error) {\n  u := new(UserDTO)\n  if err := c.Bind(u); err != nil {\n    return c.String(http.StatusBadRequest, \"bad request\")\n  }\n\n  // Load into separate struct for security\n  user := User{\n    Name: u.Name,\n    Email: u.Email,\n    IsAdmin: false // avoids exposing field that should not be bound\n  }\n\n  executeSomeBusinessLogic(user)\n\n  return c.JSON(http.StatusOK, u)\n})\n```\n\n#### JSON Data\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe\",\"email\":\"joe@labstack\"}'\n```\n\n#### Form Data\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -d 'name=Joe' \\\n  -d 'email=joe@labstack.com'\n```\n\n#### Query Parameters\n\n```bash\ncurl -X GET 'http://localhost:1323/users?name=Joe&email=joe@labstack.com'\n```\n\n## Fluent Binding\n\nEcho provides an interface to bind explicit data types from a specified source. It uses method chaining, also known as a [Fluent Interface](https://en.wikipedia.org/wiki/Fluent_interface).\n\nThe following methods provide a handful of methods for binding to Go data type. These binders offer a fluent syntax and can be chained to configure & execute binding, and handle errors.\n\n- `echo.QueryParamsBinder(c)` - binds query parameters (source URL)\n- `echo.PathParamsBinder(c)` - binds path parameters (source URL)\n- `echo.FormFieldBinder(c)` - binds form fields (source URL + body). See also [Request.ParseForm](https://golang.org/pkg/net/http/#Request.ParseForm).\n\n## Error Handling\n\nA binder is usually completed by calling `BindError()` or `BindErrors()`. If any errors have occurred, `BindError()` returns the first error encountered, while `BindErrors()` returns all bind errors. Any errors stored in the binder are also reset.\n\nWith `FailFast(true)` the binder can be configured to stop binding on the first error, or with `FailFast(false)` execute the entire binder call chain. Fail fast is enabled by default and should be disabled when using `BindErrors()`.\n\n## Example\n\n```go\n// url =  \"/api/search?active=true&id=1&id=2&id=3&length=25\"\nvar opts struct {\n  IDs []int64\n  Active bool\n}\nlength := int64(50) // default length is 50\n\n// creates query params binder that stops binding at first error\nerr := echo.QueryParamsBinder(c).\n  Int64(\"length\", &length).\n  Int64s(\"ids\", &opts.IDs).\n  Bool(\"active\", &opts.Active).\n  BindError() // returns first binding error\n```\n\n## Supported Data Types\n\n| Data Type | Notes |\n| --- | --- |\n| `bool` |  |\n| `float32` |  |\n| `float64` |  |\n| `int` |  |\n| `int8` |  |\n| `int16` |  |\n| `int32` |  |\n| `int64` |  |\n| `uint` |  |\n| `uint8/byte` | Does not support `bytes()`. Use `BindUnmarshaler`/ `CustomFunc` to convert value from base64 etc to `[]byte{}`. |\n| `uint16` |  |\n| `uint32` |  |\n| `uint64` |  |\n| `string` |  |\n| `time` |  |\n| `duration` |  |\n| `BindUnmarshaler()` | binds to a type implementing BindUnmarshaler interface |\n| `TextUnmarshaler()` | binds to a type implementing encoding.TextUnmarshaler interface |\n| `JsonUnmarshaler()` | binds to a type implementing json.Unmarshaler interface |\n| `UnixTime()` | converts Unix time (integer) to `time.Time` |\n| `UnixTimeMilli()` | converts Unix time with millisecond precision (integer) to `time.Time` |\n| `UnixTimeNano()` | converts Unix time with nanosecond precision (integer) to `time.Time` |\n| `CustomFunc()` | callback function for your custom conversion logic |\n\nEach supported type has the following methods:\n- `<Type>(\"param\", &destination)` - if parameter value exists then binds it to given destination of that type i.e `Int64(...)`.\n- `Must<Type>(\"param\", &destination)` - parameter value is required to exist, binds it to given destination of that type i.e `MustInt64(...)`.\n- `<Type>s(\"param\", &destination)` - (for slices) if parameter values exists then binds it to given destination of that type i.e `Int64s(...)`.\n- `Must<Type>s(\"param\", &destination)` - (for slices) parameter value is required to exist, binds it to given destination of that type i.e `MustInt64s(...)`.\n\nFor certain slice types `BindWithDelimiter(\"param\", &dest, \",\")` supports splitting parameter values before type conversion is done. For example binding an integer slice from the URL `/api/search?id=1,2,3&id=1` will result in `[]int64{1,2,3,1}`.\n\n## Custom Binding\n\nA custom binder can be registered using `Echo#Binder`.\n\n```go\ntype CustomBinder struct {}\n\nfunc (cb *CustomBinder) Bind(i interface{}, c echo.Context) (err error) {\n  // You may use default binder\n  db := new(echo.DefaultBinder)\n  if err := db.Bind(i, c); err != echo.ErrUnsupportedMediaType {\n    return\n  }\n\n  // Define your custom implementation here\n  return\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I struct tag binding in echo?\n\nAssistant: To struct tag binding in echo, here's what you do:\nWith struct binding you define a Go struct with tags specifying the data source and corresponding key. In your request handler you simply call `Context#Bind(i interface{})` with a pointer to your struct. The tags tell the binder everything it needs to know to load data from the request.\n\nIn this example a struct type `User` tells the binder to bind the query string parameter `id` to its string field `ID`:\n\n```go\ntype User struct {\n  ID string `query:\"id\"`\n}\n\n// in the handler for /users?id=<userID>\nvar user User\nerr := c.Bind(&user); if err != nil {\n    return c.String(http.StatusBadRequest, \"bad request\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I data sources in echo?\n\nAssistant: To data sources in echo, here's what you do:\nEcho supports the following tags specifying data sources:\n\n- `query` - query parameter\n- `param` - path parameter (also called route)\n- `header` - header parameter\n- `json` - request body. Uses builtin Go [json](https://golang.org/pkg/encoding/json/) package for unmarshalling.\n- `xml` - request body. Uses builtin Go [xml](https://golang.org/pkg/encoding/xml/) package for unmarshalling.\n- `form` - form data. Values are taken from query and request body. Uses Go standard library form parsing..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I data types in echo?\n\nAssistant: To data types in echo, here's what you do:\nWhen decoding the request body, the following data types are supported as specified by the `Content-Type` header:\n\n- `application/json`\n- `application/xml`\n- `application/x-www-form-urlencoded`\n\nWhen binding path parameter, query parameter, header, or form data, tags must be explicitly set on each struct field. However, JSON and XML binding is done on the struct field name if the tag is omitted. This is according to the behaviour of [Go's json package](https://pkg.go.dev/encoding/json#Unmarshal).\n\nFor form data, Echo uses Go standard library form parsing. This parses form data from both the request URL and body if content type is not `MIMEMultipartForm`. See documentation for [non-MIMEMultipartForm](https://golang.org/pkg/net/http/#Request.ParseForm) and [MIMEMultipartForm](https://golang.org/pkg/net/http/#Request.ParseMultipartForm)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I multiple sources in echo?\n\nAssistant: To multiple sources in echo, here's what you do:\nIt is possible to specify multiple sources on the same field. In this case request data is bound in this order:\n\n1. Path parameters\n2. Query parameters (only for GET/DELETE methods)\n3. Request body\n\n```go\ntype User struct {\n  ID string `param:\"id\" query:\"id\" form:\"id\" json:\"id\" xml:\"id\"`\n}\n```\n\nNote that binding at each stage will overwrite data bound in a previous stage. This means if your JSON request contains the query param `name=query` and body `{\"name\": \"body\"}` then the result will be `User{Name: \"body\"}`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I direct source in echo?\n\nAssistant: To direct source in echo, here's what you do:\nIt is also possible to bind data directly from a specific source:\n\nRequest body:\n\n```go\nerr := (&DefaultBinder{}).BindBody(c, &payload)\n```\n\nQuery parameters:\n\n```go\nerr := (&DefaultBinder{}).BindQueryParams(c, &payload)\n```\n\nPath parameters:\n\n```go\nerr := (&DefaultBinder{}).BindPathParams(c, &payload)\n```\n\nHeader parameters:\n\n```go\nerr := (&DefaultBinder{}).BindHeaders(c, &payload)\n```\n\nNote that headers is not one of the included sources with `Context#Bind`. The only way to bind header data is by calling `BindHeaders` directly..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I security in echo?\n\nAssistant: To security in echo, here's what you do:\nTo keep your application secure, avoid passing bound structs directly to other methods if these structs contain fields that should not be bindable. It is advisable to have a separate struct for binding and map it explicitly to your business struct.\n\nConsider what will happen if your bound struct has an Exported field `IsAdmin bool` and the request body contains `{IsAdmin: true, Name: \"hacker\"}`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I example in echo?\n\nAssistant: To example in echo, here's what you do:\nIn this example we define a `User` struct type with field tags to bind from `json`, `form`, or `query` request data:\n\n```go\ntype UserDTO struct {\n  Name  string `json:\"name\" form:\"name\" query:\"name\"`\n  Email string `json:\"email\" form:\"email\" query:\"email\"`\n}\n\ntype User struct {\n  Name    string\n  Email   string\n  IsAdmin bool\n}\n```\n\nAnd a handler at the POST `/users` route binds request data to the struct:\n\n```go\ne.POST(\"/users\", func(c echo.Context) (err error) {\n  u := new(UserDTO)\n  if err := c.Bind(u); err != nil {\n    return c.String(http.StatusBadRequest, \"bad request\")\n  }\n\n  // Load into separate struct for security\n  user := User{\n    Name: u.Name,\n    Email: u.Email,\n    IsAdmin: false // avoids exposing field that should not be bound\n  }\n\n  executeSomeBusinessLogic(user)\n\n  return c.JSON(http.StatusOK, u)\n})\n```\n\n#### JSON Data\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe\",\"email\":\"joe@labstack\"}'\n```\n\n#### Form Data\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -d 'name=Joe' \\\n  -d 'email=joe@labstack.com'\n```\n\n#### Query Parameters\n\n```bash\ncurl -X GET 'http://localhost:1323/users?name=Joe&email=joe@labstack.com'\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I fluent binding in echo?\n\nAssistant: To fluent binding in echo, here's what you do:\nEcho provides an interface to bind explicit data types from a specified source. It uses method chaining, also known as a [Fluent Interface](https://en.wikipedia.org/wiki/Fluent_interface).\n\nThe following methods provide a handful of methods for binding to Go data type. These binders offer a fluent syntax and can be chained to configure & execute binding, and handle errors.\n\n- `echo.QueryParamsBinder(c)` - binds query parameters (source URL)\n- `echo.PathParamsBinder(c)` - binds path parameters (source URL)\n- `echo.FormFieldBinder(c)` - binds form fields (source URL + body). See also [Request.ParseForm](https://golang.org/pkg/net/http/#Request.ParseForm)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I error handling in echo?\n\nAssistant: To error handling in echo, here's what you do:\nA binder is usually completed by calling `BindError()` or `BindErrors()`. If any errors have occurred, `BindError()` returns the first error encountered, while `BindErrors()` returns all bind errors. Any errors stored in the binder are also reset.\n\nWith `FailFast(true)` the binder can be configured to stop binding on the first error, or with `FailFast(false)` execute the entire binder call chain. Fail fast is enabled by default and should be disabled when using `BindErrors()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I example in echo?\n\nAssistant: To example in echo, here's what you do:\n```go\n// url =  \"/api/search?active=true&id=1&id=2&id=3&length=25\"\nvar opts struct {\n  IDs []int64\n  Active bool\n}\nlength := int64(50) // default length is 50\n\n// creates query params binder that stops binding at first error\nerr := echo.QueryParamsBinder(c).\n  Int64(\"length\", &length).\n  Int64s(\"ids\", &opts.IDs).\n  Bool(\"active\", &opts.Active).\n  BindError() // returns first binding error\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I supported data types in echo?\n\nAssistant: To supported data types in echo, here's what you do:\n| Data Type | Notes |\n| --- | --- |\n| `bool` |  |\n| `float32` |  |\n| `float64` |  |\n| `int` |  |\n| `int8` |  |\n| `int16` |  |\n| `int32` |  |\n| `int64` |  |\n| `uint` |  |\n| `uint8/byte` | Does not support `bytes()`. Use `BindUnmarshaler`/ `CustomFunc` to convert value from base64 etc to `[]byte{}`. |\n| `uint16` |  |\n| `uint32` |  |\n| `uint64` |  |\n| `string` |  |\n| `time` |  |\n| `duration` |  |\n| `BindUnmarshaler()` | binds to a type implementing BindUnmarshaler interface |\n| `TextUnmarshaler()` | binds to a type implementing encoding.TextUnmarshaler interface |\n| `JsonUnmarshaler()` | binds to a type implementing json.Unmarshaler interface |\n| `UnixTime()` | converts Unix time (integer) to `time.Time` |\n| `UnixTimeMilli()` | converts Unix time with millisecond precision (integer) to `time.Time` |\n| `UnixTimeNano()` | converts Unix time with nanosecond precision (integer) to `time.Time` |\n| `CustomFunc()` | callback function for your custom conversion logic |\n\nEach supported type has the following methods:\n- `<Type>(\"param\", &destination)` - if parameter value exists then binds it to given destination of that type i.e `Int64(...)`.\n- `Must<Type>(\"param\", &destination)` - parameter value is required to exist, binds it to given destination of that type i.e `MustInt64(...)`.\n- `<Type>s(\"param\", &destination)` - (for slices) if parameter values exists then binds it to given destination of that type i.e `Int64s(...)`.\n- `Must<Type>s(\"param\", &destination)` - (for slices) parameter value is required to exist, binds it to given destination of that type i.e `MustInt64s(...)`.\n\nFor certain slice types `BindWithDelimiter(\"param\", &dest, \",\")` supports splitting parameter values before type conversion is done. For example binding an integer slice from the URL `/api/search?id=1,2,3&id=1` will result in `[]int64{1,2,3,1}`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom binding in echo?\n\nAssistant: To custom binding in echo, here's what you do:\nA custom binder can be registered using `Echo#Binder`.\n\n```go\ntype CustomBinder struct {}\n\nfunc (cb *CustomBinder) Bind(i interface{}, c echo.Context) (err error) {\n  // You may use default binder\n  db := new(echo.DefaultBinder)\n  if err := db.Bind(i, c); err != echo.ErrUnsupportedMediaType {\n    return\n  }\n\n  // Define your custom implementation here\n  return\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Binding in Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Struct Tag Binding Example**:\n\n```yaml\ntype User struct {\n  ID string `query:\"id\"`\n}\n\n// in the handler for /users?id=<userID>\nvar user User\nerr := c.Bind(&user); if err != nil {\n    return c.String(http.StatusBadRequest, \"bad request\")\n}\n```\n\nThis snippet shows you how to struct tag binding example, which is an important aspect of binding in echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Binding in Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid passing bound structs directly to other methods if these structs contain fields that should not be bindable.\n\nHave a separate struct for binding and map it explicitly to your business struct.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/binding", "title": "Binding in Echo", "description": "Parsing request data is a crucial part of a web application. In Echo this is done with a process called binding, which involves information passed by the client in various parts of an HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:56:03", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Binding | Echo", "og:locale": "en", "description": "Binding request data", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:title": "Binding | Echo", "docsearch:language": "en", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/binding", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docusaurus_locale": "en", "ogTitle": "Binding | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Binding request data", "ogUrl": "https://echo.labstack.com/docs/binding", "generator": "Docusaurus v3.6.3", "ogDescription": "Binding request data", "scrapeId": "6db89bcf-95ba-44b0-9eb6-9f55a8e01ff4", "sourceURL": "https://echo.labstack.com/docs/binding", "url": "https://echo.labstack.com/docs/binding", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Echo Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain Echo Cookbook in echo.\n\n# Echo Cookbook\n\nA collection of recipes for common tasks and patterns in Echo framework.Here's a quick rundown of what this is about:\n\n## Auto TLS\n\nAutomatic TLS certificates from Let's Encrypt recipe.\n\n## CORS\n\nCORS recipe.\n\n## CRUD\n\nCRUD (Create, read, update and delete) recipe.\n\n## Embed Resources\n\nEmbed resources recipe.\n\n## File Download\n\nFile download recipe.\n\n## File Upload\n\nFile upload recipe.\n\n## Google App Engine\n\nGoogle App Engine recipe.\n\n## Graceful Shutdown\n\nGraceful shutdown recipe.\n\n## Hello World\n\nHello world recipe.\n\n## HTTP/2 Server Push\n\nHTTP/2 server push recipe.\n\n## HTTP/2 Server\n\nHTTP/2 server recipe.\n\n## JSONP\n\nJSONP recipe.\n\n## JWT\n\nJWT recipe.\n\n## Load Balancing\n\nLoad balancing recipe.\n\n## Middleware\n\nMiddleware recipe.\n\n## Reverse Proxy\n\nReverse proxy recipe.\n\n## Server-Sent-Events (SSE)\n\nSSE recipe.\n\n## Streaming Response\n\nStreaming response recipe.\n\n## Subdomain\n\nSubdomain recipe.\n\n## Timeout\n\nTimeout recipe.\n\n## Twitter Like API\n\nTwitter like API recipe.\n\n## WebSocket\n\nWebSocket recipe.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I auto tls in echo?\n\nAssistant: To auto tls in echo, here's what you do:\nAutomatic TLS certificates from Let's Encrypt recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I cors in echo?\n\nAssistant: To cors in echo, here's what you do:\nCORS recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I crud in echo?\n\nAssistant: To crud in echo, here's what you do:\nCRUD (Create, read, update and delete) recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I embed resources in echo?\n\nAssistant: To embed resources in echo, here's what you do:\nEmbed resources recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I file download in echo?\n\nAssistant: To file download in echo, here's what you do:\nFile download recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I file upload in echo?\n\nAssistant: To file upload in echo, here's what you do:\nFile upload recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I google app engine in echo?\n\nAssistant: To google app engine in echo, here's what you do:\nGoogle App Engine recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I graceful shutdown in echo?\n\nAssistant: To graceful shutdown in echo, here's what you do:\nGraceful shutdown recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I hello world in echo?\n\nAssistant: To hello world in echo, here's what you do:\nHello world recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http/2 server push in echo?\n\nAssistant: To http/2 server push in echo, here's what you do:\nHTTP/2 server push recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http/2 server in echo?\n\nAssistant: To http/2 server in echo, here's what you do:\nHTTP/2 server recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I jsonp in echo?\n\nAssistant: To jsonp in echo, here's what you do:\nJSONP recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I jwt in echo?\n\nAssistant: To jwt in echo, here's what you do:\nJWT recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I load balancing in echo?\n\nAssistant: To load balancing in echo, here's what you do:\nLoad balancing recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I middleware in echo?\n\nAssistant: To middleware in echo, here's what you do:\nMiddleware recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I reverse proxy in echo?\n\nAssistant: To reverse proxy in echo, here's what you do:\nReverse proxy recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server-sent-events (sse) in echo?\n\nAssistant: To server-sent-events (sse) in echo, here's what you do:\nSSE recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I streaming response in echo?\n\nAssistant: To streaming response in echo, here's what you do:\nStreaming response recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I subdomain in echo?\n\nAssistant: To subdomain in echo, here's what you do:\nSubdomain recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I timeout in echo?\n\nAssistant: To timeout in echo, here's what you do:\nTimeout recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I twitter like api in echo?\n\nAssistant: To twitter like api in echo, here's what you do:\nTwitter like API recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I websocket in echo?\n\nAssistant: To websocket in echo, here's what you do:\nWebSocket recipe..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/cookbook", "title": "Echo Cookbook", "description": "A collection of recipes for common tasks and patterns in Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 22, "timestamp": "2025-03-01 02:56:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/category/cookbook", "docusaurus_locale": "en", "docusaurus_version": "current", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Cookbook | Echo", "generator": "Docusaurus v3.6.3", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/category/cookbook", "title": "Cookbook | Echo", "og:title": "Cookbook | Echo", "ogLocale": "en", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "172204f8-bc91-4488-a9f7-0986044dcba4", "sourceURL": "https://echo.labstack.com/docs/category/cookbook", "url": "https://echo.labstack.com/docs/category/cookbook", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Echo Documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Echo Documentation in echo.\n\n# Echo Documentation\n\nComprehensive guide to using the Echo framework for building web applications in Go.Here's a quick rundown of what this is about:\n\n## Quick Start\n\nA brief introduction to getting started with the Echo framework.\n\n## Customization\n\nDetails on how to customize the Echo framework to fit your needs.\n\n## Binding\n\nInformation on binding request data to structures.\n\n## Context\n\nExplanation of context management in Echo.\n\n## Cookies\n\nGuide on handling cookies in Echo.\n\n## Error Handling\n\nBest practices for error handling in Echo.\n\n## Start Server\n\nInstructions on how to start the Echo server.\n\n## IP Address\n\nHow to work with IP addresses in Echo.\n\n## Request\n\nHandling incoming requests in Echo.\n\n## Response\n\nSending responses back to clients.\n\n## Routing\n\nRouting requests to different handlers.\n\n## Static Files\n\nServing static files using Echo.\n\n## Templates\n\nUsing templates for rendering HTML.\n\n## Testing\n\nTesting handlers and middleware in Echo.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "overview", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I quick start in echo?\n\nAssistant: To quick start in echo, here's what you do:\nA brief introduction to getting started with the Echo framework..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I customization in echo?\n\nAssistant: To customization in echo, here's what you do:\nDetails on how to customize the Echo framework to fit your needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I binding in echo?\n\nAssistant: To binding in echo, here's what you do:\nInformation on binding request data to structures..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I context in echo?\n\nAssistant: To context in echo, here's what you do:\nExplanation of context management in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I cookies in echo?\n\nAssistant: To cookies in echo, here's what you do:\nGuide on handling cookies in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I error handling in echo?\n\nAssistant: To error handling in echo, here's what you do:\nBest practices for error handling in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I start server in echo?\n\nAssistant: To start server in echo, here's what you do:\nInstructions on how to start the Echo server..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I ip address in echo?\n\nAssistant: To ip address in echo, here's what you do:\nHow to work with IP addresses in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I request in echo?\n\nAssistant: To request in echo, here's what you do:\nHandling incoming requests in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I response in echo?\n\nAssistant: To response in echo, here's what you do:\nSending responses back to clients..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I routing in echo?\n\nAssistant: To routing in echo, here's what you do:\nRouting requests to different handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I static files in echo?\n\nAssistant: To static files in echo, here's what you do:\nServing static files using Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I templates in echo?\n\nAssistant: To templates in echo, here's what you do:\nUsing templates for rendering HTML..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I testing in echo?\n\nAssistant: To testing in echo, here's what you do:\nTesting handlers and middleware in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/guide", "title": "Echo Documentation", "description": "Comprehensive guide to using the Echo framework for building web applications in Go.", "has_code_examples": false, "has_best_practices": false, "section_count": 14, "timestamp": "2025-03-01 02:56:25", "type": "section_detail", "page_metadata": {"title": "Guide | Echo", "docusaurus_version": "current", "language": "en", "ogDescription": "5 minutes to learn the most important Echo concepts.", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:title": "Guide | Echo", "description": "5 minutes to learn the most important Echo concepts.", "ogLocale": "en", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "5 minutes to learn the most important Echo concepts.", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/category/guide", "ogTitle": "Guide | Echo", "ogUrl": "https://echo.labstack.com/docs/category/guide", "docsearch:language": "en", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "131457f7-9379-455f-9d21-9acb6012dd29", "sourceURL": "https://echo.labstack.com/docs/category/guide", "url": "https://echo.labstack.com/docs/category/guide", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Middleware Documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Middleware Documentation in echo.\n\n# Middleware Documentation\n\nA comprehensive guide to various middleware options available in the Echo framework.Here's a quick rundown of what this is about:\n\n## Basic Auth\n\nBasic auth middleware for securing routes.\n\n## Body Dump\n\nMiddleware for dumping the request body.\n\n## Body Limit\n\nMiddleware to limit the size of the request body.\n\n## Casbin Auth\n\nMiddleware for authorization using Casbin.\n\n## CORS\n\nMiddleware for handling Cross-Origin Resource Sharing.\n\n## CSRF\n\nMiddleware for Cross-Site Request Forgery protection.\n\n## Decompress\n\nMiddleware for decompressing request bodies.\n\n## Gzip\n\nMiddleware for Gzip compression.\n\n## Jaeger\n\nMiddleware for Jaeger tracing.\n\n## JWT\n\nMiddleware for handling JSON Web Tokens.\n\n## Key Auth\n\nMiddleware for key-based authentication.\n\n## Logger\n\nMiddleware for logging requests.\n\n## Method Override\n\nMiddleware for overriding HTTP methods.\n\n## Prometheus\n\nMiddleware for exposing Prometheus metrics.\n\n## Proxy\n\nMiddleware for reverse proxying.\n\n## Rate Limiter\n\nMiddleware for limiting the rate of requests.\n\n## Recover\n\nMiddleware for recovering from panics.\n\n## Redirect\n\nMiddleware for redirecting requests.\n\n## Request ID\n\nMiddleware for generating request IDs.\n\n## Rewrite\n\nMiddleware for rewriting request URLs.\n\n## Secure\n\nMiddleware for securing HTTP headers.\n\n## Session\n\nMiddleware for managing sessions.\n\n## Static\n\nMiddleware for serving static files.\n\n## Timeout\n\nMiddleware for setting request timeouts.\n\n## Trailing Slash\n\nMiddleware for handling trailing slashes in URLs.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "overview", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I basic auth in echo?\n\nAssistant: To basic auth in echo, here's what you do:\nBasic auth middleware for securing routes..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I body dump in echo?\n\nAssistant: To body dump in echo, here's what you do:\nMiddleware for dumping the request body..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I body limit in echo?\n\nAssistant: To body limit in echo, here's what you do:\nMiddleware to limit the size of the request body..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I casbin auth in echo?\n\nAssistant: To casbin auth in echo, here's what you do:\nMiddleware for authorization using Casbin..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I cors in echo?\n\nAssistant: To cors in echo, here's what you do:\nMiddleware for handling Cross-Origin Resource Sharing..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I csrf in echo?\n\nAssistant: To csrf in echo, here's what you do:\nMiddleware for Cross-Site Request Forgery protection..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I decompress in echo?\n\nAssistant: To decompress in echo, here's what you do:\nMiddleware for decompressing request bodies..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I gzip in echo?\n\nAssistant: To gzip in echo, here's what you do:\nMiddleware for Gzip compression..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I jaeger in echo?\n\nAssistant: To jaeger in echo, here's what you do:\nMiddleware for Jaeger tracing..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I jwt in echo?\n\nAssistant: To jwt in echo, here's what you do:\nMiddleware for handling JSON Web Tokens..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I key auth in echo?\n\nAssistant: To key auth in echo, here's what you do:\nMiddleware for key-based authentication..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I logger in echo?\n\nAssistant: To logger in echo, here's what you do:\nMiddleware for logging requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I method override in echo?\n\nAssistant: To method override in echo, here's what you do:\nMiddleware for overriding HTTP methods..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I prometheus in echo?\n\nAssistant: To prometheus in echo, here's what you do:\nMiddleware for exposing Prometheus metrics..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I proxy in echo?\n\nAssistant: To proxy in echo, here's what you do:\nMiddleware for reverse proxying..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I rate limiter in echo?\n\nAssistant: To rate limiter in echo, here's what you do:\nMiddleware for limiting the rate of requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I recover in echo?\n\nAssistant: To recover in echo, here's what you do:\nMiddleware for recovering from panics..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I redirect in echo?\n\nAssistant: To redirect in echo, here's what you do:\nMiddleware for redirecting requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I request id in echo?\n\nAssistant: To request id in echo, here's what you do:\nMiddleware for generating request IDs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I rewrite in echo?\n\nAssistant: To rewrite in echo, here's what you do:\nMiddleware for rewriting request URLs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I secure in echo?\n\nAssistant: To secure in echo, here's what you do:\nMiddleware for securing HTTP headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I session in echo?\n\nAssistant: To session in echo, here's what you do:\nMiddleware for managing sessions..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I static in echo?\n\nAssistant: To static in echo, here's what you do:\nMiddleware for serving static files..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I timeout in echo?\n\nAssistant: To timeout in echo, here's what you do:\nMiddleware for setting request timeouts..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I trailing slash in echo?\n\nAssistant: To trailing slash in echo, here's what you do:\nMiddleware for handling trailing slashes in URLs..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/category/middleware", "title": "Middleware Documentation", "description": "A comprehensive guide to various middleware options available in the Echo framework.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 02:56:45", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Middleware | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/category/middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/category/middleware", "docusaurus_version": "current", "ogTitle": "Middleware | Echo", "title": "Middleware | Echo", "og:locale": "en", "scrapeId": "9ca147d6-a215-484d-98b0-5b8508a04e69", "sourceURL": "https://echo.labstack.com/docs/category/middleware", "url": "https://echo.labstack.com/docs/category/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Echo Context Documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Echo Context Documentation in echo.\n\n# Echo Context Documentation\n\nThis page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.Here's a quick rundown of what this is about:\n\n## Extending\n\n`echo.Context` represents the context of the current HTTP request. It holds request and response reference, path, path parameters, data, registered handler and APIs to read request and write response. As Context is an interface, it is easy to extend it with custom APIs.\n\n**Define a custom context**\n\n```go\n\ntype CustomContext struct {\n\techo.Context\n}\n\nfunc (c *CustomContext) Foo() {\n\tprintln(\"foo\")\n}\n\nfunc (c *CustomContext) Bar() {\n\tprintln(\"bar\")\n}\n```\n\n**Create a middleware to extend default context**\n\n```go\ne.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tcc := &CustomContext{c}\n\t\treturn next(cc)\n\t}\n})\n```\n\nThis middleware should be registered before any other middleware.\n\nCustom context cannot be defined in a middleware before the router ran (Pre)\n\n**Use in handler**\n\n```go\ne.GET(\"/\", func(c echo.Context) error {\n\tcc := c.(*CustomContext)\n\tcc.Foo()\n\tcc.Bar()\n\treturn cc.String(200, \"OK\")\n})\n```\n\n## Concurrency\n\n`Context` must not be accessed out of the goroutine handling the request. There are two reasons:\n\n1. `Context` has functions that are dangerous to execute from multiple goroutines. Therefore, only one goroutine should access it.\n2. Echo uses a pool to create `Context`'s. When the request handling finishes, Echo returns the `Context` to the pool.\n\nSee issue [1908](https://github.com/labstack/echo/issues/1908) for a \"cautionary tale\" caused by this reason. Concurrency is complicated. Beware of this pitfall when working with goroutines.\n\n### Solution\n\nUse a channel\n\n```go\nfunc(c echo.Context) error {\n\tca := make(chan string, 1) // To prevent this channel from blocking, size is set to 1.\n\tr := c.Request()\n\tmethod := r.Method\n\n\tgo func() {\n\t\t// This function must not touch the Context.\n\n\t\tfmt.Printf(\"Method: %s\\n\", method)\n\n\t\t// Do some long running operations...\n\n\t\tca <- \"Hey!\"\n\t}()\n\n\tselect {\n\tcase result := <-ca:\n\t\treturn c.String(http.StatusOK, \"Result: \" + result)\n\tcase <-c.Request().Context().Done(): // Check context.\n\t\t// If it reaches here, this means that context was canceled (a timeout was reached, etc.).\n\t\treturn nil\n\t}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/context", "title": "Echo Context Documentation", "description": "This page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:58", "type": "overview", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Context | Echo", "docusaurus_version": "current", "ogDescription": "Context in Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/context", "og:locale": "en", "og:title": "Context | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Context in Echo", "title": "Context | Echo", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "og:description": "Context in Echo", "ogUrl": "https://echo.labstack.com/docs/context", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "b7cebddc-fef2-440e-9892-0e81891fe33a", "sourceURL": "https://echo.labstack.com/docs/context", "url": "https://echo.labstack.com/docs/context", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I extending in echo?\n\nAssistant: To extending in echo, here's what you do:\n`echo.Context` represents the context of the current HTTP request. It holds request and response reference, path, path parameters, data, registered handler and APIs to read request and write response. As Context is an interface, it is easy to extend it with custom APIs.\n\n**Define a custom context**\n\n```go\n\ntype CustomContext struct {\n\techo.Context\n}\n\nfunc (c *CustomContext) Foo() {\n\tprintln(\"foo\")\n}\n\nfunc (c *CustomContext) Bar() {\n\tprintln(\"bar\")\n}\n```\n\n**Create a middleware to extend default context**\n\n```go\ne.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tcc := &CustomContext{c}\n\t\treturn next(cc)\n\t}\n})\n```\n\nThis middleware should be registered before any other middleware.\n\nCustom context cannot be defined in a middleware before the router ran (Pre)\n\n**Use in handler**\n\n```go\ne.GET(\"/\", func(c echo.Context) error {\n\tcc := c.(*CustomContext)\n\tcc.Foo()\n\tcc.Bar()\n\treturn cc.String(200, \"OK\")\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/context", "title": "Echo Context Documentation", "description": "This page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:58", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Context | Echo", "docusaurus_version": "current", "ogDescription": "Context in Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/context", "og:locale": "en", "og:title": "Context | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Context in Echo", "title": "Context | Echo", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "og:description": "Context in Echo", "ogUrl": "https://echo.labstack.com/docs/context", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "b7cebddc-fef2-440e-9892-0e81891fe33a", "sourceURL": "https://echo.labstack.com/docs/context", "url": "https://echo.labstack.com/docs/context", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I concurrency in echo?\n\nAssistant: To concurrency in echo, here's what you do:\n`Context` must not be accessed out of the goroutine handling the request. There are two reasons:\n\n1. `Context` has functions that are dangerous to execute from multiple goroutines. Therefore, only one goroutine should access it.\n2. Echo uses a pool to create `Context`'s. When the request handling finishes, Echo returns the `Context` to the pool.\n\nSee issue [1908](https://github.com/labstack/echo/issues/1908) for a \"cautionary tale\" caused by this reason. Concurrency is complicated. Beware of this pitfall when working with goroutines.\n\n### Solution\n\nUse a channel\n\n```go\nfunc(c echo.Context) error {\n\tca := make(chan string, 1) // To prevent this channel from blocking, size is set to 1.\n\tr := c.Request()\n\tmethod := r.Method\n\n\tgo func() {\n\t\t// This function must not touch the Context.\n\n\t\tfmt.Printf(\"Method: %s\\n\", method)\n\n\t\t// Do some long running operations...\n\n\t\tca <- \"Hey!\"\n\t}()\n\n\tselect {\n\tcase result := <-ca:\n\t\treturn c.String(http.StatusOK, \"Result: \" + result)\n\tcase <-c.Request().Context().Done(): // Check context.\n\t\t// If it reaches here, this means that context was canceled (a timeout was reached, etc.).\n\t\treturn nil\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/context", "title": "Echo Context Documentation", "description": "This page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:58", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Context | Echo", "docusaurus_version": "current", "ogDescription": "Context in Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/context", "og:locale": "en", "og:title": "Context | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Context in Echo", "title": "Context | Echo", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "og:description": "Context in Echo", "ogUrl": "https://echo.labstack.com/docs/context", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "b7cebddc-fef2-440e-9892-0e81891fe33a", "sourceURL": "https://echo.labstack.com/docs/context", "url": "https://echo.labstack.com/docs/context", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Echo Context Documentation in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Define a custom context**:\n\n```yaml\ntype CustomContext struct {\n\techo.Context\n}\n\nfunc (c *CustomContext) Foo() {\n\tprintln(\"foo\")\n}\n\nfunc (c *CustomContext) Bar() {\n\tprintln(\"bar\")\n}\n```\n\nThis snippet shows you how to define a custom context, which is an important aspect of echo context documentation.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/context", "title": "Echo Context Documentation", "description": "This page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:58", "type": "code_examples", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Context | Echo", "docusaurus_version": "current", "ogDescription": "Context in Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/context", "og:locale": "en", "og:title": "Context | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Context in Echo", "title": "Context | Echo", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "og:description": "Context in Echo", "ogUrl": "https://echo.labstack.com/docs/context", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "b7cebddc-fef2-440e-9892-0e81891fe33a", "sourceURL": "https://echo.labstack.com/docs/context", "url": "https://echo.labstack.com/docs/context", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Echo Context Documentation in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis middleware should be registered before any other middleware.\n\nCustom context cannot be defined in a middleware before the router ran (Pre).\n\n`Context` must not be accessed out of the goroutine handling the request.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/context", "title": "Echo Context Documentation", "description": "This page covers the `echo.Context` interface, its usage, and how to extend it with custom APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:56:58", "type": "best_practices", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Context | Echo", "docusaurus_version": "current", "ogDescription": "Context in Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/context", "og:locale": "en", "og:title": "Context | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Context in Echo", "title": "Context | Echo", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "og:description": "Context in Echo", "ogUrl": "https://echo.labstack.com/docs/context", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "b7cebddc-fef2-440e-9892-0e81891fe33a", "sourceURL": "https://echo.labstack.com/docs/context", "url": "https://echo.labstack.com/docs/context", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Auto TLS with Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Auto TLS with Echo in echo.\n\n# Auto TLS with Echo\n\nThis recipe demonstrates how to obtain TLS certificates for a domain automatically from Let's Encrypt. `Echo#StartAutoTLS` accepts an address which should listen on port `443`.Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/auto-tls/server.go\n\n```go\npackage main\n\nimport (\n\t\"crypto/tls\"\n\t\"golang.org/x/crypto/acme\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\t// e.AutoTLSManager.HostPolicy = autocert.HostWhitelist(\"<DOMAIN>\")\n\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\te.AutoTLSManager.Cache = autocert.DirCache(\"/var/www/.cache\")\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}\n\nfunc customHTTPServer() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\tautoTLSManager := autocert.Manager{\n\t\tPrompt: autocert.AcceptTOS,\n\t\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\t\tCache: autocert.DirCache(\"/var/www/.cache\"),\n\t\t//HostPolicy: autocert.HostWhitelist(\"<DOMAIN>\"),\n\t}\n\ts := http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: e, // set Echo as handler\n\t\tTLSConfig: &tls.Config{\n\t\t\t//Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n\t\t\tGetCertificate: autoTLSManager.GetCertificate,\n\t\t\tNextProtos:     []string{acme.ALPNProto},\n\t\t},\n\t\t//ReadTimeout: 30 * time.Second, // use custom timeouts\n\t}\n\tif err := s.ListenAndServeTLS(\"\", \"\"); err != http.ErrServerClosed {\n\t\te.Logger.Fatal(err)\n\t}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/auto-tls", "title": "Auto TLS with Echo", "description": "This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let's Encrypt. `Echo#StartAutoTLS` accepts an address which should listen on port `443`.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:58:49", "type": "overview", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Automatic TLS certificates from Let's Encrypt recipe", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogTitle": "Auto TLS | Echo", "ogDescription": "Automatic TLS certificates from Let's Encrypt recipe", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "og:locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Auto TLS | Echo", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Auto TLS | Echo", "og:description": "Automatic TLS certificates from Let's Encrypt recipe", "scrapeId": "3223db48-954e-4db1-9bb0-701252311d7d", "sourceURL": "https://echo.labstack.com/docs/cookbook/auto-tls", "url": "https://echo.labstack.com/docs/cookbook/auto-tls", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/auto-tls/server.go\n\n```go\npackage main\n\nimport (\n\t\"crypto/tls\"\n\t\"golang.org/x/crypto/acme\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\t// e.AutoTLSManager.HostPolicy = autocert.HostWhitelist(\"<DOMAIN>\")\n\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\te.AutoTLSManager.Cache = autocert.DirCache(\"/var/www/.cache\")\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}\n\nfunc customHTTPServer() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\tautoTLSManager := autocert.Manager{\n\t\tPrompt: autocert.AcceptTOS,\n\t\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\t\tCache: autocert.DirCache(\"/var/www/.cache\"),\n\t\t//HostPolicy: autocert.HostWhitelist(\"<DOMAIN>\"),\n\t}\n\ts := http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: e, // set Echo as handler\n\t\tTLSConfig: &tls.Config{\n\t\t\t//Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n\t\t\tGetCertificate: autoTLSManager.GetCertificate,\n\t\t\tNextProtos:     []string{acme.ALPNProto},\n\t\t},\n\t\t//ReadTimeout: 30 * time.Second, // use custom timeouts\n\t}\n\tif err := s.ListenAndServeTLS(\"\", \"\"); err != http.ErrServerClosed {\n\t\te.Logger.Fatal(err)\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/auto-tls", "title": "Auto TLS with Echo", "description": "This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let's Encrypt. `Echo#StartAutoTLS` accepts an address which should listen on port `443`.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:58:49", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Automatic TLS certificates from Let's Encrypt recipe", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogTitle": "Auto TLS | Echo", "ogDescription": "Automatic TLS certificates from Let's Encrypt recipe", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "og:locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Auto TLS | Echo", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Auto TLS | Echo", "og:description": "Automatic TLS certificates from Let's Encrypt recipe", "scrapeId": "3223db48-954e-4db1-9bb0-701252311d7d", "sourceURL": "https://echo.labstack.com/docs/cookbook/auto-tls", "url": "https://echo.labstack.com/docs/cookbook/auto-tls", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Auto TLS with Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code Example**:\n\n```yaml\npackage main\n\nimport (\n\t\"crypto/tls\"\n\t\"golang.org/x/crypto/acme\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\t// e.AutoTLSManager.HostPolicy = autocert.HostWhitelist(\"<DOMAIN>\")\n\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\te.AutoTLSManager.Cache = autocert.DirCache(\"/var/www/.cache\")\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}\n\nfunc customHTTPServer() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\n\tautoTLSManager := autocert.Manager{\n\t\tPrompt: autocert.AcceptTOS,\n\t\t// Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\t\tCache: autocert.DirCache(\"/var/www/.cache\"),\n\t\t//HostPolicy: autocert.HostWhitelist(\"<DOMAIN>\"),\n\t}\n\ts := http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: e, // set Echo as handler\n\t\tTLSConfig: &tls.Config{\n\t\t\t//Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n\t\t\tGetCertificate: autoTLSManager.GetCertificate,\n\t\t\tNextProtos:     []string{acme.ALPNProto},\n\t\t},\n\t\t//ReadTimeout: 30 * time.Second, // use custom timeouts\n\t}\n\tif err := s.ListenAndServeTLS(\"\", \"\"); err != http.ErrServerClosed {\n\t\te.Logger.Fatal(err)\n\t}\n}\n```\n\nThis snippet shows you how to server code example, which is an important aspect of auto tls with echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/auto-tls", "title": "Auto TLS with Echo", "description": "This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let's Encrypt. `Echo#StartAutoTLS` accepts an address which should listen on port `443`.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:58:49", "type": "code_examples", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Automatic TLS certificates from Let's Encrypt recipe", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogTitle": "Auto TLS | Echo", "ogDescription": "Automatic TLS certificates from Let's Encrypt recipe", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "og:locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Auto TLS | Echo", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Auto TLS | Echo", "og:description": "Automatic TLS certificates from Let's Encrypt recipe", "scrapeId": "3223db48-954e-4db1-9bb0-701252311d7d", "sourceURL": "https://echo.labstack.com/docs/cookbook/auto-tls", "url": "https://echo.labstack.com/docs/cookbook/auto-tls", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Auto TLS with Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor added security you should specify host policy in auto TLS manager\n\nCache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits)\n\nTo redirect HTTP traffic to HTTPS, you can use redirect middleware (https://echo.labstack.com/docs/middleware/redirect#https-redirect)\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/auto-tls", "title": "Auto TLS with Echo", "description": "This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let's Encrypt. `Echo#StartAutoTLS` accepts an address which should listen on port `443`.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:58:49", "type": "best_practices", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Automatic TLS certificates from Let's Encrypt recipe", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogTitle": "Auto TLS | Echo", "ogDescription": "Automatic TLS certificates from Let's Encrypt recipe", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "og:locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Auto TLS | Echo", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/auto-tls", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Auto TLS | Echo", "og:description": "Automatic TLS certificates from Let's Encrypt recipe", "scrapeId": "3223db48-954e-4db1-9bb0-701252311d7d", "sourceURL": "https://echo.labstack.com/docs/cookbook/auto-tls", "url": "https://echo.labstack.com/docs/cookbook/auto-tls", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what CORS Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain CORS Cookbook in echo.\n\n# CORS Cookbook\n\nThis page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.Here's a quick rundown of what this is about:\n\n## Server using a list of allowed origins\n\nThis section demonstrates how to set up a server that allows requests from a predefined list of origins.\n\n## Server using a custom function to allow origins\n\nThis section shows how to implement a custom function to determine if an origin is allowed.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/cors", "title": "CORS Cookbook", "description": "This page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:59:07", "type": "overview", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "CORS recipe", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/cookbook/cors", "docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "CORS recipe", "title": "CORS | Echo", "ogTitle": "CORS | Echo", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/cookbook/cors", "twitter:card": "summary_large_image", "docsearch:language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "og:description": "CORS recipe", "og:title": "CORS | Echo", "docusaurus_locale": "en", "language": "en", "scrapeId": "ce0b3b1d-a5b7-4c7d-a677-8852d0e44f44", "sourceURL": "https://echo.labstack.com/docs/cookbook/cors", "url": "https://echo.labstack.com/docs/cookbook/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server using a list of allowed origins in echo?\n\nAssistant: To server using a list of allowed origins in echo, here's what you do:\nThis section demonstrates how to set up a server that allows requests from a predefined list of origins..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/cors", "title": "CORS Cookbook", "description": "This page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:59:07", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "CORS recipe", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/cookbook/cors", "docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "CORS recipe", "title": "CORS | Echo", "ogTitle": "CORS | Echo", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/cookbook/cors", "twitter:card": "summary_large_image", "docsearch:language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "og:description": "CORS recipe", "og:title": "CORS | Echo", "docusaurus_locale": "en", "language": "en", "scrapeId": "ce0b3b1d-a5b7-4c7d-a677-8852d0e44f44", "sourceURL": "https://echo.labstack.com/docs/cookbook/cors", "url": "https://echo.labstack.com/docs/cookbook/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server using a custom function to allow origins in echo?\n\nAssistant: To server using a custom function to allow origins in echo, here's what you do:\nThis section shows how to implement a custom function to determine if an origin is allowed..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/cors", "title": "CORS Cookbook", "description": "This page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:59:07", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "CORS recipe", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/cookbook/cors", "docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "CORS recipe", "title": "CORS | Echo", "ogTitle": "CORS | Echo", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/cookbook/cors", "twitter:card": "summary_large_image", "docsearch:language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "og:description": "CORS recipe", "og:title": "CORS | Echo", "docusaurus_locale": "en", "language": "en", "scrapeId": "ce0b3b1d-a5b7-4c7d-a677-8852d0e44f44", "sourceURL": "https://echo.labstack.com/docs/cookbook/cors", "url": "https://echo.labstack.com/docs/cookbook/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for CORS Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server using a list of allowed origins**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tusers = []string{\"Joe\", \"Veer\", \"Zion\"}\n)\n\nfunc getUsers(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, users)\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// CORS default\n\t// Allows requests from any origin wth GET, HEAD, PUT, POST or DELETE method.\n\t// e.Use(middleware.CORS())\n\n\t// CORS restricted\n\t// Allows requests from any `https://labstack.com` or `https://labstack.net` origin\n\t// wth GET, PUT, POST or DELETE method.\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n\t\tAllowMethods: []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to server using a list of allowed origins, which is an important aspect of cors cookbook.\n\n**Server using a custom function to allow origins**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\t\"regexp\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tusers = []string{\"Joe\", \"Veer\", \"Zion\"}\n)\n\nfunc getUsers(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, users)\n}\n\n// allowOrigin takes the origin as an argument and returns true if the origin\n// is allowed or false otherwise.\nfunc allowOrigin(origin string) (bool, error) {\n\t// In this example we use a regular expression but we can imagine various\n\t// kind of custom logic. For example, an external datasource could be used\n\t// to maintain the list of allowed origins.\n\treturn regexp.MatchString(`^https://labstack\\.(net|com)$`, origin)\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// CORS restricted with a custom function to allow origins\n\t// and with the GET, PUT, POST or DELETE methods allowed.\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOriginFunc: allowOrigin,\n\t\tAllowMethods:    []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to server using a custom function to allow origins, which is an important aspect of cors cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/cors", "title": "CORS Cookbook", "description": "This page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:59:07", "type": "code_examples", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "CORS recipe", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/cookbook/cors", "docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "CORS recipe", "title": "CORS | Echo", "ogTitle": "CORS | Echo", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/cookbook/cors", "twitter:card": "summary_large_image", "docsearch:language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "og:description": "CORS recipe", "og:title": "CORS | Echo", "docusaurus_locale": "en", "language": "en", "scrapeId": "ce0b3b1d-a5b7-4c7d-a677-8852d0e44f44", "sourceURL": "https://echo.labstack.com/docs/cookbook/cors", "url": "https://echo.labstack.com/docs/cookbook/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using CORS Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a list of allowed origins for simple use cases.\n\nImplement a custom function for more complex origin validation logic.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/cors", "title": "CORS Cookbook", "description": "This page provides examples of how to implement CORS in Echo framework using a list of allowed origins and a custom function to allow origins.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:59:07", "type": "best_practices", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogDescription": "CORS recipe", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/cookbook/cors", "docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "CORS recipe", "title": "CORS | Echo", "ogTitle": "CORS | Echo", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/cookbook/cors", "twitter:card": "summary_large_image", "docsearch:language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "og:description": "CORS recipe", "og:title": "CORS | Echo", "docusaurus_locale": "en", "language": "en", "scrapeId": "ce0b3b1d-a5b7-4c7d-a677-8852d0e44f44", "sourceURL": "https://echo.labstack.com/docs/cookbook/cors", "url": "https://echo.labstack.com/docs/cookbook/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what CRUD Operations with Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain CRUD Operations with Echo in echo.\n\n# CRUD Operations with Echo\n\nThis page provides a comprehensive guide on how to implement CRUD operations using the Echo framework in Go.Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/crud/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype (\n\tuser struct {\n\t\tID   int    `json:\"id\"`\n\t\tName string `json:\"name\"`\n\t}\n)\n\nvar (\n\tusers = map[int]*user{}\n\tseq   = 1\n\tlock  = sync.Mutex{}\n)\n\n//----------\n// Handlers\n//----------\n\nfunc createUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tu := &user{\n\t\tID: seq,\n\t}\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\tusers[u.ID] = u\n\tseq++\n\treturn c.JSON(http.StatusCreated, u)\n}\n\nfunc getUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\treturn c.JSON(http.StatusOK, users[id])\n}\n\nfunc updateUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tu := new(user)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\tusers[id].Name = u.Name\n\treturn c.JSON(http.StatusOK, users[id])\n}\n\nfunc deleteUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\tdelete(users, id)\n\treturn c.NoContent(http.StatusNoContent)\n}\n\nfunc getAllUsers(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\treturn c.JSON(http.StatusOK, users)\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Routes\n\te.GET(\"/users\", getAllUsers)\n\te.POST(\"/users\", createUser)\n\te.GET(\"/users/:id\", getUser)\n\te.PUT(\"/users/:id\", updateUser)\n\te.DELETE(\"/users/:id\", deleteUser)\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/crud", "title": "CRUD Operations with Echo", "description": "This page provides a comprehensive guide on how to implement CRUD operations using the Echo framework in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:59:24", "type": "overview", "page_metadata": {"title": "CRUD | Echo", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "og:description": "CRUD (Create, read, update and delete) recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "CRUD | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogDescription": "CRUD (Create, read, update and delete) recipe", "og:url": "https://echo.labstack.com/docs/cookbook/crud", "docsearch:language": "en", "description": "CRUD (Create, read, update and delete) recipe", "og:title": "CRUD | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/crud", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "scrapeId": "74c54add-56a7-4310-b391-c9b223380d46", "sourceURL": "https://echo.labstack.com/docs/cookbook/crud", "url": "https://echo.labstack.com/docs/cookbook/crud", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/crud/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype (\n\tuser struct {\n\t\tID   int    `json:\"id\"`\n\t\tName string `json:\"name\"`\n\t}\n)\n\nvar (\n\tusers = map[int]*user{}\n\tseq   = 1\n\tlock  = sync.Mutex{}\n)\n\n//----------\n// Handlers\n//----------\n\nfunc createUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tu := &user{\n\t\tID: seq,\n\t}\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\tusers[u.ID] = u\n\tseq++\n\treturn c.JSON(http.StatusCreated, u)\n}\n\nfunc getUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\treturn c.JSON(http.StatusOK, users[id])\n}\n\nfunc updateUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tu := new(user)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\tusers[id].Name = u.Name\n\treturn c.JSON(http.StatusOK, users[id])\n}\n\nfunc deleteUser(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\tdelete(users, id)\n\treturn c.NoContent(http.StatusNoContent)\n}\n\nfunc getAllUsers(c echo.Context) error {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\treturn c.JSON(http.StatusOK, users)\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Routes\n\te.GET(\"/users\", getAllUsers)\n\te.POST(\"/users\", createUser)\n\te.GET(\"/users/:id\", getUser)\n\te.PUT(\"/users/:id\", updateUser)\n\te.DELETE(\"/users/:id\", deleteUser)\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/crud", "title": "CRUD Operations with Echo", "description": "This page provides a comprehensive guide on how to implement CRUD operations using the Echo framework in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:59:24", "type": "section_detail", "page_metadata": {"title": "CRUD | Echo", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "og:description": "CRUD (Create, read, update and delete) recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "CRUD | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogDescription": "CRUD (Create, read, update and delete) recipe", "og:url": "https://echo.labstack.com/docs/cookbook/crud", "docsearch:language": "en", "description": "CRUD (Create, read, update and delete) recipe", "og:title": "CRUD | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/crud", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "scrapeId": "74c54add-56a7-4310-b391-c9b223380d46", "sourceURL": "https://echo.labstack.com/docs/cookbook/crud", "url": "https://echo.labstack.com/docs/cookbook/crud", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for CRUD Operations with Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create user Request**:\n\n```yaml\n```bash\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe Smith\"}' \\\n  localhost:1323/users\n```\n```\n\nThis snippet shows you how to create user request, which is an important aspect of crud operations with echo.\n\n**Create user Response**:\n\n```yaml\n```json\n{\n  \"id\": 1,\n  \"name\": \"Joe Smith\"\n}\n```\n```\n\nThis snippet shows you how to create user response, which is an important aspect of crud operations with echo.\n\n**Get user Request**:\n\n```yaml\n```bash\ncurl localhost:1323/users/1\n```\n```\n\nThis snippet shows you how to get user request, which is an important aspect of crud operations with echo.\n\n**Get user Response**:\n\n```yaml\n```json\n{\n  \"id\": 1,\n  \"name\": \"Joe Smith\"\n}\n```\n```\n\nThis snippet shows you how to get user response, which is an important aspect of crud operations with echo.\n\n**Update user Request**:\n\n```yaml\n```bash\ncurl -X PUT \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe\"}' \\\n  localhost:1323/users/1\n```\n```\n\nThis snippet shows you how to update user request, which is an important aspect of crud operations with echo.\n\n**Update user Response**:\n\n```yaml\n```json\n{\n  \"id\": 1,\n  \"name\": \"Joe\"\n}\n```\n```\n\nThis snippet shows you how to update user response, which is an important aspect of crud operations with echo.\n\n**Delete user Request**:\n\n```yaml\n```bash\ncurl -X DELETE localhost:1323/users/1\n```\n```\n\nThis snippet shows you how to delete user request, which is an important aspect of crud operations with echo.\n\n**Delete user Response**:\n\n```yaml\n`NoContent - 204`\n```\n\nThis snippet shows you how to delete user response, which is an important aspect of crud operations with echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/crud", "title": "CRUD Operations with Echo", "description": "This page provides a comprehensive guide on how to implement CRUD operations using the Echo framework in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:59:24", "type": "code_examples", "page_metadata": {"title": "CRUD | Echo", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "og:description": "CRUD (Create, read, update and delete) recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "CRUD | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogDescription": "CRUD (Create, read, update and delete) recipe", "og:url": "https://echo.labstack.com/docs/cookbook/crud", "docsearch:language": "en", "description": "CRUD (Create, read, update and delete) recipe", "og:title": "CRUD | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/crud", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "scrapeId": "74c54add-56a7-4310-b391-c9b223380d46", "sourceURL": "https://echo.labstack.com/docs/cookbook/crud", "url": "https://echo.labstack.com/docs/cookbook/crud", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using CRUD Operations with Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle errors properly in your handlers.\n\nUse middleware for logging and recovery to enhance server reliability.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/crud", "title": "CRUD Operations with Echo", "description": "This page provides a comprehensive guide on how to implement CRUD operations using the Echo framework in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 02:59:24", "type": "best_practices", "page_metadata": {"title": "CRUD | Echo", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "og:description": "CRUD (Create, read, update and delete) recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "CRUD | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogDescription": "CRUD (Create, read, update and delete) recipe", "og:url": "https://echo.labstack.com/docs/cookbook/crud", "docsearch:language": "en", "description": "CRUD (Create, read, update and delete) recipe", "og:title": "CRUD | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/crud", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "scrapeId": "74c54add-56a7-4310-b391-c9b223380d46", "sourceURL": "https://echo.labstack.com/docs/cookbook/crud", "url": "https://echo.labstack.com/docs/cookbook/crud", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Embed Resources is in echo?\n\nAssistant: Sure, I'd be happy to explain Embed Resources in echo.\n\n# Embed Resources\n\nThis page covers how to embed resources in Go applications using the Go 1.16 embed feature and the go.rice package.Here's a quick rundown of what this is about:\n\n## With go 1.16 embed feature\n\nThis section explains how to use the Go 1.16 embed feature to embed files in your application.\n\n## With go.rice\n\nThis section explains how to use the go.rice package to embed files in your application.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/embed-resources", "title": "Embed Resources", "description": "This page covers how to embed resources in Go applications using the Go 1.16 embed feature and the go.rice package.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:59:42", "type": "overview", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Embed Resources | Echo", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "description": "Embed resources recipe", "docsearch:version": "current", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:locale": "en", "ogDescription": "Embed resources recipe", "ogLocale": "en", "docusaurus_locale": "en", "ogTitle": "Embed Resources | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "og:title": "Embed Resources | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:description": "Embed resources recipe", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "scrapeId": "a05bd409-a696-4218-aec7-f128a8d08a67", "sourceURL": "https://echo.labstack.com/docs/cookbook/embed-resources", "url": "https://echo.labstack.com/docs/cookbook/embed-resources", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I with go 1.16 embed feature in echo?\n\nAssistant: To with go 1.16 embed feature in echo, here's what you do:\nThis section explains how to use the Go 1.16 embed feature to embed files in your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/embed-resources", "title": "Embed Resources", "description": "This page covers how to embed resources in Go applications using the Go 1.16 embed feature and the go.rice package.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:59:42", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Embed Resources | Echo", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "description": "Embed resources recipe", "docsearch:version": "current", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:locale": "en", "ogDescription": "Embed resources recipe", "ogLocale": "en", "docusaurus_locale": "en", "ogTitle": "Embed Resources | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "og:title": "Embed Resources | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:description": "Embed resources recipe", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "scrapeId": "a05bd409-a696-4218-aec7-f128a8d08a67", "sourceURL": "https://echo.labstack.com/docs/cookbook/embed-resources", "url": "https://echo.labstack.com/docs/cookbook/embed-resources", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I with go.rice in echo?\n\nAssistant: To with go.rice in echo, here's what you do:\nThis section explains how to use the go.rice package to embed files in your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/embed-resources", "title": "Embed Resources", "description": "This page covers how to embed resources in Go applications using the Go 1.16 embed feature and the go.rice package.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:59:42", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Embed Resources | Echo", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "description": "Embed resources recipe", "docsearch:version": "current", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:locale": "en", "ogDescription": "Embed resources recipe", "ogLocale": "en", "docusaurus_locale": "en", "ogTitle": "Embed Resources | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "og:title": "Embed Resources | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:description": "Embed resources recipe", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "scrapeId": "a05bd409-a696-4218-aec7-f128a8d08a67", "sourceURL": "https://echo.labstack.com/docs/cookbook/embed-resources", "url": "https://echo.labstack.com/docs/cookbook/embed-resources", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Embed Resources in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**With go 1.16 embed feature**:\n\n```yaml\npackage main\n\nimport (\n\t\"embed\"\n\t\"io/fs\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\n//go:embed app\nvar embededFiles embed.FS\n\nfunc getFileSystem(useOS bool) http.FileSystem {\n\tif useOS {\n\t\tlog.Print(\"using live mode\")\n\t\treturn http.FS(os.DirFS(\"app\"))\n\t}\n\n\tlog.Print(\"using embed mode\")\n\tfsys, err := fs.Sub(embededFiles, \"app\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn http.FS(fsys)\n}\n\nfunc main() {\n\te := echo.New()\n\tuseOS := len(os.Args) > 1 && os.Args[1] == \"live\"\n\tassetHandler := http.FileServer(getFileSystem(useOS))\n\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", assetHandler)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to with go 1.16 embed feature, which is an important aspect of embed resources.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/embed-resources", "title": "Embed Resources", "description": "This page covers how to embed resources in Go applications using the Go 1.16 embed feature and the go.rice package.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 02:59:42", "type": "code_examples", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Embed Resources | Echo", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "description": "Embed resources recipe", "docsearch:version": "current", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:locale": "en", "ogDescription": "Embed resources recipe", "ogLocale": "en", "docusaurus_locale": "en", "ogTitle": "Embed Resources | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "og:title": "Embed Resources | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/embed-resources", "og:description": "Embed resources recipe", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "scrapeId": "a05bd409-a696-4218-aec7-f128a8d08a67", "sourceURL": "https://echo.labstack.com/docs/cookbook/embed-resources", "url": "https://echo.labstack.com/docs/cookbook/embed-resources", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what File Download is in echo?\n\nAssistant: Sure, I'd be happy to explain File Download in echo.\n\n# File Download\n\nThis page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.Here's a quick rundown of what this is about:\n\n## Download file\n\n### Server\n\n`cookbook/file-download/server.go`\n\n```go\n// Server code for file download\n```\n\n### Client\n\n`cookbook/file-download/index.html`\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>File download</title>\n</head>\n<body>\n\n    <p>\n        <a href=\"/file\">File download</a>\n    </p>\n\n</body>\n</html>\n```\n\n## Download file as inline\n\n### Server\n\n`cookbook/file-download/inline/server.go`\n\n```go\n// Server code for inline file download\n```\n\n### Client\n\n`cookbook/file-download/inline/index.html`\n\n```html\n// Client code for inline file download\n```\n\n## Download file as attachment\n\n### Server\n\n`cookbook/file-download/attachment/server.go`\n\n```go\n// Server code for attachment file download\n```\n\n### Client\n\n`cookbook/file-download/attachment/index.html`\n\n```html\n// Client code for attachment file download\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-download", "title": "File Download", "description": "This page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:00:14", "type": "overview", "page_metadata": {"og:description": "File download recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-download", "language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "File Download | Echo", "twitter:card": "summary_large_image", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/file-download", "ogDescription": "File download recipe", "docusaurus_version": "current", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:title": "File Download | Echo", "docusaurus_locale": "en", "description": "File download recipe", "ogTitle": "File Download | Echo", "scrapeId": "1f9cdc45-8c12-4387-af50-1590d7c50ab9", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-download", "url": "https://echo.labstack.com/docs/cookbook/file-download", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I download file in echo?\n\nAssistant: To download file in echo, here's what you do:\n### Server\n\n`cookbook/file-download/server.go`\n\n```go\n// Server code for file download\n```\n\n### Client\n\n`cookbook/file-download/index.html`\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>File download</title>\n</head>\n<body>\n\n    <p>\n        <a href=\"/file\">File download</a>\n    </p>\n\n</body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-download", "title": "File Download", "description": "This page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:00:14", "type": "section_detail", "page_metadata": {"og:description": "File download recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-download", "language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "File Download | Echo", "twitter:card": "summary_large_image", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/file-download", "ogDescription": "File download recipe", "docusaurus_version": "current", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:title": "File Download | Echo", "docusaurus_locale": "en", "description": "File download recipe", "ogTitle": "File Download | Echo", "scrapeId": "1f9cdc45-8c12-4387-af50-1590d7c50ab9", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-download", "url": "https://echo.labstack.com/docs/cookbook/file-download", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I download file as inline in echo?\n\nAssistant: To download file as inline in echo, here's what you do:\n### Server\n\n`cookbook/file-download/inline/server.go`\n\n```go\n// Server code for inline file download\n```\n\n### Client\n\n`cookbook/file-download/inline/index.html`\n\n```html\n// Client code for inline file download\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-download", "title": "File Download", "description": "This page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:00:14", "type": "section_detail", "page_metadata": {"og:description": "File download recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-download", "language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "File Download | Echo", "twitter:card": "summary_large_image", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/file-download", "ogDescription": "File download recipe", "docusaurus_version": "current", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:title": "File Download | Echo", "docusaurus_locale": "en", "description": "File download recipe", "ogTitle": "File Download | Echo", "scrapeId": "1f9cdc45-8c12-4387-af50-1590d7c50ab9", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-download", "url": "https://echo.labstack.com/docs/cookbook/file-download", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I download file as attachment in echo?\n\nAssistant: To download file as attachment in echo, here's what you do:\n### Server\n\n`cookbook/file-download/attachment/server.go`\n\n```go\n// Server code for attachment file download\n```\n\n### Client\n\n`cookbook/file-download/attachment/index.html`\n\n```html\n// Client code for attachment file download\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-download", "title": "File Download", "description": "This page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:00:14", "type": "section_detail", "page_metadata": {"og:description": "File download recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-download", "language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "File Download | Echo", "twitter:card": "summary_large_image", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/file-download", "ogDescription": "File download recipe", "docusaurus_version": "current", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:title": "File Download | Echo", "docusaurus_locale": "en", "description": "File download recipe", "ogTitle": "File Download | Echo", "scrapeId": "1f9cdc45-8c12-4387-af50-1590d7c50ab9", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-download", "url": "https://echo.labstack.com/docs/cookbook/file-download", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for File Download in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code for File Download**:\n\n```yaml\n// Server code for file download\n```\n\nThis snippet shows you how to server code for file download, which is an important aspect of file download.\n\n**Client Code for File Download**:\n\n```yaml\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>File download</title>\n</head>\n<body>\n\n    <p>\n        <a href=\"/file\">File download</a>\n    </p>\n\n</body>\n</html>\n```\n\nThis snippet shows you how to client code for file download, which is an important aspect of file download.\n\n**Server Code for Inline File Download**:\n\n```yaml\n// Server code for inline file download\n```\n\nThis snippet shows you how to server code for inline file download, which is an important aspect of file download.\n\n**Client Code for Inline File Download**:\n\n```yaml\n// Client code for inline file download\n```\n\nThis snippet shows you how to client code for inline file download, which is an important aspect of file download.\n\n**Server Code for Attachment File Download**:\n\n```yaml\n// Server code for attachment file download\n```\n\nThis snippet shows you how to server code for attachment file download, which is an important aspect of file download.\n\n**Client Code for Attachment File Download**:\n\n```yaml\n// Client code for attachment file download\n```\n\nThis snippet shows you how to client code for attachment file download, which is an important aspect of file download.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-download", "title": "File Download", "description": "This page covers how to implement file download functionality in Echo, including downloading files as inline and as attachments.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:00:14", "type": "code_examples", "page_metadata": {"og:description": "File download recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-download", "language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "File Download | Echo", "twitter:card": "summary_large_image", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/file-download", "ogDescription": "File download recipe", "docusaurus_version": "current", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:title": "File Download | Echo", "docusaurus_locale": "en", "description": "File download recipe", "ogTitle": "File Download | Echo", "scrapeId": "1f9cdc45-8c12-4387-af50-1590d7c50ab9", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-download", "url": "https://echo.labstack.com/docs/cookbook/file-download", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what File Upload Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain File Upload Cookbook in echo.\n\n# File Upload Cookbook\n\nThis page provides examples of how to upload single and multiple files using the Echo framework.Here's a quick rundown of what this is about:\n\n## Upload single file with parameters\n\nThis section describes how to upload a single file along with additional parameters such as name and email.\n\n## Server\n\nThe server code for handling single file uploads is provided below.\n\n## Client\n\nThe client code for the HTML form to upload a single file is provided below.\n\n## Upload multiple files with parameters\n\nThis section describes how to upload multiple files along with additional parameters such as name and email.\n\n## Server\n\nThe server code for handling multiple file uploads is provided below.\n\n## Client\n\nThe client code for the HTML form to upload multiple files is provided below.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "overview", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I upload single file with parameters in echo?\n\nAssistant: To upload single file with parameters in echo, here's what you do:\nThis section describes how to upload a single file along with additional parameters such as name and email..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nThe server code for handling single file uploads is provided below..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I client in echo?\n\nAssistant: To client in echo, here's what you do:\nThe client code for the HTML form to upload a single file is provided below..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I upload multiple files with parameters in echo?\n\nAssistant: To upload multiple files with parameters in echo, here's what you do:\nThis section describes how to upload multiple files along with additional parameters such as name and email..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nThe server code for handling multiple file uploads is provided below..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I client in echo?\n\nAssistant: To client in echo, here's what you do:\nThe client code for the HTML form to upload multiple files is provided below..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for File Upload Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Single File Upload - Server Code**:\n\n```yaml\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc upload(c echo.Context) error {\n\t// Read form fields\n\tname := c.FormValue(\"name\")\n\temail := c.FormValue(\"email\")\n\n\t//-----------\n\t// Read file\n\t//-----------\n\n\t// Source\n\tfile, err := c.FormFile(\"file\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tsrc, err := file.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer src.Close()\n\n\t// Destination\n\tdst, err := os.Create(file.Filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dst.Close()\n\n\t// Copy\n\tif _, err = io.Copy(dst, src); err != nil {\n\t\treturn err\n\t}\n\n\treturn c.HTML(http.StatusOK, fmt.Sprintf(\"<p>File %s uploaded successfully with fields name=%s and email=%s.</p>\", file.Filename, name, email))\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\te.POST(\"/upload\", upload)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to single file upload - server code, which is an important aspect of file upload cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload Cookbook", "description": "This page provides examples of how to upload single and multiple files using the Echo framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:00:26", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "og:title": "File Upload | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/file-upload", "title": "File Upload | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "File upload recipe", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "File Upload | Echo", "ogDescription": "File upload recipe", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/file-upload", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "File upload recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "scrapeId": "16f2e969-c1fa-4997-b4d6-be66163ae1aa", "sourceURL": "https://echo.labstack.com/docs/cookbook/file-upload", "url": "https://echo.labstack.com/docs/cookbook/file-upload", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Google App Engine Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain Google App Engine Cookbook in echo.\n\n# Google App Engine Cookbook\n\nGoogle App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options.Here's a quick rundown of what this is about:\n\n## Standalone\n\nWait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes required is to start with a setup for standalone and work from there plus there's no reason we wouldn't want to retain the ability to run our app anywhere, right?\n\nWe take advantage of the go build constraints or tags to change how we create and run the Echo server for each platform while keeping the rest of the application (e.g. handler wireup) the same across all of them.\n\nFirst, we have the normal setup based on the examples but we split it into two files - `app.go` will be common to all variations and holds the Echo instance variable. We initialise it from a function and because it is a `var` this will happen _before_ any `init()` functions run - a feature that we'll use to connect our handlers later.\n\nA separate source file contains the function to create the Echo instance and add the static file handlers and middleware. Note the build tag on the first line which says to use this when _not_ building with appengine or appenginevm tags (which those platforms automatically add for us). We also have the `main()` function to start serving our app as normal. This should all be very familiar.\n\nThe handler-wireup that would normally also be a part of this Echo setup moves to separate files which take advantage of the ability to have multiple `init()` functions which run _after_ the `e` Echo var is initialized but _before_ the `main()` function is executed. These allow additional handlers to attach themselves to the instance - I've found the `Group` feature naturally fits into this pattern with a file per REST endpoint, often with a higher-level `api` group created that they attach to instead of the root Echo instance directly (so things like CORS middleware can be added at this higher common-level).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "title": "Google App Engine Cookbook", "description": "Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:45", "type": "overview", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Google App Engine recipe", "ogLocale": "en", "og:title": "Google App Engine | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Google App Engine | Echo", "og:description": "Google App Engine recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/google-app-engine", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Google App Engine recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Google App Engine | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "og:locale": "en", "scrapeId": "a2fc4549-a789-4c3d-9c66-ba232570988b", "sourceURL": "https://echo.labstack.com/docs/cookbook/google-app-engine", "url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I standalone in echo?\n\nAssistant: To standalone in echo, here's what you do:\nWait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes required is to start with a setup for standalone and work from there plus there's no reason we wouldn't want to retain the ability to run our app anywhere, right?\n\nWe take advantage of the go build constraints or tags to change how we create and run the Echo server for each platform while keeping the rest of the application (e.g. handler wireup) the same across all of them.\n\nFirst, we have the normal setup based on the examples but we split it into two files - `app.go` will be common to all variations and holds the Echo instance variable. We initialise it from a function and because it is a `var` this will happen _before_ any `init()` functions run - a feature that we'll use to connect our handlers later.\n\nA separate source file contains the function to create the Echo instance and add the static file handlers and middleware. Note the build tag on the first line which says to use this when _not_ building with appengine or appenginevm tags (which those platforms automatically add for us). We also have the `main()` function to start serving our app as normal. This should all be very familiar.\n\nThe handler-wireup that would normally also be a part of this Echo setup moves to separate files which take advantage of the ability to have multiple `init()` functions which run _after_ the `e` Echo var is initialized but _before_ the `main()` function is executed. These allow additional handlers to attach themselves to the instance - I've found the `Group` feature naturally fits into this pattern with a file per REST endpoint, often with a higher-level `api` group created that they attach to instead of the root Echo instance directly (so things like CORS middleware can be added at this higher common-level)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "title": "Google App Engine Cookbook", "description": "Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:45", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Google App Engine recipe", "ogLocale": "en", "og:title": "Google App Engine | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Google App Engine | Echo", "og:description": "Google App Engine recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/google-app-engine", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Google App Engine recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Google App Engine | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "og:locale": "en", "scrapeId": "a2fc4549-a789-4c3d-9c66-ba232570988b", "sourceURL": "https://echo.labstack.com/docs/cookbook/google-app-engine", "url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Google App Engine Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**app.go**:\n\n```yaml\npackage main\n\n// reference our echo instance and create it early\nvar e = createMux()\n```\n\nThis snippet shows you how to app.go, which is an important aspect of google app engine cookbook.\n\n**app-standalone.go**:\n\n```yaml\n// +build !appengine,!appenginevm\n\npackage main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc createMux() *echo.Echo {\n\te := echo.New()\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.Use(middleware.Gzip())\n\n\te.Static(\"/\", \"public\")\n\n\treturn e\n}\n\nfunc main() {\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n\nThis snippet shows you how to app-standalone.go, which is an important aspect of google app engine cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "title": "Google App Engine Cookbook", "description": "Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:45", "type": "code_examples", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Google App Engine recipe", "ogLocale": "en", "og:title": "Google App Engine | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Google App Engine | Echo", "og:description": "Google App Engine recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/google-app-engine", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Google App Engine recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Google App Engine | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "og:locale": "en", "scrapeId": "a2fc4549-a789-4c3d-9c66-ba232570988b", "sourceURL": "https://echo.labstack.com/docs/cookbook/google-app-engine", "url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Google App Engine Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse build constraints to manage different configurations for different platforms.\n\nOrganize handlers into separate files for better maintainability.\n\nUtilize Echo's Group feature for organizing REST endpoints.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "title": "Google App Engine Cookbook", "description": "Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:45", "type": "best_practices", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Google App Engine recipe", "ogLocale": "en", "og:title": "Google App Engine | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "title": "Google App Engine | Echo", "og:description": "Google App Engine recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/google-app-engine", "language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Google App Engine recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Google App Engine | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "og:locale": "en", "scrapeId": "a2fc4549-a789-4c3d-9c66-ba232570988b", "sourceURL": "https://echo.labstack.com/docs/cookbook/google-app-engine", "url": "https://echo.labstack.com/docs/cookbook/google-app-engine", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Graceful Shutdown is in echo?\n\nAssistant: Sure, I'd be happy to explain Graceful Shutdown in echo.\n\n# Graceful Shutdown\n\nThis page covers how to implement graceful shutdown in Go applications using the http.Server#Shutdown method.Here's a quick rundown of what this is about:\n\n## Using http.Server#Shutdown()\n\nThis section explains how to use the http.Server#Shutdown method to gracefully shut down a server.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "title": "Graceful Shutdown", "description": "This page covers how to implement graceful shutdown in Go applications using the http.Server#Shutdown method.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:54", "type": "overview", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Graceful shutdown recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Graceful shutdown recipe", "docusaurus_version": "current", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "ogLocale": "en", "docsearch:language": "en", "language": "en", "ogTitle": "Graceful Shutdown | Echo", "docsearch:version": "current", "og:description": "Graceful shutdown recipe", "docusaurus_locale": "en", "title": "Graceful Shutdown | Echo", "og:locale": "en", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "Graceful Shutdown | Echo", "scrapeId": "216c1e07-060e-4d77-9a2a-1729d4322d9c", "sourceURL": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using http.server#shutdown() in echo?\n\nAssistant: To using http.server#shutdown() in echo, here's what you do:\nThis section explains how to use the http.Server#Shutdown method to gracefully shut down a server..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "title": "Graceful Shutdown", "description": "This page covers how to implement graceful shutdown in Go applications using the http.Server#Shutdown method.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:54", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Graceful shutdown recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Graceful shutdown recipe", "docusaurus_version": "current", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "ogLocale": "en", "docsearch:language": "en", "language": "en", "ogTitle": "Graceful Shutdown | Echo", "docsearch:version": "current", "og:description": "Graceful shutdown recipe", "docusaurus_locale": "en", "title": "Graceful Shutdown | Echo", "og:locale": "en", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "Graceful Shutdown | Echo", "scrapeId": "216c1e07-060e-4d77-9a2a-1729d4322d9c", "sourceURL": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Graceful Shutdown in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Shutdown Example**:\n\n```yaml\ncookbook/graceful-shutdown/server.go\n\n```go\n// Example code for graceful shutdown\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"time\"\n)\n\nfunc main() {\n    srv := &http.Server{\n        Addr: \":8080\",\n        Handler: http.DefaultServeMux,\n    }\n\n    go func() {\n        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n            log.Fatalf(\"ListenAndServe(): %s\", err)\n        }\n    }()\n\n    // Wait for interrupt signal to gracefully shutdown the server\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, os.Interrupt)\n    <-c\n\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    if err := srv.Shutdown(ctx); err != nil {\n        log.Fatalf(\"Server Shutdown Failed:%+v\", err)\n    }\n    log.Println(\"Server exited properly\")\n}\n```\n```\n\nThis snippet shows you how to server shutdown example, which is an important aspect of graceful shutdown.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "title": "Graceful Shutdown", "description": "This page covers how to implement graceful shutdown in Go applications using the http.Server#Shutdown method.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:54", "type": "code_examples", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Graceful shutdown recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Graceful shutdown recipe", "docusaurus_version": "current", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "ogLocale": "en", "docsearch:language": "en", "language": "en", "ogTitle": "Graceful Shutdown | Echo", "docsearch:version": "current", "og:description": "Graceful shutdown recipe", "docusaurus_locale": "en", "title": "Graceful Shutdown | Echo", "og:locale": "en", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "Graceful Shutdown | Echo", "scrapeId": "216c1e07-060e-4d77-9a2a-1729d4322d9c", "sourceURL": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Graceful Shutdown in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRequires go1.16+\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "title": "Graceful Shutdown", "description": "This page covers how to implement graceful shutdown in Go applications using the http.Server#Shutdown method.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:00:54", "type": "best_practices", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Graceful shutdown recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Graceful shutdown recipe", "docusaurus_version": "current", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "ogLocale": "en", "docsearch:language": "en", "language": "en", "ogTitle": "Graceful Shutdown | Echo", "docsearch:version": "current", "og:description": "Graceful shutdown recipe", "docusaurus_locale": "en", "title": "Graceful Shutdown | Echo", "og:locale": "en", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "Graceful Shutdown | Echo", "scrapeId": "216c1e07-060e-4d77-9a2a-1729d4322d9c", "sourceURL": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "url": "https://echo.labstack.com/docs/cookbook/graceful-shutdown", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Hello World is in echo?\n\nAssistant: Sure, I'd be happy to explain Hello World in echo.\n\n# Hello World\n\nA simple example of using Echo to create a web server that responds with 'Hello, World!'Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/hello-world/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\t// Echo instance\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Route => handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n} \n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/hello-world", "title": "Hello World", "description": "A simple example of using Echo to create a web server that responds with 'Hello, World!'", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:01:10", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/hello-world", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Hello World | Echo", "docsearch:language": "en", "description": "Hello world recipe", "ogDescription": "Hello world recipe", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "title": "Hello World | Echo", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Hello world recipe", "og:url": "https://echo.labstack.com/docs/cookbook/hello-world", "og:locale": "en", "ogTitle": "Hello World | Echo", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "scrapeId": "ca335a8c-9394-4b48-99de-8c26df727ca0", "sourceURL": "https://echo.labstack.com/docs/cookbook/hello-world", "url": "https://echo.labstack.com/docs/cookbook/hello-world", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/hello-world/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\t// Echo instance\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Route => handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n} \n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/hello-world", "title": "Hello World", "description": "A simple example of using Echo to create a web server that responds with 'Hello, World!'", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/hello-world", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Hello World | Echo", "docsearch:language": "en", "description": "Hello world recipe", "ogDescription": "Hello world recipe", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "title": "Hello World | Echo", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Hello world recipe", "og:url": "https://echo.labstack.com/docs/cookbook/hello-world", "og:locale": "en", "ogTitle": "Hello World | Echo", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "scrapeId": "ca335a8c-9394-4b48-99de-8c26df727ca0", "sourceURL": "https://echo.labstack.com/docs/cookbook/hello-world", "url": "https://echo.labstack.com/docs/cookbook/hello-world", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Hello World in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code Example**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\t// Echo instance\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Route => handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to server code example, which is an important aspect of hello world.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/hello-world", "title": "Hello World", "description": "A simple example of using Echo to create a web server that responds with 'Hello, World!'", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:01:10", "type": "code_examples", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/hello-world", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Hello World | Echo", "docsearch:language": "en", "description": "Hello world recipe", "ogDescription": "Hello world recipe", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "title": "Hello World | Echo", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Hello world recipe", "og:url": "https://echo.labstack.com/docs/cookbook/hello-world", "og:locale": "en", "ogTitle": "Hello World | Echo", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "scrapeId": "ca335a8c-9394-4b48-99de-8c26df727ca0", "sourceURL": "https://echo.labstack.com/docs/cookbook/hello-world", "url": "https://echo.labstack.com/docs/cookbook/hello-world", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what HTTP/2 Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain HTTP/2 Cookbook in echo.\n\n# HTTP/2 Cookbook\n\nThis page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.Here's a quick rundown of what this is about:\n\n## 1) Generate a self-signed X.509 TLS certificate\n\nRun the following command to generate `cert.pem` and `key.pem` files:\n\n```codeBlockLines_e6Vv\ngo run $GOROOT/src/crypto/tls/generate_cert.go --host localhost\n```\n\nnote\n\nFor demo purpose, we are using a self-signed certificate. Ideally, you should obtain\na certificate from [CA](https://en.wikipedia.org/wiki/Certificate_authority).\n\n## 2) Create a handler which simply outputs the request information to the client\n\n```codeBlockLines_e6Vv\ne.GET(\"/request\", func(c echo.Context) error {\n  req := c.Request()\n  format := `\n    <code>\n      Protocol: %s<br>\n      Host: %s<br>\n      Remote Address: %s<br>\n      Method: %s<br>\n      Path: %s<br>\n    </code>\n  `\n  return c.HTML(http.StatusOK, fmt.Sprintf(format, req.Proto, req.Host, req.RemoteAddr, req.Method, req.URL.Path))\n})\n```\n\n## 3) Start TLS server using cert.pem and key.pem\n\n```codeBlockLines_e6Vv\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nor use customized HTTP server with your own TLSConfig\n\n```codeBlockLines_e6Vv\ns := http.Server{\n  Addr:    \":8443\",\n  Handler: e, // set Echo as handler\n  TLSConfig: &tls.Config{\n    //Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n  },\n  //ReadTimeout: 30 * time.Second, // use custom timeouts\n}\nif err := s.ListenAndServeTLS(\"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\n## 4) Start the server and browse to https://localhost:1323/request to see the following output\n\n```codeBlockLines_e6Vv\nProtocol: HTTP/2.0\nHost: localhost:1323\nRemote Address: [::1]:60288\nMethod: GET\nPath: /\n```\n\n## Source Code\n\ncookbook/http2/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "overview", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 1) generate a self-signed x.509 tls certificate in echo?\n\nAssistant: To 1) generate a self-signed x.509 tls certificate in echo, here's what you do:\nRun the following command to generate `cert.pem` and `key.pem` files:\n\n```codeBlockLines_e6Vv\ngo run $GOROOT/src/crypto/tls/generate_cert.go --host localhost\n```\n\nnote\n\nFor demo purpose, we are using a self-signed certificate. Ideally, you should obtain\na certificate from [CA](https://en.wikipedia.org/wiki/Certificate_authority)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 2) create a handler which simply outputs the request information to the client in echo?\n\nAssistant: To 2) create a handler which simply outputs the request information to the client in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.GET(\"/request\", func(c echo.Context) error {\n  req := c.Request()\n  format := `\n    <code>\n      Protocol: %s<br>\n      Host: %s<br>\n      Remote Address: %s<br>\n      Method: %s<br>\n      Path: %s<br>\n    </code>\n  `\n  return c.HTML(http.StatusOK, fmt.Sprintf(format, req.Proto, req.Host, req.RemoteAddr, req.Method, req.URL.Path))\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 3) start tls server using cert.pem and key.pem in echo?\n\nAssistant: To 3) start tls server using cert.pem and key.pem in echo, here's what you do:\n```codeBlockLines_e6Vv\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nor use customized HTTP server with your own TLSConfig\n\n```codeBlockLines_e6Vv\ns := http.Server{\n  Addr:    \":8443\",\n  Handler: e, // set Echo as handler\n  TLSConfig: &tls.Config{\n    //Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n  },\n  //ReadTimeout: 30 * time.Second, // use custom timeouts\n}\nif err := s.ListenAndServeTLS(\"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 4) start the server and browse to https://localhost:1323/request to see the following output in echo?\n\nAssistant: To 4) start the server and browse to https://localhost:1323/request to see the following output in echo, here's what you do:\n```codeBlockLines_e6Vv\nProtocol: HTTP/2.0\nHost: localhost:1323\nRemote Address: [::1]:60288\nMethod: GET\nPath: /\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I source code in echo?\n\nAssistant: To source code in echo, here's what you do:\ncookbook/http2/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for HTTP/2 Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Generate a self-signed X.509 TLS certificate**:\n\n```yaml\ngo run $GOROOT/src/crypto/tls/generate_cert.go --host localhost\n```\n\nThis snippet shows you how to generate a self-signed x.509 tls certificate, which is an important aspect of http/2 cookbook.\n\n**Create a handler which simply outputs the request information to the client**:\n\n```yaml\ne.GET(\"/request\", func(c echo.Context) error {\n  req := c.Request()\n  format := `\n    <code>\n      Protocol: %s<br>\n      Host: %s<br>\n      Remote Address: %s<br>\n      Method: %s<br>\n      Path: %s<br>\n    </code>\n  `\n  return c.HTML(http.StatusOK, fmt.Sprintf(format, req.Proto, req.Host, req.RemoteAddr, req.Method, req.URL.Path))\n})\n```\n\nThis snippet shows you how to create a handler which simply outputs the request information to the client, which is an important aspect of http/2 cookbook.\n\n**Start TLS server using cert.pem and key.pem**:\n\n```yaml\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nThis snippet shows you how to start tls server using cert.pem and key.pem, which is an important aspect of http/2 cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "code_examples", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using HTTP/2 Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor demo purposes, a self-signed certificate is used. Ideally, obtain a certificate from a Certificate Authority (CA).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2", "title": "HTTP/2 Cookbook", "description": "This page provides a step-by-step guide on how to set up an HTTP/2 server using Echo framework with TLS support.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:02:50", "type": "best_practices", "page_metadata": {"generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "ogDescription": "HTTP/2 server recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "HTTP/2 Server | Echo", "description": "HTTP/2 server recipe", "og:description": "HTTP/2 server recipe", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/cookbook/http2", "docsearch:version": "current", "title": "HTTP/2 Server | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "HTTP/2 Server | Echo", "scrapeId": "55d1769e-3cdc-463b-bd92-462969df48e5", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2", "url": "https://echo.labstack.com/docs/cookbook/http2", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Send web assets using HTTP/2 server push is in echo?\n\nAssistant: Sure, I'd be happy to explain Send web assets using HTTP/2 server push in echo.\n\n# Send web assets using HTTP/2 server push\n\nThis page covers how to send web assets using HTTP/2 server push with Echo framework.Here's a quick rundown of what this is about:\n\n## Generate a self-signed X.509 TLS certificate\n\n\n\n## 1) Register a route to serve web assets\n\n```go\ne.Static(\"/\", \"static\")\n```\n\n## 2) Create a handler to serve index.html and push its dependencies\n\n```go\ne.GET(\"/\", func(c echo.Context) (err error) {\n  pusher, ok := c.Response().Writer.(http.Pusher)\n  if ok {\n    if err = pusher.Push(\"/app.css\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/app.js\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/echo.png\", nil); err != nil {\n      return\n    }\n  }\n  return c.File(\"index.html\")\n})\n``` \n\nIf `http.Pusher` is supported, web assets are pushed; otherwise, client makes separate requests to get them.\n\n## 3) Start TLS server using cert.pem and key.pem\n\n```go\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nor use customized HTTP server with your own TLSConfig\n\n```go\ns := http.Server{\n  Addr:    \":8443\",\n  Handler: e, // set Echo as handler\n  TLSConfig: &tls.Config{\n    //Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n  },\n  //ReadTimeout: 30 * time.Second, // use custom timeouts\n}\nif err := s.ListenAndServeTLS(\"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\n## 4) Start the server and browse to https://localhost:1323\n\n```http\nProtocol: HTTP/2.0\nHost: localhost:1323\nRemote Address: [::1]:60288\nMethod: GET\nPath: /\n```\n\n## Source Code\n\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I generate a self-signed x.509 tls certificate in echo?\n\nAssistant: To generate a self-signed x.509 tls certificate in echo, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 1) register a route to serve web assets in echo?\n\nAssistant: To 1) register a route to serve web assets in echo, here's what you do:\n```go\ne.Static(\"/\", \"static\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 2) create a handler to serve index.html and push its dependencies in echo?\n\nAssistant: To 2) create a handler to serve index.html and push its dependencies in echo, here's what you do:\n```go\ne.GET(\"/\", func(c echo.Context) (err error) {\n  pusher, ok := c.Response().Writer.(http.Pusher)\n  if ok {\n    if err = pusher.Push(\"/app.css\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/app.js\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/echo.png\", nil); err != nil {\n      return\n    }\n  }\n  return c.File(\"index.html\")\n})\n``` \n\nIf `http.Pusher` is supported, web assets are pushed; otherwise, client makes separate requests to get them..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 3) start tls server using cert.pem and key.pem in echo?\n\nAssistant: To 3) start tls server using cert.pem and key.pem in echo, here's what you do:\n```go\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nor use customized HTTP server with your own TLSConfig\n\n```go\ns := http.Server{\n  Addr:    \":8443\",\n  Handler: e, // set Echo as handler\n  TLSConfig: &tls.Config{\n    //Certificates: nil, // <-- s.ListenAndServeTLS will populate this field\n  },\n  //ReadTimeout: 30 * time.Second, // use custom timeouts\n}\nif err := s.ListenAndServeTLS(\"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 4) start the server and browse to https://localhost:1323 in echo?\n\nAssistant: To 4) start the server and browse to https://localhost:1323 in echo, here's what you do:\n```http\nProtocol: HTTP/2.0\nHost: localhost:1323\nRemote Address: [::1]:60288\nMethod: GET\nPath: /\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I source code in echo?\n\nAssistant: To source code in echo, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Send web assets using HTTP/2 server push in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Register a route to serve web assets**:\n\n```yaml\ne.Static(\"/\", \"static\")\n```\n\nThis snippet shows you how to register a route to serve web assets, which is an important aspect of send web assets using http/2 server push.\n\n**Create a handler to serve index.html and push its dependencies**:\n\n```yaml\ne.GET(\"/\", func(c echo.Context) (err error) {\n  pusher, ok := c.Response().Writer.(http.Pusher)\n  if ok {\n    if err = pusher.Push(\"/app.css\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/app.js\", nil); err != nil {\n      return\n    }\n    if err = pusher.Push(\"/echo.png\", nil); err != nil {\n      return\n    }\n  }\n  return c.File(\"index.html\")\n})\n```\n\nThis snippet shows you how to create a handler to serve index.html and push its dependencies, which is an important aspect of send web assets using http/2 server push.\n\n**Start TLS server using cert.pem and key.pem**:\n\n```yaml\nif err := e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"); err != http.ErrServerClosed {\n  log.Fatal(err)\n}\n```\n\nThis snippet shows you how to start tls server using cert.pem and key.pem, which is an important aspect of send web assets using http/2 server push.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "code_examples", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Send web assets using HTTP/2 server push in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRequires go1.8+\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "Send web assets using HTTP/2 server push", "description": "This page covers how to send web assets using HTTP/2 server push with Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:04:18", "type": "best_practices", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/cookbook/http2-server-push", "title": "HTTP/2 Server Push | Echo", "docusaurus_locale": "en", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "description": "HTTP/2 server push recipe", "ogDescription": "HTTP/2 server push recipe", "og:url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "og:description": "HTTP/2 server push recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogTitle": "HTTP/2 Server Push | Echo", "generator": "Docusaurus v3.6.3", "og:title": "HTTP/2 Server Push | Echo", "ogLocale": "en", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "c09cc98d-b82b-410f-8e30-8e460dcd76e6", "sourceURL": "https://echo.labstack.com/docs/cookbook/http2-server-push", "url": "https://echo.labstack.com/docs/cookbook/http2-server-push", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what JSONP is in echo?\n\nAssistant: Sure, I'd be happy to explain JSONP in echo.\n\n# JSONP\n\nJSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/jsonp/server.go\n\n```go\npackage main\n\nimport (\n\t\"math/rand\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\t// JSONP\ne.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\t// Start server\ne.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jsonp", "title": "JSONP", "description": "JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:04:32", "type": "overview", "page_metadata": {"docsearch:version": "current", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "og:title": "JSONP | Echo", "description": "JSONP recipe", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "title": "JSONP | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/jsonp", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jsonp", "og:description": "JSONP recipe", "ogDescription": "JSONP recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "JSONP | Echo", "scrapeId": "62e9b10a-0ad8-4b0f-8cdc-9c7c4f21eebf", "sourceURL": "https://echo.labstack.com/docs/cookbook/jsonp", "url": "https://echo.labstack.com/docs/cookbook/jsonp", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/jsonp/server.go\n\n```go\npackage main\n\nimport (\n\t\"math/rand\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\t// JSONP\ne.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\t// Start server\ne.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jsonp", "title": "JSONP", "description": "JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:04:32", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "og:title": "JSONP | Echo", "description": "JSONP recipe", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "title": "JSONP | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/jsonp", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jsonp", "og:description": "JSONP recipe", "ogDescription": "JSONP recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "JSONP | Echo", "scrapeId": "62e9b10a-0ad8-4b0f-8cdc-9c7c4f21eebf", "sourceURL": "https://echo.labstack.com/docs/cookbook/jsonp", "url": "https://echo.labstack.com/docs/cookbook/jsonp", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for JSONP in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code Example**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"math/rand\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\t// JSONP\ne.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\t// Start server\ne.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to server code example, which is an important aspect of jsonp.\n\n**Client Code Example**:\n\n```yaml\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n    <title>JSONP</title>\n    <script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\"></script>\n    <script type=\"text/javascript\">\n        var host_prefix = 'http://localhost:1323';\n        $(document).ready(function() {\n            // JSONP version - add 'callback=?' to the URL - fetch the JSONP response to the request\n            $(\"#jsonp-button\").click(function(e) {\n                e.preventDefault();\n                // The only difference on the client end is the addition of 'callback=?' to the URL\n                var url = host_prefix + '/jsonp?callback=?';\n                $.getJSON(url, function(jsonp) {\n                    console.log(jsonp);\n                    $(\"#jsonp-response\").html(JSON.stringify(jsonp, null, 2));\n                });\n            });\n        });\n    </script>\n\n</head>\n\n<body>\n    <div class=\"container\" style=\"margin-top: 50px;\">\n        <input type=\"button\" class=\"btn btn-primary btn-lg\" id=\"jsonp-button\" value=\"Get JSONP response\">\n        <p>\n            <pre id=\"jsonp-response\"></pre>\n        </p>\n    </div>\n</body>\n\n</html>\n```\n```\n\nThis snippet shows you how to client code example, which is an important aspect of jsonp.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jsonp", "title": "JSONP", "description": "JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:04:32", "type": "code_examples", "page_metadata": {"docsearch:version": "current", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "og:title": "JSONP | Echo", "description": "JSONP recipe", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "title": "JSONP | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/jsonp", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jsonp", "og:description": "JSONP recipe", "ogDescription": "JSONP recipe", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "JSONP | Echo", "scrapeId": "62e9b10a-0ad8-4b0f-8cdc-9c7c4f21eebf", "sourceURL": "https://echo.labstack.com/docs/cookbook/jsonp", "url": "https://echo.labstack.com/docs/cookbook/jsonp", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what JWT Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain JWT Cookbook in echo.\n\n# JWT Cookbook\n\nThis is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.Here's a quick rundown of what this is about:\n\n## Server\n\nThis section covers the server-side implementation of JWT authentication.\n\n## Using custom claims\n\nThis section demonstrates how to use custom claims in JWT.\n\n## Using a user-defined KeyFunc\n\nThis section explains how to implement a user-defined KeyFunc for JWT.\n\n## Client\n\nThis section covers the client-side implementation for JWT authentication.\n\n## Login\n\nLogin using username and password to retrieve a token.\n\n## Response\n\nThis section shows the response format after a successful login.\n\n## Request\n\nThis section explains how to request a restricted resource using the token.\n\n## Response\n\nThis section shows the response format after accessing a restricted resource.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "overview", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nThis section covers the server-side implementation of JWT authentication..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using custom claims in echo?\n\nAssistant: To using custom claims in echo, here's what you do:\nThis section demonstrates how to use custom claims in JWT..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using a user-defined keyfunc in echo?\n\nAssistant: To using a user-defined keyfunc in echo, here's what you do:\nThis section explains how to implement a user-defined KeyFunc for JWT..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I client in echo?\n\nAssistant: To client in echo, here's what you do:\nThis section covers the client-side implementation for JWT authentication..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I login in echo?\n\nAssistant: To login in echo, here's what you do:\nLogin using username and password to retrieve a token..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I response in echo?\n\nAssistant: To response in echo, here's what you do:\nThis section shows the response format after a successful login..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I request in echo?\n\nAssistant: To request in echo, here's what you do:\nThis section explains how to request a restricted resource using the token..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I response in echo?\n\nAssistant: To response in echo, here's what you do:\nThis section shows the response format after accessing a restricted resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "section_detail", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for JWT Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using custom claims**:\n\n```yaml\npackage main\n\nimport (\n\t\"github.com/golang-jwt/jwt/v5\"\n\techojwt \"github.com/labstack/echo-jwt/v4\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n\t\"time\"\n)\n\n// jwtCustomClaims are custom claims extending default ones.\n// See https://github.com/golang-jwt/jwt for more examples\ntype jwtCustomClaims struct {\n\tName  string `json:\"name\"`\n\tAdmin bool   `json:\"admin\"`\n\tjwt.RegisteredClaims\n}\n\nfunc login(c echo.Context) error {\n\tusername := c.FormValue(\"username\")\n\tpassword := c.FormValue(\"password\")\n\n\t// Throws unauthorized error\n\tif username != \"jon\" || password != \"shhh!\" {\n\t\treturn echo.ErrUnauthorized\n\t}\n\n\t// Set custom claims\n\tclaims := &jwtCustomClaims{\n\t\t\"Jon Snow\",\n\t\ttrue,\n\t\tjwt.RegisteredClaims{\n\t\t\tExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour * 72)),\n\t\t},\n\t}\n\n\t// Create token with claims\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\n\t// Generate encoded token and send it as response.\n\tt, err := token.SignedString([]byte(\"secret\"))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusOK, echo.Map{\n\t\t\"token\": t,\n\t})\n}\n\nfunc accessible(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Accessible\")\n}\n\nfunc restricted(c echo.Context) error {\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(*jwtCustomClaims)\n\tname := claims.Name\n\treturn c.String(http.StatusOK, \"Welcome \"+name+\"!\")\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Login route\n\te.POST(\"/login\", login)\n\n\t// Unauthenticated route\n\te.GET(\"/\", accessible)\n\n\t// Restricted group\n\tr := e.Group(\"/restricted\")\n\n\t// Configure middleware with the custom claims type\n\tconfig := echojwt.Config{\n\t\tNewClaimsFunc: func(c echo.Context) jwt.Claims {\n\t\t\treturn new(jwtCustomClaims)\n\t\t},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(echojwt.WithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to using custom claims, which is an important aspect of jwt cookbook.\n\n**Using a user-defined KeyFunc**:\n\n```yaml\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\techojwt \"github.com/labstack/echo-jwt/v4\"\n\t\"net/http\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/lestrrat-go/jwx/jwk\"\n)\n\nfunc getKey(token *jwt.Token) (interface{}, error) {\n\n\t// For a demonstration purpose, Google Sign-in is used.\n\t// https://developers.google.com/identity/sign-in/web/backend-auth\n\t//\n\t// This user-defined KeyFunc verifies tokens issued by Google Sign-In.\n\t//\n\t// Note: In this example, it downloads the keyset every time the restricted route is accessed.\n\tkeySet, err := jwk.Fetch(context.Background(), \"https://www.googleapis.com/oauth2/v3/certs\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkeyID, ok := token.Header[\"kid\"].(string)\n\tif !ok {\n\t\treturn nil, errors.New(\"expecting JWT header to have a key ID in the kid field\")\n\t}\n\n\tkey, found := keySet.LookupKeyID(keyID)\n\n\tif !found {\n\t\treturn nil, fmt.Errorf(\"unable to find key %q\", keyID)\n\t}\n\n\tvar pubkey interface{}\n\tif err := key.Raw(&pubkey); err != nil {\n\t\treturn nil, fmt.Errorf(\"Unable to get the public key. Error: %s\", err.Error())\n\t}\n\n\treturn pubkey, nil\n}\n\nfunc accessible(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Accessible\")\n}\n\nfunc restricted(c echo.Context) error {\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(jwt.MapClaims)\n\tname := claims[\"name\"].(string)\n\treturn c.String(http.StatusOK, \"Welcome \"+name+\"!\")\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Unauthenticated route\n\te.GET(\"/\", accessible)\n\n\t// Restricted group\n\tr := e.Group(\"/restricted\")\n\t{\n\t\tconfig := echojwt.Config{\n\t\t\tKeyFunc: getKey,\n\t\t}\n\t\tr.Use(echojwt.WithConfig(config))\n\t\tr.GET(\"\", restricted)\n\t}\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to using a user-defined keyfunc, which is an important aspect of jwt cookbook.\n\n**Login**:\n\n```yaml\ncurl -X POST -d 'username=jon' -d 'password=shhh!' localhost:1323/login\n```\n\nThis snippet shows you how to login, which is an important aspect of jwt cookbook.\n\n**Response after Login**:\n\n```yaml\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY\"\n}\n```\n\nThis snippet shows you how to response after login, which is an important aspect of jwt cookbook.\n\n**Request a restricted resource**:\n\n```yaml\ncurl localhost:1323/restricted -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY\"\n```\n\nThis snippet shows you how to request a restricted resource, which is an important aspect of jwt cookbook.\n\n**Response after accessing restricted resource**:\n\n```yaml\nWelcome Jon Snow!\n```\n\nThis snippet shows you how to response after accessing restricted resource, which is an important aspect of jwt cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "code_examples", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using JWT Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to use secure signing keys for JWT tokens.\n\nAlways validate the token expiration and claims before processing requests.\n\nUse HTTPS to protect the token during transmission.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/jwt", "title": "JWT Cookbook", "description": "This is a cookbook for JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:05:03", "type": "best_practices", "page_metadata": {"og:title": "JWT | Echo", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "JWT | Echo", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/cookbook/jwt", "ogDescription": "JWT recipe", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docusaurus_version": "current", "ogUrl": "https://echo.labstack.com/docs/cookbook/jwt", "ogTitle": "JWT | Echo", "og:locale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "description": "JWT recipe", "generator": "Docusaurus v3.6.3", "og:description": "JWT recipe", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "scrapeId": "0b2eaaa2-06a7-4b3f-a99c-58dbadfbe47e", "sourceURL": "https://echo.labstack.com/docs/cookbook/jwt", "url": "https://echo.labstack.com/docs/cookbook/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Load Balancing with Nginx and Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Load Balancing with Nginx and Echo in echo.\n\n# Load Balancing with Nginx and Echo\n\nThis recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.Here's a quick rundown of what this is about:\n\n## Echo\n\nThis section provides the code for the Echo server that will be load balanced by Nginx.\n\n## Start servers\n\nTo start the Echo servers, navigate to the upstream directory and run the following commands:\n- `cd upstream`\n- `go run server.go server1 :8081`\n- `go run server.go server2 :8082`\n\n## Nginx\n\nThis section covers the installation and configuration of Nginx to work with the Echo servers.\n\n## 1) Install Nginx\n\nFollow the instructions at [Nginx Installation Guide](https://www.nginx.com/resources/wiki/start/topics/tutorials/install) to install Nginx.\n\n## 2) Configure Nginx\n\nCreate a file `/etc/nginx/sites-enabled/localhost` with the following content:\n\n```nginx\n# Nginx configuration for load balancing\nupstream echo_servers {\n    server localhost:8081;\n    server localhost:8082;\n}\n\nserver {\n    listen 8080;\n    server_name localhost;\n\n    location / {\n        proxy_pass http://echo_servers;\n    }\n}\n```\n\nChange listen, server_name, access_log per your need.\n\n## 3) Restart Nginx\n\nTo restart Nginx, run the following command:\n\n```bash\nservice nginx restart\n```\n\nAfter restarting, browse to [https://localhost:8080](https://localhost:8080/), and you should see a webpage being served from either \"server 1\" or \"server 2\".\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "overview", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I echo in echo?\n\nAssistant: To echo in echo, here's what you do:\nThis section provides the code for the Echo server that will be load balanced by Nginx..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I start servers in echo?\n\nAssistant: To start servers in echo, here's what you do:\nTo start the Echo servers, navigate to the upstream directory and run the following commands:\n- `cd upstream`\n- `go run server.go server1 :8081`\n- `go run server.go server2 :8082`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I nginx in echo?\n\nAssistant: To nginx in echo, here's what you do:\nThis section covers the installation and configuration of Nginx to work with the Echo servers..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 1) install nginx in echo?\n\nAssistant: To 1) install nginx in echo, here's what you do:\nFollow the instructions at [Nginx Installation Guide](https://www.nginx.com/resources/wiki/start/topics/tutorials/install) to install Nginx..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 2) configure nginx in echo?\n\nAssistant: To 2) configure nginx in echo, here's what you do:\nCreate a file `/etc/nginx/sites-enabled/localhost` with the following content:\n\n```nginx\n# Nginx configuration for load balancing\nupstream echo_servers {\n    server localhost:8081;\n    server localhost:8082;\n}\n\nserver {\n    listen 8080;\n    server_name localhost;\n\n    location / {\n        proxy_pass http://echo_servers;\n    }\n}\n```\n\nChange listen, server_name, access_log per your need..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 3) restart nginx in echo?\n\nAssistant: To 3) restart nginx in echo, here's what you do:\nTo restart Nginx, run the following command:\n\n```bash\nservice nginx restart\n```\n\nAfter restarting, browse to [https://localhost:8080](https://localhost:8080/), and you should see a webpage being served from either \"server 1\" or \"server 2\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "section_detail", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Load Balancing with Nginx and Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Echo Server Code**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar index = `\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t\t<title>Upstream Server</title>\n\t\t<style>\n\t\t\th1, p {\n\t\t\t\tfont-weight: 300;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p>\n\t\t\tHello from upstream server %s\n\t\t</p>\n\t</body>\n\t</html>\n`\n\nfunc main() {\n\tname := os.Args[1]\n\tport := os.Args[2]\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(index, name))\n\t})\n\te.Logger.Fatal(e.Start(port))\n}\n```\n```\n\nThis snippet shows you how to echo server code, which is an important aspect of load balancing with nginx and echo.\n\n**Nginx Configuration**:\n\n```yaml\n```nginx\n# Nginx configuration for load balancing\nupstream echo_servers {\n    server localhost:8081;\n    server localhost:8082;\n}\n\nserver {\n    listen 8080;\n    server_name localhost;\n\n    location / {\n        proxy_pass http://echo_servers;\n    }\n}\n```\n```\n\nThis snippet shows you how to nginx configuration, which is an important aspect of load balancing with nginx and echo.\n\n**Restart Nginx Command**:\n\n```yaml\n```bash\nservice nginx restart\n```\n```\n\nThis snippet shows you how to restart nginx command, which is an important aspect of load balancing with nginx and echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "code_examples", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Load Balancing with Nginx and Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that the Echo servers are running before starting Nginx.\n\nModify the Nginx configuration according to your server setup, especially the listen and server_name directives.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/load-balancing", "title": "Load Balancing with Nginx and Echo", "description": "This recipe demonstrates how you can use Nginx as a reverse proxy server and load balance between multiple Echo servers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:06:51", "type": "best_practices", "page_metadata": {"title": "Load Balancing | Echo", "language": "en", "og:locale": "en", "docsearch:language": "en", "docsearch:version": "current", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Load balancing recipe", "ogDescription": "Load balancing recipe", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Load Balancing | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/load-balancing", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "description": "Load balancing recipe", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/load-balancing", "og:title": "Load Balancing | Echo", "twitter:card": "summary_large_image", "scrapeId": "71d8c3e4-aef1-415d-b3d0-c6d85490c7f8", "sourceURL": "https://echo.labstack.com/docs/cookbook/load-balancing", "url": "https://echo.labstack.com/docs/cookbook/load-balancing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Write a custom middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Write a custom middleware in echo.\n\n# Write a custom middleware\n\nMiddleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/middleware/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tStats struct {\n\t\tUptime       time.Time      `json:\"uptime\"`\n\t\tRequestCount uint64         `json:\"requestCount\"`\n\t\tStatuses     map[string]int `json:\"statuses\"`\n\t\tmutex        sync.RWMutex\n\t}\n)\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tUptime:   time.Now(),\n\t\tStatuses: map[string]int{},\n\t}\n}\n\n// Process is the middleware function.\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tif err := next(c); err != nil {\n\t\t\tc.Error(err)\n\t\t}\n\t\ts.mutex.Lock()\n\t\tdefer s.mutex.Unlock()\n\t\ts.RequestCount++\n\t\tstatus := strconv.Itoa(c.Response().Status)\n\t\ts.Statuses[status]++\n\t\treturn nil\n\t}\n}\n\n// Handle is the endpoint to get stats.\nfunc (s *Stats) Handle(c echo.Context) error {\n\ts.mutex.RLock()\n\tdefer s.mutex.RUnlock()\n\treturn c.JSON(http.StatusOK, s)\n}\n\n// ServerHeader middleware adds a `Server` header to the response.\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderServer, \"Echo/3.0\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Debug mode\n\te.Debug = true\n\n\t//-------------------\n\t// Custom middleware\n\t//-------------------\n\t// Stats\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle) // Endpoint to get stats\n\n\t// Server header\n\te.Use(ServerHeader)\n\n\t// Handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n## Response\n\n#### Headers\n\n```http\nContent-Length:122\nContent-Type:application/json; charset=utf-8\nDate:Thu, 14 Apr 2016 20:31:46 GMT\nServer:Echo/3.0\n```\n\n#### Body\n\n```json\n{\n  \"uptime\": \"2016-04-14T13:28:48.486548936-07:00\",\n  \"requestCount\": 5,\n  \"statuses\": {\n    \"200\": 4,\n    \"404\": 1\n  }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/middleware", "title": "Write a custom middleware", "description": "Middleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:13", "type": "overview", "page_metadata": {"generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "title": "Middleware | Echo", "docsearch:version": "current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "description": "Middleware recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:card": "summary_large_image", "docusaurus_version": "current", "ogDescription": "Middleware recipe", "ogTitle": "Middleware | Echo", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Middleware recipe", "og:title": "Middleware | Echo", "scrapeId": "3d71c608-7c57-4c08-9b3d-339270b3f23d", "sourceURL": "https://echo.labstack.com/docs/cookbook/middleware", "url": "https://echo.labstack.com/docs/cookbook/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/middleware/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tStats struct {\n\t\tUptime       time.Time      `json:\"uptime\"`\n\t\tRequestCount uint64         `json:\"requestCount\"`\n\t\tStatuses     map[string]int `json:\"statuses\"`\n\t\tmutex        sync.RWMutex\n\t}\n)\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tUptime:   time.Now(),\n\t\tStatuses: map[string]int{},\n\t}\n}\n\n// Process is the middleware function.\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tif err := next(c); err != nil {\n\t\t\tc.Error(err)\n\t\t}\n\t\ts.mutex.Lock()\n\t\tdefer s.mutex.Unlock()\n\t\ts.RequestCount++\n\t\tstatus := strconv.Itoa(c.Response().Status)\n\t\ts.Statuses[status]++\n\t\treturn nil\n\t}\n}\n\n// Handle is the endpoint to get stats.\nfunc (s *Stats) Handle(c echo.Context) error {\n\ts.mutex.RLock()\n\tdefer s.mutex.RUnlock()\n\treturn c.JSON(http.StatusOK, s)\n}\n\n// ServerHeader middleware adds a `Server` header to the response.\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderServer, \"Echo/3.0\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Debug mode\n\te.Debug = true\n\n\t//-------------------\n\t// Custom middleware\n\t//-------------------\n\t// Stats\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle) // Endpoint to get stats\n\n\t// Server header\n\te.Use(ServerHeader)\n\n\t// Handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/middleware", "title": "Write a custom middleware", "description": "Middleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:13", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "title": "Middleware | Echo", "docsearch:version": "current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "description": "Middleware recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:card": "summary_large_image", "docusaurus_version": "current", "ogDescription": "Middleware recipe", "ogTitle": "Middleware | Echo", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Middleware recipe", "og:title": "Middleware | Echo", "scrapeId": "3d71c608-7c57-4c08-9b3d-339270b3f23d", "sourceURL": "https://echo.labstack.com/docs/cookbook/middleware", "url": "https://echo.labstack.com/docs/cookbook/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I response in echo?\n\nAssistant: To response in echo, here's what you do:\n#### Headers\n\n```http\nContent-Length:122\nContent-Type:application/json; charset=utf-8\nDate:Thu, 14 Apr 2016 20:31:46 GMT\nServer:Echo/3.0\n```\n\n#### Body\n\n```json\n{\n  \"uptime\": \"2016-04-14T13:28:48.486548936-07:00\",\n  \"requestCount\": 5,\n  \"statuses\": {\n    \"200\": 4,\n    \"404\": 1\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/middleware", "title": "Write a custom middleware", "description": "Middleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:13", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "title": "Middleware | Echo", "docsearch:version": "current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "description": "Middleware recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:card": "summary_large_image", "docusaurus_version": "current", "ogDescription": "Middleware recipe", "ogTitle": "Middleware | Echo", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Middleware recipe", "og:title": "Middleware | Echo", "scrapeId": "3d71c608-7c57-4c08-9b3d-339270b3f23d", "sourceURL": "https://echo.labstack.com/docs/cookbook/middleware", "url": "https://echo.labstack.com/docs/cookbook/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Write a custom middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Middleware Example**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tStats struct {\n\t\tUptime       time.Time      `json:\"uptime\"`\n\t\tRequestCount uint64         `json:\"requestCount\"`\n\t\tStatuses     map[string]int `json:\"statuses\"`\n\t\tmutex        sync.RWMutex\n\t}\n)\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tUptime:   time.Now(),\n\t\tStatuses: map[string]int{},\n\t}\n}\n\n// Process is the middleware function.\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tif err := next(c); err != nil {\n\t\t\tc.Error(err)\n\t\t}\n\t\ts.mutex.Lock()\n\t\tdefer s.mutex.Unlock()\n\t\ts.RequestCount++\n\t\tstatus := strconv.Itoa(c.Response().Status)\n\t\ts.Statuses[status]++\n\t\treturn nil\n\t}\n}\n\n// Handle is the endpoint to get stats.\nfunc (s *Stats) Handle(c echo.Context) error {\n\ts.mutex.RLock()\n\tdefer s.mutex.RUnlock()\n\treturn c.JSON(http.StatusOK, s)\n}\n\n// ServerHeader middleware adds a `Server` header to the response.\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderServer, \"Echo/3.0\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Debug mode\n\te.Debug = true\n\n\t//-------------------\n\t// Custom middleware\n\t//-------------------\n\t// Stats\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle) // Endpoint to get stats\n\n\t// Server header\n\te.Use(ServerHeader)\n\n\t// Handler\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to server middleware example, which is an important aspect of write a custom middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/middleware", "title": "Write a custom middleware", "description": "Middleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:13", "type": "code_examples", "page_metadata": {"generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "title": "Middleware | Echo", "docsearch:version": "current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "description": "Middleware recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:card": "summary_large_image", "docusaurus_version": "current", "ogDescription": "Middleware recipe", "ogTitle": "Middleware | Echo", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Middleware recipe", "og:title": "Middleware | Echo", "scrapeId": "3d71c608-7c57-4c08-9b3d-339270b3f23d", "sourceURL": "https://echo.labstack.com/docs/cookbook/middleware", "url": "https://echo.labstack.com/docs/cookbook/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Write a custom middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse mutexes to protect shared data in middleware.\n\nAlways return an error if the next handler returns one.\n\nSet appropriate headers in the response for better API management.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/middleware", "title": "Write a custom middleware", "description": "Middleware to collect request count, statuses and uptime. Middleware to write custom `Server` header to the response.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:13", "type": "best_practices", "page_metadata": {"generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "title": "Middleware | Echo", "docsearch:version": "current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "description": "Middleware recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:card": "summary_large_image", "docusaurus_version": "current", "ogDescription": "Middleware recipe", "ogTitle": "Middleware | Echo", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Middleware recipe", "og:title": "Middleware | Echo", "scrapeId": "3d71c608-7c57-4c08-9b3d-339270b3f23d", "sourceURL": "https://echo.labstack.com/docs/cookbook/middleware", "url": "https://echo.labstack.com/docs/cookbook/middleware", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Using Echo as a Reverse Proxy is in echo?\n\nAssistant: Sure, I'd be happy to explain Using Echo as a Reverse Proxy in echo.\n\n# Using Echo as a Reverse Proxy\n\nThis recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.Here's a quick rundown of what this is about:\n\n## 1) Identify upstream target URL(s)\n\n```go\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ntargets := []*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n}\n```\n\n## 2) Setup proxy middleware with upstream targets\n\nIn the following code snippet we are using round-robin load balancing technique. You may also use `middleware.NewRandomBalancer()`.\n\n```go\ne.Use(middleware.Proxy(middleware.NewRoundRobinBalancer(targets)))\n```\n\nTo setup proxy for a sub-route use `Echo#Group()`.\n\n```go\ng := e.Group(\"/blog\")\ng.Use(middleware.Proxy(...))\n```\n\n## 3) Start upstream servers\n\n- `cd upstream`\n- `go run server.go server1 :8081`\n- `go run server.go server2 :8082`\n\n## 4) Start the proxy server\n\n```go\ngo run server.go\n```\n\nBrowse to [http://localhost:1323](http://localhost:1323/), and you should see a webpage with an HTTP request being served from \"server 1\" and a WebSocket request being served from \"server 2.\"\n\n```HTTP\nHello from upstream server server1\n```\n\n```WebSocket\nHello from upstream server server2!\nHello from upstream server server2!\nHello from upstream server server2!\n```\n\n## Source Code\n\ncookbook/reverse-proxy/upstream/server.go\n\n```go\nloading...\n```\n\ncookbook/reverse-proxy/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/url\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\n\t// Setup proxy\n\turl1, err := url.Parse(\"http://localhost:8081\")\n\tif err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\turl2, err := url.Parse(\"http://localhost:8082\")\n\tif err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\ttargets := []*middleware.ProxyTarget{\n\t\t{\n\t\t\tURL: url1,\n\t\t},\n\t\t{\n\t\t\tURL: url2,\n\t\t},\n\t}\n\te.Use(middleware.Proxy(middleware.NewRoundRobinBalancer(targets)))\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "overview", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 1) identify upstream target url(s) in echo?\n\nAssistant: To 1) identify upstream target url(s) in echo, here's what you do:\n```go\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ntargets := []*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 2) setup proxy middleware with upstream targets in echo?\n\nAssistant: To 2) setup proxy middleware with upstream targets in echo, here's what you do:\nIn the following code snippet we are using round-robin load balancing technique. You may also use `middleware.NewRandomBalancer()`.\n\n```go\ne.Use(middleware.Proxy(middleware.NewRoundRobinBalancer(targets)))\n```\n\nTo setup proxy for a sub-route use `Echo#Group()`.\n\n```go\ng := e.Group(\"/blog\")\ng.Use(middleware.Proxy(...))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 3) start upstream servers in echo?\n\nAssistant: To 3) start upstream servers in echo, here's what you do:\n- `cd upstream`\n- `go run server.go server1 :8081`\n- `go run server.go server2 :8082`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I 4) start the proxy server in echo?\n\nAssistant: To 4) start the proxy server in echo, here's what you do:\n```go\ngo run server.go\n```\n\nBrowse to [http://localhost:1323](http://localhost:1323/), and you should see a webpage with an HTTP request being served from \"server 1\" and a WebSocket request being served from \"server 2.\"\n\n```HTTP\nHello from upstream server server1\n```\n\n```WebSocket\nHello from upstream server server2!\nHello from upstream server server2!\nHello from upstream server server2!\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I source code in echo?\n\nAssistant: To source code in echo, here's what you do:\ncookbook/reverse-proxy/upstream/server.go\n\n```go\nloading...\n```\n\ncookbook/reverse-proxy/server.go\n\n```go\npackage main\n\nimport (\n\t\"net/url\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\n\t// Setup proxy\n\turl1, err := url.Parse(\"http://localhost:8081\")\n\tif err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\turl2, err := url.Parse(\"http://localhost:8082\")\n\tif err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\ttargets := []*middleware.ProxyTarget{\n\t\t{\n\t\t\tURL: url1,\n\t\t},\n\t\t{\n\t\t\tURL: url2,\n\t\t},\n\t}\n\te.Use(middleware.Proxy(middleware.NewRoundRobinBalancer(targets)))\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Using Echo as a Reverse Proxy in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Identify upstream target URL(s)**:\n\n```yaml\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ntargets := []*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n}\n```\n\nThis snippet shows you how to identify upstream target url(s), which is an important aspect of using echo as a reverse proxy.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "code_examples", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Using Echo as a Reverse Proxy in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse round-robin load balancing technique for distributing requests among upstream servers.\n\nConsider using `middleware.NewRandomBalancer()` for random load balancing.\n\nTo setup proxy for a sub-route, use `Echo#Group()` method.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "title": "Using Echo as a Reverse Proxy", "description": "This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:07:55", "type": "best_practices", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:title": "Reverse Proxy | Echo", "ogTitle": "Reverse Proxy | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "title": "Reverse Proxy | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "language": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "Reverse proxy recipe", "docusaurus_version": "current", "og:description": "Reverse proxy recipe", "docusaurus_locale": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reverse proxy recipe", "ogUrl": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "scrapeId": "bf7efc54-c413-4559-be2d-3df7df6c077b", "sourceURL": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "url": "https://echo.labstack.com/docs/cookbook/reverse-proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Server-Sent Events (SSE) Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain Server-Sent Events (SSE) Cookbook in echo.\n\n# Server-Sent Events (SSE) Cookbook\n\nThis page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.Here's a quick rundown of what this is about:\n\n## Using SSE\n\nServer-sent events can be used in different ways. This example here is per connection - per handler SSE. If your requirements need more complex broadcasting logic see the r3labs/sse library.\n\n## Server\n\nExample server implementation for SSE can be found in cookbook/sse/simple/server.go.\n\n## Event structure and Marshal method\n\nDetails about the event structure and the Marshal method can be found in cookbook/sse/simple/serversentevent.go.\n\n## HTML serving SSE\n\nExample of serving HTML with SSE can be found in cookbook/sse/simple/index.html.\n\n## Using 3rd party library r3labs/sse to broadcast events\n\nThis section covers how to use the r3labs/sse library to broadcast events.\n\n## Server\n\nExample server implementation for broadcasting events can be found in cookbook/sse/broadcast/server.go.\n\n## HTML serving SSE\n\nExample of serving HTML with broadcasting events can be found in cookbook/sse/broadcast/index.html.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "overview", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using sse in echo?\n\nAssistant: To using sse in echo, here's what you do:\nServer-sent events can be used in different ways. This example here is per connection - per handler SSE. If your requirements need more complex broadcasting logic see the r3labs/sse library..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nExample server implementation for SSE can be found in cookbook/sse/simple/server.go..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I event structure and marshal method in echo?\n\nAssistant: To event structure and marshal method in echo, here's what you do:\nDetails about the event structure and the Marshal method can be found in cookbook/sse/simple/serversentevent.go..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I html serving sse in echo?\n\nAssistant: To html serving sse in echo, here's what you do:\nExample of serving HTML with SSE can be found in cookbook/sse/simple/index.html..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using 3rd party library r3labs/sse to broadcast events in echo?\n\nAssistant: To using 3rd party library r3labs/sse to broadcast events in echo, here's what you do:\nThis section covers how to use the r3labs/sse library to broadcast events..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nExample server implementation for broadcasting events can be found in cookbook/sse/broadcast/server.go..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I html serving sse in echo?\n\nAssistant: To html serving sse in echo, here's what you do:\nExample of serving HTML with broadcasting events can be found in cookbook/sse/broadcast/index.html..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "section_detail", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Server-Sent Events (SSE) Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Implementation for SSE**:\n\n```yaml\ncookbook/sse/simple/server.go\n```\n\nThis snippet shows you how to server implementation for sse, which is an important aspect of server-sent events (sse) cookbook.\n\n**Event Structure and Marshal Method**:\n\n```yaml\ncookbook/sse/simple/serversentevent.go\n```\n\nThis snippet shows you how to event structure and marshal method, which is an important aspect of server-sent events (sse) cookbook.\n\n**HTML Serving SSE**:\n\n```yaml\ncookbook/sse/simple/index.html\n```\n\nThis snippet shows you how to html serving sse, which is an important aspect of server-sent events (sse) cookbook.\n\n**Server Implementation for Broadcasting Events**:\n\n```yaml\ncookbook/sse/broadcast/server.go\n```\n\nThis snippet shows you how to server implementation for broadcasting events, which is an important aspect of server-sent events (sse) cookbook.\n\n**HTML Serving with Broadcasting Events**:\n\n```yaml\ncookbook/sse/broadcast/index.html\n```\n\nThis snippet shows you how to html serving with broadcasting events, which is an important aspect of server-sent events (sse) cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "code_examples", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Server-Sent Events (SSE) Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf your requirements need more complex broadcasting logic, consider using the r3labs/sse library.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/sse", "title": "Server-Sent Events (SSE) Cookbook", "description": "This page covers the usage of Server-Sent Events (SSE) in different ways, including examples for server implementation and HTML serving.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:10:28", "type": "best_practices", "page_metadata": {"ogTitle": "Server-Sent-Events (SSE) | Echo", "og:locale": "en", "og:description": "SSE recipe", "title": "Server-Sent-Events (SSE) | Echo", "ogDescription": "SSE recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://echo.labstack.com/docs/cookbook/sse", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "Server-Sent-Events (SSE) | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/sse", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "SSE recipe", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "a99f379c-4219-459c-875f-34e5f4c48d5d", "sourceURL": "https://echo.labstack.com/docs/cookbook/sse", "url": "https://echo.labstack.com/docs/cookbook/sse", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Streaming Response is in echo?\n\nAssistant: Sure, I'd be happy to explain Streaming Response in echo.\n\n# Streaming Response\n\nThis page covers how to send data as it is produced using streaming JSON responses with chunked transfer encoding.Here's a quick rundown of what this is about:\n\n## Server\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tGeolocation struct {\n\t\tAltitude  float64\n\t\tLatitude  float64\n\t\tLongitude float64\n\t}\n)\n\nvar (\n\tlocations = []Geolocation{\n\t\t{-97, 37.819929, -122.478255},\n\t\t{1899, 39.096849, -120.032351},\n\t\t{2619, 37.865101, -119.538329},\n\t\t{42, 33.812092, -117.918974},\n\t\t{15, 37.77493, -122.419416},\n\t}\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\tenc := json.NewEncoder(c.Response())\n\t\tfor _, l := range locations {\n\t\t\tif err := enc.Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/streaming-response", "title": "Streaming Response", "description": "This page covers how to send data as it is produced using streaming JSON responses with chunked transfer encoding.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:10:58", "type": "overview", "page_metadata": {"docsearch:language": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/streaming-response", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Streaming Response | Echo", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Streaming response recipe", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/streaming-response", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Streaming Response | Echo", "ogDescription": "Streaming response recipe", "docusaurus_version": "current", "ogTitle": "Streaming Response | Echo", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Streaming response recipe", "scrapeId": "0c375331-8f32-43e3-b2ac-689dcea38df7", "sourceURL": "https://echo.labstack.com/docs/cookbook/streaming-response", "url": "https://echo.labstack.com/docs/cookbook/streaming-response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tGeolocation struct {\n\t\tAltitude  float64\n\t\tLatitude  float64\n\t\tLongitude float64\n\t}\n)\n\nvar (\n\tlocations = []Geolocation{\n\t\t{-97, 37.819929, -122.478255},\n\t\t{1899, 39.096849, -120.032351},\n\t\t{2619, 37.865101, -119.538329},\n\t\t{42, 33.812092, -117.918974},\n\t\t{15, 37.77493, -122.419416},\n\t}\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\tenc := json.NewEncoder(c.Response())\n\t\tfor _, l := range locations {\n\t\t\tif err := enc.Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/streaming-response", "title": "Streaming Response", "description": "This page covers how to send data as it is produced using streaming JSON responses with chunked transfer encoding.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:10:58", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/streaming-response", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Streaming Response | Echo", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Streaming response recipe", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/streaming-response", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Streaming Response | Echo", "ogDescription": "Streaming response recipe", "docusaurus_version": "current", "ogTitle": "Streaming Response | Echo", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Streaming response recipe", "scrapeId": "0c375331-8f32-43e3-b2ac-689dcea38df7", "sourceURL": "https://echo.labstack.com/docs/cookbook/streaming-response", "url": "https://echo.labstack.com/docs/cookbook/streaming-response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Streaming Response in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Client**:\n\n```yaml\n$ curl localhost:1323\n\n```\n\nThis snippet shows you how to client, which is an important aspect of streaming response.\n\n**Output**:\n\n```yaml\n{\"Altitude\":-97,\"Latitude\":37.819929,\"Longitude\":-122.478255}\n{\"Altitude\":1899,\"Latitude\":39.096849,\"Longitude\":-120.032351}\n{\"Altitude\":2619,\"Latitude\":37.865101,\"Longitude\":-119.538329}\n{\"Altitude\":42,\"Latitude\":33.812092,\"Longitude\":-117.918974}\n{\"Altitude\":15,\"Latitude\":37.77493,\"Longitude\":-122.419416}\n\n```\n\nThis snippet shows you how to output, which is an important aspect of streaming response.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/streaming-response", "title": "Streaming Response", "description": "This page covers how to send data as it is produced using streaming JSON responses with chunked transfer encoding.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:10:58", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/cookbook/streaming-response", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Streaming Response | Echo", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Streaming response recipe", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/streaming-response", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Streaming Response | Echo", "ogDescription": "Streaming response recipe", "docusaurus_version": "current", "ogTitle": "Streaming Response | Echo", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "Streaming response recipe", "scrapeId": "0c375331-8f32-43e3-b2ac-689dcea38df7", "sourceURL": "https://echo.labstack.com/docs/cookbook/streaming-response", "url": "https://echo.labstack.com/docs/cookbook/streaming-response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Timeout Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain Timeout Cookbook in echo.\n\n# Timeout Cookbook\n\nThis page provides guidance on implementing timeout functionality in Echo server applications.Here's a quick rundown of what this is about:\n\n## Server\n\nThis section covers the implementation of a server with timeout functionality.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/timeout", "title": "Timeout Cookbook", "description": "This page provides guidance on implementing timeout functionality in Echo server applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:14:29", "type": "overview", "page_metadata": {"og:url": "https://echo.labstack.com/docs/cookbook/timeout", "docsearch:version": "current", "ogDescription": "Timeout recipe", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:title": "Timeout | Echo", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "description": "Timeout recipe", "docsearch:language": "en", "ogTitle": "Timeout | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/timeout", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Timeout recipe", "title": "Timeout | Echo", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "47d8cfd6-7eda-4ada-8867-910f3ad5e3c2", "sourceURL": "https://echo.labstack.com/docs/cookbook/timeout", "url": "https://echo.labstack.com/docs/cookbook/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\nThis section covers the implementation of a server with timeout functionality..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/timeout", "title": "Timeout Cookbook", "description": "This page provides guidance on implementing timeout functionality in Echo server applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:14:29", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/cookbook/timeout", "docsearch:version": "current", "ogDescription": "Timeout recipe", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:title": "Timeout | Echo", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "description": "Timeout recipe", "docsearch:language": "en", "ogTitle": "Timeout | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/timeout", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Timeout recipe", "title": "Timeout | Echo", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "47d8cfd6-7eda-4ada-8867-910f3ad5e3c2", "sourceURL": "https://echo.labstack.com/docs/cookbook/timeout", "url": "https://echo.labstack.com/docs/cookbook/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Timeout Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code Example**:\n\n```yaml\ncookbook/timeout/server.go\n\n```go\n// Example server code with timeout\npackage main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"time\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Set a timeout for the server\n\te.Server.ReadTimeout = 5 * time.Second\n\te.Server.WriteTimeout = 5 * time.Second\n\n\t// Start the server\n\te.Start(\":8080\")\n}\n```\n```\n\nThis snippet shows you how to server code example, which is an important aspect of timeout cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/timeout", "title": "Timeout Cookbook", "description": "This page provides guidance on implementing timeout functionality in Echo server applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:14:29", "type": "code_examples", "page_metadata": {"og:url": "https://echo.labstack.com/docs/cookbook/timeout", "docsearch:version": "current", "ogDescription": "Timeout recipe", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:title": "Timeout | Echo", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "description": "Timeout recipe", "docsearch:language": "en", "ogTitle": "Timeout | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/timeout", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Timeout recipe", "title": "Timeout | Echo", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "47d8cfd6-7eda-4ada-8867-910f3ad5e3c2", "sourceURL": "https://echo.labstack.com/docs/cookbook/timeout", "url": "https://echo.labstack.com/docs/cookbook/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Timeout Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways set reasonable timeout values to prevent server overload.\n\nMonitor server performance to adjust timeout settings as needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/timeout", "title": "Timeout Cookbook", "description": "This page provides guidance on implementing timeout functionality in Echo server applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:14:29", "type": "best_practices", "page_metadata": {"og:url": "https://echo.labstack.com/docs/cookbook/timeout", "docsearch:version": "current", "ogDescription": "Timeout recipe", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:title": "Timeout | Echo", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "description": "Timeout recipe", "docsearch:language": "en", "ogTitle": "Timeout | Echo", "ogUrl": "https://echo.labstack.com/docs/cookbook/timeout", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Timeout recipe", "title": "Timeout | Echo", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "47d8cfd6-7eda-4ada-8867-910f3ad5e3c2", "sourceURL": "https://echo.labstack.com/docs/cookbook/timeout", "url": "https://echo.labstack.com/docs/cookbook/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Twitter Like REST API is in echo?\n\nAssistant: Sure, I'd be happy to explain Twitter Like REST API in echo.\n\n# Twitter Like REST API\n\nThis recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).Here's a quick rundown of what this is about:\n\n## Models\n\ncookbook/twitter/model/user.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/model/post.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\n## Handlers\n\ncookbook/twitter/handler/handler.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/handler/user.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/handler/post.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\n## Server\n\ncookbook/twitter/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\n## API\n\n### Signup\n\nUser signup\n\n- Retrieve user credentials from the body and validate against database.\n- For invalid email or password, send `400 - Bad Request` response.\n- For valid email and password, save user in database and send `201 - Created` response.\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\n#### Response\n\n`201 - Created`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"password\": \"shhh!\"\n}\n```\n\n### Login\n\nUser login\n\n- Retrieve user credentials from the body and validate against database.\n- For invalid credentials, send `401 - Unauthorized` response.\n- For valid credentials, send `200 - OK` response:\n  - Generate JWT for the user and send it as response.\n  - Each subsequent request must include JWT in the `Authorization` header.\n\n`POST` `/login`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\n#### Response\n\n`200 - OK`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n}\n```\n\n### Follow\n\nFollow a user\n\n- For invalid token, send `400 - Bad Request` response.\n- For valid token:\n  - If user is not found, send `404 - Not Found` response.\n  - Add a follower to the specified user in the path parameter and send `200 - OK` response.\n\n`POST` `/follow/:id`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/follow/58465b4ea6fe886d3215c6df \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\n#### Response\n\n`200 - OK`\n\n### Post\n\nPost a message to specified user\n\n- For invalid request payload, send `400 - Bad Request` response.\n- If user is not found, send `404 - Not Found` response.\n- Otherwise save post in the database and return it via `201 - Created` response.\n\n`POST` `/posts`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/posts \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"to\":\"58465b4ea6fe886d3215c6df\",\"message\":\"hello\"}'\n```\n\n#### Response\n\n`201 - Created`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"584661b9a6fe8871a3804cba\",\n  \"to\": \"58465b4ea6fe886d3215c6df\",\n  \"from\": \"58465b4ea6fe886d3215c6df\",\n  \"message\": \"hello\"\n}\n```\n\n### Feed\n\nList most recent messages based on optional `page` and `limit` query parameters\n\n`GET` `/feed?page=1&limit=5`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X GET \\\n  http://localhost:1323/feed \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\n#### Response\n\n`200 - OK`\n\n```codeBlockLines_e6Vv\n[\\\n  {\\\n    \"id\": \"584661b9a6fe8871a3804cba\",\\\n    \"to\": \"58465b4ea6fe886d3215c6df\",\\\n    \"from\": \"58465b4ea6fe886d3215c6df\",\\\n    \"message\": \"hello\"\\\n  }\\\n]\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "overview", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I models in echo?\n\nAssistant: To models in echo, here's what you do:\ncookbook/twitter/model/user.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/model/post.go\n\n```codeBlockLines_e6Vv\nloading...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "section_detail", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I handlers in echo?\n\nAssistant: To handlers in echo, here's what you do:\ncookbook/twitter/handler/handler.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/handler/user.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\ncookbook/twitter/handler/post.go\n\n```codeBlockLines_e6Vv\nloading...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "section_detail", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/twitter/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "section_detail", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I api in echo?\n\nAssistant: To api in echo, here's what you do:\n### Signup\n\nUser signup\n\n- Retrieve user credentials from the body and validate against database.\n- For invalid email or password, send `400 - Bad Request` response.\n- For valid email and password, save user in database and send `201 - Created` response.\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\n#### Response\n\n`201 - Created`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"password\": \"shhh!\"\n}\n```\n\n### Login\n\nUser login\n\n- Retrieve user credentials from the body and validate against database.\n- For invalid credentials, send `401 - Unauthorized` response.\n- For valid credentials, send `200 - OK` response:\n  - Generate JWT for the user and send it as response.\n  - Each subsequent request must include JWT in the `Authorization` header.\n\n`POST` `/login`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\n#### Response\n\n`200 - OK`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n}\n```\n\n### Follow\n\nFollow a user\n\n- For invalid token, send `400 - Bad Request` response.\n- For valid token:\n  - If user is not found, send `404 - Not Found` response.\n  - Add a follower to the specified user in the path parameter and send `200 - OK` response.\n\n`POST` `/follow/:id`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/follow/58465b4ea6fe886d3215c6df \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\n#### Response\n\n`200 - OK`\n\n### Post\n\nPost a message to specified user\n\n- For invalid request payload, send `400 - Bad Request` response.\n- If user is not found, send `404 - Not Found` response.\n- Otherwise save post in the database and return it via `201 - Created` response.\n\n`POST` `/posts`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X POST \\\n  http://localhost:1323/posts \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"to\":\"58465b4ea6fe886d3215c6df\",\"message\":\"hello\"}'\n```\n\n#### Response\n\n`201 - Created`\n\n```codeBlockLines_e6Vv\n{\n  \"id\": \"584661b9a6fe8871a3804cba\",\n  \"to\": \"58465b4ea6fe886d3215c6df\",\n  \"from\": \"58465b4ea6fe886d3215c6df\",\n  \"message\": \"hello\"\n}\n```\n\n### Feed\n\nList most recent messages based on optional `page` and `limit` query parameters\n\n`GET` `/feed?page=1&limit=5`\n\n#### Request\n\n```codeBlockLines_e6Vv\ncurl \\\n  -X GET \\\n  http://localhost:1323/feed \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\n#### Response\n\n`200 - OK`\n\n```codeBlockLines_e6Vv\n[\\\n  {\\\n    \"id\": \"584661b9a6fe8871a3804cba\",\\\n    \"to\": \"58465b4ea6fe886d3215c6df\",\\\n    \"from\": \"58465b4ea6fe886d3215c6df\",\\\n    \"message\": \"hello\"\\\n  }\\\n]\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "section_detail", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Twitter Like REST API in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Signup Request**:\n\n```yaml\ncurl \\\n  -X POST \\\n  http://localhost:1323/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\nThis snippet shows you how to signup request, which is an important aspect of twitter like rest api.\n\n**Signup Response**:\n\n```yaml\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"password\": \"shhh!\"\n}\n```\n\nThis snippet shows you how to signup response, which is an important aspect of twitter like rest api.\n\n**Login Request**:\n\n```yaml\ncurl \\\n  -X POST \\\n  http://localhost:1323/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"[email protected]\",\"password\":\"shhh!\"}'\n```\n\nThis snippet shows you how to login request, which is an important aspect of twitter like rest api.\n\n**Login Response**:\n\n```yaml\n{\n  \"id\": \"58465b4ea6fe886d3215c6df\",\n  \"email\": \"[email protected]\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n}\n```\n\nThis snippet shows you how to login response, which is an important aspect of twitter like rest api.\n\n**Follow Request**:\n\n```yaml\ncurl \\\n  -X POST \\\n  http://localhost:1323/follow/58465b4ea6fe886d3215c6df \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\nThis snippet shows you how to follow request, which is an important aspect of twitter like rest api.\n\n**Post Request**:\n\n```yaml\ncurl \\\n  -X POST \\\n  http://localhost:1323/posts \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"to\":\"58465b4ea6fe886d3215c6df\",\"message\":\"hello\"}'\n```\n\nThis snippet shows you how to post request, which is an important aspect of twitter like rest api.\n\n**Feed Request**:\n\n```yaml\ncurl \\\n  -X GET \\\n  http://localhost:1323/feed \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODEyNjUxMjgsImlkIjoiNTg0NjViNGVhNmZlODg2ZDMyMTVjNmRmIn0.1IsGGxko1qMCsKkJDQ1NfmrZ945XVC9uZpcvDnKwpL0\"\n```\n\nThis snippet shows you how to feed request, which is an important aspect of twitter like rest api.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "code_examples", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Twitter Like REST API in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nClient should store the token, for browsers, you may use local storage.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/twitter", "title": "Twitter Like REST API", "description": "This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:15:17", "type": "best_practices", "page_metadata": {"ogDescription": "Twitter like API recipe", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Twitter Like API | Echo", "language": "en", "description": "Twitter like API recipe", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/twitter", "ogTitle": "Twitter Like API | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "og:description": "Twitter like API recipe", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Twitter Like API | Echo", "og:url": "https://echo.labstack.com/docs/cookbook/twitter", "docusaurus_locale": "en", "scrapeId": "3fd9a297-a881-42ee-9b3a-7cd379b99980", "sourceURL": "https://echo.labstack.com/docs/cookbook/twitter", "url": "https://echo.labstack.com/docs/cookbook/twitter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what WebSocket Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain WebSocket Cookbook in echo.\n\n# WebSocket Cookbook\n\nThis page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.Here's a quick rundown of what this is about:\n\n## Using net WebSocket\n\n### Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/net/websocket\"\n)\n\nfunc hello(c echo.Context) error {\n\twebsocket.Handler(func(ws *websocket.Conn) {\n\t\tdefer ws.Close()\n\t\tfor {\n\t\t\t// Write\n\t\t\terr := websocket.Message.Send(ws, \"Hello, Client!\")\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\n\t\t\t// Read\n\t\t\tmsg := \"\"\n\t\t\terr = websocket.Message.Receive(ws, &msg)\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"%s\\n\", msg)\n\t\t}\n\t}).ServeHTTP(c.Response(), c.Request())\n\treturn nil\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n## Using gorilla WebSocket\n\n### Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\t// Write\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\n\t\t// Read\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n## Client\n\n```html\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>WebSocket</title>\n</head>\n\n<body>\n  <p id=\"output\"></p>\n\n  <script>\n    var loc = window.location;\n    var uri = 'ws:';\n\n    if (loc.protocol === 'https:') {\n      uri = 'wss:';\n    }\n    uri += '//' + loc.host;\n    uri += loc.pathname + 'ws';\n\n    ws = new WebSocket(uri)\n\n    ws.onopen = function() {\n      console.log('Connected')\n    }\n\n    ws.onmessage = function(evt) {\n      var out = document.getElementById('output');\n      out.innerHTML += evt.data + '<br>';\n    }\n\n    setInterval(function() {\n      ws.send('Hello, Server!');\n    }, 1000);\n  </script>\n</body>\n\n</html>\n```\n\n## Output\n\n```text\nHello, Client!\nHello, Client!\nHello, Client!\nHello, Client!\nHello, Client!\n\nHello, Server!\nHello, Server!\nHello, Server!\nHello, Server!\nHello, Server!\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "overview", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using net websocket in echo?\n\nAssistant: To using net websocket in echo, here's what you do:\n### Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/net/websocket\"\n)\n\nfunc hello(c echo.Context) error {\n\twebsocket.Handler(func(ws *websocket.Conn) {\n\t\tdefer ws.Close()\n\t\tfor {\n\t\t\t// Write\n\t\t\terr := websocket.Message.Send(ws, \"Hello, Client!\")\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\n\t\t\t// Read\n\t\t\tmsg := \"\"\n\t\t\terr = websocket.Message.Receive(ws, &msg)\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"%s\\n\", msg)\n\t\t}\n\t}).ServeHTTP(c.Response(), c.Request())\n\treturn nil\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using gorilla websocket in echo?\n\nAssistant: To using gorilla websocket in echo, here's what you do:\n### Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\t// Write\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\n\t\t// Read\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I client in echo?\n\nAssistant: To client in echo, here's what you do:\n```html\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>WebSocket</title>\n</head>\n\n<body>\n  <p id=\"output\"></p>\n\n  <script>\n    var loc = window.location;\n    var uri = 'ws:';\n\n    if (loc.protocol === 'https:') {\n      uri = 'wss:';\n    }\n    uri += '//' + loc.host;\n    uri += loc.pathname + 'ws';\n\n    ws = new WebSocket(uri)\n\n    ws.onopen = function() {\n      console.log('Connected')\n    }\n\n    ws.onmessage = function(evt) {\n      var out = document.getElementById('output');\n      out.innerHTML += evt.data + '<br>';\n    }\n\n    setInterval(function() {\n      ws.send('Hello, Server!');\n    }, 1000);\n  </script>\n</body>\n\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I output in echo?\n\nAssistant: To output in echo, here's what you do:\n```text\nHello, Client!\nHello, Client!\nHello, Client!\nHello, Client!\nHello, Client!\n\nHello, Server!\nHello, Server!\nHello, Server!\nHello, Server!\nHello, Server!\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for WebSocket Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using net WebSocket - Server**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/net/websocket\"\n)\n\nfunc hello(c echo.Context) error {\n\twebsocket.Handler(func(ws *websocket.Conn) {\n\t\tdefer ws.Close()\n\t\tfor {\n\t\t\t// Write\n\t\t\terr := websocket.Message.Send(ws, \"Hello, Client!\")\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\n\t\t\t// Read\n\t\t\tmsg := \"\"\n\t\t\terr = websocket.Message.Receive(ws, &msg)\n\t\t\tif err != nil {\n\t\t\t\tc.Logger().Error(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"%s\\n\", msg)\n\t\t}\n\t}).ServeHTTP(c.Response(), c.Request())\n\treturn nil\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to using net websocket - server, which is an important aspect of websocket cookbook.\n\n**Using gorilla WebSocket - Server**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\t// Write\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\n\t\t// Read\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tc.Logger().Error(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Static(\"/\", \"../public\")\n\te.GET(\"/ws\", hello)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to using gorilla websocket - server, which is an important aspect of websocket cookbook.\n\n**Client - WebSocket**:\n\n```yaml\n```html\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>WebSocket</title>\n</head>\n\n<body>\n  <p id=\"output\"></p>\n\n  <script>\n    var loc = window.location;\n    var uri = 'ws:';\n\n    if (loc.protocol === 'https:') {\n      uri = 'wss:';\n    }\n    uri += '//' + loc.host;\n    uri += loc.pathname + 'ws';\n\n    ws = new WebSocket(uri)\n\n    ws.onopen = function() {\n      console.log('Connected')\n    }\n\n    ws.onmessage = function(evt) {\n      var out = document.getElementById('output');\n      out.innerHTML += evt.data + '<br>';\n    }\n\n    setInterval(function() {\n      ws.send('Hello, Server!');\n    }, 1000);\n  </script>\n</body>\n\n</html>\n```\n```\n\nThis snippet shows you how to client - websocket, which is an important aspect of websocket cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "code_examples", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using WebSocket Cookbook in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle errors properly in WebSocket connections.\n\nUse middleware for logging and recovery in your Echo application.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/websocket", "title": "WebSocket Cookbook", "description": "This page provides examples of using WebSocket with the Echo framework in Go, including server and client implementations using both net and gorilla WebSocket libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:16:52", "type": "best_practices", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "og:title": "WebSocket | Echo", "og:description": "WebSocket recipe", "ogDescription": "WebSocket recipe", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "WebSocket | Echo", "docusaurus_tag": "docs-default-current", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/websocket", "docusaurus_locale": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "description": "WebSocket recipe", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "WebSocket | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/cookbook/websocket", "scrapeId": "6274b7c7-68ad-4b1f-a66d-841f58d9cd36", "sourceURL": "https://echo.labstack.com/docs/cookbook/websocket", "url": "https://echo.labstack.com/docs/cookbook/websocket", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Cookies is in echo?\n\nAssistant: Sure, I'd be happy to explain Cookies in echo.\n\n# Cookies\n\nCookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.Here's a quick rundown of what this is about:\n\n## Cookie Attributes\n\n| Attribute | Optional |\n| --- | --- |\n| `Name` | No |\n| `Value` | No |\n| `Path` | Yes |\n| `Domain` | Yes |\n| `Expires` | Yes |\n| `Secure` | Yes |\n| `HttpOnly` | Yes |\n\n## Create a Cookie\n\n```go\nfunc writeCookie(c echo.Context) error {\n\tcookie := new(http.Cookie)\n\tcookie.Name = \"username\"\n\tcookie.Value = \"jon\"\n\tcookie.Expires = time.Now().Add(24 * time.Hour)\n\tc.SetCookie(cookie)\n\treturn c.String(http.StatusOK, \"write a cookie\")\n}\n```\n\n- Cookie is created using `new(http.Cookie)`.\n- Attributes for the cookie are set assigning to the `http.Cookie` instance public attributes.\n- Finally `c.SetCookie(cookie)` adds a `Set-Cookie` header in HTTP response.\n\n## Read a Cookie\n\n```go\nfunc readCookie(c echo.Context) error {\n\tcookie, err := c.Cookie(\"username\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(cookie.Name)\n\tfmt.Println(cookie.Value)\n\treturn c.String(http.StatusOK, \"read a cookie\")\n}\n```\n\n- Cookie is read by name using `c.Cookie(\"username\")` from the HTTP request.\n- Cookie attributes are accessed using `Getter` function.\n\n## Read all the Cookies\n\n```go\nfunc readAllCookies(c echo.Context) error {\n\tfor _, cookie := range c.Cookies() {\n\t\tfmt.Println(cookie.Name)\n\t\tfmt.Println(cookie.Value)\n\t}\n\treturn c.String(http.StatusOK, \"read all the cookies\")\n}\n```\n\n- This function iterates through all cookies and prints their names and values.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "overview", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I cookie attributes in echo?\n\nAssistant: To cookie attributes in echo, here's what you do:\n| Attribute | Optional |\n| --- | --- |\n| `Name` | No |\n| `Value` | No |\n| `Path` | Yes |\n| `Domain` | Yes |\n| `Expires` | Yes |\n| `Secure` | Yes |\n| `HttpOnly` | Yes |.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "section_detail", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I create a cookie in echo?\n\nAssistant: To create a cookie in echo, here's what you do:\n```go\nfunc writeCookie(c echo.Context) error {\n\tcookie := new(http.Cookie)\n\tcookie.Name = \"username\"\n\tcookie.Value = \"jon\"\n\tcookie.Expires = time.Now().Add(24 * time.Hour)\n\tc.SetCookie(cookie)\n\treturn c.String(http.StatusOK, \"write a cookie\")\n}\n```\n\n- Cookie is created using `new(http.Cookie)`.\n- Attributes for the cookie are set assigning to the `http.Cookie` instance public attributes.\n- Finally `c.SetCookie(cookie)` adds a `Set-Cookie` header in HTTP response..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "section_detail", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I read a cookie in echo?\n\nAssistant: To read a cookie in echo, here's what you do:\n```go\nfunc readCookie(c echo.Context) error {\n\tcookie, err := c.Cookie(\"username\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(cookie.Name)\n\tfmt.Println(cookie.Value)\n\treturn c.String(http.StatusOK, \"read a cookie\")\n}\n```\n\n- Cookie is read by name using `c.Cookie(\"username\")` from the HTTP request.\n- Cookie attributes are accessed using `Getter` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "section_detail", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I read all the cookies in echo?\n\nAssistant: To read all the cookies in echo, here's what you do:\n```go\nfunc readAllCookies(c echo.Context) error {\n\tfor _, cookie := range c.Cookies() {\n\t\tfmt.Println(cookie.Name)\n\t\tfmt.Println(cookie.Value)\n\t}\n\treturn c.String(http.StatusOK, \"read all the cookies\")\n}\n```\n\n- This function iterates through all cookies and prints their names and values..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "section_detail", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Cookies in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a Cookie**:\n\n```yaml\n```go\nfunc writeCookie(c echo.Context) error {\n\tcookie := new(http.Cookie)\n\tcookie.Name = \"username\"\n\tcookie.Value = \"jon\"\n\tcookie.Expires = time.Now().Add(24 * time.Hour)\n\tc.SetCookie(cookie)\n\treturn c.String(http.StatusOK, \"write a cookie\")\n}\n```\n```\n\nThis snippet shows you how to create a cookie, which is an important aspect of cookies.\n\n**Read a Cookie**:\n\n```yaml\n```go\nfunc readCookie(c echo.Context) error {\n\tcookie, err := c.Cookie(\"username\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(cookie.Name)\n\tfmt.Println(cookie.Value)\n\treturn c.String(http.StatusOK, \"read a cookie\")\n}\n```\n```\n\nThis snippet shows you how to read a cookie, which is an important aspect of cookies.\n\n**Read all the Cookies**:\n\n```yaml\n```go\nfunc readAllCookies(c echo.Context) error {\n\tfor _, cookie := range c.Cookies() {\n\t\tfmt.Println(cookie.Name)\n\t\tfmt.Println(cookie.Value)\n\t}\n\treturn c.String(http.StatusOK, \"read all the cookies\")\n}\n```\n```\n\nThis snippet shows you how to read all the cookies, which is an important aspect of cookies.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "code_examples", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Cookies in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse secure attributes for cookies that contain sensitive information.\n\nSet appropriate expiration times for cookies to enhance security.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookies", "title": "Cookies", "description": "Cookie is a small piece of data sent from a website server and stored in the user's web browser while browsing. Every time the user loads the website, the browser sends the cookies back to the server to notify the server of user's latest activity. Cookies were designed to be a reliable mechanism for websites to remember stateful information (e.g. items added to the shopping cart in an online store) or to record the user's browsing activity (such as clicking particular buttons, logging in, or user previously visited pages of the website). Cookies can also store form content a user has previously entered, such as username, gender, age, address, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:23", "type": "best_practices", "page_metadata": {"title": "Cookies | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Handling cookie", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/cookies", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "Handling cookie", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/cookies", "ogTitle": "Cookies | Echo", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:title": "Cookies | Echo", "description": "Handling cookie", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "09ee119f-4ecf-4d99-bdd6-01d099fb3c48", "sourceURL": "https://echo.labstack.com/docs/cookies", "url": "https://echo.labstack.com/docs/cookies", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Customization is in echo?\n\nAssistant: Sure, I'd be happy to explain Customization in echo.\n\n# Customization\n\nThis page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.Here's a quick rundown of what this is about:\n\n## Debug\n\n`Echo#Debug` can be used to enable / disable debug mode. Debug mode sets the log level to `DEBUG`.\n\n## Logging\n\nThe default format for logging is JSON, which can be changed by modifying the header.\n\n## Log Header\n\n`Echo#Logger.SetHeader(string)` can be used to set the header for the logger. Default value:\n\n```codeBlockLines_e6Vv\n{\"time\":\"${time_rfc3339_nano}\",\"level\":\"${level}\",\"prefix\":\"${prefix}\",\"file\":\"${short_file}\",\"line\":\"${line}\"}\n```\n\n_Example_\n\n```codeBlockLines_e6Vv\nimport \"github.com/labstack/gommon/log\"\n\n/* ... */\n\nif l, ok := e.Logger.(*log.Logger); ok {\n  l.SetHeader(\"${time_rfc3339} ${level}\")\n}\n```\n\n```codeBlockLines_e6Vv\n2018-05-08T20:30:06-07:00 INFO info\n```\n\n## Available Tags\n\n- `time_rfc3339`\n- `time_rfc3339_nano`\n- `level`\n- `prefix`\n- `long_file`\n- `short_file`\n- `line`\n\n## Log Output\n\n`Echo#Logger.SetOutput(io.Writer)` can be used to set the output destination for the logger. Default value is `os.Stdout`\n\nTo completely disable logs use `Echo#Logger.SetOutput(io.Discard)` or `Echo#Logger.SetLevel(log.OFF)`.\n\n## Log Level\n\n`Echo#Logger.SetLevel(log.Lvl)` can be used to set the log level for the logger. Default value is `ERROR`. Possible values:\n\n- `DEBUG`\n- `INFO`\n- `WARN`\n- `ERROR`\n- `OFF`\n\n## Custom Logger\n\nLogging is implemented using `echo.Logger` interface which allows you to register a custom logger using `Echo#Logger`.\n\n## Startup Banner\n\n`Echo#HideBanner` can be used to hide the startup banner.\n\n## Listener Port\n\n`Echo#HidePort` can be used to hide the listener port message.\n\n## Custom Listener\n\n`Echo#*Listener` can be used to run a custom listener.\n\n_Example_\n\n```codeBlockLines_e6Vv\nl, err := net.Listen(\"tcp\", \":1323\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ne.Listener = l\ne.Logger.Fatal(e.Start(\"\"))\n```\n\n## Disable HTTP/2\n\n`Echo#DisableHTTP2` can be used to disable HTTP/2 protocol.\n\n## Read Timeout\n\n`Echo#*Server#ReadTimeout` can be used to set the maximum duration before timing out read of the request.\n\n## Write Timeout\n\n`Echo#*Server#WriteTimeout` can be used to set the maximum duration before timing out write of the response.\n\n## Validator\n\n`Echo#Validator` can be used to register a validator for performing data validation on request payload.\n\n## Custom Binder\n\n`Echo#Binder` can be used to register a custom binder for binding request payload.\n\n## Custom JSON Serializer\n\n`Echo#JSONSerializer` can be used to register a custom JSON serializer.\n\nHave a look at `DefaultJSONSerializer` on [json.go](https://github.com/labstack/echo/blob/master/json.go).\n\n## Renderer\n\n`Echo#Renderer` can be used to register a renderer for template rendering.\n\n## HTTP Error Handler\n\n`Echo#HTTPErrorHandler` can be used to register a custom http error handler.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "overview", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I debug in echo?\n\nAssistant: To debug in echo, here's what you do:\n`Echo#Debug` can be used to enable / disable debug mode. Debug mode sets the log level to `DEBUG`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I logging in echo?\n\nAssistant: To logging in echo, here's what you do:\nThe default format for logging is JSON, which can be changed by modifying the header..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I log header in echo?\n\nAssistant: To log header in echo, here's what you do:\n`Echo#Logger.SetHeader(string)` can be used to set the header for the logger. Default value:\n\n```codeBlockLines_e6Vv\n{\"time\":\"${time_rfc3339_nano}\",\"level\":\"${level}\",\"prefix\":\"${prefix}\",\"file\":\"${short_file}\",\"line\":\"${line}\"}\n```\n\n_Example_\n\n```codeBlockLines_e6Vv\nimport \"github.com/labstack/gommon/log\"\n\n/* ... */\n\nif l, ok := e.Logger.(*log.Logger); ok {\n  l.SetHeader(\"${time_rfc3339} ${level}\")\n}\n```\n\n```codeBlockLines_e6Vv\n2018-05-08T20:30:06-07:00 INFO info\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I available tags in echo?\n\nAssistant: To available tags in echo, here's what you do:\n- `time_rfc3339`\n- `time_rfc3339_nano`\n- `level`\n- `prefix`\n- `long_file`\n- `short_file`\n- `line`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I log output in echo?\n\nAssistant: To log output in echo, here's what you do:\n`Echo#Logger.SetOutput(io.Writer)` can be used to set the output destination for the logger. Default value is `os.Stdout`\n\nTo completely disable logs use `Echo#Logger.SetOutput(io.Discard)` or `Echo#Logger.SetLevel(log.OFF)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I log level in echo?\n\nAssistant: To log level in echo, here's what you do:\n`Echo#Logger.SetLevel(log.Lvl)` can be used to set the log level for the logger. Default value is `ERROR`. Possible values:\n\n- `DEBUG`\n- `INFO`\n- `WARN`\n- `ERROR`\n- `OFF`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom logger in echo?\n\nAssistant: To custom logger in echo, here's what you do:\nLogging is implemented using `echo.Logger` interface which allows you to register a custom logger using `Echo#Logger`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I startup banner in echo?\n\nAssistant: To startup banner in echo, here's what you do:\n`Echo#HideBanner` can be used to hide the startup banner..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I listener port in echo?\n\nAssistant: To listener port in echo, here's what you do:\n`Echo#HidePort` can be used to hide the listener port message..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom listener in echo?\n\nAssistant: To custom listener in echo, here's what you do:\n`Echo#*Listener` can be used to run a custom listener.\n\n_Example_\n\n```codeBlockLines_e6Vv\nl, err := net.Listen(\"tcp\", \":1323\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ne.Listener = l\ne.Logger.Fatal(e.Start(\"\"))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I disable http/2 in echo?\n\nAssistant: To disable http/2 in echo, here's what you do:\n`Echo#DisableHTTP2` can be used to disable HTTP/2 protocol..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I read timeout in echo?\n\nAssistant: To read timeout in echo, here's what you do:\n`Echo#*Server#ReadTimeout` can be used to set the maximum duration before timing out read of the request..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I write timeout in echo?\n\nAssistant: To write timeout in echo, here's what you do:\n`Echo#*Server#WriteTimeout` can be used to set the maximum duration before timing out write of the response..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I validator in echo?\n\nAssistant: To validator in echo, here's what you do:\n`Echo#Validator` can be used to register a validator for performing data validation on request payload..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom binder in echo?\n\nAssistant: To custom binder in echo, here's what you do:\n`Echo#Binder` can be used to register a custom binder for binding request payload..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom json serializer in echo?\n\nAssistant: To custom json serializer in echo, here's what you do:\n`Echo#JSONSerializer` can be used to register a custom JSON serializer.\n\nHave a look at `DefaultJSONSerializer` on [json.go](https://github.com/labstack/echo/blob/master/json.go)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I renderer in echo?\n\nAssistant: To renderer in echo, here's what you do:\n`Echo#Renderer` can be used to register a renderer for template rendering..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http error handler in echo?\n\nAssistant: To http error handler in echo, here's what you do:\n`Echo#HTTPErrorHandler` can be used to register a custom http error handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Customization in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Log Header Example**:\n\n```yaml\nimport \"github.com/labstack/gommon/log\"\n\n/* ... */\n\nif l, ok := e.Logger.(*log.Logger); ok {\n  l.SetHeader(\"${time_rfc3339} ${level}\")\n}\n```\n\nThis snippet shows you how to log header example, which is an important aspect of customization.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "code_examples", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Customization in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo completely disable logs use `Echo#Logger.SetOutput(io.Discard)` or `Echo#Logger.SetLevel(log.OFF)`.\n\nDefault log level is `ERROR`, but can be set to `DEBUG`, `INFO`, `WARN`, or `OFF`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/customization", "title": "Customization", "description": "This page covers various customization options available in Echo framework, including logging, startup banner, listener settings, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:17:43", "type": "best_practices", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/customization", "ogDescription": "Customization", "twitter:card": "summary_large_image", "description": "Customization", "og:title": "Customization | Echo", "og:description": "Customization", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "title": "Customization | Echo", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogTitle": "Customization | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/customization", "scrapeId": "4d901fb2-4cbf-49ae-8e33-054d78f7c1ca", "sourceURL": "https://echo.labstack.com/docs/customization", "url": "https://echo.labstack.com/docs/customization", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Error Handling in Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Error Handling in Echo in echo.\n\n# Error Handling in Echo\n\nEcho advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.Here's a quick rundown of what this is about:\n\n## Introduction\n\nEcho advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.\n\n## Returning Errors\n\nYou can return a standard `error` or `echo.*HTTPError`. For example, when basic auth middleware finds invalid credentials it returns 401 - Unauthorized error, aborting the current HTTP request.\n\n## Default HTTP Error Handler\n\nEcho provides a default HTTP error handler which sends error in a JSON format. For a standard `error`, response is sent as `500 - Internal Server Error`; however, if you are running in a debug mode, the original error message is sent. If error is `*HTTPError`, response is sent with the provided status code and message. If logging is on, the error message is also logged.\n\n## Custom HTTP Error Handler\n\nCustom HTTP error handler can be set via `e.HTTPErrorHandler`. For most cases default error HTTP handler should be sufficient; however, a custom HTTP error handler can come handy if you want to capture different type of errors and take action accordingly e.g. send notification email or log error to a centralized system. You can also send customized response to the client e.g. error page or just a JSON response.\n\n## Error Pages\n\nThe following custom HTTP error handler shows how to display error pages for different type of errors and logs the error. The name of the error page should be like `<CODE>.html` e.g. `500.html`. You can look into this project for pre-built error pages.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "overview", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I introduction in echo?\n\nAssistant: To introduction in echo, here's what you do:\nEcho advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I returning errors in echo?\n\nAssistant: To returning errors in echo, here's what you do:\nYou can return a standard `error` or `echo.*HTTPError`. For example, when basic auth middleware finds invalid credentials it returns 401 - Unauthorized error, aborting the current HTTP request..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default http error handler in echo?\n\nAssistant: To default http error handler in echo, here's what you do:\nEcho provides a default HTTP error handler which sends error in a JSON format. For a standard `error`, response is sent as `500 - Internal Server Error`; however, if you are running in a debug mode, the original error message is sent. If error is `*HTTPError`, response is sent with the provided status code and message. If logging is on, the error message is also logged..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom http error handler in echo?\n\nAssistant: To custom http error handler in echo, here's what you do:\nCustom HTTP error handler can be set via `e.HTTPErrorHandler`. For most cases default error HTTP handler should be sufficient; however, a custom HTTP error handler can come handy if you want to capture different type of errors and take action accordingly e.g. send notification email or log error to a centralized system. You can also send customized response to the client e.g. error page or just a JSON response..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I error pages in echo?\n\nAssistant: To error pages in echo, here's what you do:\nThe following custom HTTP error handler shows how to display error pages for different type of errors and logs the error. The name of the error page should be like `<CODE>.html` e.g. `500.html`. You can look into this project for pre-built error pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Error Handling in Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Auth Middleware Example**:\n\n```yaml\ne.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n  return func(c echo.Context) error {\n    // Extract the credentials from HTTP request header and perform a security\n    // check\n\n    // For invalid credentials\n    return echo.NewHTTPError(http.StatusUnauthorized, \"Please provide valid credentials\")\n\n    // For valid credentials call next\n    // return next(c)\n  }\n})\n```\n\nThis snippet shows you how to basic auth middleware example, which is an important aspect of error handling in echo.\n\n**Default HTTP Error Response Example**:\n\n```yaml\n{\n  \"message\": \"error connecting to redis\"\n}\n```\n\nThis snippet shows you how to default http error response example, which is an important aspect of error handling in echo.\n\n**Custom HTTP Error Handler Example**:\n\n```yaml\nfunc customHTTPErrorHandler(err error, c echo.Context) {\n  if c.Response().Committed {\n    return\n  }\n\n  code := http.StatusInternalServerError\n  if he, ok := err.(*echo.HTTPError); ok {\n    code = he.Code\n  }\n  c.Logger().Error(err)\n  errorPage := fmt.Sprintf(\"%d.html\", code)\n  if err := c.File(errorPage); err != nil {\n    c.Logger().Error(err)\n  }\n}\ne.HTTPErrorHandler = customHTTPErrorHandler\n```\n\nThis snippet shows you how to custom http error handler example, which is an important aspect of error handling in echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "code_examples", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Error Handling in Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nInstead of writing logs to the logger, you can also write them to an external service like Elasticsearch or Splunk.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/error-handling", "title": "Error Handling in Echo", "description": "Echo advocates for centralized HTTP error handling by returning error from middleware and handlers. Centralized error handler allows us to log errors to external services from a unified location and send a customized HTTP response to the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:57", "type": "best_practices", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/error-handling", "twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Error handling", "ogTitle": "Error Handling | Echo", "title": "Error Handling | Echo", "ogDescription": "Error handling", "og:title": "Error Handling | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "og:locale": "en", "description": "Error handling", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/error-handling", "docusaurus_version": "current", "scrapeId": "9832234f-8d91-4661-91ea-2acc73106b89", "sourceURL": "https://echo.labstack.com/docs/error-handling", "url": "https://echo.labstack.com/docs/error-handling", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what IP Address Handling in Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain IP Address Handling in Echo in echo.\n\n# IP Address Handling in Echo\n\nThis page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.Here's a quick rundown of what this is about:\n\n## Introduction\n\nIP address plays a fundamental role in HTTP; it's used for access control, auditing, geo-based access analysis, and more. Echo provides a handy method [`Context#RealIP()`](https://godoc.org/github.com/labstack/echo#Context) for that. However, it is not trivial to retrieve the _real_ IP address from requests especially when you put L7 proxies before the application. In such situations, _real_ IP needs to be relayed on the HTTP layer from proxies to your app, however, you must not trust HTTP headers unconditionally. Otherwise you might give someone a chance of deceiving you. **A security risk!** To retrieve IP address reliably/securely, you must let your application be aware of the entire architecture of your infrastructrure. In Echo, this can be done by configuring `Echo#IPExtractor` appropriately. This guides show you why and how.\n\n## Caution\n\nNote: if you don't set `Echo#IPExtractor` explicitly, Echo fallback to legacy behavior, which is not a good choice.\n\n## Questions to Consider\n\nLet's start from two questions to know the right direction:\n1. Do you put any HTTP (L7) proxy in front of the application?\n   - It includes both cloud solutions (such as AWS ALB or GCP HTTP LB) and OSS ones (such as Nginx, Envoy or Istio ingress gateway).\n2. If yes, what HTTP header do your proxies use to pass client IP to the application?\n\n## Case 1. With no proxy\n\nIf you put no proxy (e.g.: directory facing to the internet), all you need to (and have to) see is IP address from network layer. Any HTTP header is untrustable because the clients have full control what headers to be set. In this case, use `echo.ExtractIPDirect()`.\n\n## Case 2. With proxies using X-Forwarded-For header\n\n[`X-Forwarded-For` (XFF)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) is the popular header to relay clients' IP addresses. At each hop on the proxies, they append the request IP address at the end of the header. Following example diagram illustrates this behavior.\n\nIn this case, use **first _untrustable_ IP reading from right**. Never use first one reading from left, as it is configurable by client. Here \"trustable\" means \"you are sure the IP address belongs to your infrastructure\". In above example, if `b` and `c` are trustable, the IP address of the client is `a` for both cases, never be `x`.\n\n## Case 3. With proxies using X-Real-IP header\n\n`X-Real-IP` is another HTTP header to relay clients' IP addresses, but it carries only one address unlike XFF. If your proxies set this header, use `ExtractIPFromRealIPHeader(...TrustOption)`.\n\n## About default behavior\n\nIn default behavior, Echo sees all of first XFF header, X-Real-IP header and IP from network layer. As you might already notice, after reading this article, this is not good. Sole reason this is default is just backward compatibility.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I introduction in echo?\n\nAssistant: To introduction in echo, here's what you do:\nIP address plays a fundamental role in HTTP; it's used for access control, auditing, geo-based access analysis, and more. Echo provides a handy method [`Context#RealIP()`](https://godoc.org/github.com/labstack/echo#Context) for that. However, it is not trivial to retrieve the _real_ IP address from requests especially when you put L7 proxies before the application. In such situations, _real_ IP needs to be relayed on the HTTP layer from proxies to your app, however, you must not trust HTTP headers unconditionally. Otherwise you might give someone a chance of deceiving you. **A security risk!** To retrieve IP address reliably/securely, you must let your application be aware of the entire architecture of your infrastructrure. In Echo, this can be done by configuring `Echo#IPExtractor` appropriately. This guides show you why and how..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I caution in echo?\n\nAssistant: To caution in echo, here's what you do:\nNote: if you don't set `Echo#IPExtractor` explicitly, Echo fallback to legacy behavior, which is not a good choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I questions to consider in echo?\n\nAssistant: To questions to consider in echo, here's what you do:\nLet's start from two questions to know the right direction:\n1. Do you put any HTTP (L7) proxy in front of the application?\n   - It includes both cloud solutions (such as AWS ALB or GCP HTTP LB) and OSS ones (such as Nginx, Envoy or Istio ingress gateway).\n2. If yes, what HTTP header do your proxies use to pass client IP to the application?.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I case 1. with no proxy in echo?\n\nAssistant: To case 1. with no proxy in echo, here's what you do:\nIf you put no proxy (e.g.: directory facing to the internet), all you need to (and have to) see is IP address from network layer. Any HTTP header is untrustable because the clients have full control what headers to be set. In this case, use `echo.ExtractIPDirect()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I case 2. with proxies using x-forwarded-for header in echo?\n\nAssistant: To case 2. with proxies using x-forwarded-for header in echo, here's what you do:\n[`X-Forwarded-For` (XFF)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) is the popular header to relay clients' IP addresses. At each hop on the proxies, they append the request IP address at the end of the header. Following example diagram illustrates this behavior.\n\nIn this case, use **first _untrustable_ IP reading from right**. Never use first one reading from left, as it is configurable by client. Here \"trustable\" means \"you are sure the IP address belongs to your infrastructure\". In above example, if `b` and `c` are trustable, the IP address of the client is `a` for both cases, never be `x`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I case 3. with proxies using x-real-ip header in echo?\n\nAssistant: To case 3. with proxies using x-real-ip header in echo, here's what you do:\n`X-Real-IP` is another HTTP header to relay clients' IP addresses, but it carries only one address unlike XFF. If your proxies set this header, use `ExtractIPFromRealIPHeader(...TrustOption)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I about default behavior in echo?\n\nAssistant: To about default behavior in echo, here's what you do:\nIn default behavior, Echo sees all of first XFF header, X-Real-IP header and IP from network layer. As you might already notice, after reading this article, this is not good. Sole reason this is default is just backward compatibility..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for IP Address Handling in Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Extract IP Directly**:\n\n```yaml\ne.IPExtractor = echo.ExtractIPDirect()\n```\n\nThis snippet shows you how to extract ip directly, which is an important aspect of ip address handling in echo.\n\n**Extract IP from X-Forwarded-For Header**:\n\n```yaml\ne.IPExtractor = echo.ExtractIPFromXFFHeader()\n```\n\nThis snippet shows you how to extract ip from x-forwarded-for header, which is an important aspect of ip address handling in echo.\n\n**Extract IP from X-Forwarded-For Header with Trust Options**:\n\n```yaml\ne.IPExtractor = echo.ExtractIPFromXFFHeader(\n     echo.TrustLoopback(false), // e.g. ipv4 start with 127.\n     echo.TrustLinkLocal(false), // e.g. ipv4 start with 169.254\n     echo.TrustPrivateNet(false), // e.g. ipv4 start with 10. or 192.168\n     echo.TrustIPRange(lbIPRange),\n) \n```\n\nThis snippet shows you how to extract ip from x-forwarded-for header with trust options, which is an important aspect of ip address handling in echo.\n\n**Extract IP from X-Real-IP Header**:\n\n```yaml\ne.IPExtractor = echo.ExtractIPFromRealIPHeader()\n```\n\nThis snippet shows you how to extract ip from x-real-ip header, which is an important aspect of ip address handling in echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "code_examples", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using IP Address Handling in Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNever forget to configure the outermost proxy (i.e.; at the edge of your infrastructure) not to pass through incoming headers. Otherwise there is a chance of fraud, as it is what clients can control.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/ip-address", "title": "IP Address Handling in Echo", "description": "This page covers how to handle IP addresses in Echo, including methods for extracting real IPs from requests, especially when using proxies.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:18:33", "type": "best_practices", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/ip-address", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "og:description": "IP address", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "ogDescription": "IP address", "title": "IP Address | Echo", "ogTitle": "IP Address | Echo", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "description": "IP address", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/ip-address", "og:title": "IP Address | Echo", "scrapeId": "aaec268f-0dc0-48e9-b2f8-be0e85853b53", "sourceURL": "https://echo.labstack.com/docs/ip-address", "url": "https://echo.labstack.com/docs/ip-address", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Basic Auth Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Basic Auth Middleware in echo.\n\n# Basic Auth Middleware\n\nBasic auth middleware provides an HTTP basic authentication.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t// Be careful to use constant time comparison to prevent timing attacks\n\tif subtle.ConstantTimeCompare([]byte(username), []byte(\"joe\")) == 1 &&\n\t\tsubtle.ConstantTimeCompare([]byte(password), []byte(\"secret\")) == 1 {\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}))\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.BasicAuthWithConfig(middleware.BasicAuthConfig{}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nBasicAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Validator is a function to validate BasicAuth credentials.\n  // Required.\n  Validator BasicAuthValidator\n\n  // Realm is a string to define realm attribute of BasicAuth.\n  // Default value \"Restricted\".\n  Realm string\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultBasicAuthConfig = BasicAuthConfig{\n\tSkipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "overview", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t// Be careful to use constant time comparison to prevent timing attacks\n\tif subtle.ConstantTimeCompare([]byte(username), []byte(\"joe\")) == 1 &&\n\t\tsubtle.ConstantTimeCompare([]byte(password), []byte(\"secret\")) == 1 {\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.BasicAuthWithConfig(middleware.BasicAuthConfig{}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nBasicAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Validator is a function to validate BasicAuth credentials.\n  // Required.\n  Validator BasicAuthValidator\n\n  // Realm is a string to define realm attribute of BasicAuth.\n  // Default value \"Restricted\".\n  Realm string\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultBasicAuthConfig = BasicAuthConfig{\n\tSkipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Basic Auth Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Auth Usage Example**:\n\n```yaml\ne.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t// Be careful to use constant time comparison to prevent timing attacks\n\tif subtle.ConstantTimeCompare([]byte(username), []byte(\"joe\")) == 1 &&\n\t\tsubtle.ConstantTimeCompare([]byte(password), []byte(\"secret\")) == 1 {\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}))\n```\n\nThis snippet shows you how to basic auth usage example, which is an important aspect of basic auth middleware.\n\n**Custom Configuration Usage Example**:\n\n```yaml\ne.Use(middleware.BasicAuthWithConfig(middleware.BasicAuthConfig{}))\n```\n\nThis snippet shows you how to custom configuration usage example, which is an important aspect of basic auth middleware.\n\n**BasicAuthConfig Structure**:\n\n```yaml\nBasicAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Validator is a function to validate BasicAuth credentials.\n  // Required.\n  Validator BasicAuthValidator\n\n  // Realm is a string to define realm attribute of BasicAuth.\n  // Default value \"Restricted\".\n  Realm string\n}\n```\n\nThis snippet shows you how to basicauthconfig structure, which is an important aspect of basic auth middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "code_examples", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Basic Auth Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe careful to use constant time comparison to prevent timing attacks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/basic-auth", "title": "Basic Auth Middleware", "description": "Basic auth middleware provides an HTTP basic authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:18:54", "type": "best_practices", "page_metadata": {"docsearch:version": "current", "docusaurus_version": "current", "title": "Basic Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Basic Auth | Echo", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Basic auth middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Basic auth middleware", "og:description": "Basic auth middleware", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/basic-auth", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Basic Auth | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/basic-auth", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "5f8c78ef-3322-4b35-85b5-dc6d8fa6e75d", "sourceURL": "https://echo.labstack.com/docs/middleware/basic-auth", "url": "https://echo.labstack.com/docs/middleware/basic-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Body Dump Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Body Dump Middleware in echo.\n\n# Body Dump Middleware\n\nBody dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyDump(func(c echo.Context, reqBody, resBody []byte) {\n}))\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyDumpWithConfig(middleware.BodyDumpConfig{}))\n```\n\n## Configuration\n\n```go\nBodyDumpConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Handler receives request and response payload.\n  // Required.\n  Handler BodyDumpHandler\n}\n```\n\n## Default Configuration*\n\n```go\nDefaultBodyDumpConfig = BodyDumpConfig{\n  Skipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "overview", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Use(middleware.BodyDump(func(c echo.Context, reqBody, resBody []byte) {\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyDumpWithConfig(middleware.BodyDumpConfig{}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nBodyDumpConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Handler receives request and response payload.\n  // Required.\n  Handler BodyDumpHandler\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration* in echo?\n\nAssistant: To default configuration* in echo, here's what you do:\n```go\nDefaultBodyDumpConfig = BodyDumpConfig{\n  Skipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Body Dump Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.BodyDump(func(c echo.Context, reqBody, resBody []byte) {\n}))\n```\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of body dump middleware.\n\n**Custom Configuration Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.BodyDumpWithConfig(middleware.BodyDumpConfig{}))\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of body dump middleware.\n\n**Configuration Struct Example**:\n\n```yaml\n```go\nBodyDumpConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Handler receives request and response payload.\n  // Required.\n  Handler BodyDumpHandler\n}\n```\n```\n\nThis snippet shows you how to configuration struct example, which is an important aspect of body dump middleware.\n\n**Default Configuration Example**:\n\n```yaml\n```go\nDefaultBodyDumpConfig = BodyDumpConfig{\n  Skipper: DefaultSkipper,\n}\n```\n```\n\nThis snippet shows you how to default configuration example, which is an important aspect of body dump middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "code_examples", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Body Dump Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid using body dump middleware for large request/response payloads such as file uploads/downloads.\n\nIf necessary, add an exception for your endpoints in the skipper function.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-dump", "title": "Body Dump Middleware", "description": "Body dump middleware captures the request and response payload and calls the registered handler. Generally used for debugging/logging purpose. Avoid using it if your request/response payload is huge e.g. file upload/download, but if you still need to, add an exception for your endpoints in the skipper function.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:06", "type": "best_practices", "page_metadata": {"ogDescription": "Body dump middleware", "twitter:card": "summary_large_image", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Body dump middleware", "ogLocale": "en", "og:locale": "en", "description": "Body dump middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/body-dump", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Body Dump | Echo", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/body-dump", "docsearch:version": "current", "docusaurus_version": "current", "title": "Body Dump | Echo", "og:title": "Body Dump | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "240778cb-5c5d-425f-aff3-e485b293db23", "sourceURL": "https://echo.labstack.com/docs/middleware/body-dump", "url": "https://echo.labstack.com/docs/middleware/body-dump", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Body Limit Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Body Limit Middleware in echo.\n\n# Body Limit Middleware\n\nBody limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyLimit(\"2M\"))\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyLimitWithConfig(middleware.BodyLimitConfig{}))\n```\n\n## Configuration\n\n```go\nBodyLimitConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Maximum allowed size for a request body, it can be specified\n  // as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n  Limit string `json:\"limit\"`\n}\n```\n\n## Default Configuration\n\n```go\nDefaultBodyLimitConfig = BodyLimitConfig{\n  Skipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "overview", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Use(middleware.BodyLimit(\"2M\"))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.BodyLimitWithConfig(middleware.BodyLimitConfig{}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nBodyLimitConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Maximum allowed size for a request body, it can be specified\n  // as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n  Limit string `json:\"limit\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```go\nDefaultBodyLimitConfig = BodyLimitConfig{\n  Skipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "section_detail", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Body Limit Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.BodyLimit(\"2M\"))\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of body limit middleware.\n\n**Custom Configuration Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.BodyLimitWithConfig(middleware.BodyLimitConfig{}))\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of body limit middleware.\n\n**Configuration Struct Example**:\n\n```yaml\n```go\nBodyLimitConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Maximum allowed size for a request body, it can be specified\n  // as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n  Limit string `json:\"limit\"`\n}\n```\n```\n\nThis snippet shows you how to configuration struct example, which is an important aspect of body limit middleware.\n\n**Default Configuration Example**:\n\n```yaml\n```go\nDefaultBodyLimitConfig = BodyLimitConfig{\n  Skipper: DefaultSkipper,\n}\n```\n```\n\nThis snippet shows you how to default configuration example, which is an important aspect of body limit middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "code_examples", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Body Limit Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nLimit can be specified as `4x` or `4xB`, where x is one of the multiple from K, M, G, T or P.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/body-limit", "title": "Body Limit Middleware", "description": "Body limit middleware sets the maximum allowed size for a request body, if the size exceeds the configured limit, it sends '413 - Request Entity Too Large' response. The body limit is determined based on both `Content-Length` request header and actual content read, which makes it super secure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:24", "type": "best_practices", "page_metadata": {"ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/body-limit", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "ogDescription": "Body limit middleware", "viewport": "width=device-width, initial-scale=1.0", "title": "Body Limit | Echo", "docusaurus_locale": "en", "ogTitle": "Body Limit | Echo", "docusaurus_version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Body Limit | Echo", "og:locale": "en", "og:description": "Body limit middleware", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/middleware/body-limit", "description": "Body limit middleware", "scrapeId": "b05b6783-8d79-47b2-a9ff-ba65bba09fa6", "sourceURL": "https://echo.labstack.com/docs/middleware/body-limit", "url": "https://echo.labstack.com/docs/middleware/body-limit", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Casbin Authentication Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Casbin Authentication Middleware in echo.\n\n# Casbin Authentication Middleware\n\nThis page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.Here's a quick rundown of what this is about:\n\n## Introduction\n\nCasbin is a powerful and efficient open-source access control library for Go. It provides support for enforcing authorization based on various models. So far, the access control models supported by Casbin are:\n\n- ACL (Access Control List)\n- ACL with superuser\n- ACL without users: especially useful for systems that don't have authentication or user log-ins.\n- ACL without resources: some scenarios may target for a type of resources instead of an individual resource by using permissions like write-article, read-log. It doesn't control the access to a specific article or log.\n- RBAC (Role-Based Access Control)\n- RBAC with resource roles: both users and resources can have roles (or groups) at the same time.\n- RBAC with domains/tenants: users can have different role sets for different domains/tenants.\n- ABAC (Attribute-Based Access Control)\n- RESTful\n- Deny-override: both allow and deny authorizations are supported, deny overrides the allow.\n\nCurrently, only HTTP basic authentication is supported.\n\n## Dependencies\n\nTo use Casbin with Echo, you need to import the following packages:\n\n```go\nimport (\n  \"github.com/casbin/casbin\"\n  casbin_mw \"github.com/labstack/echo-contrib/casbin\"\n)\n```\n\n## Usage\n\nTo set up Casbin middleware in your Echo application, use the following code:\n\n```go\ne := echo.New()\nenforcer, err := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"casbin_auth_policy.csv\")\ne.Use(casbin_mw.Middleware(enforcer))\n``` \n\nFor syntax, see: [Syntax for Models](https://casbin.org/docs/syntax-for-models).\n\n## Custom Configuration\n\nYou can customize the configuration of the Casbin middleware as follows:\n\n```go\ne := echo.New()\nce := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"\")\nce.AddRoleForUser(\"alice\", \"admin\")\nce.AddPolicy(...)\ne.Use(casbin_mw.MiddlewareWithConfig(casbin_mw.Config{\n  Enforcer: ce,\n}))\n```\n\n## Configuration\n\nThe configuration structure for the CasbinAuth middleware is defined as follows:\n\n```go\n// Config defines the config for CasbinAuth middleware.\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Enforcer CasbinAuth main rule.\n  // Required.\n  Enforcer *casbin.Enforcer\n}\n```\n\n## Default Configuration\n\nThe default configuration for the CasbinAuth middleware is as follows:\n\n```go\n// DefaultConfig is the default CasbinAuth middleware config.\nDefaultConfig = Config{\n  Skipper: middleware.DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "overview", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I introduction in echo?\n\nAssistant: To introduction in echo, here's what you do:\nCasbin is a powerful and efficient open-source access control library for Go. It provides support for enforcing authorization based on various models. So far, the access control models supported by Casbin are:\n\n- ACL (Access Control List)\n- ACL with superuser\n- ACL without users: especially useful for systems that don't have authentication or user log-ins.\n- ACL without resources: some scenarios may target for a type of resources instead of an individual resource by using permissions like write-article, read-log. It doesn't control the access to a specific article or log.\n- RBAC (Role-Based Access Control)\n- RBAC with resource roles: both users and resources can have roles (or groups) at the same time.\n- RBAC with domains/tenants: users can have different role sets for different domains/tenants.\n- ABAC (Attribute-Based Access Control)\n- RESTful\n- Deny-override: both allow and deny authorizations are supported, deny overrides the allow.\n\nCurrently, only HTTP basic authentication is supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I dependencies in echo?\n\nAssistant: To dependencies in echo, here's what you do:\nTo use Casbin with Echo, you need to import the following packages:\n\n```go\nimport (\n  \"github.com/casbin/casbin\"\n  casbin_mw \"github.com/labstack/echo-contrib/casbin\"\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\nTo set up Casbin middleware in your Echo application, use the following code:\n\n```go\ne := echo.New()\nenforcer, err := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"casbin_auth_policy.csv\")\ne.Use(casbin_mw.Middleware(enforcer))\n``` \n\nFor syntax, see: [Syntax for Models](https://casbin.org/docs/syntax-for-models)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\nYou can customize the configuration of the Casbin middleware as follows:\n\n```go\ne := echo.New()\nce := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"\")\nce.AddRoleForUser(\"alice\", \"admin\")\nce.AddPolicy(...)\ne.Use(casbin_mw.MiddlewareWithConfig(casbin_mw.Config{\n  Enforcer: ce,\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\nThe configuration structure for the CasbinAuth middleware is defined as follows:\n\n```go\n// Config defines the config for CasbinAuth middleware.\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Enforcer CasbinAuth main rule.\n  // Required.\n  Enforcer *casbin.Enforcer\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\nThe default configuration for the CasbinAuth middleware is as follows:\n\n```go\n// DefaultConfig is the default CasbinAuth middleware config.\nDefaultConfig = Config{\n  Skipper: middleware.DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "section_detail", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Casbin Authentication Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dependencies**:\n\n```yaml\nimport (\n  \"github.com/casbin/casbin\"\n  casbin_mw \"github.com/labstack/echo-contrib/casbin\"\n)\n```\n\nThis snippet shows you how to dependencies, which is an important aspect of casbin authentication middleware.\n\n**Usage**:\n\n```yaml\ne := echo.New()\nenforcer, err := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"casbin_auth_policy.csv\")\ne.Use(casbin_mw.Middleware(enforcer))\n```\n\nThis snippet shows you how to usage, which is an important aspect of casbin authentication middleware.\n\n**Custom Configuration**:\n\n```yaml\ne := echo.New()\nce := casbin.NewEnforcer(\"casbin_auth_model.conf\", \"\")\nce.AddRoleForUser(\"alice\", \"admin\")\nce.AddPolicy(...)\ne.Use(casbin_mw.MiddlewareWithConfig(casbin_mw.Config{\n  Enforcer: ce,\n}))\n```\n\nThis snippet shows you how to custom configuration, which is an important aspect of casbin authentication middleware.\n\n**Configuration**:\n\n```yaml\n// Config defines the config for CasbinAuth middleware.\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Enforcer CasbinAuth main rule.\n  // Required.\n  Enforcer *casbin.Enforcer\n}\n```\n\nThis snippet shows you how to configuration, which is an important aspect of casbin authentication middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "code_examples", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Casbin Authentication Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to define the access control model that fits your application needs.\n\nUse roles effectively to manage user permissions in a scalable way.\n\nAlways validate the configuration files for Casbin before deploying to production.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/casbin-auth", "title": "Casbin Authentication Middleware", "description": "This page covers the Casbin authentication middleware for the Echo framework, detailing its usage, configuration, and dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:20:40", "type": "best_practices", "page_metadata": {"language": "en", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "og:title": "Casbin Auth | Echo", "og:description": "Casbin auth middleware", "ogTitle": "Casbin Auth | Echo", "og:url": "https://echo.labstack.com/docs/middleware/casbin-auth", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "description": "Casbin auth middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/casbin-auth", "ogLocale": "en", "twitter:card": "summary_large_image", "og:locale": "en", "title": "Casbin Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Casbin auth middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "560689d4-afc1-4f41-8f5b-f283c7e48860", "sourceURL": "https://echo.labstack.com/docs/middleware/casbin-auth", "url": "https://echo.labstack.com/docs/middleware/casbin-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what CORS Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain CORS Middleware in echo.\n\n# CORS Middleware\n\nCORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.CORS())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n  AllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n  AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},\n}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nCORSConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // AllowOrigin defines a list of origins that may access the resource.\n  // Optional. Default value []string{\"*\"}.\n  AllowOrigins []string `yaml:\"allow_origins\"`\n\n  // AllowOriginFunc is a custom function to validate the origin. It takes the\n  // origin as an argument and returns true if allowed or false otherwise. If\n  // an error is returned, it is returned by the handler. If this option is\n  // set, AllowOrigins is ignored.\n  // Optional.\n  AllowOriginFunc func(origin string) (bool, error) `yaml:\"allow_origin_func\"`\n\n  // AllowMethods defines a list methods allowed when accessing the resource.\n  // This is used in response to a preflight request.\n  // Optional. Default value DefaultCORSConfig.AllowMethods.\n  AllowMethods []string `yaml:\"allow_methods\"`\n\n  // AllowHeaders defines a list of request headers that can be used when\n  // making the actual request. This is in response to a preflight request.\n  // Optional. Default value []string{}.\n  AllowHeaders []string `yaml:\"allow_headers\"`\n\n  // AllowCredentials indicates whether or not the response to the request\n  // can be exposed when the credentials flag is true. When used as part of\n  // a response to a preflight request, this indicates whether or not the\n  // actual request can be made using credentials.\n  // Optional. Default value false.\n  AllowCredentials bool `yaml:\"allow_credentials\"`\n\n  // ExposeHeaders defines a whitelist headers that clients are allowed to\n  // access.\n  // Optional. Default value []string{}.\n  ExposeHeaders []string `yaml:\"expose_headers\"`\n\n  // MaxAge indicates how long (in seconds) the results of a preflight request\n  // can be cached.\n  // Optional. Default value 0.\n  MaxAge int `yaml:\"max_age\"`\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultCORSConfig = CORSConfig{\n  Skipper:      DefaultSkipper,\n  AllowOrigins: []string{\"*\"},\n  AllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "overview", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.CORS())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n  AllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n  AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nCORSConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // AllowOrigin defines a list of origins that may access the resource.\n  // Optional. Default value []string{\"*\"}.\n  AllowOrigins []string `yaml:\"allow_origins\"`\n\n  // AllowOriginFunc is a custom function to validate the origin. It takes the\n  // origin as an argument and returns true if allowed or false otherwise. If\n  // an error is returned, it is returned by the handler. If this option is\n  // set, AllowOrigins is ignored.\n  // Optional.\n  AllowOriginFunc func(origin string) (bool, error) `yaml:\"allow_origin_func\"`\n\n  // AllowMethods defines a list methods allowed when accessing the resource.\n  // This is used in response to a preflight request.\n  // Optional. Default value DefaultCORSConfig.AllowMethods.\n  AllowMethods []string `yaml:\"allow_methods\"`\n\n  // AllowHeaders defines a list of request headers that can be used when\n  // making the actual request. This is in response to a preflight request.\n  // Optional. Default value []string{}.\n  AllowHeaders []string `yaml:\"allow_headers\"`\n\n  // AllowCredentials indicates whether or not the response to the request\n  // can be exposed when the credentials flag is true. When used as part of\n  // a response to a preflight request, this indicates whether or not the\n  // actual request can be made using credentials.\n  // Optional. Default value false.\n  AllowCredentials bool `yaml:\"allow_credentials\"`\n\n  // ExposeHeaders defines a whitelist headers that clients are allowed to\n  // access.\n  // Optional. Default value []string{}.\n  ExposeHeaders []string `yaml:\"expose_headers\"`\n\n  // MaxAge indicates how long (in seconds) the results of a preflight request\n  // can be cached.\n  // Optional. Default value 0.\n  MaxAge int `yaml:\"max_age\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultCORSConfig = CORSConfig{\n  Skipper:      DefaultSkipper,\n  AllowOrigins: []string{\"*\"},\n  AllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for CORS Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\ne.Use(middleware.CORS())\n```\n\nThis snippet shows you how to usage example, which is an important aspect of cors middleware.\n\n**Custom Configuration Example**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n  AllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n  AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},\n}))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of cors middleware.\n\n**CORSConfig Structure**:\n\n```yaml\nCORSConfig struct {\n  Skipper Skipper\n  AllowOrigins []string `yaml:\"allow_origins\"`\n  AllowOriginFunc func(origin string) (bool, error) `yaml:\"allow_origin_func\"`\n  AllowMethods []string `yaml:\"allow_methods\"`\n  AllowHeaders []string `yaml:\"allow_headers\"`\n  AllowCredentials bool `yaml:\"allow_credentials\"`\n  ExposeHeaders []string `yaml:\"expose_headers\"`\n  MaxAge int `yaml:\"max_age\"`\n}\n```\n\nThis snippet shows you how to corsconfig structure, which is an important aspect of cors middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "code_examples", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using CORS Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to configure AllowOrigins properly to restrict access to trusted domains.\n\nUse AllowOriginFunc for dynamic origin validation if needed.\n\nSet AllowCredentials to true only if you need to expose credentials in requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/cors", "title": "CORS Middleware", "description": "CORS middleware implements CORS specification. CORS gives web servers cross-domain access controls, which enable secure cross-domain data transfers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:10", "type": "best_practices", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "docsearch:language": "en", "docusaurus_locale": "en", "ogDescription": "CORS middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "description": "CORS middleware", "og:description": "CORS middleware", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/cors", "twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/cors", "ogTitle": "CORS | Echo", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "og:title": "CORS | Echo", "docsearch:version": "current", "title": "CORS | Echo", "scrapeId": "df0b9cd8-6116-4800-98c9-3fdb615f9a26", "sourceURL": "https://echo.labstack.com/docs/middleware/cors", "url": "https://echo.labstack.com/docs/middleware/cors", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Cross-site Request Forgery (CSRF) Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Cross-site Request Forgery (CSRF) Middleware in echo.\n\n# Cross-site Request Forgery (CSRF) Middleware\n\nThis page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.Here's a quick rundown of what this is about:\n\n## Usage\n\nTo use the CSRF middleware, you can add it to your Echo instance as follows:\n\n```go\ne.Use(middleware.CSRF())\n```\n\n## Custom Configuration\n\nYou can customize the CSRF middleware configuration by using the `CSRFWithConfig` method. Here’s an example:\n\n```go\ne := echo.New()\ne.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n  TokenLookup: \"header:X-XSRF-TOKEN\",\n}))\n```\n\nThe example above uses `X-XSRF-TOKEN` request header to extract the CSRF token.\n\n_Example Configuration that reads token from Cookie_\n\n```go\nmiddleware.CSRFWithConfig(middleware.CSRFConfig{\n\tTokenLookup:    \"cookie:_csrf\",\n\tCookiePath:     \"/\",\n\tCookieDomain:   \"example.com\",\n\tCookieSecure:   true,\n\tCookieHTTPOnly: true,\n\tCookieSameSite: http.SameSiteStrictMode,\n})\n```\n\n## Accessing CSRF Token\n\nCSRF token can be accessed in two ways:\n\n### Server-side\nCSRF token can be accessed from `Echo#Context` using `ContextKey` and passed to the client via template.\n\n### Client-side\nCSRF token can be accessed from the CSRF cookie.\n\n## Configuration\n\nThe configuration structure for CSRF is defined as follows:\n\n```go\nCSRFConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // TokenLength is the length of the generated token.\n  TokenLength uint8 `json:\"token_length\"`\n  // Optional. Default value 32.\n\n  // TokenLookup is a string in the form of \"<source>:<key>\" that is used\n  // to extract token from the request.\n  // Optional. Default value \"header:X-CSRF-Token\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"form:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  TokenLookup string `json:\"token_lookup\"`\n\n  // Context key to store generated CSRF token into context.\n  // Optional. Default value \"csrf\".\n  ContextKey string `json:\"context_key\"`\n\n  // Name of the CSRF cookie. This cookie will store CSRF token.\n  // Optional. Default value \"_csrf\".\n  CookieName string `json:\"cookie_name\"`\n\n  // Domain of the CSRF cookie.\n  // Optional. Default value none.\n  CookieDomain string `json:\"cookie_domain\"`\n\n  // Path of the CSRF cookie.\n  // Optional. Default value none.\n  CookiePath string `json:\"cookie_path\"`\n\n  // Max age (in seconds) of the CSRF cookie.\n  // Optional. Default value 86400 (24hr).\n  CookieMaxAge int `json:\"cookie_max_age\"`\n\n  // Indicates if CSRF cookie is secure.\n  // Optional. Default value false.\n  CookieSecure bool `json:\"cookie_secure\"`\n\n  // Indicates if CSRF cookie is HTTP only.\n  // Optional. Default value false.\n  CookieHTTPOnly bool `json:\"cookie_http_only\"`\n}\n```\n\n## Default Configuration\n\nThe default configuration for CSRF is as follows:\n\n```go\nDefaultCSRFConfig = CSRFConfig{\n  Skipper:      DefaultSkipper,\n  TokenLength:  32,\n  TokenLookup:  \"header:\" + echo.HeaderXCSRFToken,\n  ContextKey:   \"csrf\",\n  CookieName:   \"_csrf\",\n  CookieMaxAge: 86400,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "overview", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\nTo use the CSRF middleware, you can add it to your Echo instance as follows:\n\n```go\ne.Use(middleware.CSRF())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "section_detail", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\nYou can customize the CSRF middleware configuration by using the `CSRFWithConfig` method. Here’s an example:\n\n```go\ne := echo.New()\ne.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n  TokenLookup: \"header:X-XSRF-TOKEN\",\n}))\n```\n\nThe example above uses `X-XSRF-TOKEN` request header to extract the CSRF token.\n\n_Example Configuration that reads token from Cookie_\n\n```go\nmiddleware.CSRFWithConfig(middleware.CSRFConfig{\n\tTokenLookup:    \"cookie:_csrf\",\n\tCookiePath:     \"/\",\n\tCookieDomain:   \"example.com\",\n\tCookieSecure:   true,\n\tCookieHTTPOnly: true,\n\tCookieSameSite: http.SameSiteStrictMode,\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "section_detail", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I accessing csrf token in echo?\n\nAssistant: To accessing csrf token in echo, here's what you do:\nCSRF token can be accessed in two ways:\n\n### Server-side\nCSRF token can be accessed from `Echo#Context` using `ContextKey` and passed to the client via template.\n\n### Client-side\nCSRF token can be accessed from the CSRF cookie..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "section_detail", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\nThe configuration structure for CSRF is defined as follows:\n\n```go\nCSRFConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // TokenLength is the length of the generated token.\n  TokenLength uint8 `json:\"token_length\"`\n  // Optional. Default value 32.\n\n  // TokenLookup is a string in the form of \"<source>:<key>\" that is used\n  // to extract token from the request.\n  // Optional. Default value \"header:X-CSRF-Token\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"form:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  TokenLookup string `json:\"token_lookup\"`\n\n  // Context key to store generated CSRF token into context.\n  // Optional. Default value \"csrf\".\n  ContextKey string `json:\"context_key\"`\n\n  // Name of the CSRF cookie. This cookie will store CSRF token.\n  // Optional. Default value \"_csrf\".\n  CookieName string `json:\"cookie_name\"`\n\n  // Domain of the CSRF cookie.\n  // Optional. Default value none.\n  CookieDomain string `json:\"cookie_domain\"`\n\n  // Path of the CSRF cookie.\n  // Optional. Default value none.\n  CookiePath string `json:\"cookie_path\"`\n\n  // Max age (in seconds) of the CSRF cookie.\n  // Optional. Default value 86400 (24hr).\n  CookieMaxAge int `json:\"cookie_max_age\"`\n\n  // Indicates if CSRF cookie is secure.\n  // Optional. Default value false.\n  CookieSecure bool `json:\"cookie_secure\"`\n\n  // Indicates if CSRF cookie is HTTP only.\n  // Optional. Default value false.\n  CookieHTTPOnly bool `json:\"cookie_http_only\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "section_detail", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\nThe default configuration for CSRF is as follows:\n\n```go\nDefaultCSRFConfig = CSRFConfig{\n  Skipper:      DefaultSkipper,\n  TokenLength:  32,\n  TokenLookup:  \"header:\" + echo.HeaderXCSRFToken,\n  ContextKey:   \"csrf\",\n  CookieName:   \"_csrf\",\n  CookieMaxAge: 86400,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "section_detail", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Cross-site Request Forgery (CSRF) Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of CSRF Middleware**:\n\n```yaml\ne.Use(middleware.CSRF())\n```\n\nThis snippet shows you how to basic usage of csrf middleware, which is an important aspect of cross-site request forgery (csrf) middleware.\n\n**Custom Configuration Example**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n  TokenLookup: \"header:X-XSRF-TOKEN\",\n}))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of cross-site request forgery (csrf) middleware.\n\n**Example Configuration Reading Token from Cookie**:\n\n```yaml\nmiddleware.CSRFWithConfig(middleware.CSRFConfig{\n\tTokenLookup:    \"cookie:_csrf\",\n\tCookiePath:     \"/\",\n\tCookieDomain:   \"example.com\",\n\tCookieSecure:   true,\n\tCookieHTTPOnly: true,\n\tCookieSameSite: http.SameSiteStrictMode,\n})\n```\n\nThis snippet shows you how to example configuration reading token from cookie, which is an important aspect of cross-site request forgery (csrf) middleware.\n\n**CSRF Configuration Struct**:\n\n```yaml\nCSRFConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // TokenLength is the length of the generated token.\n  TokenLength uint8 `json:\"token_length\"`\n  // Optional. Default value 32.\n\n  // TokenLookup is a string in the form of \"<source>:<key>\" that is used\n  // to extract token from the request.\n  // Optional. Default value \"header:X-CSRF-Token\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"form:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  TokenLookup string `json:\"token_lookup\"`\n\n  // Context key to store generated CSRF token into context.\n  // Optional. Default value \"csrf\".\n  ContextKey string `json:\"context_key\"`\n\n  // Name of the CSRF cookie. This cookie will store CSRF token.\n  // Optional. Default value \"_csrf\".\n  CookieName string `json:\"cookie_name\"`\n\n  // Domain of the CSRF cookie.\n  // Optional. Default value none.\n  CookieDomain string `json:\"cookie_domain\"`\n\n  // Path of the CSRF cookie.\n  // Optional. Default value none.\n  CookiePath string `json:\"cookie_path\"`\n\n  // Max age (in seconds) of the CSRF cookie.\n  // Optional. Default value 86400 (24hr).\n  CookieMaxAge int `json:\"cookie_max_age\"`\n\n  // Indicates if CSRF cookie is secure.\n  // Optional. Default value false.\n  CookieSecure bool `json:\"cookie_secure\"`\n\n  // Indicates if CSRF cookie is HTTP only.\n  // Optional. Default value false.\n  CookieHTTPOnly bool `json:\"cookie_http_only\"`\n}\n```\n\nThis snippet shows you how to csrf configuration struct, which is an important aspect of cross-site request forgery (csrf) middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "code_examples", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Cross-site Request Forgery (CSRF) Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways validate CSRF tokens on the server-side to prevent unauthorized actions.\n\nUse secure cookies for CSRF tokens to enhance security.\n\nConsider setting the `SameSite` attribute for cookies to mitigate CSRF attacks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/csrf", "title": "Cross-site Request Forgery (CSRF) Middleware", "description": "This page covers the CSRF middleware for the Echo framework, detailing its usage, configuration, and how to access CSRF tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:21:31", "type": "best_practices", "page_metadata": {"ogLocale": "en", "docusaurus_version": "current", "ogTitle": "CSRF | Echo", "docsearch:version": "current", "og:title": "CSRF | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/csrf", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "CSRF middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "og:description": "CSRF middleware", "docusaurus_locale": "en", "docsearch:language": "en", "ogDescription": "CSRF middleware", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/middleware/csrf", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "title": "CSRF | Echo", "viewport": "width=device-width, initial-scale=1.0", "scrapeId": "da7ceeb6-4e19-4a2f-95cb-8c3a00c49f2d", "sourceURL": "https://echo.labstack.com/docs/middleware/csrf", "url": "https://echo.labstack.com/docs/middleware/csrf", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Decompress Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Decompress Middleware in echo.\n\n# Decompress Middleware\n\nDecompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.Decompress())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.DecompressWithConfig(middleware.DecompressConfig{\n  Skipper: Skipper\n}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nDecompressConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultDecompressConfig = DecompressConfig{\n  Skipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "overview", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.Decompress())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.DecompressWithConfig(middleware.DecompressConfig{\n  Skipper: Skipper\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDecompressConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultDecompressConfig = DecompressConfig{\n  Skipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "section_detail", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Decompress Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage**:\n\n```yaml\ne.Use(middleware.Decompress())\n```\n\nThis snippet shows you how to usage, which is an important aspect of decompress middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.DecompressWithConfig(middleware.DecompressConfig{\n  Skipper: Skipper\n}))\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of decompress middleware.\n\n**Configuration Struct**:\n\n```yaml\nDecompressConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n}\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of decompress middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "code_examples", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Decompress Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe body will be decompressed in memory and consume it for the lifetime of the request (and garbage collection).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/decompress", "title": "Decompress Middleware", "description": "Decompress middleware decompresses HTTP request if Content-Encoding header is set to gzip.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:21:48", "type": "best_practices", "page_metadata": {"generator": "Docusaurus v3.6.3", "og:description": "Decompress middleware", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Decompress | Echo", "og:url": "https://echo.labstack.com/docs/middleware/decompress", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/decompress", "docsearch:version": "current", "ogDescription": "Decompress middleware", "og:title": "Decompress | Echo", "description": "Decompress middleware", "title": "Decompress | Echo", "docusaurus_version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "28d61330-a61d-43e9-b1cc-a58cb55f3c86", "sourceURL": "https://echo.labstack.com/docs/middleware/decompress", "url": "https://echo.labstack.com/docs/middleware/decompress", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Gzip Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Gzip Middleware in echo.\n\n# Gzip Middleware\n\nGzip middleware compresses HTTP response using gzip compression scheme.Here's a quick rundown of what this is about:\n\n## Usage\n\n`e.Use(middleware.Gzip())`\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Level: 5,\n}))\n```\n\ntip\n\nA middleware skipper can be passed to avoid gzip to certain URL(s).\n\n## Example\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Skipper: func(c echo.Context) bool {\n    return strings.Contains(c.Path(), \"metrics\") // Change \"metrics\" for your own path\n  },\n}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nGzipConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Gzip compression level.\n  // Optional. Default value -1.\n  Level int `json:\"level\"`\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultGzipConfig = GzipConfig{\n  Skipper: DefaultSkipper,\n  Level:   -1,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "overview", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n`e.Use(middleware.Gzip())`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Level: 5,\n}))\n```\n\ntip\n\nA middleware skipper can be passed to avoid gzip to certain URL(s)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I example in echo?\n\nAssistant: To example in echo, here's what you do:\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Skipper: func(c echo.Context) bool {\n    return strings.Contains(c.Path(), \"metrics\") // Change \"metrics\" for your own path\n  },\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nGzipConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Gzip compression level.\n  // Optional. Default value -1.\n  Level int `json:\"level\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultGzipConfig = GzipConfig{\n  Skipper: DefaultSkipper,\n  Level:   -1,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Gzip Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Custom Configuration Usage**:\n\n```yaml\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Level: 5,\n}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of gzip middleware.\n\n**Example with Skipper**:\n\n```yaml\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Skipper: func(c echo.Context) bool {\n    return strings.Contains(c.Path(), \"metrics\") // Change \"metrics\" for your own path\n  },\n}))\n```\n```\n\nThis snippet shows you how to example with skipper, which is an important aspect of gzip middleware.\n\n**Gzip Configuration Struct**:\n\n```yaml\n```codeBlockLines_e6Vv\nGzipConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Gzip compression level.\n  // Optional. Default value -1.\n  Level int `json:\"level\"`\n}\n```\n```\n\nThis snippet shows you how to gzip configuration struct, which is an important aspect of gzip middleware.\n\n**Default Gzip Configuration**:\n\n```yaml\n```codeBlockLines_e6Vv\nDefaultGzipConfig = GzipConfig{\n  Skipper: DefaultSkipper,\n  Level:   -1,\n}\n```\n```\n\nThis snippet shows you how to default gzip configuration, which is an important aspect of gzip middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "code_examples", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Gzip Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nA middleware skipper can be passed to avoid gzip to certain URL(s).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/gzip", "title": "Gzip Middleware", "description": "Gzip middleware compresses HTTP response using gzip compression scheme.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:18", "type": "best_practices", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Gzip | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Gzip | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/middleware/gzip", "ogDescription": "Gzip middleware", "description": "Gzip middleware", "og:url": "https://echo.labstack.com/docs/middleware/gzip", "docusaurus_version": "current", "og:description": "Gzip middleware", "language": "en", "ogTitle": "Gzip | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "twitter:card": "summary_large_image", "scrapeId": "413b1437-a19c-4323-89af-b9fb8e6dcdff", "sourceURL": "https://echo.labstack.com/docs/middleware/gzip", "url": "https://echo.labstack.com/docs/middleware/gzip", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Jaeger Tracing Middleware for Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Jaeger Tracing Middleware for Echo in echo.\n\n# Jaeger Tracing Middleware for Echo\n\nTrace requests on Echo framework with Jaeger Tracing Middleware.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nEnabling the tracing middleware creates a tracer and a root tracing span for every request.\n\n## Custom Configuration\n\nBy default, traces are sent to `localhost` Jaeger agent instance. To configure an external Jaeger, start your application with environment variables.\n\n### Usage\n```bash\n$ JAEGER_AGENT_HOST=192.168.1.10 JAEGER_AGENT_PORT=6831 ./myserver\n```\n\nThe tracer can be initialized with values coming from environment variables. None of the env vars are required and all of them can be overridden via direct setting of the property on the configuration object.\n\n| Property | Description |\n| --- | --- |\n| JAEGER_SERVICE_NAME | The service name |\n| JAEGER_AGENT_HOST | The hostname for communicating with agent via UDP |\n| JAEGER_AGENT_PORT | The port for communicating with agent via UDP |\n| JAEGER_ENDPOINT | The HTTP endpoint for sending spans directly to a collector, i.e. [http://jaeger-collector:14268/api/traces](http://jaeger-collector:14268/api/traces) |\n| JAEGER_USER | Username to send as part of \"Basic\" authentication to the collector endpoint |\n| JAEGER_PASSWORD | Password to send as part of \"Basic\" authentication to the collector endpoint |\n| JAEGER_REPORTER_LOG_SPANS | Whether the reporter should also log the spans |\n| JAEGER_REPORTER_MAX_QUEUE_SIZE | The reporter's maximum queue size |\n| JAEGER_REPORTER_FLUSH_INTERVAL | The reporter's flush interval, with units, e.g. \"500ms\" or \"2s\" (\\[valid units\\]\\[timeunits\\]) |\n| JAEGER_SAMPLER_TYPE | The sampler type |\n| JAEGER_SAMPLER_PARAM | The sampler parameter (number) |\n| JAEGER_SAMPLER_MANAGER_HOST_PORT | The HTTP endpoint when using the remote sampler, i.e. [http://jaeger-agent:5778/sampling](http://jaeger-agent:5778/sampling) |\n| JAEGER_SAMPLER_MAX_OPERATIONS | The maximum number of operations that the sampler will keep track of |\n| JAEGER_SAMPLER_REFRESH_INTERVAL | How often the remotely controlled sampler will poll jaeger-agent for the appropriate sampling strategy, with units, e.g. \"1m\" or \"30s\" (\\[valid units\\]\\[timeunits\\]) |\n| JAEGER_TAGS | A comma separated list of `name = value` tracer level tags, which get added to all reported spans. The value can also refer to an environment variable using the format `${envVarName:default}`, where the `:default` is optional, and identifies a value to be used if the environment variable cannot be found |\n| JAEGER_DISABLED | Whether the tracer is disabled or not. If true, the default `opentracing.NoopTracer` is used. |\n| JAEGER_RPC_METRICS | Whether to store RPC metrics |\n\nBy default, the client sends traces via UDP to the agent at `localhost:6831`. Use `JAEGER_AGENT_HOST` and JAEGER_AGENT_PORT to send UDP traces to a different `host:port`. If `JAEGER_ENDPOINT` is set, the client sends traces to the endpoint via `HTTP`, making the `JAEGER_AGENT_HOST` and `JAEGER_AGENT_PORT` unused. If `JAEGER_ENDPOINT` is secured, HTTP basic authentication can be performed by setting the `JAEGER_USER` and `JAEGER_PASSWORD` environment variables.\n\n## Skipping URL(s)\n\nA middleware skipper can be passed to avoid tracing spans to certain URL(s).\n\n_Usage_\n```go\npackage main\nimport (\n\t\"strings\"\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\n\n// urlSkipper ignores metrics route on some middleware\nfunc urlSkipper(c echo.Context) bool {\n    if strings.HasPrefix(c.Path(), \"/testurl\") {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, urlSkipper)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n\n## TraceFunction\n\nThis is a wrapper function that can be used to seamlessly add a span for the duration of the invoked function. There is no need to change function arguments.\n\n_Usage_\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n    \"net/http\"\n    \"time\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Wrap slowFunc on a new span to trace it's execution passing the function arguments\n\tjaegertracing.TraceFunction(c, slowFunc, \"Test String\")\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n\n// A function to be wrapped. No need to change it's arguments due to tracing\nfunc slowFunc(s string) {\n\ttime.Sleep(200 * time.Millisecond)\n\treturn\n}\n```\n\n\n## CreateChildSpan\n\nFor more control over the Span, the function `CreateChildSpan` can be called giving control on data to be appended to the span like log messages, baggages and tags.\n\n_Usage_\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Do something before creating the child span\n        time.Sleep(40 * time.Millisecond)\n        sp := jaegertracing.CreateChildSpan(c, \"Child span for additional processing\")\n        defer sp.Finish()\n        sp.LogEvent(\"Test log\")\n        sp.SetBaggageItem(\"Test baggage\", \"baggage\")\n        sp.SetTag(\"Test tag\", \"New Tag\")\n        time.Sleep(100 * time.Millisecond)\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nEnabling the tracing middleware creates a tracer and a root tracing span for every request..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\nBy default, traces are sent to `localhost` Jaeger agent instance. To configure an external Jaeger, start your application with environment variables.\n\n### Usage\n```bash\n$ JAEGER_AGENT_HOST=192.168.1.10 JAEGER_AGENT_PORT=6831 ./myserver\n```\n\nThe tracer can be initialized with values coming from environment variables. None of the env vars are required and all of them can be overridden via direct setting of the property on the configuration object.\n\n| Property | Description |\n| --- | --- |\n| JAEGER_SERVICE_NAME | The service name |\n| JAEGER_AGENT_HOST | The hostname for communicating with agent via UDP |\n| JAEGER_AGENT_PORT | The port for communicating with agent via UDP |\n| JAEGER_ENDPOINT | The HTTP endpoint for sending spans directly to a collector, i.e. [http://jaeger-collector:14268/api/traces](http://jaeger-collector:14268/api/traces) |\n| JAEGER_USER | Username to send as part of \"Basic\" authentication to the collector endpoint |\n| JAEGER_PASSWORD | Password to send as part of \"Basic\" authentication to the collector endpoint |\n| JAEGER_REPORTER_LOG_SPANS | Whether the reporter should also log the spans |\n| JAEGER_REPORTER_MAX_QUEUE_SIZE | The reporter's maximum queue size |\n| JAEGER_REPORTER_FLUSH_INTERVAL | The reporter's flush interval, with units, e.g. \"500ms\" or \"2s\" (\\[valid units\\]\\[timeunits\\]) |\n| JAEGER_SAMPLER_TYPE | The sampler type |\n| JAEGER_SAMPLER_PARAM | The sampler parameter (number) |\n| JAEGER_SAMPLER_MANAGER_HOST_PORT | The HTTP endpoint when using the remote sampler, i.e. [http://jaeger-agent:5778/sampling](http://jaeger-agent:5778/sampling) |\n| JAEGER_SAMPLER_MAX_OPERATIONS | The maximum number of operations that the sampler will keep track of |\n| JAEGER_SAMPLER_REFRESH_INTERVAL | How often the remotely controlled sampler will poll jaeger-agent for the appropriate sampling strategy, with units, e.g. \"1m\" or \"30s\" (\\[valid units\\]\\[timeunits\\]) |\n| JAEGER_TAGS | A comma separated list of `name = value` tracer level tags, which get added to all reported spans. The value can also refer to an environment variable using the format `${envVarName:default}`, where the `:default` is optional, and identifies a value to be used if the environment variable cannot be found |\n| JAEGER_DISABLED | Whether the tracer is disabled or not. If true, the default `opentracing.NoopTracer` is used. |\n| JAEGER_RPC_METRICS | Whether to store RPC metrics |\n\nBy default, the client sends traces via UDP to the agent at `localhost:6831`. Use `JAEGER_AGENT_HOST` and JAEGER_AGENT_PORT to send UDP traces to a different `host:port`. If `JAEGER_ENDPOINT` is set, the client sends traces to the endpoint via `HTTP`, making the `JAEGER_AGENT_HOST` and `JAEGER_AGENT_PORT` unused. If `JAEGER_ENDPOINT` is secured, HTTP basic authentication can be performed by setting the `JAEGER_USER` and `JAEGER_PASSWORD` environment variables..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I skipping url(s) in echo?\n\nAssistant: To skipping url(s) in echo, here's what you do:\nA middleware skipper can be passed to avoid tracing spans to certain URL(s).\n\n_Usage_\n```go\npackage main\nimport (\n\t\"strings\"\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\n\n// urlSkipper ignores metrics route on some middleware\nfunc urlSkipper(c echo.Context) bool {\n    if strings.HasPrefix(c.Path(), \"/testurl\") {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, urlSkipper)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I tracefunction in echo?\n\nAssistant: To tracefunction in echo, here's what you do:\nThis is a wrapper function that can be used to seamlessly add a span for the duration of the invoked function. There is no need to change function arguments.\n\n_Usage_\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n    \"net/http\"\n    \"time\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Wrap slowFunc on a new span to trace it's execution passing the function arguments\n\tjaegertracing.TraceFunction(c, slowFunc, \"Test String\")\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n\n// A function to be wrapped. No need to change it's arguments due to tracing\nfunc slowFunc(s string) {\n\ttime.Sleep(200 * time.Millisecond)\n\treturn\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I createchildspan in echo?\n\nAssistant: To createchildspan in echo, here's what you do:\nFor more control over the Span, the function `CreateChildSpan` can be called giving control on data to be appended to the span like log messages, baggages and tags.\n\n_Usage_\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Do something before creating the child span\n        time.Sleep(40 * time.Millisecond)\n        sp := jaegertracing.CreateChildSpan(c, \"Child span for additional processing\")\n        defer sp.Finish()\n        sp.LogEvent(\"Test log\")\n        sp.SetBaggageItem(\"Test baggage\", \"baggage\")\n        sp.SetTag(\"Test tag\", \"New Tag\")\n        time.Sleep(100 * time.Millisecond)\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Jaeger Tracing Middleware for Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage**:\n\n```yaml\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to usage, which is an important aspect of jaeger tracing middleware for echo.\n\n**Custom Configuration Usage**:\n\n```yaml\n```bash\n$ JAEGER_AGENT_HOST=192.168.1.10 JAEGER_AGENT_PORT=6831 ./myserver\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of jaeger tracing middleware for echo.\n\n**Skipping URL(s) Usage**:\n\n```yaml\n```go\npackage main\nimport (\n\t\"strings\"\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\n\n// urlSkipper ignores metrics route on some middleware\nfunc urlSkipper(c echo.Context) bool {\n    if strings.HasPrefix(c.Path(), \"/testurl\") {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, urlSkipper)\n    defer c.Close()\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to skipping url(s) usage, which is an important aspect of jaeger tracing middleware for echo.\n\n**TraceFunction Usage**:\n\n```yaml\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n    \"net/http\"\n    \"time\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Wrap slowFunc on a new span to trace it's execution passing the function arguments\n\tjaegertracing.TraceFunction(c, slowFunc, \"Test String\")\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n\n// A function to be wrapped. No need to change it's arguments due to tracing\nfunc slowFunc(s string) {\n\ttime.Sleep(200 * time.Millisecond)\n\treturn\n}\n```\n```\n\nThis snippet shows you how to tracefunction usage, which is an important aspect of jaeger tracing middleware for echo.\n\n**CreateChildSpan Usage**:\n\n```yaml\n```go\npackage main\nimport (\n    \"github.com/labstack/echo-contrib/jaegertracing\"\n    \"github.com/labstack/echo/v4\"\n)\nfunc main() {\n    e := echo.New()\n    // Enable tracing middleware\n    c := jaegertracing.New(e, nil)\n    defer c.Close()\n    e.GET(\"/\", func(c echo.Context) error {\n        // Do something before creating the child span\n        time.Sleep(40 * time.Millisecond)\n        sp := jaegertracing.CreateChildSpan(c, \"Child span for additional processing\")\n        defer sp.Finish()\n        sp.LogEvent(\"Test log\")\n        sp.SetBaggageItem(\"Test baggage\", \"baggage\")\n        sp.SetTag(\"Test tag\", \"New Tag\")\n        time.Sleep(100 * time.Millisecond)\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n```\n\nThis snippet shows you how to createchildspan usage, which is an important aspect of jaeger tracing middleware for echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Jaeger Tracing Middleware for Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBy default, the client sends traces via UDP to the agent at `localhost:6831`. Use `JAEGER_AGENT_HOST` and `JAEGER_AGENT_PORT` to send UDP traces to a different `host:port`.\n\nIf `JAEGER_ENDPOINT` is set, the client sends traces to the endpoint via `HTTP`, making the `JAEGER_AGENT_HOST` and `JAEGER_AGENT_PORT` unused.\n\nIf `JAEGER_ENDPOINT` is secured, HTTP basic authentication can be performed by setting the `JAEGER_USER` and `JAEGER_PASSWORD` environment variables.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jaeger", "title": "Jaeger Tracing Middleware for Echo", "description": "Trace requests on Echo framework with Jaeger Tracing Middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:48", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://echo.labstack.com/docs/middleware/jaeger", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Jaeager tracing middleware", "og:locale": "en", "title": "Jaeger | Echo", "docusaurus_locale": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Jaeger | Echo", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "description": "Jaeager tracing middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Jaeger | Echo", "og:description": "Jaeager tracing middleware", "og:url": "https://echo.labstack.com/docs/middleware/jaeger", "scrapeId": "97598112-7f25-4cca-8371-52904788a844", "sourceURL": "https://echo.labstack.com/docs/middleware/jaeger", "url": "https://echo.labstack.com/docs/middleware/jaeger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what JWT Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain JWT Middleware in echo.\n\n# JWT Middleware\n\nJWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwtHere's a quick rundown of what this is about:\n\n## Basic middleware behavior\n\n- For valid token, it sets the user in context and calls next handler.\n- For invalid token, it sends \"401 - Unauthorized\" response.\n- For missing or invalid `Authorization` header, it sends \"400 - Bad Request\".\n\n## Dependencies\n\n```go\nimport \"github.com/labstack/echo-jwt/v4\"\n```\n\n## Usage\n\n```go\ne.Use(echojwt.JWT([]byte(\"secret\")))\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne.Use(echojwt.WithConfig(echojwt.Config{\n  // ...\n  SigningKey:             []byte(\"secret\"),\n  // ...\n}))\n```\n\n## Configuration\n\n```go\ntype Config struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper middleware.Skipper\n\n\t// BeforeFunc defines a function which is executed just before the middleware.\n\tBeforeFunc middleware.BeforeFunc\n\n\t// SuccessHandler defines a function which is executed for a valid token.\n\tSuccessHandler func(c echo.Context)\n\n\t// ErrorHandler defines a function which is executed when all lookups have been done and none of them passed Validator\n\t// function. ErrorHandler is executed with last missing (ErrExtractionValueMissing) or an invalid key.\n\t// It may be used to define a custom JWT error.\n\t//\n\t// Note: when error handler swallows the error (returns nil) middleware continues handler chain execution towards handler.\n\t// This is useful in cases when portion of your site/api is publicly accessible and has extra features for authorized users\n\t// In that case you can use ErrorHandler to set default public JWT token value to request and continue with handler chain.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n\t// ignore the error (by returning `nil`).\n\t// This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n\t// In that case you can use ErrorHandler to set a default public JWT token value in the request context\n\t// and continue. Some logic down the remaining execution chain needs to check that (public) token value then.\n\tContinueOnIgnoredError bool\n\n\t// Context key to store user information from the token into context.\n\t// Optional. Default value \"user\".\n\tContextKey string\n\n\t// Signing key to validate token.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKeys is provided.\n\tSigningKey interface{}\n\n\t// Map of signing keys to validate token with kid field usage.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKey is provided.\n\tSigningKeys map[string]interface{}\n\n\t// Signing method used to check the token's signing algorithm.\n\t// Optional. Default value HS256.\n\tSigningMethod string\n\n\t// KeyFunc defines a user-defined function that supplies the public key for a token validation.\n\t// The function shall take care of verifying the signing algorithm and selecting the proper key.\n\t// A user-defined KeyFunc can be useful if tokens are issued by an external party.\n\t// Used by default ParseTokenFunc implementation.\n\t//\n\t// When a user-defined KeyFunc is provided, SigningKey, SigningKeys, and SigningMethod are ignored.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither SigningKeys nor SigningKey is provided.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Default to an internal implementation verifying the signing algorithm and selecting the proper key.\n\tKeyFunc jwt.Keyfunc\n\n\t// TokenLookup is a string in the form of \"<source>:<name>\" or \"<source>:<name>,<source>:<name>\" that is used\n\t// to extract token from the request.\n\t// Optional. Default value \"header:Authorization\".\n\t// Possible values:\n\t// - \"header:<name>\" or \"header:<name>:<cut-prefix>\"\n\t// \t\t`<cut-prefix>` is argument value to cut/trim prefix of the extracted value. This is useful if header\n\t// \t\tvalue has static prefix like `Authorization: <auth-scheme> <authorisation-parameters>` where part that we\n\t// \t\twant to cut is `<auth-scheme> ` note the space at the end.\n\t// \t\tIn case of JWT tokens `Authorization: Bearer <token>` prefix we cut is `Bearer `.\n\t// If prefix is left empty the whole value is returned.\n\t// - \"query:<name>\"\n\t// - \"param:<name>\"\n\t// - \"cookie:<name>\"\n\t// - \"form:<name>\"\n\t// Multiple sources example:\n\t// - \"header:Authorization:Bearer ,cookie:myowncookie\"\n\tTokenLookup string\n\n\t// TokenLookupFuncs defines a list of user-defined functions that extract JWT token from the given context.\n\t// This is one of the two options to provide a token extractor.\n\t// The order of precedence is user-defined TokenLookupFuncs, and TokenLookup.\n\t// You can also provide both if you want.\n\tTokenLookupFuncs []middleware.ValuesExtractor\n\n\t// ParseTokenFunc defines a user-defined function that parses token from given auth. Returns an error when token\n\t// parsing fails or parsed token is invalid.\n\t// Defaults to implementation using `github.com/golang-jwt/jwt` as JWT implementation library\n\tParseTokenFunc func(c echo.Context, auth string) (interface{}, error)\n\n\t// Claims are extendable claims data defining token content. Used by default ParseTokenFunc implementation.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Optional. Defaults to function returning jwt.MapClaims\n\tNewClaimsFunc func(c echo.Context) jwt.Claims\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "overview", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I basic middleware behavior in echo?\n\nAssistant: To basic middleware behavior in echo, here's what you do:\n- For valid token, it sets the user in context and calls next handler.\n- For invalid token, it sends \"401 - Unauthorized\" response.\n- For missing or invalid `Authorization` header, it sends \"400 - Bad Request\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I dependencies in echo?\n\nAssistant: To dependencies in echo, here's what you do:\n```go\nimport \"github.com/labstack/echo-jwt/v4\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne.Use(echojwt.JWT([]byte(\"secret\")))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne.Use(echojwt.WithConfig(echojwt.Config{\n  // ...\n  SigningKey:             []byte(\"secret\"),\n  // ...\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\ntype Config struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper middleware.Skipper\n\n\t// BeforeFunc defines a function which is executed just before the middleware.\n\tBeforeFunc middleware.BeforeFunc\n\n\t// SuccessHandler defines a function which is executed for a valid token.\n\tSuccessHandler func(c echo.Context)\n\n\t// ErrorHandler defines a function which is executed when all lookups have been done and none of them passed Validator\n\t// function. ErrorHandler is executed with last missing (ErrExtractionValueMissing) or an invalid key.\n\t// It may be used to define a custom JWT error.\n\t//\n\t// Note: when error handler swallows the error (returns nil) middleware continues handler chain execution towards handler.\n\t// This is useful in cases when portion of your site/api is publicly accessible and has extra features for authorized users\n\t// In that case you can use ErrorHandler to set default public JWT token value to request and continue with handler chain.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n\t// ignore the error (by returning `nil`).\n\t// This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n\t// In that case you can use ErrorHandler to set a default public JWT token value in the request context\n\t// and continue. Some logic down the remaining execution chain needs to check that (public) token value then.\n\tContinueOnIgnoredError bool\n\n\t// Context key to store user information from the token into context.\n\t// Optional. Default value \"user\".\n\tContextKey string\n\n\t// Signing key to validate token.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKeys is provided.\n\tSigningKey interface{}\n\n\t// Map of signing keys to validate token with kid field usage.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKey is provided.\n\tSigningKeys map[string]interface{}\n\n\t// Signing method used to check the token's signing algorithm.\n\t// Optional. Default value HS256.\n\tSigningMethod string\n\n\t// KeyFunc defines a user-defined function that supplies the public key for a token validation.\n\t// The function shall take care of verifying the signing algorithm and selecting the proper key.\n\t// A user-defined KeyFunc can be useful if tokens are issued by an external party.\n\t// Used by default ParseTokenFunc implementation.\n\t//\n\t// When a user-defined KeyFunc is provided, SigningKey, SigningKeys, and SigningMethod are ignored.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither SigningKeys nor SigningKey is provided.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Default to an internal implementation verifying the signing algorithm and selecting the proper key.\n\tKeyFunc jwt.Keyfunc\n\n\t// TokenLookup is a string in the form of \"<source>:<name>\" or \"<source>:<name>,<source>:<name>\" that is used\n\t// to extract token from the request.\n\t// Optional. Default value \"header:Authorization\".\n\t// Possible values:\n\t// - \"header:<name>\" or \"header:<name>:<cut-prefix>\"\n\t// \t\t`<cut-prefix>` is argument value to cut/trim prefix of the extracted value. This is useful if header\n\t// \t\tvalue has static prefix like `Authorization: <auth-scheme> <authorisation-parameters>` where part that we\n\t// \t\twant to cut is `<auth-scheme> ` note the space at the end.\n\t// \t\tIn case of JWT tokens `Authorization: Bearer <token>` prefix we cut is `Bearer `.\n\t// If prefix is left empty the whole value is returned.\n\t// - \"query:<name>\"\n\t// - \"param:<name>\"\n\t// - \"cookie:<name>\"\n\t// - \"form:<name>\"\n\t// Multiple sources example:\n\t// - \"header:Authorization:Bearer ,cookie:myowncookie\"\n\tTokenLookup string\n\n\t// TokenLookupFuncs defines a list of user-defined functions that extract JWT token from the given context.\n\t// This is one of the two options to provide a token extractor.\n\t// The order of precedence is user-defined TokenLookupFuncs, and TokenLookup.\n\t// You can also provide both if you want.\n\tTokenLookupFuncs []middleware.ValuesExtractor\n\n\t// ParseTokenFunc defines a user-defined function that parses token from given auth. Returns an error when token\n\t// parsing fails or parsed token is invalid.\n\t// Defaults to implementation using `github.com/golang-jwt/jwt` as JWT implementation library\n\tParseTokenFunc func(c echo.Context, auth string) (interface{}, error)\n\n\t// Claims are extendable claims data defining token content. Used by default ParseTokenFunc implementation.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Optional. Defaults to function returning jwt.MapClaims\n\tNewClaimsFunc func(c echo.Context) jwt.Claims\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for JWT Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dependencies**:\n\n```yaml\n```go\nimport \"github.com/labstack/echo-jwt/v4\"\n```\n```\n\nThis snippet shows you how to dependencies, which is an important aspect of jwt middleware.\n\n**Usage**:\n\n```yaml\n```go\ne.Use(echojwt.JWT([]byte(\"secret\")))\n```\n```\n\nThis snippet shows you how to usage, which is an important aspect of jwt middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```go\ne.Use(echojwt.WithConfig(echojwt.Config{\n  // ...\n  SigningKey:             []byte(\"secret\"),\n  // ...\n}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of jwt middleware.\n\n**Configuration Struct**:\n\n```yaml\n```go\ntype Config struct {\n\t// Skipper defines a function to skip middleware.\n\tSkipper middleware.Skipper\n\n\t// BeforeFunc defines a function which is executed just before the middleware.\n\tBeforeFunc middleware.BeforeFunc\n\n\t// SuccessHandler defines a function which is executed for a valid token.\n\tSuccessHandler func(c echo.Context)\n\n\t// ErrorHandler defines a function which is executed when all lookups have been done and none of them passed Validator\n\t// function. ErrorHandler is executed with last missing (ErrExtractionValueMissing) or an invalid key.\n\t// It may be used to define a custom JWT error.\n\t//\n\t// Note: when error handler swallows the error (returns nil) middleware continues handler chain execution towards handler.\n\t// This is useful in cases when portion of your site/api is publicly accessible and has extra features for authorized users\n\t// In that case you can use ErrorHandler to set default public JWT token value to request and continue with handler chain.\n\tErrorHandler func(c echo.Context, err error) error\n\n\t// ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n\t// ignore the error (by returning `nil`).\n\t// This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n\t// In that case you can use ErrorHandler to set a default public JWT token value in the request context\n\t// and continue. Some logic down the remaining execution chain needs to check that (public) token value then.\n\tContinueOnIgnoredError bool\n\n\t// Context key to store user information from the token into context.\n\t// Optional. Default value \"user\".\n\tContextKey string\n\n\t// Signing key to validate token.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKeys is provided.\n\tSigningKey interface{}\n\n\t// Map of signing keys to validate token with kid field usage.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither user-defined KeyFunc nor SigningKey is provided.\n\tSigningKeys map[string]interface{}\n\n\t// Signing method used to check the token's signing algorithm.\n\t// Optional. Default value HS256.\n\tSigningMethod string\n\n\t// KeyFunc defines a user-defined function that supplies the public key for a token validation.\n\t// The function shall take care of verifying the signing algorithm and selecting the proper key.\n\t// A user-defined KeyFunc can be useful if tokens are issued by an external party.\n\t// Used by default ParseTokenFunc implementation.\n\t//\n\t// When a user-defined KeyFunc is provided, SigningKey, SigningKeys, and SigningMethod are ignored.\n\t// This is one of the three options to provide a token validation key.\n\t// The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n\t// Required if neither SigningKeys nor SigningKey is provided.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Default to an internal implementation verifying the signing algorithm and selecting the proper key.\n\tKeyFunc jwt.Keyfunc\n\n\t// TokenLookup is a string in the form of \"<source>:<name>\" or \"<source>:<name>,<source>:<name>\" that is used\n\t// to extract token from the request.\n\t// Optional. Default value \"header:Authorization\".\n\t// Possible values:\n\t// - \"header:<name>\" or \"header:<name>:<cut-prefix>\"\n\t// \t\t`<cut-prefix>` is argument value to cut/trim prefix of the extracted value. This is useful if header\n\t// \t\tvalue has static prefix like `Authorization: <auth-scheme> <authorisation-parameters>` where part that we\n\t// \t\twant to cut is `<auth-scheme> ` note the space at the end.\n\t// \t\tIn case of JWT tokens `Authorization: Bearer <token>` prefix we cut is `Bearer `.\n\t// If prefix is left empty the whole value is returned.\n\t// - \"query:<name>\"\n\t// - \"param:<name>\"\n\t// - \"cookie:<name>\"\n\t// - \"form:<name>\"\n\t// Multiple sources example:\n\t// - \"header:Authorization:Bearer ,cookie:myowncookie\"\n\tTokenLookup string\n\n\t// TokenLookupFuncs defines a list of user-defined functions that extract JWT token from the given context.\n\t// This is one of the two options to provide a token extractor.\n\t// The order of precedence is user-defined TokenLookupFuncs, and TokenLookup.\n\t// You can also provide both if you want.\n\tTokenLookupFuncs []middleware.ValuesExtractor\n\n\t// ParseTokenFunc defines a user-defined function that parses token from given auth. Returns an error when token\n\t// parsing fails or parsed token is invalid.\n\t// Defaults to implementation using `github.com/golang-jwt/jwt` as JWT implementation library\n\tParseTokenFunc func(c echo.Context, auth string) (interface{}, error)\n\n\t// Claims are extendable claims data defining token content. Used by default ParseTokenFunc implementation.\n\t// Not used if custom ParseTokenFunc is set.\n\t// Optional. Defaults to function returning jwt.MapClaims\n\tNewClaimsFunc func(c echo.Context) jwt.Claims\n}\n```\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of jwt middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "code_examples", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using JWT Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle both valid and invalid tokens appropriately in your application.\n\nConsider using custom error handlers to manage JWT errors effectively.\n\nUse the `SigningKey` and `SigningKeys` options to enhance security in token validation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/jwt", "title": "JWT Middleware", "description": "JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at https://github.com/labstack/echo-jwt", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:24:52", "type": "best_practices", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/jwt", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "title": "JWT | Echo", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/jwt", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "JWT | Echo", "docsearch:language": "en", "og:locale": "en", "og:title": "JWT | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "description": "JWT middleware", "ogDescription": "JWT middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:description": "JWT middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "315f5e7d-f27e-4c97-813c-9f61dc90772f", "sourceURL": "https://echo.labstack.com/docs/middleware/jwt", "url": "https://echo.labstack.com/docs/middleware/jwt", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Key Auth Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Key Auth Middleware in echo.\n\n# Key Auth Middleware\n\nKey auth middleware provides a key based authentication.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\ne.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n  return key == \"valid-key\", nil\n}))\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.KeyAuthWithConfig(middleware.KeyAuthConfig{\n  KeyLookup: \"query:api-key\",\n  Validator: func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == \"valid-key\", nil\n\t\t},\n}))\n```\n\n## Configuration\n\n```go\nKeyAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // KeyLookup is a string in the form of \"<source>:<name>\" that is used\n  // to extract key from the request.\n  // Optional. Default value \"header:Authorization\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  // - \"form:<name>\"\n  KeyLookup string `yaml:\"key_lookup\"`\n\n  // AuthScheme to be used in the Authorization header.\n  // Optional. Default value \"Bearer\".\n  AuthScheme string\n\n  // Validator is a function to validate key.\n  // Required.\n  Validator KeyAuthValidator\n\n  // ErrorHandler defines a function which is executed for an invalid key.\n  // It may be used to define a custom error.\n  ErrorHandler KeyAuthErrorHandler\n}\n```\n\n## Default Configuration\n\n```go\nDefaultKeyAuthConfig = KeyAuthConfig{\n  Skipper:    DefaultSkipper,\n  KeyLookup:  \"header:\" + echo.HeaderAuthorization,\n  AuthScheme: \"Bearer\",\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "overview", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n  return key == \"valid-key\", nil\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "section_detail", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.KeyAuthWithConfig(middleware.KeyAuthConfig{\n  KeyLookup: \"query:api-key\",\n  Validator: func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == \"valid-key\", nil\n\t\t},\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "section_detail", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nKeyAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // KeyLookup is a string in the form of \"<source>:<name>\" that is used\n  // to extract key from the request.\n  // Optional. Default value \"header:Authorization\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  // - \"form:<name>\"\n  KeyLookup string `yaml:\"key_lookup\"`\n\n  // AuthScheme to be used in the Authorization header.\n  // Optional. Default value \"Bearer\".\n  AuthScheme string\n\n  // Validator is a function to validate key.\n  // Required.\n  Validator KeyAuthValidator\n\n  // ErrorHandler defines a function which is executed for an invalid key.\n  // It may be used to define a custom error.\n  ErrorHandler KeyAuthErrorHandler\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "section_detail", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```go\nDefaultKeyAuthConfig = KeyAuthConfig{\n  Skipper:    DefaultSkipper,\n  KeyLookup:  \"header:\" + echo.HeaderAuthorization,\n  AuthScheme: \"Bearer\",\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "section_detail", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Key Auth Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\n```go\ne.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n  return key == \"valid-key\", nil\n}))\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of key auth middleware.\n\n**Custom Configuration Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.KeyAuthWithConfig(middleware.KeyAuthConfig{\n  KeyLookup: \"query:api-key\",\n  Validator: func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == \"valid-key\", nil\n\t\t},\n}))\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of key auth middleware.\n\n**KeyAuthConfig Structure**:\n\n```yaml\n```go\nKeyAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // KeyLookup is a string in the form of \"<source>:<name>\" that is used\n  // to extract key from the request.\n  // Optional. Default value \"header:Authorization\".\n  // Possible values:\n  // - \"header:<name>\"\n  // - \"query:<name>\"\n  // - \"cookie:<name>\"\n  // - \"form:<name>\"\n  KeyLookup string `yaml:\"key_lookup\"`\n\n  // AuthScheme to be used in the Authorization header.\n  // Optional. Default value \"Bearer\".\n  AuthScheme string\n\n  // Validator is a function to validate key.\n  // Required.\n  Validator KeyAuthValidator\n\n  // ErrorHandler defines a function which is executed for an invalid key.\n  // It may be used to define a custom error.\n  ErrorHandler KeyAuthErrorHandler\n}\n```\n```\n\nThis snippet shows you how to keyauthconfig structure, which is an important aspect of key auth middleware.\n\n**Default Configuration Example**:\n\n```yaml\n```go\nDefaultKeyAuthConfig = KeyAuthConfig{\n  Skipper:    DefaultSkipper,\n  KeyLookup:  \"header:\" + echo.HeaderAuthorization,\n  AuthScheme: \"Bearer\",\n}\n```\n```\n\nThis snippet shows you how to default configuration example, which is an important aspect of key auth middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "code_examples", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Key Auth Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor valid key it calls the next handler.\n\nFor invalid key, it sends \"401 - Unauthorized\" response.\n\nFor missing key, it sends \"400 - Bad Request\" response.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/key-auth", "title": "Key Auth Middleware", "description": "Key auth middleware provides a key based authentication.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:08", "type": "best_practices", "page_metadata": {"og:title": "Key Auth | Echo", "ogTitle": "Key Auth | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "description": "Key auth middleware", "title": "Key Auth | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Key auth middleware", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Key auth middleware", "og:locale": "en", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://echo.labstack.com/docs/middleware/key-auth", "og:url": "https://echo.labstack.com/docs/middleware/key-auth", "docsearch:version": "current", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "d6b5eb68-e748-4b5c-9ad3-c76d678d4a5b", "sourceURL": "https://echo.labstack.com/docs/middleware/key-auth", "url": "https://echo.labstack.com/docs/middleware/key-auth", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Logger Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Logger Middleware in echo.\n\n# Logger Middleware\n\nLogger middleware logs the information about each HTTP request.Here's a quick rundown of what this is about:\n\n## Old Logger middleware\n\n\n\n## Usage\n\n```go\ne.Use(middleware.Logger())\n``` \n_Sample output_\n```json\n{\"time\":\"2017-01-12T08:58:07.372015644-08:00\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/\",\"status\":200,\"error\":\"\",\"latency\":14743,\"latency_human\":\"14.743µs\",\"bytes_in\":0,\"bytes_out\":2}\n```\n\n## Custom Configuration\n\n\n\n## Usage\n\n```go\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n  Format: \"method=${method}, uri=${uri}, status=${status}\\n\",\n}))\n```\nExample above uses a `Format` which logs request method and request URI.\n_Sample output_\n```text\nmethod=GET, uri=/, status=200\n```\n\n## Configuration\n\n```go\n// LoggerConfig defines the config for Logger middleware.\nLoggerConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Tags to construct the logger format.\n  //\n  // - time_unix\n  // - time_unix_milli\n  // - time_unix_micro\n  // - time_unix_nano\n  // - time_rfc3339\n  // - time_rfc3339_nano\n  // - time_custom\n  // - id (Request ID)\n  // - remote_ip\n  // - uri\n  // - host\n  // - method\n  // - path\n  // - protocol\n  // - referer\n  // - user_agent\n  // - status\n  // - error\n  // - latency (In nanoseconds)\n  // - latency_human (Human readable)\n  // - bytes_in (Bytes received)\n  // - bytes_out (Bytes sent)\n  // - header:<NAME>\n  // - query:<NAME>\n  // - form:<NAME>\n  //\n  // Example \"${remote_ip} ${status}\"\n  //\n  // Optional. Default value DefaultLoggerConfig.Format.\n  Format string `yaml:\"format\"`\n\n  // Optional. Default value DefaultLoggerConfig.CustomTimeFormat.\n  CustomTimeFormat string `yaml:\"custom_time_format\"`\n\n  // Output is a writer where logs in JSON format are written.\n  // Optional. Default value os.Stdout.\n  Output io.Writer\n}\n```\n\n## Default Configuration\n\n```go\nDefaultLoggerConfig = LoggerConfig{\n  Skipper: DefaultSkipper,\n  Format: `{\"time\":\"${time_rfc3339_nano}\",\"id\":\"${id}\",\"remote_ip\":\"${remote_ip}\",` +\n    `\"host\":\"${host}\",\"method\":\"${method}\",\"uri\":\"${uri}\",\"user_agent\":\"${user_agent}\",` +\n    `\"status\":${status},\"error\":\"${error}\",\"latency\":${latency},\"latency_human\":\"${latency_human}\"` +\n    `,\"bytes_in\":${bytes_in},\"bytes_out\":${bytes_out}}` + \"\\n\",\n  CustomTimeFormat: \"2006-01-02 15:04:05.00000\",\n}\n```\n\n## New RequestLogger middleware\n\nRequestLogger middleware allows developer fully to customize what is logged and how it is logged and is more suitable for usage with 3rd party (structured logging) libraries.\nYou can quickly acquaint yourself with the values that the logger knows to extract by referring to the fields of the [`RequestLoggerConfig`](https://github.com/labstack/echo/blob/master/middleware/request_logger.go) structure below. Or click the link to view the most up-to-date details.\n\n## Examples\n\nExample for naive `fmt.Printf`\n```go\nskipper := func(c echo.Context) bool {\n\t// Skip health check endpoint\n    return c.Request().URL.Path == \"/health\"\n}\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogStatus: true,\n\tLogURI:    true,\n\tSkipper: skipper,\n\tBeforeNextFunc: func(c echo.Context) {\n\t\tc.Set(\"customValueFromContext\", 42)\n\t},\n\tLogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n\t\tvalue, _ := c.Get(\"customValueFromContext\").(int)\n\t\tfmt.Printf(\"REQUEST: uri: %v, status: %v, custom-value: %v\\n\", v.URI, v.Status, value)\n\t\treturn nil\n\t},\n}))\n```\n_Sample output_\n```text\nREQUEST: uri: /hello, status: 200, custom-value: 42\n```\nExample for slog ( [https://pkg.go.dev/log/slog](https://pkg.go.dev/log/slog))\n```go\nlogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogStatus:   true,\n    LogURI:      true,\n    LogError:    true,\n    HandleError: true, // forwards error to the global error handler, so it can decide appropriate status code\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        if v.Error == nil {\n            logger.LogAttrs(context.Background(), slog.LevelInfo, \"REQUEST\",\n                slog.String(\"uri\", v.URI),\n                slog.Int(\"status\", v.Status),\n            )\n        } else {\n            logger.LogAttrs(context.Background(), slog.LevelError, \"REQUEST_ERROR\",\n                slog.String(\"uri\", v.URI),\n                slog.Int(\"status\", v.Status),\n                slog.String(\"err\", v.Error.Error()),\n            )\n        }\n        return nil\n    },\n}))\n```\n_Sample output_\n```json\n{\"time\":\"2024-12-30T20:55:46.2399999+08:00\",\"level\":\"INFO\",\"msg\":\"REQUEST\",\"uri\":\"/hello\",\"status\":200}\n```\n\n## Troubleshooting Tips\n\n#### 1. Solution for \"panic: missing LogValuesFunc callback function for request logger middleware\"\nThis panic arises when the `LogValuesFunc` callback function, which is mandatory for the request logger middleware configuration, is left unset.\nTo address this, you must define a suitable function that adheres to the `LogValuesFunc` specifications and then assign it within the middleware configuration. Consider the following straightforward illustration:\n```go\nfunc logValues(c echo.Context, v middleware.RequestLoggerValues) error {\n    fmt.Printf(\"Request Method: %s, URI: %s\\n\", v.Method, v.URI)\n    return nil\n}\n\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n    LogValuesFunc: logValues,\n}))\n```\n#### 2. If Parameters in Logs Are Empty\nWhen investigating logging-related glitches, if you notice that certain parameters like `v.URI` and `v.Status` within the `LogValuesFunc` function produce empty outputs, your focus should shift to validating the relevant configuration elements. Specifically, check whether the corresponding items (such as `LogStatus`, `LogURI`, etc.) in `e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{...}))` have been erroneously set to `false` or failed to activate properly due to miscellaneous factors. Ensure these configuration particulars are accurately configured so that the pertinent request and response data can be precisely logged.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "overview", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I old logger middleware in echo?\n\nAssistant: To old logger middleware in echo, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne.Use(middleware.Logger())\n``` \n_Sample output_\n```json\n{\"time\":\"2017-01-12T08:58:07.372015644-08:00\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/\",\"status\":200,\"error\":\"\",\"latency\":14743,\"latency_human\":\"14.743µs\",\"bytes_in\":0,\"bytes_out\":2}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n  Format: \"method=${method}, uri=${uri}, status=${status}\\n\",\n}))\n```\nExample above uses a `Format` which logs request method and request URI.\n_Sample output_\n```text\nmethod=GET, uri=/, status=200\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\n// LoggerConfig defines the config for Logger middleware.\nLoggerConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Tags to construct the logger format.\n  //\n  // - time_unix\n  // - time_unix_milli\n  // - time_unix_micro\n  // - time_unix_nano\n  // - time_rfc3339\n  // - time_rfc3339_nano\n  // - time_custom\n  // - id (Request ID)\n  // - remote_ip\n  // - uri\n  // - host\n  // - method\n  // - path\n  // - protocol\n  // - referer\n  // - user_agent\n  // - status\n  // - error\n  // - latency (In nanoseconds)\n  // - latency_human (Human readable)\n  // - bytes_in (Bytes received)\n  // - bytes_out (Bytes sent)\n  // - header:<NAME>\n  // - query:<NAME>\n  // - form:<NAME>\n  //\n  // Example \"${remote_ip} ${status}\"\n  //\n  // Optional. Default value DefaultLoggerConfig.Format.\n  Format string `yaml:\"format\"`\n\n  // Optional. Default value DefaultLoggerConfig.CustomTimeFormat.\n  CustomTimeFormat string `yaml:\"custom_time_format\"`\n\n  // Output is a writer where logs in JSON format are written.\n  // Optional. Default value os.Stdout.\n  Output io.Writer\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```go\nDefaultLoggerConfig = LoggerConfig{\n  Skipper: DefaultSkipper,\n  Format: `{\"time\":\"${time_rfc3339_nano}\",\"id\":\"${id}\",\"remote_ip\":\"${remote_ip}\",` +\n    `\"host\":\"${host}\",\"method\":\"${method}\",\"uri\":\"${uri}\",\"user_agent\":\"${user_agent}\",` +\n    `\"status\":${status},\"error\":\"${error}\",\"latency\":${latency},\"latency_human\":\"${latency_human}\"` +\n    `,\"bytes_in\":${bytes_in},\"bytes_out\":${bytes_out}}` + \"\\n\",\n  CustomTimeFormat: \"2006-01-02 15:04:05.00000\",\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I new requestlogger middleware in echo?\n\nAssistant: To new requestlogger middleware in echo, here's what you do:\nRequestLogger middleware allows developer fully to customize what is logged and how it is logged and is more suitable for usage with 3rd party (structured logging) libraries.\nYou can quickly acquaint yourself with the values that the logger knows to extract by referring to the fields of the [`RequestLoggerConfig`](https://github.com/labstack/echo/blob/master/middleware/request_logger.go) structure below. Or click the link to view the most up-to-date details..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I examples in echo?\n\nAssistant: To examples in echo, here's what you do:\nExample for naive `fmt.Printf`\n```go\nskipper := func(c echo.Context) bool {\n\t// Skip health check endpoint\n    return c.Request().URL.Path == \"/health\"\n}\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n\tLogStatus: true,\n\tLogURI:    true,\n\tSkipper: skipper,\n\tBeforeNextFunc: func(c echo.Context) {\n\t\tc.Set(\"customValueFromContext\", 42)\n\t},\n\tLogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n\t\tvalue, _ := c.Get(\"customValueFromContext\").(int)\n\t\tfmt.Printf(\"REQUEST: uri: %v, status: %v, custom-value: %v\\n\", v.URI, v.Status, value)\n\t\treturn nil\n\t},\n}))\n```\n_Sample output_\n```text\nREQUEST: uri: /hello, status: 200, custom-value: 42\n```\nExample for slog ( [https://pkg.go.dev/log/slog](https://pkg.go.dev/log/slog))\n```go\nlogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogStatus:   true,\n    LogURI:      true,\n    LogError:    true,\n    HandleError: true, // forwards error to the global error handler, so it can decide appropriate status code\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        if v.Error == nil {\n            logger.LogAttrs(context.Background(), slog.LevelInfo, \"REQUEST\",\n                slog.String(\"uri\", v.URI),\n                slog.Int(\"status\", v.Status),\n            )\n        } else {\n            logger.LogAttrs(context.Background(), slog.LevelError, \"REQUEST_ERROR\",\n                slog.String(\"uri\", v.URI),\n                slog.Int(\"status\", v.Status),\n                slog.String(\"err\", v.Error.Error()),\n            )\n        }\n        return nil\n    },\n}))\n```\n_Sample output_\n```json\n{\"time\":\"2024-12-30T20:55:46.2399999+08:00\",\"level\":\"INFO\",\"msg\":\"REQUEST\",\"uri\":\"/hello\",\"status\":200}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I troubleshooting tips in echo?\n\nAssistant: To troubleshooting tips in echo, here's what you do:\n#### 1. Solution for \"panic: missing LogValuesFunc callback function for request logger middleware\"\nThis panic arises when the `LogValuesFunc` callback function, which is mandatory for the request logger middleware configuration, is left unset.\nTo address this, you must define a suitable function that adheres to the `LogValuesFunc` specifications and then assign it within the middleware configuration. Consider the following straightforward illustration:\n```go\nfunc logValues(c echo.Context, v middleware.RequestLoggerValues) error {\n    fmt.Printf(\"Request Method: %s, URI: %s\\n\", v.Method, v.URI)\n    return nil\n}\n\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n    LogValuesFunc: logValues,\n}))\n```\n#### 2. If Parameters in Logs Are Empty\nWhen investigating logging-related glitches, if you notice that certain parameters like `v.URI` and `v.Status` within the `LogValuesFunc` function produce empty outputs, your focus should shift to validating the relevant configuration elements. Specifically, check whether the corresponding items (such as `LogStatus`, `LogURI`, etc.) in `e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{...}))` have been erroneously set to `false` or failed to activate properly due to miscellaneous factors. Ensure these configuration particulars are accurately configured so that the pertinent request and response data can be precisely logged..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Logger Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage of Old Logger middleware**:\n\n```yaml\ne.Use(middleware.Logger())\n```\n\nThis snippet shows you how to usage of old logger middleware, which is an important aspect of logger middleware.\n\n**Sample output of Old Logger middleware**:\n\n```yaml\n{\"time\":\"2017-01-12T08:58:07.372015644-08:00\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/\",\"status\":200,\"error\":\"\",\"latency\":14743,\"latency_human\":\"14.743µs\",\"bytes_in\":0,\"bytes_out\":2}\n```\n\nThis snippet shows you how to sample output of old logger middleware, which is an important aspect of logger middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n  Format: \"method=${method}, uri=${uri}, status=${status}\\n\",\n}))\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of logger middleware.\n\n**Sample output of Custom Configuration**:\n\n```yaml\nmethod=GET, uri=/, status=200\n```\n\nThis snippet shows you how to sample output of custom configuration, which is an important aspect of logger middleware.\n\n**LoggerConfig structure**:\n\n```yaml\n// LoggerConfig defines the config for Logger middleware.\nLoggerConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Tags to construct the logger format.\n  //\n  // - time_unix\n  // - time_unix_milli\n  // - time_unix_micro\n  // - time_unix_nano\n  // - time_rfc3339\n  // - time_rfc3339_nano\n  // - time_custom\n  // - id (Request ID)\n  // - remote_ip\n  // - uri\n  // - host\n  // - method\n  // - path\n  // - protocol\n  // - referer\n  // - user_agent\n  // - status\n  // - error\n  // - latency (In nanoseconds)\n  // - latency_human (Human readable)\n  // - bytes_in (Bytes received)\n  // - bytes_out (Bytes sent)\n  // - header:<NAME>\n  // - query:<NAME>\n  // - form:<NAME>\n  //\n  // Example \"${remote_ip} ${status}\"\n  //\n  // Optional. Default value DefaultLoggerConfig.Format.\n  Format string `yaml:\"format\"`\n\n  // Optional. Default value DefaultLoggerConfig.CustomTimeFormat.\n  CustomTimeFormat string `yaml:\"custom_time_format\"`\n\n  // Output is a writer where logs in JSON format are written.\n  // Optional. Default value os.Stdout.\n  Output io.Writer\n}\n```\n\nThis snippet shows you how to loggerconfig structure, which is an important aspect of logger middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "code_examples", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Logger Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDefine a suitable function for LogValuesFunc to avoid panic.\n\nEnsure configuration parameters like LogStatus and LogURI are set to true to avoid empty logs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/logger", "title": "Logger Middleware", "description": "Logger middleware logs the information about each HTTP request.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:25:40", "type": "best_practices", "page_metadata": {"language": "en", "docsearch:language": "en", "docusaurus_version": "current", "title": "Logger | Echo", "description": "Logger middleware", "og:description": "Logger middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Logger middleware", "ogUrl": "https://echo.labstack.com/docs/middleware/logger", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/logger", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:title": "Logger | Echo", "ogTitle": "Logger | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "scrapeId": "20d068a6-6fd6-483c-bd8d-8e6d8aa96169", "sourceURL": "https://echo.labstack.com/docs/middleware/logger", "url": "https://echo.labstack.com/docs/middleware/logger", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Method Override Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Method Override Middleware in echo.\n\n# Method Override Middleware\n\nMethod override middleware checks for the overridden method from the request and uses it instead of the original method.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Pre(middleware.MethodOverride())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Pre(middleware.MethodOverrideWithConfig(middleware.MethodOverrideConfig{\n  Getter: middleware.MethodFromForm(\"_method\"),\n}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nMethodOverrideConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Getter is a function that gets overridden method from the request.\n  // Optional. Default values MethodFromHeader(echo.HeaderXHTTPMethodOverride).\n  Getter MethodOverrideGetter\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultMethodOverrideConfig = MethodOverrideConfig{\n  Skipper: DefaultSkipper,\n  Getter:  MethodFromHeader(echo.HeaderXHTTPMethodOverride),\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "overview", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Pre(middleware.MethodOverride())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "section_detail", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Pre(middleware.MethodOverrideWithConfig(middleware.MethodOverrideConfig{\n  Getter: middleware.MethodFromForm(\"_method\"),\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "section_detail", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nMethodOverrideConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Getter is a function that gets overridden method from the request.\n  // Optional. Default values MethodFromHeader(echo.HeaderXHTTPMethodOverride).\n  Getter MethodOverrideGetter\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "section_detail", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultMethodOverrideConfig = MethodOverrideConfig{\n  Skipper: DefaultSkipper,\n  Getter:  MethodFromHeader(echo.HeaderXHTTPMethodOverride),\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "section_detail", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Method Override Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\ne.Pre(middleware.MethodOverride())\n```\n\nThis snippet shows you how to usage example, which is an important aspect of method override middleware.\n\n**Custom Configuration Example**:\n\n```yaml\ne := echo.New()\ne.Pre(middleware.MethodOverrideWithConfig(middleware.MethodOverrideConfig{\n  Getter: middleware.MethodFromForm(\"_method\"),\n}))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of method override middleware.\n\n**Configuration Struct**:\n\n```yaml\nMethodOverrideConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Getter is a function that gets overridden method from the request.\n  // Optional. Default values MethodFromHeader(echo.HeaderXHTTPMethodOverride).\n  Getter MethodOverrideGetter\n}\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of method override middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "code_examples", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Method Override Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor security reasons, only POST method can be overridden.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/method-override", "title": "Method Override Middleware", "description": "Method override middleware checks for the overridden method from the request and uses it instead of the original method.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:50", "type": "best_practices", "page_metadata": {"ogTitle": "Method Override | Echo", "docsearch:version": "current", "og:url": "https://echo.labstack.com/docs/middleware/method-override", "ogUrl": "https://echo.labstack.com/docs/middleware/method-override", "ogDescription": "Method override middleware", "docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "title": "Method Override | Echo", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Method Override | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "description": "Method override middleware", "og:description": "Method override middleware", "docusaurus_tag": "docs-default-current", "scrapeId": "00e19e61-1df6-4528-8ca5-1184c87aa180", "sourceURL": "https://echo.labstack.com/docs/middleware/method-override", "url": "https://echo.labstack.com/docs/middleware/method-override", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Proxy Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Proxy Middleware in echo.\n\n# Proxy Middleware\n\nProxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ne.Use(middleware.Proxy(middleware.NewRoundRobinBalancer([]*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n})))\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.ProxyWithConfig(middleware.ProxyConfig{}))\n``` \n\n### Configuration\n\n```go\n// ProxyConfig defines the config for Proxy middleware.\n  ProxyConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Balancer defines a load balancing technique.\n    // Required.\n    Balancer ProxyBalancer\n\n    // Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rewrite map[string]string\n\n    // RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRewrite map[*regexp.Regexp]string\n\n    // Context key to store selected ProxyTarget into context.\n    // Optional. Default value \"target\".\n    ContextKey string\n\n    // To customize the transport to remote.\n    // Examples: If custom TLS certificates are required.\n    Transport http.RoundTripper\n\n    // ModifyResponse defines function to modify response from ProxyTarget.\n    ModifyResponse func(*http.Response) error\n  }\n``` \n\n### Default Configuration\n\n| Name | Value |\n| --- | --- |\n| Skipper | DefaultSkipper |\n| ContextKey | `target` |\n\n## Regex-based Rules\n\nFor advanced rewriting of proxy requests rules may also be defined using\nregular expression. Normal capture groups can be defined using `()` and referenced by index ( `$1`, `$2`, ...) for the rewritten path.\n\n`RegexRules` and normal `Rules` can be combined.\n\n```go\ne.Use(ProxyWithConfig(ProxyConfig{\n    Balancer: rrb,\n    Rewrite: map[string]string{\n      \"^/v1/*\":     \"/v2/$1\",\n    },\n    RegexRewrite: map[*regexp.Regexp]string{\n      regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n      regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n    },\n}))\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "overview", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ne.Use(middleware.Proxy(middleware.NewRoundRobinBalancer([]*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n})))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.ProxyWithConfig(middleware.ProxyConfig{}))\n``` \n\n### Configuration\n\n```go\n// ProxyConfig defines the config for Proxy middleware.\n  ProxyConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Balancer defines a load balancing technique.\n    // Required.\n    Balancer ProxyBalancer\n\n    // Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rewrite map[string]string\n\n    // RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRewrite map[*regexp.Regexp]string\n\n    // Context key to store selected ProxyTarget into context.\n    // Optional. Default value \"target\".\n    ContextKey string\n\n    // To customize the transport to remote.\n    // Examples: If custom TLS certificates are required.\n    Transport http.RoundTripper\n\n    // ModifyResponse defines function to modify response from ProxyTarget.\n    ModifyResponse func(*http.Response) error\n  }\n``` \n\n### Default Configuration\n\n| Name | Value |\n| --- | --- |\n| Skipper | DefaultSkipper |\n| ContextKey | `target` |.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I regex-based rules in echo?\n\nAssistant: To regex-based rules in echo, here's what you do:\nFor advanced rewriting of proxy requests rules may also be defined using\nregular expression. Normal capture groups can be defined using `()` and referenced by index ( `$1`, `$2`, ...) for the rewritten path.\n\n`RegexRules` and normal `Rules` can be combined.\n\n```go\ne.Use(ProxyWithConfig(ProxyConfig{\n    Balancer: rrb,\n    Rewrite: map[string]string{\n      \"^/v1/*\":     \"/v2/$1\",\n    },\n    RegexRewrite: map[*regexp.Regexp]string{\n      regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n      regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n    },\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Proxy Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage**:\n\n```yaml\n```go\nurl1, err := url.Parse(\"http://localhost:8081\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\nurl2, err := url.Parse(\"http://localhost:8082\")\nif err != nil {\n  e.Logger.Fatal(err)\n}\ne.Use(middleware.Proxy(middleware.NewRoundRobinBalancer([]*middleware.ProxyTarget{\n  {\n    URL: url1,\n  },\n  {\n    URL: url2,\n  },\n})))\n```\n```\n\nThis snippet shows you how to usage, which is an important aspect of proxy middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.ProxyWithConfig(middleware.ProxyConfig{}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of proxy middleware.\n\n**ProxyConfig Structure**:\n\n```yaml\n```go\n// ProxyConfig defines the config for Proxy middleware.\n  ProxyConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Balancer defines a load balancing technique.\n    // Required.\n    Balancer ProxyBalancer\n\n    // Rewrite defines URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rewrite map[string]string\n\n    // RegexRewrite defines rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRewrite map[*regexp.Regexp]string\n\n    // Context key to store selected ProxyTarget into context.\n    // Optional. Default value \"target\".\n    ContextKey string\n\n    // To customize the transport to remote.\n    // Examples: If custom TLS certificates are required.\n    Transport http.RoundTripper\n\n    // ModifyResponse defines function to modify response from ProxyTarget.\n    ModifyResponse func(*http.Response) error\n  }\n```\n```\n\nThis snippet shows you how to proxyconfig structure, which is an important aspect of proxy middleware.\n\n**Regex-based Rules Example**:\n\n```yaml\n```go\ne.Use(ProxyWithConfig(ProxyConfig{\n    Balancer: rrb,\n    Rewrite: map[string]string{\n      \"^/v1/*\":     \"/v2/$1\",\n    },\n    RegexRewrite: map[*regexp.Regexp]string{\n      regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n      regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n    },\n}))\n```\n```\n\nThis snippet shows you how to regex-based rules example, which is an important aspect of proxy middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "code_examples", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Proxy Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Proxy middleware to forward requests to upstream servers efficiently.\n\nConfigure load balancing techniques to distribute requests across multiple servers.\n\nUtilize URL path rewrite rules for better request handling and routing.\n\nCombine normal rules with regex-based rules for advanced request rewriting.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/proxy", "title": "Proxy Middleware", "description": "Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing technique.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:38:28", "type": "best_practices", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Proxy | Echo", "docsearch:language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/proxy", "og:description": "Reverse proxy middleware", "og:url": "https://echo.labstack.com/docs/middleware/proxy", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Reverse proxy middleware", "title": "Proxy | Echo", "docsearch:version": "current", "language": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Reverse proxy middleware", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "ogTitle": "Proxy | Echo", "docusaurus_tag": "docs-default-current", "scrapeId": "2ccdd3b1-f79e-478b-a78c-fc93388e385a", "sourceURL": "https://echo.labstack.com/docs/middleware/proxy", "url": "https://echo.labstack.com/docs/middleware/proxy", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Rate Limiter Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Rate Limiter Middleware in echo.\n\n# Rate Limiter Middleware\n\nRateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.Here's a quick rundown of what this is about:\n\n## Usage\n\nTo add a rate limit to your application simply add the `RateLimiter` middleware.\nThe example below will limit the application to 20 requests/sec using the default in-memory store:\n\n```codeBlockLines_e6Vv\ne.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(20))))\n```\n\ninfo\n\nIf the provided rate is a float number, Burst will be treated as the rounded down value of the rate.\n\n## Custom Configuration\n\n```codeBlockLines_e6Vv\nconfig := middleware.RateLimiterConfig{\n    Skipper: middleware.DefaultSkipper,\n    Store: middleware.NewRateLimiterMemoryStoreWithConfig(\n        middleware.RateLimiterMemoryStoreConfig{Rate: rate.Limit(10), Burst: 30, ExpiresIn: 3 * time.Minute},\n    ),\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return context.JSON(http.StatusForbidden, nil)\n    },\n    DenyHandler: func(context echo.Context, identifier string,err error) error {\n        return context.JSON(http.StatusTooManyRequests, nil)\n    },\n}\n\ne.Use(middleware.RateLimiterWithConfig(config))\n```\n\n## Errors\n\n```codeBlockLines_e6Vv\nvar (\n\t// ErrRateLimitExceeded denotes an error raised when rate limit is exceeded\n\tErrRateLimitExceeded = echo.NewHTTPError(http.StatusTooManyRequests, \"rate limit exceeded\")\n\t// ErrExtractorError denotes an error raised when extractor function is unsuccessful\n\tErrExtractorError = echo.NewHTTPError(http.StatusForbidden, \"error while extracting identifier\")\n)\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\ntype RateLimiterConfig struct {\n    Skipper    Skipper\n    BeforeFunc BeforeFunc\n    // IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n    IdentifierExtractor Extractor\n    // Store defines a store for the rate limiter\n    Store RateLimiterStore\n    // ErrorHandler provides a handler to be called when IdentifierExtractor returns a non-nil error\n    ErrorHandler func(context echo.Context, err error) error\n    // DenyHandler provides a handler to be called when RateLimiter denies access\n    DenyHandler func(context echo.Context, identifier string, err error) error\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\n// DefaultRateLimiterConfig defines default values for RateLimiterConfig\nvar DefaultRateLimiterConfig = RateLimiterConfig{\n\tSkipper: DefaultSkipper,\n\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\tid := ctx.RealIP()\n\t\treturn id, nil\n\t},\n\tErrorHandler: func(context echo.Context, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrExtractorError.Code,\n\t\t\tMessage:  ErrExtractorError.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n\tDenyHandler: func(context echo.Context, identifier string, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrRateLimitExceeded.Code,\n\t\t\tMessage:  ErrRateLimitExceeded.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "overview", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\nTo add a rate limit to your application simply add the `RateLimiter` middleware.\nThe example below will limit the application to 20 requests/sec using the default in-memory store:\n\n```codeBlockLines_e6Vv\ne.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(20))))\n```\n\ninfo\n\nIf the provided rate is a float number, Burst will be treated as the rounded down value of the rate..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nconfig := middleware.RateLimiterConfig{\n    Skipper: middleware.DefaultSkipper,\n    Store: middleware.NewRateLimiterMemoryStoreWithConfig(\n        middleware.RateLimiterMemoryStoreConfig{Rate: rate.Limit(10), Burst: 30, ExpiresIn: 3 * time.Minute},\n    ),\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return context.JSON(http.StatusForbidden, nil)\n    },\n    DenyHandler: func(context echo.Context, identifier string,err error) error {\n        return context.JSON(http.StatusTooManyRequests, nil)\n    },\n}\n\ne.Use(middleware.RateLimiterWithConfig(config))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I errors in echo?\n\nAssistant: To errors in echo, here's what you do:\n```codeBlockLines_e6Vv\nvar (\n\t// ErrRateLimitExceeded denotes an error raised when rate limit is exceeded\n\tErrRateLimitExceeded = echo.NewHTTPError(http.StatusTooManyRequests, \"rate limit exceeded\")\n\t// ErrExtractorError denotes an error raised when extractor function is unsuccessful\n\tErrExtractorError = echo.NewHTTPError(http.StatusForbidden, \"error while extracting identifier\")\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\ntype RateLimiterConfig struct {\n    Skipper    Skipper\n    BeforeFunc BeforeFunc\n    // IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n    IdentifierExtractor Extractor\n    // Store defines a store for the rate limiter\n    Store RateLimiterStore\n    // ErrorHandler provides a handler to be called when IdentifierExtractor returns a non-nil error\n    ErrorHandler func(context echo.Context, err error) error\n    // DenyHandler provides a handler to be called when RateLimiter denies access\n    DenyHandler func(context echo.Context, identifier string, err error) error\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\n// DefaultRateLimiterConfig defines default values for RateLimiterConfig\nvar DefaultRateLimiterConfig = RateLimiterConfig{\n\tSkipper: DefaultSkipper,\n\tIdentifierExtractor: func(ctx echo.Context) (string, error) {\n\t\tid := ctx.RealIP()\n\t\treturn id, nil\n\t},\n\tErrorHandler: func(context echo.Context, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrExtractorError.Code,\n\t\t\tMessage:  ErrExtractorError.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n\tDenyHandler: func(context echo.Context, identifier string, err error) error {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:     ErrRateLimitExceeded.Code,\n\t\t\tMessage:  ErrRateLimitExceeded.Message,\n\t\t\tInternal: err,\n\t\t}\n\t},\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Rate Limiter Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\ne.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(20))))\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of rate limiter middleware.\n\n**Custom Configuration Example**:\n\n```yaml\nconfig := middleware.RateLimiterConfig{\n    Skipper: middleware.DefaultSkipper,\n    Store: middleware.NewRateLimiterMemoryStoreWithConfig(\n        middleware.RateLimiterMemoryStoreConfig{Rate: rate.Limit(10), Burst: 30, ExpiresIn: 3 * time.Minute},\n    ),\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return context.JSON(http.StatusForbidden, nil)\n    },\n    DenyHandler: func(context echo.Context, identifier string,err error) error {\n        return context.JSON(http.StatusTooManyRequests, nil)\n    },\n}\ne.Use(middleware.RateLimiterWithConfig(config))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of rate limiter middleware.\n\n**Error Definitions**:\n\n```yaml\nvar (\n\t// ErrRateLimitExceeded denotes an error raised when rate limit is exceeded\n\tErrRateLimitExceeded = echo.NewHTTPError(http.StatusTooManyRequests, \"rate limit exceeded\")\n\t// ErrExtractorError denotes an error raised when extractor function is unsuccessful\n\tErrExtractorError = echo.NewHTTPError(http.StatusForbidden, \"error while extracting identifier\")\n)\n```\n\nThis snippet shows you how to error definitions, which is an important aspect of rate limiter middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "code_examples", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Rate Limiter Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you need to implement your own store, be sure to implement the RateLimiterStore interface and pass it to RateLimiterConfig and you're good to go!\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rate-limiter", "title": "Rate Limiter Middleware", "description": "RateLimiter provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:39:04", "type": "best_practices", "page_metadata": {"ogLocale": "en", "og:title": "Rate Limiter | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "description": "Rate limiter middleware", "language": "en", "og:locale": "en", "og:description": "Rate limiter middleware", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "title": "Rate Limiter | Echo", "ogDescription": "Rate limiter middleware", "docusaurus_locale": "en", "ogTitle": "Rate Limiter | Echo", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogUrl": "https://echo.labstack.com/docs/middleware/rate-limiter", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://echo.labstack.com/docs/middleware/rate-limiter", "generator": "Docusaurus v3.6.3", "scrapeId": "6dae5598-8a6f-4c5a-aff8-53bfec32d863", "sourceURL": "https://echo.labstack.com/docs/middleware/rate-limiter", "url": "https://echo.labstack.com/docs/middleware/rate-limiter", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Recover Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Recover Middleware in echo.\n\n# Recover Middleware\n\nRecover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.Recover())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{\n  StackSize: 1 << 10, // 1 KB\n  LogLevel:  log.ERROR,\n}))\n```\n\nExample above uses a `StackSize` of 1 KB, `LogLevel` of error and default values for `DisableStackAll` and `DisablePrintStack.\n\n## Configuration\n\n```codeBlockLines_e6Vv\n// LogErrorFunc defines a function for custom logging in the middleware.\nLogErrorFunc func(c echo.Context, err error, stack []byte) error\n\nRecoverConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Size of the stack to be printed.\n  // Optional. Default value 4KB.\n  StackSize int `yaml:\"stack_size\"`\n\n  // DisableStackAll disables formatting stack traces of all other goroutines\n  // into buffer after the trace for the current goroutine.\n  // Optional. Default value false.\n  DisableStackAll bool `yaml:\"disable_stack_all\"`\n\n  // DisablePrintStack disables printing stack trace.\n  // Optional. Default value as false.\n  DisablePrintStack bool `yaml:\"disable_print_stack\"`\n\n  // LogLevel is log level to printing stack trace.\n  // Optional. Default value 0 (Print).\n  LogLevel log.Lvl\n\n  // LogErrorFunc defines a function for custom logging in the middleware.\n  // If it's set you don't need to provide LogLevel for config.\n  LogErrorFunc LogErrorFunc\n\n  // DisableErrorHandler disables the call to centralized HTTPErrorHandler.\n  // The recovered error is then passed back to upstream middleware, instead of swallowing the error.\n  // Optional. Default value false.\n  DisableErrorHandler bool `yaml:\"disable_error_handler\"`\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultRecoverConfig = RecoverConfig{\n  Skipper:             DefaultSkipper,\n  StackSize:           4 << 10, // 4 KB\n  DisableStackAll:     false,\n  DisablePrintStack:   false,\n  LogLevel:            0,\n  LogErrorFunc:        nil,\n  DisableErrorHandler: false,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "overview", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.Recover())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{\n  StackSize: 1 << 10, // 1 KB\n  LogLevel:  log.ERROR,\n}))\n```\n\nExample above uses a `StackSize` of 1 KB, `LogLevel` of error and default values for `DisableStackAll` and `DisablePrintStack..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\n// LogErrorFunc defines a function for custom logging in the middleware.\nLogErrorFunc func(c echo.Context, err error, stack []byte) error\n\nRecoverConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Size of the stack to be printed.\n  // Optional. Default value 4KB.\n  StackSize int `yaml:\"stack_size\"`\n\n  // DisableStackAll disables formatting stack traces of all other goroutines\n  // into buffer after the trace for the current goroutine.\n  // Optional. Default value false.\n  DisableStackAll bool `yaml:\"disable_stack_all\"`\n\n  // DisablePrintStack disables printing stack trace.\n  // Optional. Default value as false.\n  DisablePrintStack bool `yaml:\"disable_print_stack\"`\n\n  // LogLevel is log level to printing stack trace.\n  // Optional. Default value 0 (Print).\n  LogLevel log.Lvl\n\n  // LogErrorFunc defines a function for custom logging in the middleware.\n  // If it's set you don't need to provide LogLevel for config.\n  LogErrorFunc LogErrorFunc\n\n  // DisableErrorHandler disables the call to centralized HTTPErrorHandler.\n  // The recovered error is then passed back to upstream middleware, instead of swallowing the error.\n  // Optional. Default value false.\n  DisableErrorHandler bool `yaml:\"disable_error_handler\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultRecoverConfig = RecoverConfig{\n  Skipper:             DefaultSkipper,\n  StackSize:           4 << 10, // 4 KB\n  DisableStackAll:     false,\n  DisablePrintStack:   false,\n  LogLevel:            0,\n  LogErrorFunc:        nil,\n  DisableErrorHandler: false,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Recover Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\ne.Use(middleware.Recover())\n```\n\nThis snippet shows you how to usage example, which is an important aspect of recover middleware.\n\n**Custom Configuration Example**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{\n  StackSize: 1 << 10, // 1 KB\n  LogLevel:  log.ERROR,\n}))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of recover middleware.\n\n**Configuration Structure**:\n\n```yaml\n// LogErrorFunc defines a function for custom logging in the middleware.\nLogErrorFunc func(c echo.Context, err error, stack []byte) error\n\nRecoverConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Size of the stack to be printed.\n  // Optional. Default value 4KB.\n  StackSize int `yaml:\"stack_size\"`\n\n  // DisableStackAll disables formatting stack traces of all other goroutines\n  // into buffer after the trace for the current goroutine.\n  // Optional. Default value false.\n  DisableStackAll bool `yaml:\"disable_stack_all\"`\n\n  // DisablePrintStack disables printing stack trace.\n  // Optional. Default value as false.\n  DisablePrintStack bool `yaml:\"disable_print_stack\"`\n\n  // LogLevel is log level to printing stack trace.\n  // Optional. Default value 0 (Print).\n  LogLevel log.Lvl\n\n  // LogErrorFunc defines a function for custom logging in the middleware.\n  // If it's set you don't need to provide LogLevel for config.\n  LogErrorFunc LogErrorFunc\n\n  // DisableErrorHandler disables the call to centralized HTTPErrorHandler.\n  // The recovered error is then passed back to upstream middleware, instead of swallowing the error.\n  // Optional. Default value false.\n  DisableErrorHandler bool `yaml:\"disable_error_handler\"`\n}\n```\n\nThis snippet shows you how to configuration structure, which is an important aspect of recover middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "code_examples", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Recover Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Recover middleware to handle panics gracefully in your application.\n\nCustomize the Recover middleware configuration to suit your application's logging and error handling needs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/recover", "title": "Recover Middleware", "description": "Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:51", "type": "best_practices", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "title": "Recover | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/middleware/recover", "docsearch:language": "en", "og:description": "Recover middleware", "docusaurus_version": "current", "ogDescription": "Recover middleware", "twitter:card": "summary_large_image", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "language": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/recover", "docusaurus_locale": "en", "ogTitle": "Recover | Echo", "og:title": "Recover | Echo", "description": "Recover middleware", "generator": "Docusaurus v3.6.3", "scrapeId": "58f84782-a408-4e6e-8b30-a3179f0d9683", "sourceURL": "https://echo.labstack.com/docs/middleware/recover", "url": "https://echo.labstack.com/docs/middleware/recover", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Redirect Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Redirect Middleware in echo.\n\n# Redirect Middleware\n\nThis page covers various redirect middleware options available in Echo framework.Here's a quick rundown of what this is about:\n\n## HTTPS Redirect\n\nHTTPS redirect middleware redirects http requests to https.\nFor example, http://labstack.com will be redirected to https://labstack.com.\n\n## Usage\n\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSRedirect())\n```\n\n## HTTPS WWW Redirect\n\nHTTPS WWW redirect redirects http requests to www https.\nFor example, http://labstack.com will be redirected to https://www.labstack.com.\n\n## Usage\n\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSWWWRedirect())\n```\n\n## HTTPS NonWWW Redirect\n\nHTTPS NonWWW redirect redirects http requests to https non www.\nFor example, http://www.labstack.com will be redirected to https://labstack.com.\n\n## Usage\n\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSNonWWWRedirect())\n```\n\n## WWW Redirect\n\nWWW redirect redirects non www requests to www.\nFor example, http://labstack.com will be redirected to http://www.labstack.com.\n\n## Usage\n\n```go\ne := echo.New()\ne.Pre(middleware.WWWRedirect())\n```\n\n## NonWWW Redirect\n\nNonWWW redirect redirects www requests to non www.\nFor example, http://www.labstack.com will be redirected to http://labstack.com.\n\n## Usage\n\n```go\ne := echo.New()\ne.Pre(middleware.NonWWWRedirect())\n```\n\n## Custom Configuration\n\n### Usage\n```go\ne := echo.New()\ne.Use(middleware.HTTPSRedirectWithConfig(middleware.RedirectConfig{\n  Code: http.StatusTemporaryRedirect,\n}))\n```\nExample above will redirect the request HTTP to HTTPS with status code `307 - StatusTemporaryRedirect`.\n\n## Configuration\n\n```go\nRedirectConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional. Default value http.StatusMovedPermanently.\n  Code int `json:\"code\"`\n}\n```\n\n## Default Configuration*\n\n```go\nDefaultRedirectConfig = RedirectConfig{\n  Skipper: DefaultSkipper,\n  Code:    http.StatusMovedPermanently,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "overview", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I https redirect in echo?\n\nAssistant: To https redirect in echo, here's what you do:\nHTTPS redirect middleware redirects http requests to https.\nFor example, http://labstack.com will be redirected to https://labstack.com..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSRedirect())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I https www redirect in echo?\n\nAssistant: To https www redirect in echo, here's what you do:\nHTTPS WWW redirect redirects http requests to www https.\nFor example, http://labstack.com will be redirected to https://www.labstack.com..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSWWWRedirect())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I https nonwww redirect in echo?\n\nAssistant: To https nonwww redirect in echo, here's what you do:\nHTTPS NonWWW redirect redirects http requests to https non www.\nFor example, http://www.labstack.com will be redirected to https://labstack.com..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSNonWWWRedirect())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I www redirect in echo?\n\nAssistant: To www redirect in echo, here's what you do:\nWWW redirect redirects non www requests to www.\nFor example, http://labstack.com will be redirected to http://www.labstack.com..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Pre(middleware.WWWRedirect())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I nonwww redirect in echo?\n\nAssistant: To nonwww redirect in echo, here's what you do:\nNonWWW redirect redirects www requests to non www.\nFor example, http://www.labstack.com will be redirected to http://labstack.com..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Pre(middleware.NonWWWRedirect())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n```go\ne := echo.New()\ne.Use(middleware.HTTPSRedirectWithConfig(middleware.RedirectConfig{\n  Code: http.StatusTemporaryRedirect,\n}))\n```\nExample above will redirect the request HTTP to HTTPS with status code `307 - StatusTemporaryRedirect`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nRedirectConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional. Default value http.StatusMovedPermanently.\n  Code int `json:\"code\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration* in echo?\n\nAssistant: To default configuration* in echo, here's what you do:\n```go\nDefaultRedirectConfig = RedirectConfig{\n  Skipper: DefaultSkipper,\n  Code:    http.StatusMovedPermanently,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Redirect Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTTPS Redirect Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSRedirect())\n```\n```\n\nThis snippet shows you how to https redirect usage, which is an important aspect of redirect middleware.\n\n**HTTPS WWW Redirect Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSWWWRedirect())\n```\n```\n\nThis snippet shows you how to https www redirect usage, which is an important aspect of redirect middleware.\n\n**HTTPS NonWWW Redirect Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Pre(middleware.HTTPSNonWWWRedirect())\n```\n```\n\nThis snippet shows you how to https nonwww redirect usage, which is an important aspect of redirect middleware.\n\n**WWW Redirect Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Pre(middleware.WWWRedirect())\n```\n```\n\nThis snippet shows you how to www redirect usage, which is an important aspect of redirect middleware.\n\n**NonWWW Redirect Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Pre(middleware.NonWWWRedirect())\n```\n```\n\nThis snippet shows you how to nonwww redirect usage, which is an important aspect of redirect middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.HTTPSRedirectWithConfig(middleware.RedirectConfig{\n  Code: http.StatusTemporaryRedirect,\n}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of redirect middleware.\n\n**Configuration Struct**:\n\n```yaml\n```go\nRedirectConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional. Default value http.StatusMovedPermanently.\n  Code int `json:\"code\"`\n}\n```\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of redirect middleware.\n\n**Default Configuration**:\n\n```yaml\n```go\nDefaultRedirectConfig = RedirectConfig{\n  Skipper: DefaultSkipper,\n  Code:    http.StatusMovedPermanently,\n}\n```\n```\n\nThis snippet shows you how to default configuration, which is an important aspect of redirect middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "code_examples", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Redirect Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse HTTPS redirects to ensure secure connections.\n\nConsider using WWW or NonWWW redirects based on your domain preference.\n\nCustomize redirect configurations to suit your application's needs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/redirect", "title": "Redirect Middleware", "description": "This page covers various redirect middleware options available in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:42:18", "type": "best_practices", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/redirect", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Redirect | Echo", "docusaurus_version": "current", "docusaurus_locale": "en", "og:locale": "en", "og:title": "Redirect | Echo", "description": "Redirect middleware", "generator": "Docusaurus v3.6.3", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Redirect middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "language": "en", "og:description": "Redirect middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/redirect", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Redirect | Echo", "scrapeId": "1b7dba4e-27a6-4d99-98b7-c4e77bcd0e5c", "sourceURL": "https://echo.labstack.com/docs/middleware/redirect", "url": "https://echo.labstack.com/docs/middleware/redirect", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Request ID Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Request ID Middleware in echo.\n\n# Request ID Middleware\n\nRequest ID middleware generates a unique id for a request.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.RequestID())\n```  \n_Example_  \n```codeBlockLines_e6Vv\ne := echo.New()\n\ne.Use(middleware.RequestID())\n\ne.GET(\"/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, c.Response().Header().Get(echo.HeaderXRequestID))\n})\ne.Logger.Fatal(e.Start(\":1323\"))\n```\n\n## Custom Configuration\n\n### Usage  \n```codeBlockLines_e6Vv\ne.Use(middleware.RequestIDWithConfig(middleware.RequestIDConfig{\n  Generator: func() string {\n    return customGenerator()\n  },\n}))\n```\n\n## Configuration\n\n```codeBlockLines_e6Vv\nRequestIDConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Generator defines a function to generate an ID.\n    // Optional. Default value random.String(32).\n    Generator func() string\n\n    // RequestIDHandler defines a function which is executed for a request id.\n    RequestIDHandler func(echo.Context, string)\n\n    // TargetHeader defines what header to look for to populate the id\n    TargetHeader string\n}\n```  \n### Default Configuration  \n```codeBlockLines_e6Vv\nDefaultRequestIDConfig = RequestIDConfig{\n  Skipper:   DefaultSkipper,\n  Generator: generator,\n  TargetHeader: echo.HeaderXRequestID,\n}\n```\n\n## Set ID\n\nYou can set the id from the requester with the `X-Request-ID`-Header  \n### Request  \n```codeBlockLines_e6Vv\ncurl -H \"X-Request-ID: 3\" --compressed -v \"http://localhost:1323/?my=param\"\n```  \n### Log  \n```codeBlockLines_e6Vv\n{\"time\":\"2017-11-13T20:26:28.6438003+01:00\",\"id\":\"3\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/?my=param\",\"my\":\"param\",\"status\":200, \"latency\":0,\"latency_human\":\"0s\",\"bytes_in\":0,\"bytes_out\":13}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.RequestID())\n```  \n_Example_  \n```codeBlockLines_e6Vv\ne := echo.New()\n\ne.Use(middleware.RequestID())\n\ne.GET(\"/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, c.Response().Header().Get(echo.HeaderXRequestID))\n})\ne.Logger.Fatal(e.Start(\":1323\"))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage  \n```codeBlockLines_e6Vv\ne.Use(middleware.RequestIDWithConfig(middleware.RequestIDConfig{\n  Generator: func() string {\n    return customGenerator()\n  },\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nRequestIDConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Generator defines a function to generate an ID.\n    // Optional. Default value random.String(32).\n    Generator func() string\n\n    // RequestIDHandler defines a function which is executed for a request id.\n    RequestIDHandler func(echo.Context, string)\n\n    // TargetHeader defines what header to look for to populate the id\n    TargetHeader string\n}\n```  \n### Default Configuration  \n```codeBlockLines_e6Vv\nDefaultRequestIDConfig = RequestIDConfig{\n  Skipper:   DefaultSkipper,\n  Generator: generator,\n  TargetHeader: echo.HeaderXRequestID,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I set id in echo?\n\nAssistant: To set id in echo, here's what you do:\nYou can set the id from the requester with the `X-Request-ID`-Header  \n### Request  \n```codeBlockLines_e6Vv\ncurl -H \"X-Request-ID: 3\" --compressed -v \"http://localhost:1323/?my=param\"\n```  \n### Log  \n```codeBlockLines_e6Vv\n{\"time\":\"2017-11-13T20:26:28.6438003+01:00\",\"id\":\"3\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/?my=param\",\"my\":\"param\",\"status\":200, \"latency\":0,\"latency_human\":\"0s\",\"bytes_in\":0,\"bytes_out\":13}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Request ID Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\n```codeBlockLines_e6Vv\ne.Use(middleware.RequestID())\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of request id middleware.\n\n**Example with Echo**:\n\n```yaml\n```codeBlockLines_e6Vv\ne := echo.New()\n\ne.Use(middleware.RequestID())\n\ne.GET(\"/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, c.Response().Header().Get(echo.HeaderXRequestID))\n})\ne.Logger.Fatal(e.Start(\":1323\"))\n```\n```\n\nThis snippet shows you how to example with echo, which is an important aspect of request id middleware.\n\n**Custom Configuration Example**:\n\n```yaml\n```codeBlockLines_e6Vv\ne.Use(middleware.RequestIDWithConfig(middleware.RequestIDConfig{\n  Generator: func() string {\n    return customGenerator()\n  },\n}))\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of request id middleware.\n\n**Curl Request Example**:\n\n```yaml\n```codeBlockLines_e6Vv\ncurl -H \"X-Request-ID: 3\" --compressed -v \"http://localhost:1323/?my=param\"\n```\n```\n\nThis snippet shows you how to curl request example, which is an important aspect of request id middleware.\n\n**Log Example**:\n\n```yaml\n```codeBlockLines_e6Vv\n{\"time\":\"2017-11-13T20:26:28.6438003+01:00\",\"id\":\"3\",\"remote_ip\":\"::1\",\"host\":\"localhost:1323\",\"method\":\"GET\",\"uri\":\"/?my=param\",\"my\":\"param\",\"status\":200, \"latency\":0,\"latency_human\":\"0s\",\"bytes_in\":0,\"bytes_out\":13}\n```\n```\n\nThis snippet shows you how to log example, which is an important aspect of request id middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Request ID Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can set the id from the requester with the `X-Request-ID`-Header.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/request-id", "title": "Request ID Middleware", "description": "Request ID middleware generates a unique id for a request.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "title": "Request ID | Echo", "og:title": "Request ID | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Request ID middleware", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:url": "https://echo.labstack.com/docs/middleware/request-id", "og:description": "Request ID middleware", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "ogTitle": "Request ID | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/request-id", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Request ID middleware", "ogLocale": "en", "docsearch:language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "0beb30ac-77f6-4f4d-a487-c700891ede25", "sourceURL": "https://echo.labstack.com/docs/middleware/request-id", "url": "https://echo.labstack.com/docs/middleware/request-id", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Rewrite Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Rewrite Middleware in echo.\n\n# Rewrite Middleware\n\nRewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Pre(middleware.Rewrite(map[string]string{\n  \"/old\":              \"/new\",\n  \"/api/*\":            \"/$1\",\n  \"/js/*\":             \"/public/javascripts/$1\",\n  \"/users/*/orders/*\": \"/user/$1/order/$2\",\n}))\n```\n\nThe values captured in asterisk can be retrieved by index e.g. $1, $2 and so on.\nEach asterisk will be non-greedy (translated to a capture group `(.*?)`) and if using multiple asterisk a trailing `*` will match the \"rest\" of the path.\n\n**Caution**: Rewrite middleware should be registered via `Echo#Pre()` to get triggered before the router.\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Pre(middleware.RewriteWithConfig(middleware.RewriteConfig{}))\n```\n\n### Configuration\n\n```codeBlockLines_e6Vv\n// RewriteConfig defines the config for Rewrite middleware.\n  RewriteConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Rules defines the URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rules map[string]string `yaml:\"rules\"`\n\n    // RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRules map[*regexp.Regexp]string\n  }\n```\n\n**Default Configuration:**\n\n| Name | Value |\n| --- | --- |\n| Skipper | DefaultSkipper |\n\n## Regex-based Rules\n\nFor advanced rewriting of paths rules may also be defined using regular expression.\nNormal capture groups can be defined using `()` and referenced by index ( `$1`, `$2`, ...) for the rewritten path.\n\n`RegexRules` and normal `Rules` can be combined.\n\n```codeBlockLines_e6Vv\ne.Pre(RewriteWithConfig(RewriteConfig{\n  Rules: map[string]string{\n    \"^/v1/*\": \"/v2/$1\",\n  },\n  RegexRules: map[*regexp.Regexp]string{\n    regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n    regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n  },\n}))\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Pre(middleware.Rewrite(map[string]string{\n  \"/old\":              \"/new\",\n  \"/api/*\":            \"/$1\",\n  \"/js/*\":             \"/public/javascripts/$1\",\n  \"/users/*/orders/*\": \"/user/$1/order/$2\",\n}))\n```\n\nThe values captured in asterisk can be retrieved by index e.g. $1, $2 and so on.\nEach asterisk will be non-greedy (translated to a capture group `(.*?)`) and if using multiple asterisk a trailing `*` will match the \"rest\" of the path.\n\n**Caution**: Rewrite middleware should be registered via `Echo#Pre()` to get triggered before the router..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Pre(middleware.RewriteWithConfig(middleware.RewriteConfig{}))\n```\n\n### Configuration\n\n```codeBlockLines_e6Vv\n// RewriteConfig defines the config for Rewrite middleware.\n  RewriteConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Rules defines the URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rules map[string]string `yaml:\"rules\"`\n\n    // RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRules map[*regexp.Regexp]string\n  }\n```\n\n**Default Configuration:**\n\n| Name | Value |\n| --- | --- |\n| Skipper | DefaultSkipper |.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I regex-based rules in echo?\n\nAssistant: To regex-based rules in echo, here's what you do:\nFor advanced rewriting of paths rules may also be defined using regular expression.\nNormal capture groups can be defined using `()` and referenced by index ( `$1`, `$2`, ...) for the rewritten path.\n\n`RegexRules` and normal `Rules` can be combined.\n\n```codeBlockLines_e6Vv\ne.Pre(RewriteWithConfig(RewriteConfig{\n  Rules: map[string]string{\n    \"^/v1/*\": \"/v2/$1\",\n  },\n  RegexRules: map[*regexp.Regexp]string{\n    regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n    regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n  },\n}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Rewrite Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of Rewrite Middleware**:\n\n```yaml\n```codeBlockLines_e6Vv\ne.Pre(middleware.Rewrite(map[string]string{\n  \"/old\":              \"/new\",\n  \"/api/*\":            \"/$1\",\n  \"/js/*\":             \"/public/javascripts/$1\",\n  \"/users/*/orders/*\": \"/user/$1/order/$2\",\n}))\n```\n```\n\nThis snippet shows you how to basic usage of rewrite middleware, which is an important aspect of rewrite middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Pre(middleware.RewriteWithConfig(middleware.RewriteConfig{}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of rewrite middleware.\n\n**RewriteConfig Structure**:\n\n```yaml\n```codeBlockLines_e6Vv\n// RewriteConfig defines the config for Rewrite middleware.\n  RewriteConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Rules defines the URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rules map[string]string `yaml:\"rules\"`\n\n    // RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRules map[*regexp.Regexp]string\n  }\n```\n```\n\nThis snippet shows you how to rewriteconfig structure, which is an important aspect of rewrite middleware.\n\n**Regex-based Rules Example**:\n\n```yaml\n```codeBlockLines_e6Vv\ne.Pre(RewriteWithConfig(RewriteConfig{\n  Rules: map[string]string{\n    \"^/v1/*\": \"/v2/$1\",\n  },\n  RegexRules: map[*regexp.Regexp]string{\n    regexp.MustCompile(\"^/foo/([0-9].*)\"):  \"/num/$1\",\n    regexp.MustCompile(\"^/bar/(.+?)/(.*)\"): \"/baz/$2/$1\",\n  },\n}))\n```\n```\n\nThis snippet shows you how to regex-based rules example, which is an important aspect of rewrite middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Rewrite Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRewrite middleware should be registered via `Echo#Pre()` to get triggered before the router.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/rewrite", "title": "Rewrite Middleware", "description": "Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:43:06", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/rewrite", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Rewrite | Echo", "og:url": "https://echo.labstack.com/docs/middleware/rewrite", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogLocale": "en", "og:description": "Rewrite middleware", "ogDescription": "Rewrite middleware", "language": "en", "description": "Rewrite middleware", "title": "Rewrite | Echo", "ogTitle": "Rewrite | Echo", "scrapeId": "5b099004-4cd2-4810-aa80-4abde01221f1", "sourceURL": "https://echo.labstack.com/docs/middleware/rewrite", "url": "https://echo.labstack.com/docs/middleware/rewrite", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Secure Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Secure Middleware in echo.\n\n# Secure Middleware\n\nSecure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.Secure())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.SecureWithConfig(middleware.SecureConfig{\n\tXSSProtection:         \"\",\n\tContentTypeNosniff:    \"\",\n\tXFrameOptions:         \"\",\n\tHSTSMaxAge:            3600,\n\tContentSecurityPolicy: \"default-src 'self'\",\n}))\n```\n\ninfo\n\nPassing empty `XSSProtection`, `ContentTypeNosniff`, `XFrameOptions` or `ContentSecurityPolicy` disables that protection.\n\n## Configuration\n\n```codeBlockLines_e6Vv\nSecureConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // XSSProtection provides protection against cross-site scripting attack (XSS)\n  // by setting the `X-XSS-Protection` header.\n  // Optional. Default value \"1; mode=block\".\n  XSSProtection string `json:\"xss_protection\"`\n\n  // ContentTypeNosniff provides protection against overriding Content-Type\n  // header by setting the `X-Content-Type-Options` header.\n  // Optional. Default value \"nosniff\".\n  ContentTypeNosniff string `json:\"content_type_nosniff\"`\n\n  // XFrameOptions can be used to indicate whether or not a browser should\n  // be allowed to render a page in a <frame>, <iframe> or <object> .\n  // Sites can use this to avoid clickjacking attacks, by ensuring that their\n  // content is not embedded into other sites.provides protection against\n  // clickjacking.\n  // Optional. Default value \"SAMEORIGIN\".\n  // Possible values:\n  // - \"SAMEORIGIN\" - The page can only be displayed in a frame on the same origin as the page itself.\n  // - \"DENY\" - The page cannot be displayed in a frame, regardless of the site attempting to do so.\n  // - \"ALLOW-FROM uri\" - The page can only be displayed in a frame on the specified origin.\n  XFrameOptions string `json:\"x_frame_options\"`\n\n  // HSTSMaxAge sets the `Strict-Transport-Security` header to indicate how\n  // long (in seconds) browsers should remember that this site is only to\n  // be accessed using HTTPS. This reduces your exposure to some SSL-stripping\n  // man-in-the-middle (MITM) attacks.\n  // Optional. Default value 0.\n  HSTSMaxAge int `json:\"hsts_max_age\"`\n\n  // HSTSExcludeSubdomains won't include subdomains tag in the `Strict Transport Security`\n  // header, excluding all subdomains from security policy. It has no effect\n  // unless HSTSMaxAge is set to a non-zero value.\n  // Optional. Default value false.\n  HSTSExcludeSubdomains bool `json:\"hsts_exclude_subdomains\"`\n\n  // ContentSecurityPolicy sets the `Content-Security-Policy` header providing\n  // security against cross-site scripting (XSS), clickjacking and other code\n  // injection attacks resulting from execution of malicious content in the\n  // trusted web page context.\n  // Optional. Default value \"\".\n  ContentSecurityPolicy string `json:\"content_security_policy\"`\n}\n```\n\n## Default Configuration\n\n```codeBlockLines_e6Vv\nDefaultSecureConfig = SecureConfig{\n  Skipper:            DefaultSkipper,\n  XSSProtection:      \"1; mode=block\",\n  ContentTypeNosniff: \"nosniff\",\n  XFrameOptions:      \"SAMEORIGIN\",\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "overview", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.Secure())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.SecureWithConfig(middleware.SecureConfig{\n\tXSSProtection:         \"\",\n\tContentTypeNosniff:    \"\",\n\tXFrameOptions:         \"\",\n\tHSTSMaxAge:            3600,\n\tContentSecurityPolicy: \"default-src 'self'\",\n}))\n```\n\ninfo\n\nPassing empty `XSSProtection`, `ContentTypeNosniff`, `XFrameOptions` or `ContentSecurityPolicy` disables that protection..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nSecureConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // XSSProtection provides protection against cross-site scripting attack (XSS)\n  // by setting the `X-XSS-Protection` header.\n  // Optional. Default value \"1; mode=block\".\n  XSSProtection string `json:\"xss_protection\"`\n\n  // ContentTypeNosniff provides protection against overriding Content-Type\n  // header by setting the `X-Content-Type-Options` header.\n  // Optional. Default value \"nosniff\".\n  ContentTypeNosniff string `json:\"content_type_nosniff\"`\n\n  // XFrameOptions can be used to indicate whether or not a browser should\n  // be allowed to render a page in a <frame>, <iframe> or <object> .\n  // Sites can use this to avoid clickjacking attacks, by ensuring that their\n  // content is not embedded into other sites.provides protection against\n  // clickjacking.\n  // Optional. Default value \"SAMEORIGIN\".\n  // Possible values:\n  // - \"SAMEORIGIN\" - The page can only be displayed in a frame on the same origin as the page itself.\n  // - \"DENY\" - The page cannot be displayed in a frame, regardless of the site attempting to do so.\n  // - \"ALLOW-FROM uri\" - The page can only be displayed in a frame on the specified origin.\n  XFrameOptions string `json:\"x_frame_options\"`\n\n  // HSTSMaxAge sets the `Strict-Transport-Security` header to indicate how\n  // long (in seconds) browsers should remember that this site is only to\n  // be accessed using HTTPS. This reduces your exposure to some SSL-stripping\n  // man-in-the-middle (MITM) attacks.\n  // Optional. Default value 0.\n  HSTSMaxAge int `json:\"hsts_max_age\"`\n\n  // HSTSExcludeSubdomains won't include subdomains tag in the `Strict Transport Security`\n  // header, excluding all subdomains from security policy. It has no effect\n  // unless HSTSMaxAge is set to a non-zero value.\n  // Optional. Default value false.\n  HSTSExcludeSubdomains bool `json:\"hsts_exclude_subdomains\"`\n\n  // ContentSecurityPolicy sets the `Content-Security-Policy` header providing\n  // security against cross-site scripting (XSS), clickjacking and other code\n  // injection attacks resulting from execution of malicious content in the\n  // trusted web page context.\n  // Optional. Default value \"\".\n  ContentSecurityPolicy string `json:\"content_security_policy\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\nDefaultSecureConfig = SecureConfig{\n  Skipper:            DefaultSkipper,\n  XSSProtection:      \"1; mode=block\",\n  ContentTypeNosniff: \"nosniff\",\n  XFrameOptions:      \"SAMEORIGIN\",\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Secure Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage**:\n\n```yaml\n```codeBlockLines_e6Vv\ne.Use(middleware.Secure())\n```\n```\n\nThis snippet shows you how to usage, which is an important aspect of secure middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.SecureWithConfig(middleware.SecureConfig{\n\tXSSProtection:         \"\",\n\tContentTypeNosniff:    \"\",\n\tXFrameOptions:         \"\",\n\tHSTSMaxAge:            3600,\n\tContentSecurityPolicy: \"default-src 'self'\",\n}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of secure middleware.\n\n**Configuration Struct**:\n\n```yaml\n```codeBlockLines_e6Vv\nSecureConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // XSSProtection provides protection against cross-site scripting attack (XSS)\n  // by setting the `X-XSS-Protection` header.\n  // Optional. Default value \"1; mode=block\".\n  XSSProtection string `json:\"xss_protection\"`\n\n  // ContentTypeNosniff provides protection against overriding Content-Type\n  // header by setting the `X-Content-Type-Options` header.\n  // Optional. Default value \"nosniff\".\n  ContentTypeNosniff string `json:\"content_type_nosniff\"`\n\n  // XFrameOptions can be used to indicate whether or not a browser should\n  // be allowed to render a page in a <frame>, <iframe> or <object> .\n  // Sites can use this to avoid clickjacking attacks, by ensuring that their\n  // content is not embedded into other sites.provides protection against\n  // clickjacking.\n  // Optional. Default value \"SAMEORIGIN\".\n  // Possible values:\n  // - \"SAMEORIGIN\" - The page can only be displayed in a frame on the same origin as the page itself.\n  // - \"DENY\" - The page cannot be displayed in a frame, regardless of the site attempting to do so.\n  // - \"ALLOW-FROM uri\" - The page can only be displayed in a frame on the specified origin.\n  XFrameOptions string `json:\"x_frame_options\"`\n\n  // HSTSMaxAge sets the `Strict-Transport-Security` header to indicate how\n  // long (in seconds) browsers should remember that this site is only to\n  // be accessed using HTTPS. This reduces your exposure to some SSL-stripping\n  // man-in-the-middle (MITM) attacks.\n  // Optional. Default value 0.\n  HSTSMaxAge int `json:\"hsts_max_age\"`\n\n  // HSTSExcludeSubdomains won't include subdomains tag in the `Strict Transport Security`\n  // header, excluding all subdomains from security policy. It has no effect\n  // unless HSTSMaxAge is set to a non-zero value.\n  // Optional. Default value false.\n  HSTSExcludeSubdomains bool `json:\"hsts_exclude_subdomains\"`\n\n  // ContentSecurityPolicy sets the `Content-Security-Policy` header providing\n  // security against cross-site scripting (XSS), clickjacking and other code\n  // injection attacks resulting from execution of malicious content in the\n  // trusted web page context.\n  // Optional. Default value \"\".\n  ContentSecurityPolicy string `json:\"content_security_policy\"`\n}\n```\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of secure middleware.\n\n**Default Configuration**:\n\n```yaml\n```codeBlockLines_e6Vv\nDefaultSecureConfig = SecureConfig{\n  Skipper:            DefaultSkipper,\n  XSSProtection:      \"1; mode=block\",\n  ContentTypeNosniff: \"nosniff\",\n  XFrameOptions:      \"SAMEORIGIN\",\n}\n```\n```\n\nThis snippet shows you how to default configuration, which is an important aspect of secure middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "code_examples", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Secure Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPassing empty `XSSProtection`, `ContentTypeNosniff`, `XFrameOptions` or `ContentSecurityPolicy` disables that protection.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/secure", "title": "Secure Middleware", "description": "Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:04", "type": "best_practices", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/secure", "docsearch:version": "current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogDescription": "Secure middleware", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Secure | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "description": "Secure middleware", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "title": "Secure | Echo", "twitter:card": "summary_large_image", "og:title": "Secure | Echo", "og:url": "https://echo.labstack.com/docs/middleware/secure", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:description": "Secure middleware", "scrapeId": "94e775f5-448f-4d4e-add6-5d93eb35ea71", "sourceURL": "https://echo.labstack.com/docs/middleware/secure", "url": "https://echo.labstack.com/docs/middleware/secure", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Session Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Session Middleware in echo.\n\n# Session Middleware\n\nSession middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.Here's a quick rundown of what this is about:\n\n## Dependencies\n\n```go\nimport (\n  \"github.com/gorilla/sessions\"\n  \"github.com/labstack/echo-contrib/session\"\n)\n```\n\n## Usage\n\nThis example exposes two endpoints: `/create-session` creates new session and `/read-session` read value from session if request contains session id.\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n    \"github.com/gorilla/sessions\"\n    \"github.com/labstack/echo-contrib/session\"\n    \"github.com/labstack/echo/v4\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(session.Middleware(sessions.NewCookieStore([]byte(\"secret\"))))\n\n\te.GET(\"/create-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsess.Options = &sessions.Options{\n\t\t\tPath:     \"/\",\n\t\t\tMaxAge:   86400 * 7,\n\t\t\tHttpOnly: true,\n\t\t}\n\t\tsess.Values[\"foo\"] = \"bar\"\n\t\tif err := sess.Save(c.Request(), c.Response()); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.NoContent(http.StatusOK)\n\t})\n\n\te.GET(\"/read-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.String(http.StatusOK, fmt.Sprintf(\"foo=%%v\\n\", sess.Values[\"foo\"]))\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n## Example usage\n\nRequesting `/read-session` without providing session it will output nil as `foo` value\n\n```bash\nx@x:~/$ curl -v http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:15:14 GMT\n< Content-Length: 10\n<\nfoo=<nil>\n```\n\nRequesting `/create-session` creates new session\n\n```bash\nx@x:~/$ curl -v -c cookies.txt http://localhost:8080/create-session\n* processing: http://localhost:8080/create-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /create-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n* Added cookie session=\"MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\" for domain localhost, path /, expire 1714641420\n< Set-Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y; Path=/; Expires=Thu, 02 May 2024 09:17:00 GMT; Max-Age=604800; HttpOnly\n< Date: Thu, 25 Apr 2024 09:17:00 GMT\n< Content-Length: 0\n<\n* Connection #0 to host localhost left intact\n```\n\nUsing session cookie from previous response and requesting `/read-session` will output `foo` value from session.\n\n```bash\nx@x:~/$ curl -v -b cookies.txt http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n> Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:18:56 GMT\n< Content-Length: 8\n<\nfoo=bar\n* Connection #0 to host localhost left intact\n```\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(session.MiddlewareWithConfig(session.Config{}))\n```\n\n## Configuration\n\n```go\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Session store.\n  // Required.\n  Store sessions.Store\n}\n```\n\n## Default Configuration\n\n```go\nDefaultConfig = Config{\n  Skipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "overview", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I dependencies in echo?\n\nAssistant: To dependencies in echo, here's what you do:\n```go\nimport (\n  \"github.com/gorilla/sessions\"\n  \"github.com/labstack/echo-contrib/session\"\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\nThis example exposes two endpoints: `/create-session` creates new session and `/read-session` read value from session if request contains session id.\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n    \"github.com/gorilla/sessions\"\n    \"github.com/labstack/echo-contrib/session\"\n    \"github.com/labstack/echo/v4\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(session.Middleware(sessions.NewCookieStore([]byte(\"secret\"))))\n\n\te.GET(\"/create-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsess.Options = &sessions.Options{\n\t\t\tPath:     \"/\",\n\t\t\tMaxAge:   86400 * 7,\n\t\t\tHttpOnly: true,\n\t\t}\n\t\tsess.Values[\"foo\"] = \"bar\"\n\t\tif err := sess.Save(c.Request(), c.Response()); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.NoContent(http.StatusOK)\n\t})\n\n\te.GET(\"/read-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.String(http.StatusOK, fmt.Sprintf(\"foo=%%v\\n\", sess.Values[\"foo\"]))\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I example usage in echo?\n\nAssistant: To example usage in echo, here's what you do:\nRequesting `/read-session` without providing session it will output nil as `foo` value\n\n```bash\nx@x:~/$ curl -v http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:15:14 GMT\n< Content-Length: 10\n<\nfoo=<nil>\n```\n\nRequesting `/create-session` creates new session\n\n```bash\nx@x:~/$ curl -v -c cookies.txt http://localhost:8080/create-session\n* processing: http://localhost:8080/create-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /create-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n* Added cookie session=\"MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\" for domain localhost, path /, expire 1714641420\n< Set-Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y; Path=/; Expires=Thu, 02 May 2024 09:17:00 GMT; Max-Age=604800; HttpOnly\n< Date: Thu, 25 Apr 2024 09:17:00 GMT\n< Content-Length: 0\n<\n* Connection #0 to host localhost left intact\n```\n\nUsing session cookie from previous response and requesting `/read-session` will output `foo` value from session.\n\n```bash\nx@x:~/$ curl -v -b cookies.txt http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n> Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:18:56 GMT\n< Content-Length: 8\n<\nfoo=bar\n* Connection #0 to host localhost left intact\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(session.MiddlewareWithConfig(session.Config{}))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Session store.\n  // Required.\n  Store sessions.Store\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```go\nDefaultConfig = Config{\n  Skipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "section_detail", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Session Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dependencies**:\n\n```yaml\n```go\nimport (\n  \"github.com/gorilla/sessions\"\n  \"github.com/labstack/echo-contrib/session\"\n)\n```\n```\n\nThis snippet shows you how to dependencies, which is an important aspect of session middleware.\n\n**Usage Example**:\n\n```yaml\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n    \"github.com/gorilla/sessions\"\n    \"github.com/labstack/echo-contrib/session\"\n    \"github.com/labstack/echo/v4\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(session.Middleware(sessions.NewCookieStore([]byte(\"secret\"))))\n\n\te.GET(\"/create-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsess.Options = &sessions.Options{\n\t\t\tPath:     \"/\",\n\t\t\tMaxAge:   86400 * 7,\n\t\t\tHttpOnly: true,\n\t\t}\n\t\tsess.Values[\"foo\"] = \"bar\"\n\t\tif err := sess.Save(c.Request(), c.Response()); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.NoContent(http.StatusOK)\n\t})\n\n\te.GET(\"/read-session\", func(c echo.Context) error {\n\t\tsess, err := session.Get(\"session\", c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.String(http.StatusOK, fmt.Sprintf(\"foo=%%v\\n\", sess.Values[\"foo\"]))\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of session middleware.\n\n**Example usage - Read Session**:\n\n```yaml\n```bash\nx@x:~/$ curl -v http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:15:14 GMT\n< Content-Length: 10\n<\nfoo=<nil>\n```\n```\n\nThis snippet shows you how to example usage - read session, which is an important aspect of session middleware.\n\n**Example usage - Create Session**:\n\n```yaml\n```bash\nx@x:~/$ curl -v -c cookies.txt http://localhost:8080/create-session\n* processing: http://localhost:8080/create-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /create-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n* Added cookie session=\"MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\" for domain localhost, path /, expire 1714641420\n< Set-Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y; Path=/; Expires=Thu, 02 May 2024 09:17:00 GMT; Max-Age=604800; HttpOnly\n< Date: Thu, 25 Apr 2024 09:17:00 GMT\n< Content-Length: 0\n<\n* Connection #0 to host localhost left intact\n```\n```\n\nThis snippet shows you how to example usage - create session, which is an important aspect of session middleware.\n\n**Example usage - Read Session with Cookie**:\n\n```yaml\n```bash\nx@x:~/$ curl -v -b cookies.txt http://localhost:8080/read-session\n* processing: http://localhost:8080/read-session\n*   Trying [::1]:8080...\n* Connected to localhost (::1) port 8080\n> GET /read-session HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/8.2.1\n> Accept: */*\n> Cookie: session=MTcxNDAzNjYyMHxEWDhFQVFMX2dBQUJFQUVRQUFBZ180QUFBUVp6ZEhKcGJtY01CUUFEWm05dkJuTjBjbWx1Wnd3RkFBTmlZWEk9fHJQxR5fJDUEV-6iHSWuyVzjYX2f9F5tVaMGV6pjIE1Y\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n< Date: Thu, 25 Apr 2024 09:18:56 GMT\n< Content-Length: 8\n<\nfoo=bar\n* Connection #0 to host localhost left intact\n```\n```\n\nThis snippet shows you how to example usage - read session with cookie, which is an important aspect of session middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(session.MiddlewareWithConfig(session.Config{}))\n```\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of session middleware.\n\n**Configuration Struct**:\n\n```yaml\n```go\nConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper middleware.Skipper\n\n  // Session store.\n  // Required.\n  Store sessions.Store\n}\n```\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of session middleware.\n\n**Default Configuration**:\n\n```yaml\n```go\nDefaultConfig = Config{\n  Skipper: DefaultSkipper,\n}\n```\n```\n\nThis snippet shows you how to default configuration, which is an important aspect of session middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "code_examples", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Session Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse secure cookies for session management in production environments.\n\nRegularly update dependencies to ensure security and performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/session", "title": "Session Middleware", "description": "Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem based session store; however, you can take advantage of community maintained implementation for various backends.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:44:57", "type": "best_practices", "page_metadata": {"og:url": "https://echo.labstack.com/docs/middleware/session", "docusaurus_locale": "en", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogLocale": "en", "description": "Session middleware", "docsearch:language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "title": "Session | Echo", "og:title": "Session | Echo", "ogTitle": "Session | Echo", "og:locale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogUrl": "https://echo.labstack.com/docs/middleware/session", "ogDescription": "Session middleware", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Session middleware", "scrapeId": "c77f6a06-81de-46b8-955d-739cdc1289ac", "sourceURL": "https://echo.labstack.com/docs/middleware/session", "url": "https://echo.labstack.com/docs/middleware/session", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Static Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Static Middleware in echo.\n\n# Static Middleware\n\nStatic middleware can be used to serve static files from the provided root directory.Here's a quick rundown of what this is about:\n\n## Usage\n\n```go\ne := echo.New()\ne.Use(middleware.Static(\"/static\"))\n```\n\nThis serves static files from `static` directory. For example, a request to `/js/main.js` will fetch and serve `static/js/main.js` file.\n\n## Custom Configuration\n\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n  Root:   \"static\",\n  Browse: true,\n}))\n```\n\nThis serves static files from `static` directory and enables directory browsing.\n\nDefault behavior when using with non root URL paths is to append the URL path to the filesystem path.\n\n#### Example 1\n\n```go\ngroup := root.Group(\"somepath\")\ngroup.Use(middleware.Static(filepath.Join(\"filesystempath\")))\n// When an incoming request comes for `/somepath` the actual filesystem request goes to `filesystempath/somepath` instead of only `filesystempath`.\n```\n\ntip\n\nTo turn off this behavior set the `IgnoreBase` config param to `true`.\n\n#### Example 2\n\nServe SPA assets from embedded filesystem\n\n```go\n//go:embed web\nvar webAssets embed.FS\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n\t\tHTML5:      true,\n\t\tRoot:       \"web\", // because files are located in `web` directory in `webAssets` fs\n\t\tFilesystem: http.FS(webAssets),\n\t}))\n\tapi := e.Group(\"/api\")\n\tapi.GET(\"/users\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"users\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/static", "title": "Static Middleware", "description": "Static middleware can be used to serve static files from the provided root directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:28", "type": "overview", "page_metadata": {"ogDescription": "Static middleware", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Static | Echo", "ogLocale": "en", "og:description": "Static middleware", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/static", "description": "Static middleware", "docsearch:language": "en", "title": "Static | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Static | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/middleware/static", "scrapeId": "abdbd0b7-2597-46b3-af7d-2acd0f481ed6", "sourceURL": "https://echo.labstack.com/docs/middleware/static", "url": "https://echo.labstack.com/docs/middleware/static", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```go\ne := echo.New()\ne.Use(middleware.Static(\"/static\"))\n```\n\nThis serves static files from `static` directory. For example, a request to `/js/main.js` will fetch and serve `static/js/main.js` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/static", "title": "Static Middleware", "description": "Static middleware can be used to serve static files from the provided root directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:28", "type": "section_detail", "page_metadata": {"ogDescription": "Static middleware", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Static | Echo", "ogLocale": "en", "og:description": "Static middleware", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/static", "description": "Static middleware", "docsearch:language": "en", "title": "Static | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Static | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/middleware/static", "scrapeId": "abdbd0b7-2597-46b3-af7d-2acd0f481ed6", "sourceURL": "https://echo.labstack.com/docs/middleware/static", "url": "https://echo.labstack.com/docs/middleware/static", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```go\ne := echo.New()\ne.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n  Root:   \"static\",\n  Browse: true,\n}))\n```\n\nThis serves static files from `static` directory and enables directory browsing.\n\nDefault behavior when using with non root URL paths is to append the URL path to the filesystem path.\n\n#### Example 1\n\n```go\ngroup := root.Group(\"somepath\")\ngroup.Use(middleware.Static(filepath.Join(\"filesystempath\")))\n// When an incoming request comes for `/somepath` the actual filesystem request goes to `filesystempath/somepath` instead of only `filesystempath`.\n```\n\ntip\n\nTo turn off this behavior set the `IgnoreBase` config param to `true`.\n\n#### Example 2\n\nServe SPA assets from embedded filesystem\n\n```go\n//go:embed web\nvar webAssets embed.FS\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n\t\tHTML5:      true,\n\t\tRoot:       \"web\", // because files are located in `web` directory in `webAssets` fs\n\t\tFilesystem: http.FS(webAssets),\n\t}))\n\tapi := e.Group(\"/api\")\n\tapi.GET(\"/users\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"users\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/static", "title": "Static Middleware", "description": "Static middleware can be used to serve static files from the provided root directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:28", "type": "section_detail", "page_metadata": {"ogDescription": "Static middleware", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Static | Echo", "ogLocale": "en", "og:description": "Static middleware", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/static", "description": "Static middleware", "docsearch:language": "en", "title": "Static | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Static | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/middleware/static", "scrapeId": "abdbd0b7-2597-46b3-af7d-2acd0f481ed6", "sourceURL": "https://echo.labstack.com/docs/middleware/static", "url": "https://echo.labstack.com/docs/middleware/static", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Static Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.Static(\"/static\"))\n```\n```\n\nThis snippet shows you how to usage example, which is an important aspect of static middleware.\n\n**Custom Configuration Example**:\n\n```yaml\n```go\ne := echo.New()\ne.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n  Root:   \"static\",\n  Browse: true,\n}))\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of static middleware.\n\n**Example 1**:\n\n```yaml\n```go\ngroup := root.Group(\"somepath\")\ngroup.Use(middleware.Static(filepath.Join(\"filesystempath\")))\n// When an incoming request comes for `/somepath` the actual filesystem request goes to `filesystempath/somepath` instead of only `filesystempath`.\n```\n```\n\nThis snippet shows you how to example 1, which is an important aspect of static middleware.\n\n**Example 2 - Serve SPA assets from embedded filesystem**:\n\n```yaml\n```go\n//go:embed web\nvar webAssets embed.FS\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n\t\tHTML5:      true,\n\t\tRoot:       \"web\", // because files are located in `web` directory in `webAssets` fs\n\t\tFilesystem: http.FS(webAssets),\n\t}))\n\tapi := e.Group(\"/api\")\n\tapi.GET(\"/users\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"users\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n```\n\nThis snippet shows you how to example 2 - serve spa assets from embedded filesystem, which is an important aspect of static middleware.\n\n**Configuration Struct**:\n\n```yaml\n```go\nStaticConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Root directory from where the static content is served.\n  // Required.\n  Root string `json:\"root\"`\n\n  // Index file for serving a directory.\n  // Optional. Default value \"index.html\".\n  Index string `json:\"index\"`\n\n  // Enable HTML5 mode by forwarding all not-found requests to root so that\n  // SPA (single-page application) can handle the routing.\n  // Optional. Default value false.\n  HTML5 bool `json:\"html5\"`\n\n  // Enable directory browsing.\n  // Optional. Default value false.\n  Browse bool `json:\"browse\"`\n\n  // Enable ignoring of the base of the URL path.\n  // Example: when assigning a static middleware to a non root path group,\n  // the filesystem path is not doubled\n  // Optional. Default value false.\n  IgnoreBase bool `yaml:\"ignoreBase\"`\n\n  // Filesystem provides access to the static content.\n  // Optional. Defaults to http.Dir(config.Root)\n  Filesystem http.FileSystem `yaml:\"-\"`\n}\n```\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of static middleware.\n\n**Default Configuration**:\n\n```yaml\n```go\nDefaultStaticConfig = StaticConfig{\n  Skipper: DefaultSkipper,\n  Index:   \"index.html\",\n}\n```\n```\n\nThis snippet shows you how to default configuration, which is an important aspect of static middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/static", "title": "Static Middleware", "description": "Static middleware can be used to serve static files from the provided root directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:28", "type": "code_examples", "page_metadata": {"ogDescription": "Static middleware", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Static | Echo", "ogLocale": "en", "og:description": "Static middleware", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/static", "description": "Static middleware", "docsearch:language": "en", "title": "Static | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Static | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/middleware/static", "scrapeId": "abdbd0b7-2597-46b3-af7d-2acd0f481ed6", "sourceURL": "https://echo.labstack.com/docs/middleware/static", "url": "https://echo.labstack.com/docs/middleware/static", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Static Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo turn off the behavior of appending the URL path to the filesystem path, set the `IgnoreBase` config param to `true.`\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/static", "title": "Static Middleware", "description": "Static middleware can be used to serve static files from the provided root directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:45:28", "type": "best_practices", "page_metadata": {"ogDescription": "Static middleware", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Static | Echo", "ogLocale": "en", "og:description": "Static middleware", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://echo.labstack.com/docs/middleware/static", "description": "Static middleware", "docsearch:language": "en", "title": "Static | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogTitle": "Static | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://echo.labstack.com/docs/middleware/static", "scrapeId": "abdbd0b7-2597-46b3-af7d-2acd0f481ed6", "sourceURL": "https://echo.labstack.com/docs/middleware/static", "url": "https://echo.labstack.com/docs/middleware/static", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Timeout Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Timeout Middleware in echo.\n\n# Timeout Middleware\n\nTimeout middleware is used to timeout at a long running operation within a predefined period.Here's a quick rundown of what this is about:\n\n## Usage\n\n```codeBlockLines_e6Vv\ne.Use(middleware.Timeout())\n```\n\n## Custom Configuration\n\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n  Skipper:                     middleware.DefaultSkipper,\n  ErrorMessage:                \"custom timeout error message returns to client\",\n  OnTimeoutRouteErrorHandler:  func(err error, c echo.Context) {\n    log.Println(c.Path())\n  },\n  Timeout:                     30*time.Second,\n}))\n```\n\n`OnTimeoutRouteErrorHandler` is an error handler that is executed for error that was returned from wrapped route after request timeouted and we already had sent the error code (503) and message response to the client.\n\n```codeBlockLines_e6Vv\nOnTimeoutRouteErrorHandler func(err error, c echo.Context)\n```\n\nNote: do not write headers/body inside this handler. The response has already been sent to the client and response writer will not accept anything no more. handler in the previous example will log the actual route middleware timeouted.\n\n## Configuration\n\n```codeBlockLines_e6Vv\n// TimeoutConfig defines the config for Timeout middleware.\nTimeoutConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // ErrorMessage is written to response on timeout in addition to http.StatusServiceUnavailable (503) status code\n  ErrorMessage string\n\n  // OnTimeoutRouteErrorHandler is an error handler that is executed for error that was returned from wrapped route after\n  // request timeouted and we already had sent the error code (503) and message response to the client.\n  OnTimeoutRouteErrorHandler func(err error, c echo.Context)\n\n  // Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n  Timeout time.Duration\n}\n```\n\n### Default Configuration*\n\n```codeBlockLines_e6Vv\n// DefaultTimeoutConfig is the default Timeout middleware config.\nDefaultTimeoutConfig = TimeoutConfig{\n  Skipper:      DefaultSkipper,\n  Timeout:      0,\n  ErrorMessage: \"\",\n  // Note that OnTimeoutRouteErrorHandler will be nil\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n```codeBlockLines_e6Vv\ne.Use(middleware.Timeout())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n\n```codeBlockLines_e6Vv\ne := echo.New()\ne.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n  Skipper:                     middleware.DefaultSkipper,\n  ErrorMessage:                \"custom timeout error message returns to client\",\n  OnTimeoutRouteErrorHandler:  func(err error, c echo.Context) {\n    log.Println(c.Path())\n  },\n  Timeout:                     30*time.Second,\n}))\n```\n\n`OnTimeoutRouteErrorHandler` is an error handler that is executed for error that was returned from wrapped route after request timeouted and we already had sent the error code (503) and message response to the client.\n\n```codeBlockLines_e6Vv\nOnTimeoutRouteErrorHandler func(err error, c echo.Context)\n```\n\nNote: do not write headers/body inside this handler. The response has already been sent to the client and response writer will not accept anything no more. handler in the previous example will log the actual route middleware timeouted..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```codeBlockLines_e6Vv\n// TimeoutConfig defines the config for Timeout middleware.\nTimeoutConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // ErrorMessage is written to response on timeout in addition to http.StatusServiceUnavailable (503) status code\n  ErrorMessage string\n\n  // OnTimeoutRouteErrorHandler is an error handler that is executed for error that was returned from wrapped route after\n  // request timeouted and we already had sent the error code (503) and message response to the client.\n  OnTimeoutRouteErrorHandler func(err error, c echo.Context)\n\n  // Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n  Timeout time.Duration\n}\n```\n\n### Default Configuration*\n\n```codeBlockLines_e6Vv\n// DefaultTimeoutConfig is the default Timeout middleware config.\nDefaultTimeoutConfig = TimeoutConfig{\n  Skipper:      DefaultSkipper,\n  Timeout:      0,\n  ErrorMessage: \"\",\n  // Note that OnTimeoutRouteErrorHandler will be nil\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Timeout Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage Example**:\n\n```yaml\ne.Use(middleware.Timeout())\n```\n\nThis snippet shows you how to usage example, which is an important aspect of timeout middleware.\n\n**Custom Configuration Example**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n  Skipper:                     middleware.DefaultSkipper,\n  ErrorMessage:                \"custom timeout error message returns to client\",\n  OnTimeoutRouteErrorHandler:  func(err error, c echo.Context) {\n    log.Println(c.Path())\n  },\n  Timeout:                     30*time.Second,\n}))\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of timeout middleware.\n\n**TimeoutConfig Structure**:\n\n```yaml\n// TimeoutConfig defines the config for Timeout middleware.\nTimeoutConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // ErrorMessage is written to response on timeout in addition to http.StatusServiceUnavailable (503) status code\n  ErrorMessage string\n\n  // OnTimeoutRouteErrorHandler is an error handler that is executed for error that was returned from wrapped route after\n  // request timeouted and we already had sent the error code (503) and message response to the client.\n  OnTimeoutRouteErrorHandler func(err error, c echo.Context)\n\n  // Timeout configures a timeout for the middleware, defaults to 0 for no timeout\n  Timeout time.Duration\n}\n```\n\nThis snippet shows you how to timeoutconfig structure, which is an important aspect of timeout middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "code_examples", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Timeout Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not write headers/body inside the OnTimeoutRouteErrorHandler as the response has already been sent to the client.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout Middleware", "description": "Timeout middleware is used to timeout at a long running operation within a predefined period.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:45", "type": "best_practices", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/middleware/timeout", "og:locale": "en", "twitter:card": "summary_large_image", "docsearch:version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "ogTitle": "Timeout | Echo", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogDescription": "Timeout middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Timeout | Echo", "docusaurus_version": "current", "og:description": "Timeout middleware", "docsearch:language": "en", "docusaurus_locale": "en", "description": "Timeout middleware", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:url": "https://echo.labstack.com/docs/middleware/timeout", "title": "Timeout | Echo", "scrapeId": "811a24c0-e998-4e37-9a7f-35d364a757da", "sourceURL": "https://echo.labstack.com/docs/middleware/timeout", "url": "https://echo.labstack.com/docs/middleware/timeout", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Trailing Slash Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Trailing Slash Middleware in echo.\n\n# Trailing Slash Middleware\n\nThis page covers the usage of middleware for adding and removing trailing slashes in request URIs.Here's a quick rundown of what this is about:\n\n## Add Trailing Slash\n\nAdd trailing slash middleware adds a trailing slash to the request URI.\n\n### Usage\n```go\ne := echo.New()\ne.Pre(middleware.AddTrailingSlash())\n```\n\n## Remove Trailing Slash\n\nRemove trailing slash middleware removes a trailing slash from the request URI.\n\n### Usage\n```go\ne := echo.New()\ne.Pre(middleware.RemoveTrailingSlash())\n```\n\n## Custom Configuration\n\n### Usage\n```go\ne := echo.New()\ne.Use(middleware.AddTrailingSlashWithConfig(middleware.TrailingSlashConfig{\n  RedirectCode: http.StatusMovedPermanently,\n}))\n```\nExample above will add a trailing slash to the request URI and redirect with `301 - StatusMovedPermanently`. \n\n\n## Configuration\n\n```go\nTrailingSlashConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional, but when provided the request is redirected using this code.\n  RedirectCode int `json:\"redirect_code\"`\n}\n```\n\n## Default Configuration\n\n```go\nDefaultTrailingSlashConfig = TrailingSlashConfig{\n  Skipper: DefaultSkipper,\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "overview", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I add trailing slash in echo?\n\nAssistant: To add trailing slash in echo, here's what you do:\nAdd trailing slash middleware adds a trailing slash to the request URI.\n\n### Usage\n```go\ne := echo.New()\ne.Pre(middleware.AddTrailingSlash())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I remove trailing slash in echo?\n\nAssistant: To remove trailing slash in echo, here's what you do:\nRemove trailing slash middleware removes a trailing slash from the request URI.\n\n### Usage\n```go\ne := echo.New()\ne.Pre(middleware.RemoveTrailingSlash())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Usage\n```go\ne := echo.New()\ne.Use(middleware.AddTrailingSlashWithConfig(middleware.TrailingSlashConfig{\n  RedirectCode: http.StatusMovedPermanently,\n}))\n```\nExample above will add a trailing slash to the request URI and redirect with `301 - StatusMovedPermanently`. \n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I configuration in echo?\n\nAssistant: To configuration in echo, here's what you do:\n```go\nTrailingSlashConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional, but when provided the request is redirected using this code.\n  RedirectCode int `json:\"redirect_code\"`\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I default configuration in echo?\n\nAssistant: To default configuration in echo, here's what you do:\n```go\nDefaultTrailingSlashConfig = TrailingSlashConfig{\n  Skipper: DefaultSkipper,\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "section_detail", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Trailing Slash Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Trailing Slash Usage**:\n\n```yaml\ne := echo.New()\ne.Pre(middleware.AddTrailingSlash())\n```\n\nThis snippet shows you how to add trailing slash usage, which is an important aspect of trailing slash middleware.\n\n**Remove Trailing Slash Usage**:\n\n```yaml\ne := echo.New()\ne.Pre(middleware.RemoveTrailingSlash())\n```\n\nThis snippet shows you how to remove trailing slash usage, which is an important aspect of trailing slash middleware.\n\n**Custom Configuration Usage**:\n\n```yaml\ne := echo.New()\ne.Use(middleware.AddTrailingSlashWithConfig(middleware.TrailingSlashConfig{\n  RedirectCode: http.StatusMovedPermanently,\n}))\n```\n\nThis snippet shows you how to custom configuration usage, which is an important aspect of trailing slash middleware.\n\n**Configuration Struct**:\n\n```yaml\nTrailingSlashConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Status code to be used when redirecting the request.\n  // Optional, but when provided the request is redirected using this code.\n  RedirectCode int `json:\"redirect_code\"`\n}\n```\n\nThis snippet shows you how to configuration struct, which is an important aspect of trailing slash middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "code_examples", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Trailing Slash Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the Add Trailing Slash middleware to ensure consistent URI formatting.\n\nConsider using custom configuration for specific redirect codes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/trailing-slash", "title": "Trailing Slash Middleware", "description": "This page covers the usage of middleware for adding and removing trailing slashes in request URIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:45:59", "type": "best_practices", "page_metadata": {"ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/middleware/trailing-slash", "og:url": "https://echo.labstack.com/docs/middleware/trailing-slash", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Trailing slash middleware", "ogTitle": "Trailing Slash | Echo", "docsearch:version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Trailing Slash | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "language": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:locale": "en", "description": "Trailing slash middleware", "og:title": "Trailing Slash | Echo", "ogDescription": "Trailing slash middleware", "docusaurus_locale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "cc07c629-0349-427e-b7d1-0a67cd10295e", "sourceURL": "https://echo.labstack.com/docs/middleware/trailing-slash", "url": "https://echo.labstack.com/docs/middleware/trailing-slash", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Quick Start is in echo?\n\nAssistant: Sure, I'd be happy to explain Quick Start in echo.\n\n# Quick Start\n\nThis page provides a quick start guide for installing and using Echo framework.Here's a quick rundown of what this is about:\n\n## Installation\n\nTo install Echo Go 1.13 or higher is required. Go 1.12 has limited support and some middlewares will not be available. Make sure your project folder is outside your $GOPATH.\n\n```bash\n$ mkdir myapp && cd myapp\n$ go mod init myapp\n$ go get github.com/labstack/echo/v4\n```\n\nIf you are working with Go v1.14 or earlier use:\n\n```bash\n$ GO111MODULE=on go get github.com/labstack/echo/v4\n```\n\n## Hello, World!\n\nCreate `server.go`\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nStart server\n\n```bash\n$ go run server.go\n```\n\nBrowse to [http://localhost:1323](http://localhost:1323/) and you should see Hello, World! on the page.\n\n## Routing\n\n```go\ne.POST(\"/users\", saveUser)\ne.GET(\"/users/:id\", getUser)\ne.PUT(\"/users/:id\", updateUser)\ne.DELETE(\"/users/:id\", deleteUser)\n```\n\n## Path Parameters\n\n```go\n// e.GET(\"/users/:id\", getUser)\nfunc getUser(c echo.Context) error {\n   \tid := c.Param(\"id\")\n\treturn c.String(http.StatusOK, id)\n}\n```\n\nBrowse to [http://localhost:1323/users/joe](http://localhost:1323/users/joe) and you should see 'joe' on the page.\n\n## Query Parameters\n\n`/show?team=x-men&member=wolverine`\n\n```go\n//e.GET(\"/show\", show)\nfunc show(c echo.Context) error {\n\tteam := c.QueryParam(\"team\")\n\tmember := c.QueryParam(\"member\")\n\treturn c.String(http.StatusOK, \"team:\" + team + \", member:\" + member)\n}\n```\n\nBrowse to [http://localhost:1323/show?team=x-men&member=wolverine](http://localhost:1323/show?team=x-men&member=wolverine) and you should see 'team:x-men, member:wolverine' on the page.\n\n## Form application/x-www-form-urlencoded\n\n`POST` `/save`\n\n| name | value |\n| --- | --- |\n| name | Joe Smith |\n| email | [joe@labstack.com](mailto:joe@labstack.com) |\n\n```go\n// e.POST(\"/save\", save)\nfunc save(c echo.Context) error {\n\tname := c.FormValue(\"name\")\n\temail := c.FormValue(\"email\")\n\treturn c.String(http.StatusOK, \"name:\" + name + \", email:\" + email)\n}\n```\n\nRun the following command:\n\n```bash\n$ curl -d \"name=Joe Smith\" -d \"email=joe@labstack.com\" http://localhost:1323/save\n// => name:Joe Smith, email:joe@labstack.com\n```\n\n## Form multipart/form-data\n\n`POST` `/save`\n\n| name | value |\n| --- | --- |\n| name | Joe Smith |\n| avatar | avatar |\n\n```go\nfunc save(c echo.Context) error {\n\tname := c.FormValue(\"name\")\n\tavatar, err := c.FormFile(\"avatar\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsrc, err := avatar.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer src.Close()\n\n\tdst, err := os.Create(avatar.Filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dst.Close()\n\n\tif _, err = io.Copy(dst, src); err != nil {\n\t\treturn err\n\t}\n\n\treturn c.HTML(http.StatusOK, \"<b>Thank you! \" + name + \"</b>\")\n}\n```\n\nRun the following command.\n\n```bash\n$ curl -F \"name=Joe Smith\" -F \"avatar=@/path/to/your/avatar.png\" http://localhost:1323/save\n// => <b>Thank you! Joe Smith</b>\n```\n\nFor checking uploaded image, run the following command.\n\n```bash\ncd <project directory>\nls avatar.png\n// => avatar.png\n```\n\n## Handling Request\n\n- Bind `json`, `xml`, `form` or `query` payload into Go struct based on `Content-Type` request header.\n- Render response as `json` or `xml` with status code.\n\n```go\ntype User struct {\n\tName  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n\tEmail string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n}\n\ne.POST(\"/users\", func(c echo.Context) error {\n\tu := new(User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\treturn c.JSON(http.StatusCreated, u)\n\t// or\n\t// return c.XML(http.StatusCreated, u)\n})\n```\n\n## Static Content\n\nServe any file from static directory for path `/static/*`.\n\n```go\ne.Static(\"/static\", \"static\")\n```\n\n## Template Rendering\n\n\n\n## Middleware\n\n```go\n// Root level middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\n// Group level middleware\ng := e.Group(\"/admin\")\ng.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n  if username == \"joe\" && password == \"secret\" {\n    return true, nil\n  }\n  return false, nil\n}))\n\n// Route level middleware\ntrack := func(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tprintln(\"request to /users\")\n\t\treturn next(c)\n\t}\n}\ne.GET(\"/users\", func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"/users\")\n}, track)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "overview", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I installation in echo?\n\nAssistant: To installation in echo, here's what you do:\nTo install Echo Go 1.13 or higher is required. Go 1.12 has limited support and some middlewares will not be available. Make sure your project folder is outside your $GOPATH.\n\n```bash\n$ mkdir myapp && cd myapp\n$ go mod init myapp\n$ go get github.com/labstack/echo/v4\n```\n\nIf you are working with Go v1.14 or earlier use:\n\n```bash\n$ GO111MODULE=on go get github.com/labstack/echo/v4\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I hello, world! in echo?\n\nAssistant: To hello, world! in echo, here's what you do:\nCreate `server.go`\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nStart server\n\n```bash\n$ go run server.go\n```\n\nBrowse to [http://localhost:1323](http://localhost:1323/) and you should see Hello, World! on the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I routing in echo?\n\nAssistant: To routing in echo, here's what you do:\n```go\ne.POST(\"/users\", saveUser)\ne.GET(\"/users/:id\", getUser)\ne.PUT(\"/users/:id\", updateUser)\ne.DELETE(\"/users/:id\", deleteUser)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I path parameters in echo?\n\nAssistant: To path parameters in echo, here's what you do:\n```go\n// e.GET(\"/users/:id\", getUser)\nfunc getUser(c echo.Context) error {\n   \tid := c.Param(\"id\")\n\treturn c.String(http.StatusOK, id)\n}\n```\n\nBrowse to [http://localhost:1323/users/joe](http://localhost:1323/users/joe) and you should see 'joe' on the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I query parameters in echo?\n\nAssistant: To query parameters in echo, here's what you do:\n`/show?team=x-men&member=wolverine`\n\n```go\n//e.GET(\"/show\", show)\nfunc show(c echo.Context) error {\n\tteam := c.QueryParam(\"team\")\n\tmember := c.QueryParam(\"member\")\n\treturn c.String(http.StatusOK, \"team:\" + team + \", member:\" + member)\n}\n```\n\nBrowse to [http://localhost:1323/show?team=x-men&member=wolverine](http://localhost:1323/show?team=x-men&member=wolverine) and you should see 'team:x-men, member:wolverine' on the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I form application/x-www-form-urlencoded in echo?\n\nAssistant: To form application/x-www-form-urlencoded in echo, here's what you do:\n`POST` `/save`\n\n| name | value |\n| --- | --- |\n| name | Joe Smith |\n| email | [joe@labstack.com](mailto:joe@labstack.com) |\n\n```go\n// e.POST(\"/save\", save)\nfunc save(c echo.Context) error {\n\tname := c.FormValue(\"name\")\n\temail := c.FormValue(\"email\")\n\treturn c.String(http.StatusOK, \"name:\" + name + \", email:\" + email)\n}\n```\n\nRun the following command:\n\n```bash\n$ curl -d \"name=Joe Smith\" -d \"email=joe@labstack.com\" http://localhost:1323/save\n// => name:Joe Smith, email:joe@labstack.com\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I form multipart/form-data in echo?\n\nAssistant: To form multipart/form-data in echo, here's what you do:\n`POST` `/save`\n\n| name | value |\n| --- | --- |\n| name | Joe Smith |\n| avatar | avatar |\n\n```go\nfunc save(c echo.Context) error {\n\tname := c.FormValue(\"name\")\n\tavatar, err := c.FormFile(\"avatar\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsrc, err := avatar.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer src.Close()\n\n\tdst, err := os.Create(avatar.Filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dst.Close()\n\n\tif _, err = io.Copy(dst, src); err != nil {\n\t\treturn err\n\t}\n\n\treturn c.HTML(http.StatusOK, \"<b>Thank you! \" + name + \"</b>\")\n}\n```\n\nRun the following command.\n\n```bash\n$ curl -F \"name=Joe Smith\" -F \"avatar=@/path/to/your/avatar.png\" http://localhost:1323/save\n// => <b>Thank you! Joe Smith</b>\n```\n\nFor checking uploaded image, run the following command.\n\n```bash\ncd <project directory>\nls avatar.png\n// => avatar.png\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I handling request in echo?\n\nAssistant: To handling request in echo, here's what you do:\n- Bind `json`, `xml`, `form` or `query` payload into Go struct based on `Content-Type` request header.\n- Render response as `json` or `xml` with status code.\n\n```go\ntype User struct {\n\tName  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n\tEmail string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n}\n\ne.POST(\"/users\", func(c echo.Context) error {\n\tu := new(User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\treturn c.JSON(http.StatusCreated, u)\n\t// or\n\t// return c.XML(http.StatusCreated, u)\n})\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I static content in echo?\n\nAssistant: To static content in echo, here's what you do:\nServe any file from static directory for path `/static/*`.\n\n```go\ne.Static(\"/static\", \"static\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I template rendering in echo?\n\nAssistant: To template rendering in echo, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I middleware in echo?\n\nAssistant: To middleware in echo, here's what you do:\n```go\n// Root level middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\n// Group level middleware\ng := e.Group(\"/admin\")\ng.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n  if username == \"joe\" && password == \"secret\" {\n    return true, nil\n  }\n  return false, nil\n}))\n\n// Route level middleware\ntrack := func(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tprintln(\"request to /users\")\n\t\treturn next(c)\n\t}\n}\ne.GET(\"/users\", func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"/users\")\n}, track)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "section_detail", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Quick Start in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Commands**:\n\n```yaml\n$ mkdir myapp && cd myapp\n$ go mod init myapp\n$ go get github.com/labstack/echo/v4\n```\n\nThis snippet shows you how to installation commands, which is an important aspect of quick start.\n\n**Hello World Server**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\nThis snippet shows you how to hello world server, which is an important aspect of quick start.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "code_examples", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Quick Start in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure your project folder is outside your $GOPATH when installing Echo.\n\nUse Go 1.13 or higher for full support of Echo features.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/quick-start", "title": "Quick Start", "description": "This page provides a quick start guide for installing and using Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:46:25", "type": "best_practices", "page_metadata": {"og:title": "Quick Start | Echo", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "ogTitle": "Quick Start | Echo", "ogUrl": "https://echo.labstack.com/docs/quick-start", "og:locale": "en", "og:description": "Quick start", "ogDescription": "Quick start", "docusaurus_version": "current", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Quick start", "ogLocale": "en", "twitter:card": "summary_large_image", "title": "Quick Start | Echo", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:url": "https://echo.labstack.com/docs/quick-start", "language": "en", "generator": "Docusaurus v3.6.3", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_tag": "docs-default-current", "scrapeId": "07ec72a6-15db-4213-b9d7-5b599414ca4d", "sourceURL": "https://echo.labstack.com/docs/quick-start", "url": "https://echo.labstack.com/docs/quick-start", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Request Documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Request Documentation in echo.\n\n# Request Documentation\n\nThis page covers how to retrieve and validate data in Echo framework.Here's a quick rundown of what this is about:\n\n## Retrieve Data\n\nThis section explains how to retrieve different types of data in Echo.\n\n## Form Data\n\nForm data can be retrieved by name using `Context#FormValue(name string)`. \n\n```go\n// Handler\nfunc(c echo.Context) error {\n  name := c.FormValue(\"name\")\n  return c.String(http.StatusOK, name)\n}\n```\n\n```bash\ncurl -X POST http://localhost:1323 -d 'name=Joe'\n``` \n\nTo bind a custom data type, you can implement `Echo#BindUnmarshaler` interface.\n\n```go\ntype Timestamp time.Time\n\nfunc (t *Timestamp) UnmarshalParam(src string) error {\n  ts, err := time.Parse(time.RFC3339, src)\n  *t = Timestamp(ts)\n  return err\n}\n```\n\n\n## Query Parameters\n\nQuery parameters can be retrieved by name using `Context#QueryParam(name string)`. \n\n```go\n// Handler\nfunc(c echo.Context) error {\n  name := c.QueryParam(\"name\")\n  return c.String(http.StatusOK, name)\n})\n```\n\n```bash\ncurl \\\n  -X GET \\\n  http://localhost:1323\\?name\\=Joe\n```\n\nSimilar to form data, custom data type can be bind using `Context#QueryParam(name string)`.\n\n## Path Parameters\n\nRegistered path parameters can be retrieved by name using `Context#Param(name string) string`. \n\n```go\ne.GET(\"/users/:name\", func(c echo.Context) error {\n  name := c.Param(\"name\")\n  return c.String(http.StatusOK, name)\n})\n```\n\n```bash\ncurl http://localhost:1323/users/Joe\n```\n\n## Binding Data\n\nAlso binding of request data to native Go structs and variables is supported. See [Binding Data](https://echo.labstack.com/docs/binding).\n\n## Validate Data\n\nEcho doesn't have built-in data validation capabilities, however, you can register a custom validator using `Echo#Validator` and leverage third-party [libraries](https://github.com/avelino/awesome-go#validation).\n\nExample below uses [https://github.com/go-playground/validator](https://github.com/go-playground/validator) framework for validation:\n\n```go\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/go-playground/validator\"\n  \"github.com/labstack/echo/v4\"\n  \"github.com/labstack/echo/v4/middleware\"\n)\n\ntype (\n  User struct {\n    Name  string `json:\"name\" validate:\"required\"`\n    Email string `json:\"email\" validate:\"required,email\"`\n  }\n\n  CustomValidator struct {\n    validator *validator.Validate\n  }\n)\n\nfunc (cv *CustomValidator) Validate(i interface{}) error {\n  if err := cv.validator.Struct(i); err != nil {\n    // Optionally, you could return the error to give each route more control over the status code\n    return echo.NewHTTPError(http.StatusBadRequest, err.Error())\n  }\n  return nil\n}\n\nfunc main() {\n  e := echo.New()\n  e.Validator = &CustomValidator{validator: validator.New()}\n  e.POST(\"/users\", func(c echo.Context) (err error) {\n    u := new(User)\n    if err = c.Bind(u); err != nil {\n      return echo.NewHTTPError(http.StatusBadRequest, err.Error())\n    }\n    if err = c.Validate(u); err != nil {\n      return err\n    }\n    return c.JSON(http.StatusOK, u)\n  })\n  e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe\",\"email\":\"joe@invalid-domain\"}'\n{\"message\":\"Key: 'User.Email' Error:Field validation for 'Email' failed on the 'email' tag\"}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "overview", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I retrieve data in echo?\n\nAssistant: To retrieve data in echo, here's what you do:\nThis section explains how to retrieve different types of data in Echo..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I form data in echo?\n\nAssistant: To form data in echo, here's what you do:\nForm data can be retrieved by name using `Context#FormValue(name string)`. \n\n```go\n// Handler\nfunc(c echo.Context) error {\n  name := c.FormValue(\"name\")\n  return c.String(http.StatusOK, name)\n}\n```\n\n```bash\ncurl -X POST http://localhost:1323 -d 'name=Joe'\n``` \n\nTo bind a custom data type, you can implement `Echo#BindUnmarshaler` interface.\n\n```go\ntype Timestamp time.Time\n\nfunc (t *Timestamp) UnmarshalParam(src string) error {\n  ts, err := time.Parse(time.RFC3339, src)\n  *t = Timestamp(ts)\n  return err\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I query parameters in echo?\n\nAssistant: To query parameters in echo, here's what you do:\nQuery parameters can be retrieved by name using `Context#QueryParam(name string)`. \n\n```go\n// Handler\nfunc(c echo.Context) error {\n  name := c.QueryParam(\"name\")\n  return c.String(http.StatusOK, name)\n})\n```\n\n```bash\ncurl \\\n  -X GET \\\n  http://localhost:1323\\?name\\=Joe\n```\n\nSimilar to form data, custom data type can be bind using `Context#QueryParam(name string)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I path parameters in echo?\n\nAssistant: To path parameters in echo, here's what you do:\nRegistered path parameters can be retrieved by name using `Context#Param(name string) string`. \n\n```go\ne.GET(\"/users/:name\", func(c echo.Context) error {\n  name := c.Param(\"name\")\n  return c.String(http.StatusOK, name)\n})\n```\n\n```bash\ncurl http://localhost:1323/users/Joe\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I binding data in echo?\n\nAssistant: To binding data in echo, here's what you do:\nAlso binding of request data to native Go structs and variables is supported. See [Binding Data](https://echo.labstack.com/docs/binding)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I validate data in echo?\n\nAssistant: To validate data in echo, here's what you do:\nEcho doesn't have built-in data validation capabilities, however, you can register a custom validator using `Echo#Validator` and leverage third-party [libraries](https://github.com/avelino/awesome-go#validation).\n\nExample below uses [https://github.com/go-playground/validator](https://github.com/go-playground/validator) framework for validation:\n\n```go\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/go-playground/validator\"\n  \"github.com/labstack/echo/v4\"\n  \"github.com/labstack/echo/v4/middleware\"\n)\n\ntype (\n  User struct {\n    Name  string `json:\"name\" validate:\"required\"`\n    Email string `json:\"email\" validate:\"required,email\"`\n  }\n\n  CustomValidator struct {\n    validator *validator.Validate\n  }\n)\n\nfunc (cv *CustomValidator) Validate(i interface{}) error {\n  if err := cv.validator.Struct(i); err != nil {\n    // Optionally, you could return the error to give each route more control over the status code\n    return echo.NewHTTPError(http.StatusBadRequest, err.Error())\n  }\n  return nil\n}\n\nfunc main() {\n  e := echo.New()\n  e.Validator = &CustomValidator{validator: validator.New()}\n  e.POST(\"/users\", func(c echo.Context) (err error) {\n    u := new(User)\n    if err = c.Bind(u); err != nil {\n      return echo.NewHTTPError(http.StatusBadRequest, err.Error())\n    }\n    if err = c.Validate(u); err != nil {\n      return err\n    }\n    return c.JSON(http.StatusOK, u)\n  })\n  e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\n\n```bash\ncurl -X POST http://localhost:1323/users \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Joe\",\"email\":\"joe@invalid-domain\"}'\n{\"message\":\"Key: 'User.Email' Error:Field validation for 'Email' failed on the 'email' tag\"}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "section_detail", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Request Documentation in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Form Data Example**:\n\n```yaml\n// Handler\nfunc(c echo.Context) error {\n  name := c.FormValue(\"name\")\n  return c.String(http.StatusOK, name)\n}\n\n```\n\nThis snippet shows you how to form data example, which is an important aspect of request documentation.\n\n**Form Data Curl Command**:\n\n```yaml\ncurl -X POST http://localhost:1323 -d 'name=Joe'\n```\n\nThis snippet shows you how to form data curl command, which is an important aspect of request documentation.\n\n**Custom Data Type Example**:\n\n```yaml\ntype Timestamp time.Time\n\nfunc (t *Timestamp) UnmarshalParam(src string) error {\n  ts, err := time.Parse(time.RFC3339, src)\n  *t = Timestamp(ts)\n  return err\n}\n```\n\nThis snippet shows you how to custom data type example, which is an important aspect of request documentation.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "code_examples", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Request Documentation in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `Context#FormValue(name string)` to retrieve form data.\n\nImplement `Echo#BindUnmarshaler` for custom data types.\n\nUse `Context#QueryParam(name string)` for query parameters.\n\nRegister a custom validator using `Echo#Validator` for data validation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/request", "title": "Request Documentation", "description": "This page covers how to retrieve and validate data in Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:46:53", "type": "best_practices", "page_metadata": {"ogUrl": "https://echo.labstack.com/docs/request", "language": "en", "title": "Request | Echo", "docusaurus_tag": "docs-default-current", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:title": "Request | Echo", "docsearch:version": "current", "description": "Handling request", "og:description": "Handling request", "og:url": "https://echo.labstack.com/docs/request", "ogLocale": "en", "og:locale": "en", "ogTitle": "Request | Echo", "generator": "Docusaurus v3.6.3", "ogDescription": "Handling request", "twitter:card": "summary_large_image", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "scrapeId": "93d791f7-f81e-424b-bc41-054c36e64777", "sourceURL": "https://echo.labstack.com/docs/request", "url": "https://echo.labstack.com/docs/request", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Response Handling in Echo is in echo?\n\nAssistant: Sure, I'd be happy to explain Response Handling in Echo in echo.\n\n# Response Handling in Echo\n\nThis page covers various methods to send different types of responses using the Echo framework.Here's a quick rundown of what this is about:\n\n## Send String\n\n`Context#String(code int, s string)` can be used to send plain text response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.String(http.StatusOK, \"Hello, World!\")\n}\n```\n\n\n## Send HTML (Reference to templates)\n\n`Context#HTML(code int, html string)` can be used to send simple HTML response with status code. If you are looking to send dynamically generate HTML see [templates](https://echo.labstack.com/docs/templates).\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.HTML(http.StatusOK, \"<strong>Hello, World!</strong>\")\n}\n```\n\n\n## Send HTML Blob\n\n`Context#HTMLBlob(code int, b []byte)` can be used to send HTML blob with status code. You may find it handy using with a template engine which outputs `[]byte`.\n\n## Render Template\n\n[Learn more](https://echo.labstack.com/docs/templates)\n\n## Send JSON\n\n`Context#JSON(code int, i interface{})` can be used to encode a provided Go type into JSON and send it as response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\n// User\ntype User struct {\n  Name  string `json:\"name\" xml:\"name\"`\n  Email string `json:\"email\" xml:\"email\"`\n}\n\n// Handler\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  return c.JSON(http.StatusOK, u)\n}\n```\n\n\n## Stream JSON\n\n`Context#JSON()` internally uses `json.Marshal` which may not be efficient to large JSON, in that case you can directly stream JSON.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n  c.Response().WriteHeader(http.StatusOK)\n  return json.NewEncoder(c.Response()).Encode(u)\n}\n```\n\n\n## JSON Pretty\n\n`Context#JSONPretty(code int, i interface{}, indent string)` can be used to a send a JSON response which is pretty printed based on indent, which could be spaces or tabs.\n\nExample below sends a pretty print JSON indented with spaces:\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"joe@labstack.com\",\n  }\n  return c.JSONPretty(http.StatusOK, u, \"  \")\n}\n```\n\n```codeBlockLines_e6Vv\n{\n  \"email\": \"joe@labstack.com\",\n  \"name\": \"Jon\"\n}\n```\n\n**Tip**: You can also use `Context#JSON()` to output a pretty printed JSON (indented with spaces) by appending `pretty` in the request URL query string.\n\n_Example_\n\n```codeBlockLines_e6Vv\ncurl http://localhost:1323/users/1?pretty\n```\n\n\n## JSON Blob\n\n`Context#JSONBlob(code int, b []byte)` can be used to send pre-encoded JSON blob directly from external source, for example, database.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  encodedJSON := []byte{} // Encoded JSON from external source\n  return c.JSONBlob(http.StatusOK, encodedJSON)\n}\n```\n\n\n## Send JSONP\n\n`Context#JSONP(code int, callback string, i interface{})` can be used to encode a provided Go type into JSON and send it as JSONP payload constructed using a callback, with status code.\n\n[_Example_](https://echo.labstack.com/docs/cookbook/jsonp)\n\n## Send XML\n\n`Context#XML(code int, i interface{})` can be used to encode a provided Go type into XML and send it as response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  return c.XML(http.StatusOK, u)\n}\n```\n\n\n## Stream XML\n\n`Context#XML` internally uses `xml.Marshal` which may not be efficient to large XML, in that case you can directly stream XML.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationXMLCharsetUTF8)\n  c.Response().WriteHeader(http.StatusOK)\n  return xml.NewEncoder(c.Response()).Encode(u)\n}\n```\n\n\n## XML Pretty\n\n`Context#XMLPretty(code int, i interface{}, indent string)` can be used to a send an XML response which is pretty printed based on indent, which could be spaces or tabs.\n\nExample below sends a pretty print XML indented with spaces:\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"joe@labstack.com\",\n  }\n  return c.XMLPretty(http.StatusOK, u, \"  \")\n}\n```\n\n```codeBlockLines_e6Vv\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<User>\n  <Name>Jon</Name>\n  <Email>joe@labstack.com</Email>\n</User>\n```\n\n**Tip**: You can also use `Context#XML()` to output a pretty printed XML (indented with spaces) by appending `pretty` in the request URL query string.\n\n_Example_\n\n```codeBlockLines_e6Vv\ncurl http://localhost:1323/users/1?pretty\n```\n\n\n## XML Blob\n\n`Context#XMLBlob(code int, b []byte)` can be used to send pre-encoded XML blob directly from external source, for example, database.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  encodedXML := []byte{} // Encoded XML from external source\n  return c.XMLBlob(http.StatusOK, encodedXML)\n}\n```\n\n\n## Send File\n\n`Context#File(file string)` can be used to send the content of file as response. It automatically sets the correct content type and handles caching gracefully.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.File(\"<PATH_TO_YOUR_FILE>\")\n}\n```\n\n\n## Send Attachment\n\n`Context#Attachment(file, name string)` is similar to `File()` except that it is used to send file as `Content-Disposition: attachment` with provided name.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Attachment(\"<PATH_TO_YOUR_FILE>\", \"<ATTACHMENT_NAME>\")\n}\n```\n\n\n## Send Inline\n\n`Context#Inline(file, name string)` is similar to `File()` except that it is used to send file as `Content-Disposition: inline` with provided name.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Inline(\"<PATH_TO_YOUR_FILE>\")\n}\n```\n\n\n## Send Blob\n\n`Context#Blob(code int, contentType string, b []byte)` can be used to send an arbitrary data response with provided content type and status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) (err error) {\n  data := []byte(`0306703,0035866,NO_ACTION,06/19/2006\n\t 0086003,\"0005866\",UPDATED,06/19/2006`)\n  return c.Blob(http.StatusOK, \"text/csv\", data)\n}\n```\n\n\n## Send Stream\n\n`Context#Stream(code int, contentType string, r io.Reader)` can be used to send an arbitrary data stream response with provided content type, `io.Reader` and status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  f, err := os.Open(\"<PATH_TO_IMAGE>\")\n  if err != nil {\n    return err\n  }\n  defer f.Close()\n  return c.Stream(http.StatusOK, \"image/png\", f)\n}\n```\n\n\n## Send No Content\n\n`Context#NoContent(code int)` can be used to send empty body with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.NoContent(http.StatusOK)\n}\n```\n\n\n## Redirect Request\n\n`Context#Redirect(code int, url string)` can be used to redirect the request to a provided URL with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Redirect(http.StatusMovedPermanently, \"<URL>\")\n}\n```\n\n\n## Hooks\n\n### Before Response\n`Context#Response#Before(func())` can be used to register a function which is called just before the response is written.\n\n### After Response\n`Context#Response#After(func())` can be used to register a function which is called just after the response is written. If the \"Content-Length\" is unknown, none of the after function is executed.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  c.Response().Before(func() {\n    println(\"before response\")\n  })\n  c.Response().After(func() {\n    println(\"after response\")\n  })\n  return c.NoContent(http.StatusNoContent)\n}\n```\n\n**Tip**: It is possible to register multiple Before and After functions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "overview", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send string in echo?\n\nAssistant: To send string in echo, here's what you do:\n`Context#String(code int, s string)` can be used to send plain text response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.String(http.StatusOK, \"Hello, World!\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send html (reference to templates) in echo?\n\nAssistant: To send html (reference to templates) in echo, here's what you do:\n`Context#HTML(code int, html string)` can be used to send simple HTML response with status code. If you are looking to send dynamically generate HTML see [templates](https://echo.labstack.com/docs/templates).\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.HTML(http.StatusOK, \"<strong>Hello, World!</strong>\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send html blob in echo?\n\nAssistant: To send html blob in echo, here's what you do:\n`Context#HTMLBlob(code int, b []byte)` can be used to send HTML blob with status code. You may find it handy using with a template engine which outputs `[]byte`..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I render template in echo?\n\nAssistant: To render template in echo, here's what you do:\n[Learn more](https://echo.labstack.com/docs/templates).\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send json in echo?\n\nAssistant: To send json in echo, here's what you do:\n`Context#JSON(code int, i interface{})` can be used to encode a provided Go type into JSON and send it as response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\n// User\ntype User struct {\n  Name  string `json:\"name\" xml:\"name\"`\n  Email string `json:\"email\" xml:\"email\"`\n}\n\n// Handler\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  return c.JSON(http.StatusOK, u)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I stream json in echo?\n\nAssistant: To stream json in echo, here's what you do:\n`Context#JSON()` internally uses `json.Marshal` which may not be efficient to large JSON, in that case you can directly stream JSON.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n  c.Response().WriteHeader(http.StatusOK)\n  return json.NewEncoder(c.Response()).Encode(u)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I json pretty in echo?\n\nAssistant: To json pretty in echo, here's what you do:\n`Context#JSONPretty(code int, i interface{}, indent string)` can be used to a send a JSON response which is pretty printed based on indent, which could be spaces or tabs.\n\nExample below sends a pretty print JSON indented with spaces:\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"joe@labstack.com\",\n  }\n  return c.JSONPretty(http.StatusOK, u, \"  \")\n}\n```\n\n```codeBlockLines_e6Vv\n{\n  \"email\": \"joe@labstack.com\",\n  \"name\": \"Jon\"\n}\n```\n\n**Tip**: You can also use `Context#JSON()` to output a pretty printed JSON (indented with spaces) by appending `pretty` in the request URL query string.\n\n_Example_\n\n```codeBlockLines_e6Vv\ncurl http://localhost:1323/users/1?pretty\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I json blob in echo?\n\nAssistant: To json blob in echo, here's what you do:\n`Context#JSONBlob(code int, b []byte)` can be used to send pre-encoded JSON blob directly from external source, for example, database.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  encodedJSON := []byte{} // Encoded JSON from external source\n  return c.JSONBlob(http.StatusOK, encodedJSON)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send jsonp in echo?\n\nAssistant: To send jsonp in echo, here's what you do:\n`Context#JSONP(code int, callback string, i interface{})` can be used to encode a provided Go type into JSON and send it as JSONP payload constructed using a callback, with status code.\n\n[_Example_](https://echo.labstack.com/docs/cookbook/jsonp).\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send xml in echo?\n\nAssistant: To send xml in echo, here's what you do:\n`Context#XML(code int, i interface{})` can be used to encode a provided Go type into XML and send it as response with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  return c.XML(http.StatusOK, u)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I stream xml in echo?\n\nAssistant: To stream xml in echo, here's what you do:\n`Context#XML` internally uses `xml.Marshal` which may not be efficient to large XML, in that case you can directly stream XML.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationXMLCharsetUTF8)\n  c.Response().WriteHeader(http.StatusOK)\n  return xml.NewEncoder(c.Response()).Encode(u)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I xml pretty in echo?\n\nAssistant: To xml pretty in echo, here's what you do:\n`Context#XMLPretty(code int, i interface{}, indent string)` can be used to a send an XML response which is pretty printed based on indent, which could be spaces or tabs.\n\nExample below sends a pretty print XML indented with spaces:\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"joe@labstack.com\",\n  }\n  return c.XMLPretty(http.StatusOK, u, \"  \")\n}\n```\n\n```codeBlockLines_e6Vv\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<User>\n  <Name>Jon</Name>\n  <Email>joe@labstack.com</Email>\n</User>\n```\n\n**Tip**: You can also use `Context#XML()` to output a pretty printed XML (indented with spaces) by appending `pretty` in the request URL query string.\n\n_Example_\n\n```codeBlockLines_e6Vv\ncurl http://localhost:1323/users/1?pretty\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I xml blob in echo?\n\nAssistant: To xml blob in echo, here's what you do:\n`Context#XMLBlob(code int, b []byte)` can be used to send pre-encoded XML blob directly from external source, for example, database.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  encodedXML := []byte{} // Encoded XML from external source\n  return c.XMLBlob(http.StatusOK, encodedXML)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send file in echo?\n\nAssistant: To send file in echo, here's what you do:\n`Context#File(file string)` can be used to send the content of file as response. It automatically sets the correct content type and handles caching gracefully.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.File(\"<PATH_TO_YOUR_FILE>\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send attachment in echo?\n\nAssistant: To send attachment in echo, here's what you do:\n`Context#Attachment(file, name string)` is similar to `File()` except that it is used to send file as `Content-Disposition: attachment` with provided name.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Attachment(\"<PATH_TO_YOUR_FILE>\", \"<ATTACHMENT_NAME>\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send inline in echo?\n\nAssistant: To send inline in echo, here's what you do:\n`Context#Inline(file, name string)` is similar to `File()` except that it is used to send file as `Content-Disposition: inline` with provided name.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Inline(\"<PATH_TO_YOUR_FILE>\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send blob in echo?\n\nAssistant: To send blob in echo, here's what you do:\n`Context#Blob(code int, contentType string, b []byte)` can be used to send an arbitrary data response with provided content type and status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) (err error) {\n  data := []byte(`0306703,0035866,NO_ACTION,06/19/2006\n\t 0086003,\"0005866\",UPDATED,06/19/2006`)\n  return c.Blob(http.StatusOK, \"text/csv\", data)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send stream in echo?\n\nAssistant: To send stream in echo, here's what you do:\n`Context#Stream(code int, contentType string, r io.Reader)` can be used to send an arbitrary data stream response with provided content type, `io.Reader` and status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  f, err := os.Open(\"<PATH_TO_IMAGE>\")\n  if err != nil {\n    return err\n  }\n  defer f.Close()\n  return c.Stream(http.StatusOK, \"image/png\", f)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I send no content in echo?\n\nAssistant: To send no content in echo, here's what you do:\n`Context#NoContent(code int)` can be used to send empty body with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.NoContent(http.StatusOK)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I redirect request in echo?\n\nAssistant: To redirect request in echo, here's what you do:\n`Context#Redirect(code int, url string)` can be used to redirect the request to a provided URL with status code.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  return c.Redirect(http.StatusMovedPermanently, \"<URL>\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I hooks in echo?\n\nAssistant: To hooks in echo, here's what you do:\n### Before Response\n`Context#Response#Before(func())` can be used to register a function which is called just before the response is written.\n\n### After Response\n`Context#Response#After(func())` can be used to register a function which is called just after the response is written. If the \"Content-Length\" is unknown, none of the after function is executed.\n\n_Example_\n\n```codeBlockLines_e6Vv\nfunc(c echo.Context) error {\n  c.Response().Before(func() {\n    println(\"before response\")\n  })\n  c.Response().After(func() {\n    println(\"after response\")\n  })\n  return c.NoContent(http.StatusNoContent)\n}\n```\n\n**Tip**: It is possible to register multiple Before and After functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Response Handling in Echo in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Send String Example**:\n\n```yaml\nfunc(c echo.Context) error {\n  return c.String(http.StatusOK, \"Hello, World!\")\n}\n```\n\nThis snippet shows you how to send string example, which is an important aspect of response handling in echo.\n\n**Send HTML Example**:\n\n```yaml\nfunc(c echo.Context) error {\n  return c.HTML(http.StatusOK, \"<strong>Hello, World!</strong>\")\n}\n```\n\nThis snippet shows you how to send html example, which is an important aspect of response handling in echo.\n\n**Send JSON Example**:\n\n```yaml\n// User\ntype User struct {\n  Name  string `json:\"name\" xml:\"name\"`\n  Email string `json:\"email\" xml:\"email\"`\n}\n\n// Handler\nfunc(c echo.Context) error {\n  u := &User{\n    Name:  \"Jon\",\n    Email: \"jon@labstack.com\",\n  }\n  return c.JSON(http.StatusOK, u)\n}\n```\n\nThis snippet shows you how to send json example, which is an important aspect of response handling in echo.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Response Handling in Echo in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can also use `Context#JSON()` to output a pretty printed JSON (indented with spaces) by appending `pretty` in the request URL query string.\n\nIt is possible to register multiple Before and After functions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/response", "title": "Response Handling in Echo", "description": "This page covers various methods to send different types of responses using the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-03-01 03:47:29", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "docsearch:version": "current", "title": "Response | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:locale": "en", "description": "Sending response", "og:url": "https://echo.labstack.com/docs/response", "og:description": "Sending response", "twitter:card": "summary_large_image", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogTitle": "Response | Echo", "og:title": "Response | Echo", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "ogDescription": "Sending response", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/response", "scrapeId": "2a740aba-e053-4f26-b045-40f9e1c693d1", "sourceURL": "https://echo.labstack.com/docs/response", "url": "https://echo.labstack.com/docs/response", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Echo Routing Documentation is in echo?\n\nAssistant: Sure, I'd be happy to explain Echo Routing Documentation in echo.\n\n# Echo Routing Documentation\n\nThis page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.Here's a quick rundown of what this is about:\n\n## Introduction\n\nEcho's router is based on radix tree, making route lookup really fast. It leverages sync pool to reuse memory and achieve zero dynamic memory allocation with no GC overhead.\n\n## Route Registration\n\nRoutes can be registered by specifying HTTP method, path and a matching handler. For example, code below registers a route for method GET, path /hello and a handler which sends Hello, World! HTTP response.\n\n## Match-any / wildcard\n\nMatches zero or more characters in the path. For example, pattern /users/* will match:\n- /users/\n- /users/1\n- /users/1/files/1\n- /users/anything...\n\nThere can be only one effective match-any parameter in route. When route is added with multiple match-any /v1/*/images/*, the router matches always the first * till the end of request URL i.e. it works as /v1/*.\n\n## Path Matching Order\n\nStatic\nParam\nMatch any\n\nExample\n\nAbove routes would resolve in the following order:\n- /users/new\n- /users/:id\n- /users/1/files/*\n\nRoutes can be written in any order.\n\n## Group\n\nRoutes with common prefix can be grouped to define a new sub-router with optional middleware. In addition to specified middleware group also inherits parent middleware. To add middleware later in the group you can use Group.Use(m ...Middleware). Groups can also be nested.\n\n## Route Naming\n\nEach of the registration methods returns a Route object, which can be used to name a route after the registration. Route names can be very useful when generating URIs from the templates, where you can't access the handler references or when you have multiple routes with the same handler.\n\n## URI Building\n\nEcho#URI(handler HandlerFunc, params ...interface{}) can be used to generate URI for any handler with specified path parameters. It's helpful to centralize all your URI patterns which ease in refactoring your application.\n\n## List Routes\n\nEcho#Routes() []*Route can be used to list all registered routes in the order they are defined. Each route contains HTTP method, path and an associated handler.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I introduction in echo?\n\nAssistant: To introduction in echo, here's what you do:\nEcho's router is based on radix tree, making route lookup really fast. It leverages sync pool to reuse memory and achieve zero dynamic memory allocation with no GC overhead..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I route registration in echo?\n\nAssistant: To route registration in echo, here's what you do:\nRoutes can be registered by specifying HTTP method, path and a matching handler. For example, code below registers a route for method GET, path /hello and a handler which sends Hello, World! HTTP response..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I match-any / wildcard in echo?\n\nAssistant: To match-any / wildcard in echo, here's what you do:\nMatches zero or more characters in the path. For example, pattern /users/* will match:\n- /users/\n- /users/1\n- /users/1/files/1\n- /users/anything...\n\nThere can be only one effective match-any parameter in route. When route is added with multiple match-any /v1/*/images/*, the router matches always the first * till the end of request URL i.e. it works as /v1/*..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I path matching order in echo?\n\nAssistant: To path matching order in echo, here's what you do:\nStatic\nParam\nMatch any\n\nExample\n\nAbove routes would resolve in the following order:\n- /users/new\n- /users/:id\n- /users/1/files/*\n\nRoutes can be written in any order..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I group in echo?\n\nAssistant: To group in echo, here's what you do:\nRoutes with common prefix can be grouped to define a new sub-router with optional middleware. In addition to specified middleware group also inherits parent middleware. To add middleware later in the group you can use Group.Use(m ...Middleware). Groups can also be nested..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I route naming in echo?\n\nAssistant: To route naming in echo, here's what you do:\nEach of the registration methods returns a Route object, which can be used to name a route after the registration. Route names can be very useful when generating URIs from the templates, where you can't access the handler references or when you have multiple routes with the same handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I uri building in echo?\n\nAssistant: To uri building in echo, here's what you do:\nEcho#URI(handler HandlerFunc, params ...interface{}) can be used to generate URI for any handler with specified path parameters. It's helpful to centralize all your URI patterns which ease in refactoring your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I list routes in echo?\n\nAssistant: To list routes in echo, here's what you do:\nEcho#Routes() []*Route can be used to list all registered routes in the order they are defined. Each route contains HTTP method, path and an associated handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Echo Routing Documentation in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Route Registration Example**:\n\n```yaml\n// Handler\nfunc hello(c echo.Context) error {\n   return c.String(http.StatusOK, \"Hello, World!\")\n}\n\n// Route\ne.GET(\"/hello\", hello)\n```\n\nThis snippet shows you how to route registration example, which is an important aspect of echo routing documentation.\n\n**Match-any Example**:\n\n```yaml\ne.GET(\"/users/:id\", func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"/users/:id\")\n})\n\ne.GET(\"/users/new\", func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"/users/new\")\n})\n\ne.GET(\"/users/1/files/*\", func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"/users/1/files/*\")\n})\n```\n\nThis snippet shows you how to match-any example, which is an important aspect of echo routing documentation.\n\n**Group Example**:\n\n```yaml\ng := e.Group(\"/admin\")\ng.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\tif username == \"joe\" && password == \"secret\" {\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}))\n```\n\nThis snippet shows you how to group example, which is an important aspect of echo routing documentation.\n\n**Route Naming Example**:\n\n```yaml\nroute := e.POST(\"/users\", func(c echo.Context) error {\n})\nroute.Name = \"create-user\"\n\n// or using the inline syntax\ne.GET(\"/users/:id\", func(c echo.Context) error {\n}).Name = \"get-user\"\n```\n\nThis snippet shows you how to route naming example, which is an important aspect of echo routing documentation.\n\n**URI Building Example**:\n\n```yaml\n// Handler\nh := func(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"OK\")\n}\n\n// Route\ne.GET(\"/users/:id\", h)\n```\n\nThis snippet shows you how to uri building example, which is an important aspect of echo routing documentation.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Echo Routing Documentation in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRoutes can be written in any order.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/routing", "title": "Echo Routing Documentation", "description": "This page covers the routing capabilities of the Echo framework, including route registration, path matching, grouping, naming, URI building, and listing routes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:48:58", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "Routing | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_version": "current", "language": "en", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Routing | Echo", "og:url": "https://echo.labstack.com/docs/routing", "description": "Routing requests", "ogLocale": "en", "og:description": "Routing requests", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Routing | Echo", "docusaurus_tag": "docs-default-current", "og:locale": "en", "generator": "Docusaurus v3.6.3", "ogUrl": "https://echo.labstack.com/docs/routing", "docusaurus_locale": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Routing requests", "scrapeId": "f336c1fe-b79f-4c9e-8e45-b5f093b2009c", "sourceURL": "https://echo.labstack.com/docs/routing", "url": "https://echo.labstack.com/docs/routing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Starting the Echo Server is in echo?\n\nAssistant: Sure, I'd be happy to explain Starting the Echo Server in echo.\n\n# Starting the Echo Server\n\nEcho provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.Here's a quick rundown of what this is about:\n\n## HTTP Server\n\n`Echo.Start` is a convenience method that starts an HTTP server with Echo serving requests.\n\n## HTTPS Server\n\n`Echo.StartTLS` is a convenience method that starts an HTTPS server with Echo serving requests on a given address and uses `server.crt` and `server.key` as TLS certificate pair.\n\n## Auto TLS Server with Let’s Encrypt\n\nSee [Auto TLS Recipe](https://echo.labstack.com/docs/cookbook/auto-tls#server)\n\n## HTTP/2 Cleartext Server (HTTP2 over HTTP)\n\n`Echo.StartH2CServer` is a convenience method that starts a custom HTTP/2 cleartext server on a given address.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "overview", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http server in echo?\n\nAssistant: To http server in echo, here's what you do:\n`Echo.Start` is a convenience method that starts an HTTP server with Echo serving requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "section_detail", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I https server in echo?\n\nAssistant: To https server in echo, here's what you do:\n`Echo.StartTLS` is a convenience method that starts an HTTPS server with Echo serving requests on a given address and uses `server.crt` and `server.key` as TLS certificate pair..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "section_detail", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I auto tls server with let’s encrypt in echo?\n\nAssistant: To auto tls server with let’s encrypt in echo, here's what you do:\nSee [Auto TLS Recipe](https://echo.labstack.com/docs/cookbook/auto-tls#server).\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "section_detail", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I http/2 cleartext server (http2 over http) in echo?\n\nAssistant: To http/2 cleartext server (http2 over http) in echo, here's what you do:\n`Echo.StartH2CServer` is a convenience method that starts a custom HTTP/2 cleartext server on a given address..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "section_detail", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Starting the Echo Server in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Starting an HTTP Server**:\n\n```yaml\nfunc main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  if err := e.Start(\":8080\"); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n```\n\nThis snippet shows you how to starting an http server, which is an important aspect of starting the echo server.\n\n**Starting an HTTPS Server**:\n\n```yaml\nfunc main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  if err := e.StartTLS(\":8443\", \"server.crt\", \"server.key\"); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n```\n\nThis snippet shows you how to starting an https server, which is an important aspect of starting the echo server.\n\n**Starting an HTTP/2 Cleartext Server**:\n\n```yaml\nfunc main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  s := &http2.Server{\n    MaxConcurrentStreams: 250,\n    MaxReadFrameSize:     1048576,\n    IdleTimeout:          10 * time.Second,\n  }\n  if err := e.StartH2CServer(\":8080\", s); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n```\n\nThis snippet shows you how to starting an http/2 cleartext server, which is an important aspect of starting the echo server.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "code_examples", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Starting the Echo Server in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle errors properly when starting the server.\n\nCustomize server timeouts as needed for better performance.\n\nUse TLS certificates for secure connections in production environments.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/start-server", "title": "Starting the Echo Server", "description": "Echo provides convenience methods to start the server with various configurations including HTTP, HTTPS, Auto TLS, and HTTP/2.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:49:10", "type": "best_practices", "page_metadata": {"ogTitle": "Start Server | Echo", "docusaurus_version": "current", "twitter:card": "summary_large_image", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:title": "Start Server | Echo", "og:url": "https://echo.labstack.com/docs/start-server", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogLocale": "en", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/start-server", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Starting server", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Start Server | Echo", "ogDescription": "Starting server", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "Starting server", "scrapeId": "8f48101f-78e0-4dff-a264-2d87ee539ed7", "sourceURL": "https://echo.labstack.com/docs/start-server", "url": "https://echo.labstack.com/docs/start-server", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Static Files is in echo?\n\nAssistant: Sure, I'd be happy to explain Static Files in echo.\n\n# Static Files\n\nThis page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.Here's a quick rundown of what this is about:\n\n## Using Static Middleware\n\nSee [Using Static Middleware](https://echo.labstack.com/docs/middleware/static) for more details.\n\n## Using Echo#Static()\n\n`Echo#Static(prefix, root string)` registers a new route with path prefix to serve static files from the provided root directory.\n\n_Usage 1_\n\n```go\ne := echo.New()\ne.Static(\"/static\", \"assets\")\n```\n\nExample above will serve any file from the assets directory for path `/static/*`. For example, a request to `/static/js/main.js` will fetch and serve `assets/js/main.js` file.\n\n_Usage 2_\n\n```go\ne := echo.New()\ne.Static(\"/\", \"assets\")\n```\n\nExample above will serve any file from the assets directory for path `/*`. For example, a request to `/js/main.js` will fetch and serve `assets/js/main.js` file.\n\n## Using Echo#File()\n\n`Echo#File(path, file string)` registers a new route with path to serve a static file.\n\n_Usage 1_\n\nServing an index page from `public/index.html`\n\n```go\ne.File(\"/\", \"public/index.html\")\n```\n\n_Usage 2_\n\nServing a favicon from `images/favicon.ico`\n\n```go\ne.File(\"/favicon.ico\", \"images/favicon.ico\")\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "overview", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using static middleware in echo?\n\nAssistant: To using static middleware in echo, here's what you do:\nSee [Using Static Middleware](https://echo.labstack.com/docs/middleware/static) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using echo#static() in echo?\n\nAssistant: To using echo#static() in echo, here's what you do:\n`Echo#Static(prefix, root string)` registers a new route with path prefix to serve static files from the provided root directory.\n\n_Usage 1_\n\n```go\ne := echo.New()\ne.Static(\"/static\", \"assets\")\n```\n\nExample above will serve any file from the assets directory for path `/static/*`. For example, a request to `/static/js/main.js` will fetch and serve `assets/js/main.js` file.\n\n_Usage 2_\n\n```go\ne := echo.New()\ne.Static(\"/\", \"assets\")\n```\n\nExample above will serve any file from the assets directory for path `/*`. For example, a request to `/js/main.js` will fetch and serve `assets/js/main.js` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using echo#file() in echo?\n\nAssistant: To using echo#file() in echo, here's what you do:\n`Echo#File(path, file string)` registers a new route with path to serve a static file.\n\n_Usage 1_\n\nServing an index page from `public/index.html`\n\n```go\ne.File(\"/\", \"public/index.html\")\n```\n\n_Usage 2_\n\nServing a favicon from `images/favicon.ico`\n\n```go\ne.File(\"/favicon.ico\", \"images/favicon.ico\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "section_detail", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Static Files in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using Echo#Static() - Usage 1**:\n\n```yaml\ne := echo.New()\ne.Static(\"/static\", \"assets\")\n```\n\nThis snippet shows you how to using echo#static() - usage 1, which is an important aspect of static files.\n\n**Using Echo#Static() - Usage 2**:\n\n```yaml\ne := echo.New()\ne.Static(\"/\", \"assets\")\n```\n\nThis snippet shows you how to using echo#static() - usage 2, which is an important aspect of static files.\n\n**Using Echo#File() - Usage 1**:\n\n```yaml\ne.File(\"/\", \"public/index.html\")\n```\n\nThis snippet shows you how to using echo#file() - usage 1, which is an important aspect of static files.\n\n**Using Echo#File() - Usage 2**:\n\n```yaml\ne.File(\"/favicon.ico\", \"images/favicon.ico\")\n```\n\nThis snippet shows you how to using echo#file() - usage 2, which is an important aspect of static files.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "code_examples", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Static Files in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the root directory is correctly set to serve the intended static files.\n\nUse appropriate path prefixes to avoid conflicts with other routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/static-files", "title": "Static Files", "description": "This page covers how to serve static files using Echo framework, including images, JavaScript, CSS, PDFs, fonts, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:49:23", "type": "best_practices", "page_metadata": {"twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docusaurus_version": "current", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_tag": "docs-default-current", "og:description": "Serving static files", "description": "Serving static files", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://echo.labstack.com/img/favicon.ico", "ogDescription": "Serving static files", "title": "Static Files | Echo", "generator": "Docusaurus v3.6.3", "og:url": "https://echo.labstack.com/docs/static-files", "og:title": "Static Files | Echo", "docsearch:version": "current", "ogUrl": "https://echo.labstack.com/docs/static-files", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Static Files | Echo", "twitter:card": "summary_large_image", "language": "en", "docsearch:language": "en", "scrapeId": "6a6d0402-16a9-4317-98c6-c6413c892e40", "sourceURL": "https://echo.labstack.com/docs/static-files", "url": "https://echo.labstack.com/docs/static-files", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Templates - Echo Framework is in echo?\n\nAssistant: Sure, I'd be happy to explain Templates - Echo Framework in echo.\n\n# Templates - Echo Framework\n\nThis page covers how to render templates using the Echo framework in Go, including examples and advanced usage.Here's a quick rundown of what this is about:\n\n## Rendering\n\n`Context#Render(code int, name string, data interface{}) error` renders a template with data and sends a text/html response with status code. Templates can be registered by setting `Echo.Renderer`, allowing us to use any template engine.\n\nExample below shows how to use Go `html/template`:\n\n1. Implement `echo.Renderer` interface\n\n```go\n// Template struct to hold templates\n\ntype Template struct {\n       templates *template.Template\n}\n\n// Render method to render the template\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.templates.ExecuteTemplate(w, name, data)\n}\n```\n\n2. Pre-compile templates\n\n`public/views/hello.html`\n\n```go\n{{define \"hello\"}}Hello, {{.}}!{{end}}\n```\n\n```go\nt := &Template{\n       templates: template.Must(template.ParseGlob(\"public/views/*.html\")),\n}\n```\n\n3. Register templates\n\n```go\ne := echo.New()\ne.Renderer = t\ne.GET(\"/hello\", Hello)\n```\n\n4. Render a template inside your handler\n\n```go\nfunc Hello(c echo.Context) error {\n    return c.Render(http.StatusOK, \"hello\", \"World\")\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/templates", "title": "Templates - Echo Framework", "description": "This page covers how to render templates using the Echo framework in Go, including examples and advanced usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:49:59", "type": "overview", "page_metadata": {"og:title": "Templates | Echo", "ogUrl": "https://echo.labstack.com/docs/templates", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Using templates", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Templates | Echo", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Templates | Echo", "docusaurus_locale": "en", "og:locale": "en", "description": "Using templates", "og:description": "Using templates", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/templates", "scrapeId": "1534a1d2-fccb-4091-b794-2ed6bea2f9b0", "sourceURL": "https://echo.labstack.com/docs/templates", "url": "https://echo.labstack.com/docs/templates", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I rendering in echo?\n\nAssistant: To rendering in echo, here's what you do:\n`Context#Render(code int, name string, data interface{}) error` renders a template with data and sends a text/html response with status code. Templates can be registered by setting `Echo.Renderer`, allowing us to use any template engine.\n\nExample below shows how to use Go `html/template`:\n\n1. Implement `echo.Renderer` interface\n\n```go\n// Template struct to hold templates\n\ntype Template struct {\n       templates *template.Template\n}\n\n// Render method to render the template\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.templates.ExecuteTemplate(w, name, data)\n}\n```\n\n2. Pre-compile templates\n\n`public/views/hello.html`\n\n```go\n{{define \"hello\"}}Hello, {{.}}!{{end}}\n```\n\n```go\nt := &Template{\n       templates: template.Must(template.ParseGlob(\"public/views/*.html\")),\n}\n```\n\n3. Register templates\n\n```go\ne := echo.New()\ne.Renderer = t\ne.GET(\"/hello\", Hello)\n```\n\n4. Render a template inside your handler\n\n```go\nfunc Hello(c echo.Context) error {\n    return c.Render(http.StatusOK, \"hello\", \"World\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/templates", "title": "Templates - Echo Framework", "description": "This page covers how to render templates using the Echo framework in Go, including examples and advanced usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:49:59", "type": "section_detail", "page_metadata": {"og:title": "Templates | Echo", "ogUrl": "https://echo.labstack.com/docs/templates", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Using templates", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Templates | Echo", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Templates | Echo", "docusaurus_locale": "en", "og:locale": "en", "description": "Using templates", "og:description": "Using templates", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/templates", "scrapeId": "1534a1d2-fccb-4091-b794-2ed6bea2f9b0", "sourceURL": "https://echo.labstack.com/docs/templates", "url": "https://echo.labstack.com/docs/templates", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Templates - Echo Framework in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Template Implementation**:\n\n```yaml\ntype Template struct {\n       templates *template.Template\n}\n\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.templates.ExecuteTemplate(w, name, data)\n}\n```\n\nThis snippet shows you how to template implementation, which is an important aspect of templates - echo framework.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/templates", "title": "Templates - Echo Framework", "description": "This page covers how to render templates using the Echo framework in Go, including examples and advanced usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:49:59", "type": "code_examples", "page_metadata": {"og:title": "Templates | Echo", "ogUrl": "https://echo.labstack.com/docs/templates", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Using templates", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Templates | Echo", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Templates | Echo", "docusaurus_locale": "en", "og:locale": "en", "description": "Using templates", "og:description": "Using templates", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/templates", "scrapeId": "1534a1d2-fccb-4091-b794-2ed6bea2f9b0", "sourceURL": "https://echo.labstack.com/docs/templates", "url": "https://echo.labstack.com/docs/templates", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Templates - Echo Framework in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `echo.Renderer` interface to implement custom rendering logic.\n\nPre-compile templates for better performance.\n\nRegister templates with the Echo instance to use them in routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/templates", "title": "Templates - Echo Framework", "description": "This page covers how to render templates using the Echo framework in Go, including examples and advanced usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:49:59", "type": "best_practices", "page_metadata": {"og:title": "Templates | Echo", "ogUrl": "https://echo.labstack.com/docs/templates", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Using templates", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "title": "Templates | Echo", "docusaurus_version": "current", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "favicon": "https://echo.labstack.com/img/favicon.ico", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Templates | Echo", "docusaurus_locale": "en", "og:locale": "en", "description": "Using templates", "og:description": "Using templates", "docsearch:language": "en", "ogLocale": "en", "og:url": "https://echo.labstack.com/docs/templates", "scrapeId": "1534a1d2-fccb-4091-b794-2ed6bea2f9b0", "sourceURL": "https://echo.labstack.com/docs/templates", "url": "https://echo.labstack.com/docs/templates", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Testing is in echo?\n\nAssistant: Sure, I'd be happy to explain Testing in echo.\n\n# Testing\n\nThis page covers testing handlers and middleware in the Echo framework.Here's a quick rundown of what this is about:\n\n## Testing Handler\n\n`GET` `/users/:id`\n\nHandler below retrieves user by id from the database. If user is not found it returns `404` error with a message.\n\n## CreateUser\n\n`POST` `/users`\n\n- Accepts JSON payload\n- On success `201 - Created`\n- On error `500 - Internal Server Error`\n\n## GetUser\n\n`GET` `/users/:email`\n\n- On success `200 - OK`\n- On error `404 - Not Found` if user is not found otherwise `500 - Internal Server Error`\n\n## Using Form Payload\n\n```go\n// import \"net/url\"\nf := make(url.Values)\nf.Set(\"name\", \"Jon Snow\")\nf.Set(\"email\", \"jon@labstack.com\")\nreq := httptest.NewRequest(http.MethodPost, \"/\", strings.NewReader(f.Encode()))\nreq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationForm)\n```\n\n## Setting Path Params\n\n```go\nc.SetParamNames(\"id\", \"email\")\nc.SetParamValues(\"1\", \"jon@labstack.com\")\n```\n\n## Setting Query Params\n\n```go\n// import \"net/url\"\nq := make(url.Values)\nq.Set(\"email\", \"jon@labstack.com\")\nreq := httptest.NewRequest(http.MethodGet, \"/?\"+q.Encode(), nil)\n```\n\n## Testing Middleware\n\n_TBD_\n\nFor now you can look into built-in middleware [test cases](https://github.com/labstack/echo/tree/master/middleware).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "overview", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I testing handler in echo?\n\nAssistant: To testing handler in echo, here's what you do:\n`GET` `/users/:id`\n\nHandler below retrieves user by id from the database. If user is not found it returns `404` error with a message..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I createuser in echo?\n\nAssistant: To createuser in echo, here's what you do:\n`POST` `/users`\n\n- Accepts JSON payload\n- On success `201 - Created`\n- On error `500 - Internal Server Error`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I getuser in echo?\n\nAssistant: To getuser in echo, here's what you do:\n`GET` `/users/:email`\n\n- On success `200 - OK`\n- On error `404 - Not Found` if user is not found otherwise `500 - Internal Server Error`.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I using form payload in echo?\n\nAssistant: To using form payload in echo, here's what you do:\n```go\n// import \"net/url\"\nf := make(url.Values)\nf.Set(\"name\", \"Jon Snow\")\nf.Set(\"email\", \"jon@labstack.com\")\nreq := httptest.NewRequest(http.MethodPost, \"/\", strings.NewReader(f.Encode()))\nreq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationForm)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I setting path params in echo?\n\nAssistant: To setting path params in echo, here's what you do:\n```go\nc.SetParamNames(\"id\", \"email\")\nc.SetParamValues(\"1\", \"jon@labstack.com\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I setting query params in echo?\n\nAssistant: To setting query params in echo, here's what you do:\n```go\n// import \"net/url\"\nq := make(url.Values)\nq.Set(\"email\", \"jon@labstack.com\")\nreq := httptest.NewRequest(http.MethodGet, \"/?\"+q.Encode(), nil)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I testing middleware in echo?\n\nAssistant: To testing middleware in echo, here's what you do:\n_TBD_\n\nFor now you can look into built-in middleware [test cases](https://github.com/labstack/echo/tree/master/middleware)..\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "section_detail", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Testing in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Handler Code Example**:\n\n```yaml\n```go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype (\n\tUser struct {\n\t\tName  string `json:\"name\" form:\"name\"`\n\t\tEmail string `json:\"email\" form:\"email\"`\n\t}\n\thandler struct {\n\t\tdb map[string]*User\n\t}\n)\n\nfunc (h *handler) createUser(c echo.Context) error {\n\tu := new(User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\treturn c.JSON(http.StatusCreated, u)\n}\n\nfunc (h *handler) getUser(c echo.Context) error {\n\temail := c.Param(\"email\")\n\tuser := h.db[email]\n\tif user == nil {\n\t\treturn echo.NewHTTPError(http.StatusNotFound, \"user not found\")\n\t}\n\treturn c.JSON(http.StatusOK, user)\n}\n```\n```\n\nThis snippet shows you how to handler code example, which is an important aspect of testing.\n\n**Handler Test Code Example**:\n\n```yaml\n```go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar (\n\tmockDB = map[string]*User{\n\t\t\"jon@labstack.com\": &User{\"Jon Snow\", \"jon@labstack.com\"},\n\t}\n\tuserJSON = `{\"name\":\"Jon Snow\",\"email\":\"jon@labstack.com\"}`\n)\n\nfunc TestCreateUser(t *testing.T) {\n\t// Setup\n\te := echo.New()\n\treq := httptest.NewRequest(http.MethodPost, \"/\", strings.NewReader(userJSON))\n\treq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\trec := httptest.NewRecorder()\n\tc := e.NewContext(req, rec)\n\th := &handler{mockDB}\n\n\t// Assertions\n\tif assert.NoError(t, h.createUser(c)) {\n\t\tassert.Equal(t, http.StatusCreated, rec.Code)\n\t\tassert.Equal(t, userJSON, rec.Body.String())\n\t}\n}\n\nfunc TestGetUser(t *testing.T) {\n\t// Setup\n\te := echo.New()\n\treq := httptest.NewRequest(http.MethodGet, \"/\", nil)\n\trec := httptest.NewRecorder()\n\tc := e.NewContext(req, rec)\n\tc.SetPath(\"/users/:email\")\n\tc.SetParamNames(\"email\")\n\tc.SetParamValues(\"jon@labstack.com\")\n\th := &handler{mockDB}\n\n\t// Assertions\n\tif assert.NoError(t, h.getUser(c)) {\n\t\tassert.Equal(t, http.StatusOK, rec.Code)\n\t\tassert.Equal(t, userJSON, rec.Body.String())\n\t}\n}\n```\n```\n\nThis snippet shows you how to handler test code example, which is an important aspect of testing.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "code_examples", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Testing in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRefer to built-in middleware test cases for additional examples.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/testing", "title": "Testing", "description": "This page covers testing handlers and middleware in the Echo framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:51:19", "type": "best_practices", "page_metadata": {"favicon": "https://echo.labstack.com/img/favicon.ico", "og:description": "Testing handler and middleware", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:card": "summary_large_image", "ogDescription": "Testing handler and middleware", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "title": "Testing | Echo", "og:title": "Testing | Echo", "docusaurus_version": "current", "description": "Testing handler and middleware", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docusaurus_locale": "en", "og:url": "https://echo.labstack.com/docs/testing", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "ogLocale": "en", "ogTitle": "Testing | Echo", "ogUrl": "https://echo.labstack.com/docs/testing", "language": "en", "og:locale": "en", "docsearch:version": "current", "scrapeId": "0306e135-fa95-4eb1-8dde-9bc1d4ff3696", "sourceURL": "https://echo.labstack.com/docs/testing", "url": "https://echo.labstack.com/docs/testing", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Subdomain Cookbook is in echo?\n\nAssistant: Sure, I'd be happy to explain Subdomain Cookbook in echo.\n\n# Subdomain Cookbook\n\nThis page provides guidance on setting up subdomains in Echo.Here's a quick rundown of what this is about:\n\n## Server\n\ncookbook/subdomain/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\n- [Server](https://echo.labstack.com/docs/cookbook/subdomain#server)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/subdomain", "title": "Subdomain Cookbook", "description": "This page provides guidance on setting up subdomains in Echo.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:51:25", "type": "overview", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "ogDescription": "Subdomain recipe", "ogTitle": "Subdomain | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Subdomain recipe", "og:url": "https://echo.labstack.com/docs/cookbook/subdomain", "twitter:card": "summary_large_image", "og:locale": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/subdomain", "og:description": "Subdomain recipe", "docusaurus_locale": "en", "docusaurus_version": "current", "og:title": "Subdomain | Echo", "title": "Subdomain | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "df9715d2-8387-45b7-a99a-f66d4570e6f1", "sourceURL": "https://echo.labstack.com/docs/cookbook/subdomain", "url": "https://echo.labstack.com/docs/cookbook/subdomain", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I server in echo?\n\nAssistant: To server in echo, here's what you do:\ncookbook/subdomain/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n\n- [Server](https://echo.labstack.com/docs/cookbook/subdomain#server).\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/subdomain", "title": "Subdomain Cookbook", "description": "This page provides guidance on setting up subdomains in Echo.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "ogDescription": "Subdomain recipe", "ogTitle": "Subdomain | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Subdomain recipe", "og:url": "https://echo.labstack.com/docs/cookbook/subdomain", "twitter:card": "summary_large_image", "og:locale": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/subdomain", "og:description": "Subdomain recipe", "docusaurus_locale": "en", "docusaurus_version": "current", "og:title": "Subdomain | Echo", "title": "Subdomain | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "df9715d2-8387-45b7-a99a-f66d4570e6f1", "sourceURL": "https://echo.labstack.com/docs/cookbook/subdomain", "url": "https://echo.labstack.com/docs/cookbook/subdomain", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Subdomain Cookbook in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Server Code Example**:\n\n```yaml\ncookbook/subdomain/server.go\n\n```codeBlockLines_e6Vv\nloading...\n```\n```\n\nThis snippet shows you how to server code example, which is an important aspect of subdomain cookbook.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/cookbook/subdomain", "title": "Subdomain Cookbook", "description": "This page provides guidance on setting up subdomains in Echo.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:51:25", "type": "code_examples", "page_metadata": {"og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "language": "en", "ogDescription": "Subdomain recipe", "ogTitle": "Subdomain | Echo", "favicon": "https://echo.labstack.com/img/favicon.ico", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "description": "Subdomain recipe", "og:url": "https://echo.labstack.com/docs/cookbook/subdomain", "twitter:card": "summary_large_image", "og:locale": "en", "ogLocale": "en", "ogUrl": "https://echo.labstack.com/docs/cookbook/subdomain", "og:description": "Subdomain recipe", "docusaurus_locale": "en", "docusaurus_version": "current", "og:title": "Subdomain | Echo", "title": "Subdomain | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "scrapeId": "df9715d2-8387-45b7-a99a-f66d4570e6f1", "sourceURL": "https://echo.labstack.com/docs/cookbook/subdomain", "url": "https://echo.labstack.com/docs/cookbook/subdomain", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you explain what Prometheus Middleware is in echo?\n\nAssistant: Sure, I'd be happy to explain Prometheus Middleware in echo.\n\n# Prometheus Middleware\n\nPrometheus middleware generates metrics for HTTP requests.Here's a quick rundown of what this is about:\n\n## Usage\n\n- Add needed module `go get -u github.com/labstack/echo-contrib`\n- Add Prometheus middleware and metrics serving route\n\n## Examples\n\nServe metric from the same server as where metrics is gathered\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nServe metrics on a separate port\n\n```go\nfunc main() {\n\tapp := echo.New() // this Echo instance will serve route on port 8080\n\tapp.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\n\tgo func() {\n\t\tmetrics := echo.New() // this Echo will run on separate port 8081\n\t\tmetrics.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\t\tif err := metrics.Start(\":8081\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tapp.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := app.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n_Sample output (for first example)_\n\n```bash\ncurl http://localhost:8080/metrics\n\n# HELP echo_request_duration_seconds The HTTP request latencies in seconds.\n# TYPE echo_request_duration_seconds summary\necho_request_duration_seconds_sum 0.41086482\necho_request_duration_seconds_count 1\n# HELP echo_request_size_bytes The HTTP request sizes in bytes.\n# TYPE echo_request_size_bytes summary\necho_request_size_bytes_sum 56\necho_request_size_bytes_count 1\n# HELP echo_requests_total How many HTTP requests processed, partitioned by status code and HTTP method.\n# TYPE echo_requests_total counter\necho_requests_total{code=\"200\",host=\"localhost:8080\",method=\"GET\",url=\"/\"} 1\n# HELP echo_response_size_bytes The HTTP response sizes in bytes.\n# TYPE echo_response_size_bytes summary\necho_response_size_bytes_sum 61\necho_response_size_bytes_count 1\n... \n```\n\n\n## Custom Configuration\n\n### Serving custom Prometheus Metrics\n\n_Usage_\n\nUsing custom metrics with Prometheus default registry:\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomCounter := prometheus.NewCounter( // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"custom_requests_total\",\n\t\t\tHelp: \"How many HTTP requests processed, partitioned by status code and HTTP method.\",\n\t\t},\n\t)\n\tif err := prometheus.Register(customCounter); err != nil { // register your new counter metric with default metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t},\n\t}))\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // register route for getting gathered metrics\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nor create your own registry and register custom metrics with that:\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomRegistry := prometheus.NewRegistry() // create custom registry for your custom metrics\n\tcustomCounter := prometheus.NewCounter(    // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"custom_requests_total\",\n\t\t\tHelp: \"How many HTTP requests processed, partitioned by status code and HTTP method.\",\n\t\t},\n\t)\n\tif err := customRegistry.Register(customCounter); err != nil { // register your new counter metric with metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t\tRegisterer: customRegistry, // use our custom registry instead of default Prometheus registry\n\t\t},\n\t}))\n\te.GET(\"/metrics\", echoprometheus.NewHandlerWithConfig(echoprometheus.HandlerConfig{Gatherer: customRegistry})) // register route for getting gathered metrics data from our custom Registry\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Skipping URL(s)\n\n_Usage_\n\nA middleware skipper can be passed to avoid generating metrics to certain URL(s)\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tmwConfig := echoprometheus.MiddlewareConfig{\n\t\tSkipper: func(c echo.Context) bool {\n\t\t\treturn strings.HasPrefix(c.Path(), \"/testurl\")\n\t\t}, // does not gather metrics metrics on routes starting with `/testurl`\n\t}\n\te.Use(echoprometheus.NewMiddlewareWithConfig(mwConfig)) // adds middleware to gather metrics\n\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n\n## Complex Scenarios\n\nExample: modify default `echoprometheus` metrics definitions\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\t// labels of default metrics can be modified or added with `LabelFuncs` function\n\t\tLabelFuncs: map[string]echoprometheus.LabelValueFunc{\n\t\t\t\"scheme\": func(c echo.Context, err error) string { // additional custom label\n\t\t\t\treturn c.Scheme()\n\t\t\t},\n\t\t\t\"host\": func(c echo.Context, err error) string { // overrides default 'host' label value\n\t\t\t\treturn \"y_\" + c.Request().Host\n\t\t\t},\n\t\t},\n\t\t// The `echoprometheus` middleware registers the following metrics by default:\n\t\t// - Histogram: request_duration_seconds\n\t\t// - Histogram: response_size_bytes\n\t\t// - Histogram: request_size_bytes\n\t\t// - Counter: requests_total\n\t\t// which can be modified with `HistogramOptsFunc` and `CounterOptsFunc` functions\n\t\tHistogramOptsFunc: func(opts prometheus.HistogramOpts) prometheus.HistogramOpts {\n\t\t\tif opts.Name == \"request_duration_seconds\" {\n\t\t\t\topts.Buckets = []float64{1000.0, 10_000.0, 100_000.0, 1_000_000.0} // 1KB ,10KB, 100KB, 1MB\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t\tCounterOptsFunc: func(opts prometheus.CounterOpts) prometheus.CounterOpts {\n\t\t\tif opts.Name == \"requests_total\" {\n\t\t\t\topts.ConstLabels = prometheus.Labels{\"my_const\": \"123\"}\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t})) // adds middleware to gather metrics\n\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I usage in echo?\n\nAssistant: To usage in echo, here's what you do:\n- Add needed module `go get -u github.com/labstack/echo-contrib`\n- Add Prometheus middleware and metrics serving route.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I examples in echo?\n\nAssistant: To examples in echo, here's what you do:\nServe metric from the same server as where metrics is gathered\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nServe metrics on a separate port\n\n```go\nfunc main() {\n\tapp := echo.New() // this Echo instance will serve route on port 8080\n\tapp.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\n\tgo func() {\n\t\tmetrics := echo.New() // this Echo will run on separate port 8081\n\t\tmetrics.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\t\tif err := metrics.Start(\":8081\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tapp.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := app.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n_Sample output (for first example)_\n\n```bash\ncurl http://localhost:8080/metrics\n\n# HELP echo_request_duration_seconds The HTTP request latencies in seconds.\n# TYPE echo_request_duration_seconds summary\necho_request_duration_seconds_sum 0.41086482\necho_request_duration_seconds_count 1\n# HELP echo_request_size_bytes The HTTP request sizes in bytes.\n# TYPE echo_request_size_bytes summary\necho_request_size_bytes_sum 56\necho_request_size_bytes_count 1\n# HELP echo_requests_total How many HTTP requests processed, partitioned by status code and HTTP method.\n# TYPE echo_requests_total counter\necho_requests_total{code=\"200\",host=\"localhost:8080\",method=\"GET\",url=\"/\"} 1\n# HELP echo_response_size_bytes The HTTP response sizes in bytes.\n# TYPE echo_response_size_bytes summary\necho_response_size_bytes_sum 61\necho_response_size_bytes_count 1\n... \n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I custom configuration in echo?\n\nAssistant: To custom configuration in echo, here's what you do:\n### Serving custom Prometheus Metrics\n\n_Usage_\n\nUsing custom metrics with Prometheus default registry:\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomCounter := prometheus.NewCounter( // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"custom_requests_total\",\n\t\t\tHelp: \"How many HTTP requests processed, partitioned by status code and HTTP method.\",\n\t\t},\n\t)\n\tif err := prometheus.Register(customCounter); err != nil { // register your new counter metric with default metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t},\n\t}))\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // register route for getting gathered metrics\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nor create your own registry and register custom metrics with that:\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tcustomRegistry := prometheus.NewRegistry() // create custom registry for your custom metrics\n\tcustomCounter := prometheus.NewCounter(    // create new counter metric. This is replacement for `prometheus.Metric` struct\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"custom_requests_total\",\n\t\t\tHelp: \"How many HTTP requests processed, partitioned by status code and HTTP method.\",\n\t\t},\n\t)\n\tif err := customRegistry.Register(customCounter); err != nil { // register your new counter metric with metrics registry\n\t\tlog.Fatal(err)\n\t}\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\tAfterNext: func(c echo.Context, err error) {\n\t\t\tcustomCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n\t\t\tRegisterer: customRegistry, // use our custom registry instead of default Prometheus registry\n\t\t},\n\t}))\n\te.GET(\"/metrics\", echoprometheus.NewHandlerWithConfig(echoprometheus.HandlerConfig{Gatherer: customRegistry})) // register route for getting gathered metrics data from our custom Registry\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Skipping URL(s)\n\n_Usage_\n\nA middleware skipper can be passed to avoid generating metrics to certain URL(s)\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tmwConfig := echoprometheus.MiddlewareConfig{\n\t\tSkipper: func(c echo.Context) bool {\n\t\t\treturn strings.HasPrefix(c.Path(), \"/testurl\")\n\t\t}, // does not gather metrics metrics on routes starting with `/testurl`\n\t}\n\te.Use(echoprometheus.NewMiddlewareWithConfig(mwConfig)) // adds middleware to gather metrics\n\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: How do I complex scenarios in echo?\n\nAssistant: To complex scenarios in echo, here's what you do:\nExample: modify default `echoprometheus` metrics definitions\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n\t\t// labels of default metrics can be modified or added with `LabelFuncs` function\n\t\tLabelFuncs: map[string]echoprometheus.LabelValueFunc{\n\t\t\t\"scheme\": func(c echo.Context, err error) string { // additional custom label\n\t\t\t\treturn c.Scheme()\n\t\t\t},\n\t\t\t\"host\": func(c echo.Context, err error) string { // overrides default 'host' label value\n\t\t\t\treturn \"y_\" + c.Request().Host\n\t\t\t},\n\t\t},\n\t\t// The `echoprometheus` middleware registers the following metrics by default:\n\t\t// - Histogram: request_duration_seconds\n\t\t// - Histogram: response_size_bytes\n\t\t// - Histogram: request_size_bytes\n\t\t// - Counter: requests_total\n\t\t// which can be modified with `HistogramOptsFunc` and `CounterOptsFunc` functions\n\t\tHistogramOptsFunc: func(opts prometheus.HistogramOpts) prometheus.HistogramOpts {\n\t\t\tif opts.Name == \"request_duration_seconds\" {\n\t\t\t\topts.Buckets = []float64{1000.0, 10_000.0, 100_000.0, 1_000_000.0} // 1KB ,10KB, 100KB, 1MB\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t\tCounterOptsFunc: func(opts prometheus.CounterOpts) prometheus.CounterOpts {\n\t\t\tif opts.Name == \"requests_total\" {\n\t\t\t\topts.ConstLabels = prometheus.Labels{\"my_const\": \"123\"}\n\t\t\t}\n\t\t\treturn opts\n\t\t},\n\t})) // adds middleware to gather metrics\n\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: Can you give me some code examples for Prometheus Middleware in echo?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\ne := echo.New()\ne.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\ne.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of prometheus middleware.\n\n**Serve metrics from the same server**:\n\n```yaml\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\te.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n\n```\n\nThis snippet shows you how to serve metrics from the same server, which is an important aspect of prometheus middleware.\n\n**Serve metrics on a separate port**:\n\n```yaml\nfunc main() {\n\tapp := echo.New() // this Echo instance will serve route on port 8080\n\tapp.Use(echoprometheus.NewMiddleware(\"myapp\")) // adds middleware to gather metrics\n\n\tgo func() {\n\t\tmetrics := echo.New() // this Echo will run on separate port 8081\n\t\tmetrics.GET(\"/metrics\", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\t\tif err := metrics.Start(\":8081\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tapp.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"hello\")\n\t})\n\n\tif err := app.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nThis snippet shows you how to serve metrics on a separate port, which is an important aspect of prometheus middleware.\n\n", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
{"text": "System: You are a helpful echo expert.\n\nUser: What are some tips for using Prometheus Middleware in echo effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the latest version of Prometheus middleware for better support and features.\n\nConsider using a custom registry for more control over your metrics.\n\nUtilize the skipper function to avoid tracking metrics for specific routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://echo.labstack.com/docs/middleware/prometheus", "title": "Prometheus Middleware", "description": "Prometheus middleware generates metrics for HTTP requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:17", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://echo.labstack.com/docs/middleware/prometheus", "favicon": "https://echo.labstack.com/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_version": "current", "description": "Prometheus metrics middleware", "ogTitle": "Prometheus | Echo", "ogImage": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogDescription": "Prometheus metrics middleware", "docusaurus_tag": "docs-default-current", "og:title": "Prometheus | Echo", "og:description": "Prometheus metrics middleware", "title": "Prometheus | Echo", "ogUrl": "https://echo.labstack.com/docs/middleware/prometheus", "generator": "Docusaurus v3.6.3", "language": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "twitter:image": "https://echo.labstack.com/img/docusaurus-social-card.jpg", "og:locale": "en", "docsearch:language": "en", "scrapeId": "9b9a9192-d10f-4cbd-ab70-806933fa6495", "sourceURL": "https://echo.labstack.com/docs/middleware/prometheus", "url": "https://echo.labstack.com/docs/middleware/prometheus", "statusCode": 200}}}
