{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Flask Extension Development is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Flask Extension Development in flask-stable.\n\n# Flask Extension Development\n\nThis guide will show how to create a Flask extension, and some of the common patterns and requirements involved.Here's a quick rundown of what this is about:\n\n## Naming\n\nA Flask extension typically has `flask` in its name as a prefix or suffix. If it wraps another library, it should include the library name as well. This makes it easy to search for extensions, and makes their purpose clearer.\n\nA general Python packaging recommendation is that the install name from the package index and the name used in `import` statements should be related. The import name is lowercase, with words separated by underscores ( `_`). The install name is either lower case or title case, with words separated by dashes ( `-`). If it wraps another library, prefer using the same case as that library’s name.\n\nHere are some example install and import names:\n\n- `Flask-Name` imported as `flask_name`\n- `flask-name-lower` imported as `flask_name_lower`\n- `Flask-ComboName` imported as `flask_comboname`\n- `Name-Flask` imported as `name_flask`\n\n## The Extension Class and Initialization\n\nAll extensions will need some entry point that initializes the extension with the application. The most common pattern is to create a class that represents the extension’s configuration and behavior, with an `init_app` method to apply the extension instance to the given application instance.\n\n```\nclass HelloExtension:\n    def __init__(self, app=None):\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.before_request(...)\n```\n\nIt is important that the app is not stored on the extension, don’t do `self.app = app`. The only time the extension should have direct access to an app is during `init_app`, otherwise it should use [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\").\n\nThis allows the extension to support the application factory pattern, avoids circular import issues when importing the extension instance elsewhere in a user’s code, and makes testing with different configurations easier.\n\n```\nhello = HelloExtension()\n\ndef create_app():\n    app = Flask(__name__)\n    hello.init_app(app)\n    return app\n```\n\nAbove, the `hello` extension instance exists independently of the application. This means that other modules in a user’s project can do `from project import hello` and use the extension in blueprints before the app exists.\n\nThe [`Flask.extensions`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.extensions \"flask.Flask.extensions\") dict can be used to store a reference to the extension on the application, or some other state specific to the application. Be aware that this is a single namespace, so use a name unique to your extension, such as the extension’s name without the “flask” prefix.\n\n## Adding Behavior\n\nThere are many ways that an extension can add behavior. Any setup methods that are available on the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object can be used during an extension’s `init_app` method.\n\nA common pattern is to use [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") to initialize some data or a connection at the beginning of each request, then [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\") to clean it up at the end. This can be stored on [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\"), discussed more below.\n\nA more lazy approach is to provide a method that initializes and caches the data or connection. For example, a `ext.get_db` method could create a database connection the first time it’s called, so that a view that doesn’t use the database doesn’t create a connection.\n\nBesides doing something before and after every view, your extension might want to add some specific views as well. In this case, you could define a [`Blueprint`](https://flask.palletsprojects.com/en/stable/api/#flask.Blueprint \"flask.Blueprint\"), then call [`register_blueprint()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.register_blueprint \"flask.Flask.register_blueprint\") during `init_app` to add the blueprint to the app.\n\n## Configuration Techniques\n\nThere can be multiple levels and sources of configuration for an extension. You should consider what parts of your extension fall into each one.\n\n- Configuration per application instance, through `app.config` values. This is configuration that could reasonably change for each deployment of an application. A common example is a URL to an external resource, such as a database. Configuration keys should start with the extension’s name so that they don’t interfere with other extensions.\n\n- Configuration per extension instance, through `__init__` arguments. This configuration usually affects how the extension is used, such that it wouldn’t make sense to change it per deployment.\n\n- Configuration per extension instance, through instance attributes and decorator methods. It might be more ergonomic to assign to `ext.value`, or use a `@ext.register` decorator to register a function, after the extension instance has been created.\n\n- Global configuration through class attributes. Changing a class attribute like `Ext.connection_class` can customize default behavior without making a subclass. This could be combined per-extension configuration to override defaults.\n\n- Subclassing and overriding methods and attributes. Making the API of the extension itself something that can be overridden provides a very powerful tool for advanced customization.\n\nThe [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object itself uses all of these techniques.\n\nIt’s up to you to decide what configuration is appropriate for your extension, based on what you need and what you want to support.\n\nConfiguration should not be changed after the application setup phase is complete and the server begins handling requests. Configuration is global, any changes to it are not guaranteed to be visible to other workers.\n\n## Data During a Request\n\nWhen writing a Flask application, the [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") object is used to store information during a request. For example the [tutorial](https://flask.palletsprojects.com/en/stable/tutorial/database/) stores a connection to a SQLite database as `g.db`. Extensions can also use this, with some care.\nSince `g` is a single global namespace, extensions must use unique names that won’t collide with user data. For example, use the extension name as a prefix, or as a namespace.\n\n```\n# an internal prefix with the extension name\ng._hello_user_id = 2\n\n# or an internal prefix as a namespace\nfrom types import SimpleNamespace\ng._hello = SimpleNamespace()\ng._hello.user_id = 2\n```\n\nThe data in `g` lasts for an application context. An application context is active when a request context is, or when a CLI command is run. If you’re storing something that should be closed, use [`teardown_appcontext()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_appcontext \"flask.Flask.teardown_appcontext\") to ensure that it gets closed when the application context ends. If it should only be valid during a request, or would not be used in the CLI outside a request, use [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\").\n\n## Views and Models\n\nYour extension views might want to interact with specific models in your database, or some other extension or data connected to your application. For example, let’s consider a `Flask-SimpleBlog` extension that works with Flask-SQLAlchemy to provide a `Post` model and views to write and read posts.\n\nThe `Post` model needs to subclass the Flask-SQLAlchemy `db.Model` object, but that’s only available once you’ve created an instance of that extension, not when your extension is defining its views. So how can the view code, defined before the model exists, access the model?\n\nOne method could be to use [Class-based Views](https://flask.palletsprojects.com/en/stable/views/). During `__init__`, create the model, then create the views by passing the model to the view class’s [`as_view()`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View.as_view \"flask.views.View.as_view\") method.\n\n```\nclass PostAPI(MethodView):\n    def __init__(self, model):\n        self.model = model\n\n    def get(self, id):\n        post = self.model.query.get(id)\n        return jsonify(post.to_json())\n\nclass BlogExtension:\n    def __init__(self, db):\n        class Post(db.Model):\n            id = db.Column(primary_key=True)\n            title = db.Column(db.String, nullable=False)\n\n        self.post_model = Post\n\n    def init_app(self, app):\n        api_view = PostAPI.as_view(model=self.post_model)\n\ndb = SQLAlchemy()\nblog = BlogExtension(db)\ndb.init_app(app)\nblog.init_app(app)\n```\n\nAnother technique could be to use an attribute on the extension, such as `self.post_model` from above. Add the extension to `app.extensions` in `init_app`, then access\n`current_app.extensions[\"simple_blog\"].post_model` from views.\n\nYou may also want to provide base classes so that users can provide their own `Post` model that conforms to the API your extension expects. So they could implement `class Post(blog.BasePost)`, then set it as `blog.post_model`.\n\nAs you can see, this can get a bit complex. Unfortunately, there’s no perfect solution here, only different strategies and tradeoffs depending on your needs and how much customization you want to offer. Luckily, this sort of resource dependency is not a common need for most extensions. Remember, if you need help with design, ask on our [Discord Chat](https://discord.gg/pallets) or [GitHub Discussions](https://github.com/pallets/flask/discussions).\n\n## Recommended Extension Guidelines\n\nFlask previously had the concept of “approved extensions”, where the Flask maintainers evaluated the quality, support, and compatibility of the extensions before listing them. While the list became too difficult to maintain over time, the guidelines are still relevant to all extensions maintained and developed today, as they help the Flask ecosystem remain consistent and compatible.\n\n1. An extension requires a maintainer. In the event an extension author would like to move beyond the project, the project should find a new maintainer and transfer access to the repository, documentation, PyPI, and any other services. The [Pallets-Eco](https://github.com/pallets-eco) organization on GitHub allows for community maintenance with oversight from the Pallets maintainers.\n\n2. The naming scheme is _Flask-ExtensionName_ or _ExtensionName-Flask_. It must provide exactly one package or module named `flask_extension_name`.\n\n3. The extension must use an open source license. The Python web ecosystem tends to prefer BSD or MIT. It must be open source and publicly available.\n\n4. The extension’s API must have the following characteristics:\n   - It must support multiple applications running in the same Python process. Use `current_app` instead of `self.app`, store configuration and state per application instance.\n   - It must be possible to use the factory pattern for creating applications. Use the `ext.init_app()` pattern.\n5. From a clone of the repository, an extension with its dependencies must be installable in editable mode with `pip install -e .`.\n\n6. It must ship tests that can be invoked with a common tool like `tox -e py`, `nox -s test` or `pytest`. If not using `tox`, the test dependencies should be specified in a requirements file. The tests must be part of the sdist distribution.\n\n7. A link to the documentation or project website must be in the PyPI metadata or the readme. The documentation should use the Flask theme from the [Official Pallets Themes](https://pypi.org/project/Pallets-Sphinx-Themes/).\n\n8. The extension’s dependencies should not use upper bounds or assume any particular version scheme, but should use lower bounds to indicate minimum compatibility support. For example, `sqlalchemy>=1.4`.\n\n9. Indicate the versions of Python supported using `python_requires=\">=version\"`. Flask itself supports Python >=3.9 as of October 2024, and this will update over time.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I naming in flask-stable?\n\nAssistant: To naming in flask-stable, here's what you do:\nA Flask extension typically has `flask` in its name as a prefix or suffix. If it wraps another library, it should include the library name as well. This makes it easy to search for extensions, and makes their purpose clearer.\n\nA general Python packaging recommendation is that the install name from the package index and the name used in `import` statements should be related. The import name is lowercase, with words separated by underscores ( `_`). The install name is either lower case or title case, with words separated by dashes ( `-`). If it wraps another library, prefer using the same case as that library’s name.\n\nHere are some example install and import names:\n\n- `Flask-Name` imported as `flask_name`\n- `flask-name-lower` imported as `flask_name_lower`\n- `Flask-ComboName` imported as `flask_comboname`\n- `Name-Flask` imported as `name_flask`.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the extension class and initialization in flask-stable?\n\nAssistant: To the extension class and initialization in flask-stable, here's what you do:\nAll extensions will need some entry point that initializes the extension with the application. The most common pattern is to create a class that represents the extension’s configuration and behavior, with an `init_app` method to apply the extension instance to the given application instance.\n\n```\nclass HelloExtension:\n    def __init__(self, app=None):\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.before_request(...)\n```\n\nIt is important that the app is not stored on the extension, don’t do `self.app = app`. The only time the extension should have direct access to an app is during `init_app`, otherwise it should use [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\").\n\nThis allows the extension to support the application factory pattern, avoids circular import issues when importing the extension instance elsewhere in a user’s code, and makes testing with different configurations easier.\n\n```\nhello = HelloExtension()\n\ndef create_app():\n    app = Flask(__name__)\n    hello.init_app(app)\n    return app\n```\n\nAbove, the `hello` extension instance exists independently of the application. This means that other modules in a user’s project can do `from project import hello` and use the extension in blueprints before the app exists.\n\nThe [`Flask.extensions`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.extensions \"flask.Flask.extensions\") dict can be used to store a reference to the extension on the application, or some other state specific to the application. Be aware that this is a single namespace, so use a name unique to your extension, such as the extension’s name without the “flask” prefix..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I adding behavior in flask-stable?\n\nAssistant: To adding behavior in flask-stable, here's what you do:\nThere are many ways that an extension can add behavior. Any setup methods that are available on the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object can be used during an extension’s `init_app` method.\n\nA common pattern is to use [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") to initialize some data or a connection at the beginning of each request, then [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\") to clean it up at the end. This can be stored on [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\"), discussed more below.\n\nA more lazy approach is to provide a method that initializes and caches the data or connection. For example, a `ext.get_db` method could create a database connection the first time it’s called, so that a view that doesn’t use the database doesn’t create a connection.\n\nBesides doing something before and after every view, your extension might want to add some specific views as well. In this case, you could define a [`Blueprint`](https://flask.palletsprojects.com/en/stable/api/#flask.Blueprint \"flask.Blueprint\"), then call [`register_blueprint()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.register_blueprint \"flask.Flask.register_blueprint\") during `init_app` to add the blueprint to the app..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configuration techniques in flask-stable?\n\nAssistant: To configuration techniques in flask-stable, here's what you do:\nThere can be multiple levels and sources of configuration for an extension. You should consider what parts of your extension fall into each one.\n\n- Configuration per application instance, through `app.config` values. This is configuration that could reasonably change for each deployment of an application. A common example is a URL to an external resource, such as a database. Configuration keys should start with the extension’s name so that they don’t interfere with other extensions.\n\n- Configuration per extension instance, through `__init__` arguments. This configuration usually affects how the extension is used, such that it wouldn’t make sense to change it per deployment.\n\n- Configuration per extension instance, through instance attributes and decorator methods. It might be more ergonomic to assign to `ext.value`, or use a `@ext.register` decorator to register a function, after the extension instance has been created.\n\n- Global configuration through class attributes. Changing a class attribute like `Ext.connection_class` can customize default behavior without making a subclass. This could be combined per-extension configuration to override defaults.\n\n- Subclassing and overriding methods and attributes. Making the API of the extension itself something that can be overridden provides a very powerful tool for advanced customization.\n\nThe [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object itself uses all of these techniques.\n\nIt’s up to you to decide what configuration is appropriate for your extension, based on what you need and what you want to support.\n\nConfiguration should not be changed after the application setup phase is complete and the server begins handling requests. Configuration is global, any changes to it are not guaranteed to be visible to other workers..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I data during a request in flask-stable?\n\nAssistant: To data during a request in flask-stable, here's what you do:\nWhen writing a Flask application, the [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") object is used to store information during a request. For example the [tutorial](https://flask.palletsprojects.com/en/stable/tutorial/database/) stores a connection to a SQLite database as `g.db`. Extensions can also use this, with some care.\nSince `g` is a single global namespace, extensions must use unique names that won’t collide with user data. For example, use the extension name as a prefix, or as a namespace.\n\n```\n# an internal prefix with the extension name\ng._hello_user_id = 2\n\n# or an internal prefix as a namespace\nfrom types import SimpleNamespace\ng._hello = SimpleNamespace()\ng._hello.user_id = 2\n```\n\nThe data in `g` lasts for an application context. An application context is active when a request context is, or when a CLI command is run. If you’re storing something that should be closed, use [`teardown_appcontext()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_appcontext \"flask.Flask.teardown_appcontext\") to ensure that it gets closed when the application context ends. If it should only be valid during a request, or would not be used in the CLI outside a request, use [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\")..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I views and models in flask-stable?\n\nAssistant: To views and models in flask-stable, here's what you do:\nYour extension views might want to interact with specific models in your database, or some other extension or data connected to your application. For example, let’s consider a `Flask-SimpleBlog` extension that works with Flask-SQLAlchemy to provide a `Post` model and views to write and read posts.\n\nThe `Post` model needs to subclass the Flask-SQLAlchemy `db.Model` object, but that’s only available once you’ve created an instance of that extension, not when your extension is defining its views. So how can the view code, defined before the model exists, access the model?\n\nOne method could be to use [Class-based Views](https://flask.palletsprojects.com/en/stable/views/). During `__init__`, create the model, then create the views by passing the model to the view class’s [`as_view()`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View.as_view \"flask.views.View.as_view\") method.\n\n```\nclass PostAPI(MethodView):\n    def __init__(self, model):\n        self.model = model\n\n    def get(self, id):\n        post = self.model.query.get(id)\n        return jsonify(post.to_json())\n\nclass BlogExtension:\n    def __init__(self, db):\n        class Post(db.Model):\n            id = db.Column(primary_key=True)\n            title = db.Column(db.String, nullable=False)\n\n        self.post_model = Post\n\n    def init_app(self, app):\n        api_view = PostAPI.as_view(model=self.post_model)\n\ndb = SQLAlchemy()\nblog = BlogExtension(db)\ndb.init_app(app)\nblog.init_app(app)\n```\n\nAnother technique could be to use an attribute on the extension, such as `self.post_model` from above. Add the extension to `app.extensions` in `init_app`, then access\n`current_app.extensions[\"simple_blog\"].post_model` from views.\n\nYou may also want to provide base classes so that users can provide their own `Post` model that conforms to the API your extension expects. So they could implement `class Post(blog.BasePost)`, then set it as `blog.post_model`.\n\nAs you can see, this can get a bit complex. Unfortunately, there’s no perfect solution here, only different strategies and tradeoffs depending on your needs and how much customization you want to offer. Luckily, this sort of resource dependency is not a common need for most extensions. Remember, if you need help with design, ask on our [Discord Chat](https://discord.gg/pallets) or [GitHub Discussions](https://github.com/pallets/flask/discussions)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I recommended extension guidelines in flask-stable?\n\nAssistant: To recommended extension guidelines in flask-stable, here's what you do:\nFlask previously had the concept of “approved extensions”, where the Flask maintainers evaluated the quality, support, and compatibility of the extensions before listing them. While the list became too difficult to maintain over time, the guidelines are still relevant to all extensions maintained and developed today, as they help the Flask ecosystem remain consistent and compatible.\n\n1. An extension requires a maintainer. In the event an extension author would like to move beyond the project, the project should find a new maintainer and transfer access to the repository, documentation, PyPI, and any other services. The [Pallets-Eco](https://github.com/pallets-eco) organization on GitHub allows for community maintenance with oversight from the Pallets maintainers.\n\n2. The naming scheme is _Flask-ExtensionName_ or _ExtensionName-Flask_. It must provide exactly one package or module named `flask_extension_name`.\n\n3. The extension must use an open source license. The Python web ecosystem tends to prefer BSD or MIT. It must be open source and publicly available.\n\n4. The extension’s API must have the following characteristics:\n   - It must support multiple applications running in the same Python process. Use `current_app` instead of `self.app`, store configuration and state per application instance.\n   - It must be possible to use the factory pattern for creating applications. Use the `ext.init_app()` pattern.\n5. From a clone of the repository, an extension with its dependencies must be installable in editable mode with `pip install -e .`.\n\n6. It must ship tests that can be invoked with a common tool like `tox -e py`, `nox -s test` or `pytest`. If not using `tox`, the test dependencies should be specified in a requirements file. The tests must be part of the sdist distribution.\n\n7. A link to the documentation or project website must be in the PyPI metadata or the readme. The documentation should use the Flask theme from the [Official Pallets Themes](https://pypi.org/project/Pallets-Sphinx-Themes/).\n\n8. The extension’s dependencies should not use upper bounds or assume any particular version scheme, but should use lower bounds to indicate minimum compatibility support. For example, `sqlalchemy>=1.4`.\n\n9. Indicate the versions of Python supported using `python_requires=\">=version\"`. Flask itself supports Python >=3.9 as of October 2024, and this will update over time..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Flask Extension Development in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HelloExtension Class Example**:\n\n```yaml\nclass HelloExtension:\n    def __init__(self, app=None):\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        app.before_request(...)\n\n```\n\nThis snippet shows you how to helloextension class example, which is an important aspect of flask extension development.\n\n**Creating an App with HelloExtension**:\n\n```yaml\nhello = HelloExtension()\n\ndef create_app():\n    app = Flask(__name__)\n    hello.init_app(app)\n    return app\n\n```\n\nThis snippet shows you how to creating an app with helloextension, which is an important aspect of flask extension development.\n\n**Using g Object in Extensions**:\n\n```yaml\n# an internal prefix with the extension name\ng._hello_user_id = 2\n\n# or an internal prefix as a namespace\nfrom types import SimpleNamespace\ng._hello = SimpleNamespace()\ng._hello.user_id = 2\n\n```\n\nThis snippet shows you how to using g object in extensions, which is an important aspect of flask extension development.\n\n**PostAPI Class Example**:\n\n```yaml\nclass PostAPI(MethodView):\n    def __init__(self, model):\n        self.model = model\n\n    def get(self, id):\n        post = self.model.query.get(id)\n        return jsonify(post.to_json())\n\nclass BlogExtension:\n    def __init__(self, db):\n        class Post(db.Model):\n            id = db.Column(primary_key=True)\n            title = db.Column(db.String, nullable=False)\n\n        self.post_model = Post\n\n    def init_app(self, app):\n        api_view = PostAPI.as_view(model=self.post_model)\n\ndb = SQLAlchemy()\nblog = BlogExtension(db)\ndb.init_app(app)\nblog.init_app(app)\n\n```\n\nThis snippet shows you how to postapi class example, which is an important aspect of flask extension development.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Flask Extension Development in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe best ways to learn about extensions are to look at how other extensions you use are written, and discuss with others.\n\nDiscuss your design ideas with others on our Discord Chat or GitHub Discussions.\n\nThe best extensions share common patterns, so that anyone familiar with using one extension won’t feel completely lost with another.\n\nConfiguration should not be changed after the application setup phase is complete and the server begins handling requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensiondev", "title": "Flask Extension Development", "description": "This guide will show how to create a Flask extension, and some of the common patterns and requirements involved.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:57:18", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/extensiondev/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Flask Extension Development — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "2e61f178-3ae8-4f62-9777-1d674ac4435a", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensiondev", "url": "https://flask.palletsprojects.com/en/stable/extensiondev/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Sample Documentation Page is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Sample Documentation Page in flask-stable.\n\n# Sample Documentation Page\n\nThis page provides an overview of the sample documentation structure.Here's a quick rundown of what this is about:\n\n## Introduction\n\nThis section introduces the main concepts and objectives of the documentation.\n\n## Installation\n\nFollow these steps to install the software:\n1. Download the installer from the official website.\n2. Run the installer and follow the on-screen instructions.\n\n## Usage\n\nThis section explains how to use the software effectively.\n\n## Troubleshooting\n\nCommon issues and their solutions are discussed in this section.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "overview", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I introduction in flask-stable?\n\nAssistant: To introduction in flask-stable, here's what you do:\nThis section introduces the main concepts and objectives of the documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "section_detail", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installation in flask-stable?\n\nAssistant: To installation in flask-stable, here's what you do:\nFollow these steps to install the software:\n1. Download the installer from the official website.\n2. Run the installer and follow the on-screen instructions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "section_detail", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I usage in flask-stable?\n\nAssistant: To usage in flask-stable, here's what you do:\nThis section explains how to use the software effectively..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "section_detail", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I troubleshooting in flask-stable?\n\nAssistant: To troubleshooting in flask-stable, here's what you do:\nCommon issues and their solutions are discussed in this section..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "section_detail", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Sample Documentation Page in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Installation Command**:\n\n```yaml\n$ sudo apt-get install sample-software\n```\n\nThis snippet shows you how to basic installation command, which is an important aspect of sample documentation page.\n\n**Configuration Example**:\n\n```yaml\n{\n  \"setting1\": \"value1\",\n  \"setting2\": \"value2\"\n}\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of sample documentation page.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "code_examples", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Sample Documentation Page in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways read the installation instructions carefully.\n\nKeep your software updated to the latest version.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/cli", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:05:14", "type": "best_practices", "page_metadata": {"title": "Command Line Interface — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "09aa9ac0-94df-48e6-83d8-90e302cd6cc1", "sourceURL": "https://flask.palletsprojects.com/en/stable/cli", "url": "https://flask.palletsprojects.com/en/stable/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Design Decisions in Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Design Decisions in Flask in flask-stable.\n\n# Design Decisions in Flask\n\nThis section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.Here's a quick rundown of what this is about:\n\n## The Explicit Application Object\n\nA Python web application based on WSGI has to have one central callable object that implements the actual application. In Flask this is an instance of the `Flask` class. Each Flask application has to create an instance of this class itself and pass it the name of the module, but why can’t Flask do that itself?\n\nWithout such an explicit application object the following code:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\nWould look like this instead:\n\n```\nfrom hypothetical_flask import route\n\n@route('/')\ndef index():\n    return 'Hello World!'\n```\n\nThere are three major reasons for this. The most important one is that implicit application objects require that there may only be one instance at the time. There are ways to fake multiple applications with a single application object, like maintaining a stack of applications, but this causes some problems I won’t outline here in detail. Now the question is: when does a microframework need more than one application at the same time? A good example for this is unit testing. When you want to test something it can be very helpful to create a minimal application to test specific behavior. When the application object is deleted everything it allocated will be freed again.\n\nAnother thing that becomes possible when you have an explicit object lying around in your code is that you can subclass the base class (`Flask`) to alter specific behavior. This would not be possible without hacks if the object were created ahead of time for you based on a class that is not exposed to you.\n\nBut there is another very important reason why Flask depends on an explicit instantiation of that class: the package name. Whenever you create a Flask instance you usually pass it `__name__` as package name. Flask depends on that information to properly load resources relative to your module. With Python’s outstanding support for reflection it can then access the package to figure out where the templates and static files are stored (see `open_resource()`). Now obviously there are frameworks around that do not need any configuration and will still be able to load templates relative to your application module. But they have to use the current working directory for that, which is a very unreliable way to determine where the application is. The current working directory is process-wide and if you are running multiple applications in one process (which could happen in a webserver without you knowing) the paths will be off. Worse: many webservers do not set the working directory to the directory of your application but to the document root which does not have to be the same folder.\n\nThe third reason is “explicit is better than implicit”. That object is your WSGI application, you don’t have to remember anything else. If you want to apply a WSGI middleware, just wrap it and you’re done (though there are better ways to do that so that you do not lose the reference to the application object `wsgi_app()`).\n\nFurthermore this design makes it possible to use a factory function to create the application which is very helpful for unit testing and similar things (Application Factories).\n\n## The Routing System\n\nFlask uses the Werkzeug routing system which was designed to automatically order routes by complexity. This means that you can declare routes in arbitrary order and they will still work as expected. This is a requirement if you want to properly implement decorator based routing since decorators could be fired in undefined order when the application is split into multiple modules.\n\nAnother design decision with the Werkzeug routing system is that routes in Werkzeug try to ensure that URLs are unique. Werkzeug will go quite far with that in that it will automatically redirect to a canonical URL if a route is ambiguous.\n\n## One Template Engine\n\nFlask decides on one template engine: Jinja2. Why doesn’t Flask have a pluggable template engine interface? You can obviously use a different template engine, but Flask will still configure Jinja2 for you. While that limitation that Jinja2 is always configured will probably go away, the decision to bundle one template engine and use that will not.\n\nTemplate engines are like programming languages and each of those engines has a certain understanding about how things work. On the surface they all work the same: you tell the engine to evaluate a template with a set of variables and take the return value as string.\n\nBut that’s about where similarities end. Jinja2 for example has an extensive filter system, a certain way to do template inheritance, support for reusable blocks (macros) that can be used from inside templates and also from Python code, supports iterative template rendering, configurable syntax and more. On the other hand an engine like Genshi is based on XML stream evaluation, template inheritance by taking the availability of XPath into account and more. Mako on the other hand treats templates similar to Python modules.\n\nWhen it comes to connecting a template engine with an application or framework there is more than just rendering templates. For instance, Flask uses Jinja2’s extensive autoescaping support. Also it provides ways to access macros from Jinja2 templates.\n\nA template abstraction layer that would not take the unique features of the template engines away is a science on its own and a too large undertaking for a microframework like Flask.\n\nFurthermore extensions can then easily depend on one template language being present. You can easily use your own templating language, but an extension could still depend on Jinja itself.\n\n## What does “micro” mean?\n\n“Micro” does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The “micro” in microframework means Flask aims to keep the core simple but extensible. Flask won’t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don’t.\n\nBy default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be “micro”, but it’s ready for production use on a variety of needs.\n\nWhy does Flask call itself a microframework and yet it depends on two libraries (namely Werkzeug and Jinja2). Why shouldn’t it? If we look over to the Ruby side of web development there we have a protocol very similar to WSGI. Just that it’s called Rack there, but besides that it looks very much like a WSGI rendition for Ruby. But nearly all applications in Ruby land do not work with Rack directly, but on top of a library with the same name. This Rack library has two equivalents in Python: WebOb (formerly Paste) and Werkzeug. Paste is still around but from my understanding it’s sort of deprecated in favour of WebOb. The development of WebOb and Werkzeug started side by side with similar ideas in mind: be a good implementation of WSGI for other applications to take advantage.\n\nFlask is a framework that takes advantage of the work already done by Werkzeug to properly interface WSGI (which can be a complex task at times). Thanks to recent developments in the Python package infrastructure, packages with dependencies are no longer an issue and there are very few reasons against having libraries that depend on others.\n\n## Thread Locals\n\nFlask uses thread local objects (context local objects in fact, they support greenlet contexts as well) for request, session and an extra object you can put your own things on (`g`). Why is that and isn’t that a bad idea?\n\nYes it is usually not such a bright idea to use thread locals. They cause troubles for servers that are not based on the concept of threads and make large applications harder to maintain. However Flask is just not designed for large applications or asynchronous servers. Flask wants to make it quick and easy to write a traditional web application.\n\n## Async/await and ASGI support\n\nFlask supports `async` coroutines for view functions by executing the coroutine on a separate thread instead of using an event loop on the main thread as an async-first (ASGI) framework would. This is necessary for Flask to remain backwards compatible with extensions and code built before `async` was introduced into Python. This compromise introduces a performance cost compared with the ASGI frameworks, due to the overhead of the threads.\n\nDue to how tied to WSGI Flask’s code is, it’s not clear if it’s possible to make the `Flask` class support ASGI and WSGI at the same time. Work is currently being done in Werkzeug to work with ASGI, which may eventually enable support in Flask as well.\n\nSee Using async and await for more discussion.\n\n## What Flask is, What Flask is Not\n\nFlask will never have a database layer. It will not have a form library or anything else in that direction. Flask itself just bridges to Werkzeug to implement a proper WSGI application and to Jinja2 to handle templating. It also binds to a few common standard library packages such as logging. Everything else is up for extensions.\n\nWhy is this the case? Because people have different preferences and requirements and Flask could not meet those if it would force any of this into the core. The majority of web applications will need a template engine in some sort. However not every application needs a SQL database.\n\nAs your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface.\n\nThe idea of Flask is to build a good foundation for all applications. Everything else is up to you or extensions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "overview", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the explicit application object in flask-stable?\n\nAssistant: To the explicit application object in flask-stable, here's what you do:\nA Python web application based on WSGI has to have one central callable object that implements the actual application. In Flask this is an instance of the `Flask` class. Each Flask application has to create an instance of this class itself and pass it the name of the module, but why can’t Flask do that itself?\n\nWithout such an explicit application object the following code:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\nWould look like this instead:\n\n```\nfrom hypothetical_flask import route\n\n@route('/')\ndef index():\n    return 'Hello World!'\n```\n\nThere are three major reasons for this. The most important one is that implicit application objects require that there may only be one instance at the time. There are ways to fake multiple applications with a single application object, like maintaining a stack of applications, but this causes some problems I won’t outline here in detail. Now the question is: when does a microframework need more than one application at the same time? A good example for this is unit testing. When you want to test something it can be very helpful to create a minimal application to test specific behavior. When the application object is deleted everything it allocated will be freed again.\n\nAnother thing that becomes possible when you have an explicit object lying around in your code is that you can subclass the base class (`Flask`) to alter specific behavior. This would not be possible without hacks if the object were created ahead of time for you based on a class that is not exposed to you.\n\nBut there is another very important reason why Flask depends on an explicit instantiation of that class: the package name. Whenever you create a Flask instance you usually pass it `__name__` as package name. Flask depends on that information to properly load resources relative to your module. With Python’s outstanding support for reflection it can then access the package to figure out where the templates and static files are stored (see `open_resource()`). Now obviously there are frameworks around that do not need any configuration and will still be able to load templates relative to your application module. But they have to use the current working directory for that, which is a very unreliable way to determine where the application is. The current working directory is process-wide and if you are running multiple applications in one process (which could happen in a webserver without you knowing) the paths will be off. Worse: many webservers do not set the working directory to the directory of your application but to the document root which does not have to be the same folder.\n\nThe third reason is “explicit is better than implicit”. That object is your WSGI application, you don’t have to remember anything else. If you want to apply a WSGI middleware, just wrap it and you’re done (though there are better ways to do that so that you do not lose the reference to the application object `wsgi_app()`).\n\nFurthermore this design makes it possible to use a factory function to create the application which is very helpful for unit testing and similar things (Application Factories)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the routing system in flask-stable?\n\nAssistant: To the routing system in flask-stable, here's what you do:\nFlask uses the Werkzeug routing system which was designed to automatically order routes by complexity. This means that you can declare routes in arbitrary order and they will still work as expected. This is a requirement if you want to properly implement decorator based routing since decorators could be fired in undefined order when the application is split into multiple modules.\n\nAnother design decision with the Werkzeug routing system is that routes in Werkzeug try to ensure that URLs are unique. Werkzeug will go quite far with that in that it will automatically redirect to a canonical URL if a route is ambiguous..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I one template engine in flask-stable?\n\nAssistant: To one template engine in flask-stable, here's what you do:\nFlask decides on one template engine: Jinja2. Why doesn’t Flask have a pluggable template engine interface? You can obviously use a different template engine, but Flask will still configure Jinja2 for you. While that limitation that Jinja2 is always configured will probably go away, the decision to bundle one template engine and use that will not.\n\nTemplate engines are like programming languages and each of those engines has a certain understanding about how things work. On the surface they all work the same: you tell the engine to evaluate a template with a set of variables and take the return value as string.\n\nBut that’s about where similarities end. Jinja2 for example has an extensive filter system, a certain way to do template inheritance, support for reusable blocks (macros) that can be used from inside templates and also from Python code, supports iterative template rendering, configurable syntax and more. On the other hand an engine like Genshi is based on XML stream evaluation, template inheritance by taking the availability of XPath into account and more. Mako on the other hand treats templates similar to Python modules.\n\nWhen it comes to connecting a template engine with an application or framework there is more than just rendering templates. For instance, Flask uses Jinja2’s extensive autoescaping support. Also it provides ways to access macros from Jinja2 templates.\n\nA template abstraction layer that would not take the unique features of the template engines away is a science on its own and a too large undertaking for a microframework like Flask.\n\nFurthermore extensions can then easily depend on one template language being present. You can easily use your own templating language, but an extension could still depend on Jinja itself..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I what does “micro” mean? in flask-stable?\n\nAssistant: To what does “micro” mean? in flask-stable, here's what you do:\n“Micro” does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The “micro” in microframework means Flask aims to keep the core simple but extensible. Flask won’t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don’t.\n\nBy default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be “micro”, but it’s ready for production use on a variety of needs.\n\nWhy does Flask call itself a microframework and yet it depends on two libraries (namely Werkzeug and Jinja2). Why shouldn’t it? If we look over to the Ruby side of web development there we have a protocol very similar to WSGI. Just that it’s called Rack there, but besides that it looks very much like a WSGI rendition for Ruby. But nearly all applications in Ruby land do not work with Rack directly, but on top of a library with the same name. This Rack library has two equivalents in Python: WebOb (formerly Paste) and Werkzeug. Paste is still around but from my understanding it’s sort of deprecated in favour of WebOb. The development of WebOb and Werkzeug started side by side with similar ideas in mind: be a good implementation of WSGI for other applications to take advantage.\n\nFlask is a framework that takes advantage of the work already done by Werkzeug to properly interface WSGI (which can be a complex task at times). Thanks to recent developments in the Python package infrastructure, packages with dependencies are no longer an issue and there are very few reasons against having libraries that depend on others..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I thread locals in flask-stable?\n\nAssistant: To thread locals in flask-stable, here's what you do:\nFlask uses thread local objects (context local objects in fact, they support greenlet contexts as well) for request, session and an extra object you can put your own things on (`g`). Why is that and isn’t that a bad idea?\n\nYes it is usually not such a bright idea to use thread locals. They cause troubles for servers that are not based on the concept of threads and make large applications harder to maintain. However Flask is just not designed for large applications or asynchronous servers. Flask wants to make it quick and easy to write a traditional web application..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I async/await and asgi support in flask-stable?\n\nAssistant: To async/await and asgi support in flask-stable, here's what you do:\nFlask supports `async` coroutines for view functions by executing the coroutine on a separate thread instead of using an event loop on the main thread as an async-first (ASGI) framework would. This is necessary for Flask to remain backwards compatible with extensions and code built before `async` was introduced into Python. This compromise introduces a performance cost compared with the ASGI frameworks, due to the overhead of the threads.\n\nDue to how tied to WSGI Flask’s code is, it’s not clear if it’s possible to make the `Flask` class support ASGI and WSGI at the same time. Work is currently being done in Werkzeug to work with ASGI, which may eventually enable support in Flask as well.\n\nSee Using async and await for more discussion..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I what flask is, what flask is not in flask-stable?\n\nAssistant: To what flask is, what flask is not in flask-stable, here's what you do:\nFlask will never have a database layer. It will not have a form library or anything else in that direction. Flask itself just bridges to Werkzeug to implement a proper WSGI application and to Jinja2 to handle templating. It also binds to a few common standard library packages such as logging. Everything else is up for extensions.\n\nWhy is this the case? Because people have different preferences and requirements and Flask could not meet those if it would force any of this into the core. The majority of web applications will need a template engine in some sort. However not every application needs a SQL database.\n\nAs your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface.\n\nThe idea of Flask is to build a good foundation for all applications. Everything else is up to you or extensions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "section_detail", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Design Decisions in Flask in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Flask Application Example**:\n\n```yaml\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n\n```\n\nThis snippet shows you how to flask application example, which is an important aspect of design decisions in flask.\n\n**Hypothetical Flask Application Example**:\n\n```yaml\nfrom hypothetical_flask import route\n\n@route('/')\ndef index():\n    return 'Hello World!'\n\n```\n\nThis snippet shows you how to hypothetical flask application example, which is an important aspect of design decisions in flask.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "code_examples", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Design Decisions in Flask in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExplicit is better than implicit.\n\nUse a factory function to create the application for unit testing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/design", "title": "Design Decisions in Flask", "description": "This section explains the design decisions behind Flask, including the explicit application object, routing system, template engine choice, and the meaning of 'micro' in microframework.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:05:46", "type": "best_practices", "page_metadata": {"title": "Design Decisions in Flask — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/design/", "scrapeId": "27701cb5-787b-4d0a-aac1-9e64ff960499", "sourceURL": "https://flask.palletsprojects.com/en/stable/design", "url": "https://flask.palletsprojects.com/en/stable/design/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Class-based Views is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Class-based Views in flask-stable.\n\n# Class-based Views\n\nThis page introduces using the `View` and `MethodView` classes to write class-based views.Here's a quick rundown of what this is about:\n\n## Basic Reusable View\n\nLet’s walk through an example converting a view function to a view class. We start with a view function that queries a list of users then renders a template to show the list.\n\n```\n@app.route(\"/users/\")\ndef user_list():\n    users = User.query.all()\n    return render_template(\"users.html\", users=users)\n```\n\nThis works for the user model, but let’s say you also had more models that needed list pages. You’d need to write another view function for each model, even though the only thing that would change is the model and template name.\n\nInstead, you can write a `View` subclass that will query a model and render a template. As the first step, we’ll convert the view to a class without any customization.\n\n```\nfrom flask.views import View\n\nclass UserList(View):\n    def dispatch_request(self):\n        users = User.query.all()\n        return render_template(\"users.html\", objects=users)\n\napp.add_url_rule(\"/users/\", view_func=UserList.as_view(\"user_list\"))\n```\n\nThe `View.dispatch_request()` method is the equivalent of the view function. Calling `View.as_view()` method will create a view function that can be registered on the app with its `add_url_rule()` method. The first argument to `as_view` is the name to use to refer to the view with `url_for()`.\n\nNote\n\nYou can’t decorate the class with `@app.route()` the way you’d do with a basic view function.\n\nNext, we need to be able to register the same view class for different models and templates, to make it more useful than the original function. The class will take two arguments, the model and template, and store them on `self`. Then `dispatch_request` can reference these instead of hard-coded values.\n\n```\nclass ListView(View):\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n\nRemember, we create the view function with `View.as_view()` instead of creating the class directly. Any extra arguments passed to `as_view` are then passed when creating the class. Now we can register the same view to handle multiple models.\n\n```\napp.add_url_rule(\n    \"/users/\",\n    view_func=ListView.as_view(\"user_list\", User, \"users.html\"),\n)\napp.add_url_rule(\n    \"/stories/\",\n    view_func=ListView.as_view(\"story_list\", Story, \"stories.html\"),\n)\n```\n\n## URL Variables\n\nAny variables captured by the URL are passed as keyword arguments to the `dispatch_request` method, as they would be for a regular view function.\n\n```\nclass DetailView(View):\n    def __init__(self, model):\n        self.model = model\n        self.template = f\"{model.__name__.lower()}/detail.html\"\n\n    def dispatch_request(self, id):\n        item = self.model.query.get_or_404(id)\n        return render_template(self.template, item=item)\n\napp.add_url_rule(\n    \"/users/<int:id>\",\n    view_func=DetailView.as_view(\"user_detail\", User)\n)\n```\n\n## View Lifetime and `self`\n\nBy default, a new instance of the view class is created every time a request is handled. This means that it is safe to write other data to `self` during the request, since the next request will not see it, unlike other forms of global state.\n\nHowever, if your view class needs to do a lot of complex initialization, doing it for every request is unnecessary and can be inefficient. To avoid this, set `View.init_every_request` to `False`, which will only create one instance of the class and use it for every request. In this case, writing to `self` is not safe. If you need to store data during the request, use `g` instead.\n\nIn the `ListView` example, nothing writes to `self` during the request, so it is more efficient to create a single instance.\n\n```\nclass ListView(View):\n    init_every_request = False\n\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n\n## View Decorators\n\nThe view class itself is not the view function. View decorators need to be applied to the view function returned by `as_view`, not the class itself. Set `View.decorators` to a list of decorators to apply.\n\n```\nclass UserList(View):\n    decorators = [cache(minutes=2), login_required]\n\napp.add_url_rule('/users/', view_func=UserList.as_view())\n```\n\nIf you didn’t set `decorators`, you could apply them manually instead. This is equivalent to:\n\n```\nview = UserList.as_view(\"users_list\")\nview = cache(minutes=2)(view)\nview = login_required(view)\napp.add_url_rule('/users/', view_func=view)\n```\n\nKeep in mind that order matters. If you’re used to `@decorator` style, this is equivalent to:\n\n```\n@app.route(\"/users/\")\n@login_required\n@cache(minutes=2)\ndef user_list():\n    ...\n```\n\n## Method Hints\n\nA common pattern is to register a view with `methods=[\"GET\", \"POST\"]`, then check `request.method == \"POST\"` to decide what to do. Setting `View.methods` is equivalent to passing the list of methods to `add_url_rule` or `route`.\n\n```\nclass MyView(View):\n    methods = [\"GET\", \"POST\"]\n\n    def dispatch_request(self):\n        if request.method == \"POST\":\n            ...\n        ...\n\napp.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))\n```\n\nThis is equivalent to the following, except further subclasses can inherit or change the methods.\n\n```\napp.add_url_rule(\n    \"/my-view\",\n    view_func=MyView.as_view(\"my-view\"),\n    methods=[\"GET\", \"POST\"],\n)\n```\n\n## Method Dispatching and APIs\n\nFor APIs it can be helpful to use a different function for each HTTP method. `MethodView` extends the basic `View` to dispatch to different methods of the class based on the request method. Each HTTP method maps to a method of the class with the same (lowercase) name.\n\n`MethodView` automatically sets `View.methods` based on the methods defined by the class. It even knows how to handle subclasses that override or define other methods.\n\nWe can make a generic `ItemAPI` class that provides get (detail), patch (edit), and delete methods for a given model. A `GroupAPI` can provide get (list) and post (create) methods.\n\n```\nfrom flask.views import MethodView\n\nclass ItemAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model)\n\n    def _get_item(self, id):\n        return self.model.query.get_or_404(id)\n\n    def get(self, id):\n        item = self._get_item(id)\n        return jsonify(item.to_json())\n\n    def patch(self, id):\n        item = self._get_item(id)\n        errors = self.validator.validate(item, request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        item.update_from_json(request.json)\n        db.session.commit()\n        return jsonify(item.to_json())\n\n    def delete(self, id):\n        item = self._get_item(id)\n        db.session.delete(item)\n        db.session.commit()\n        return \"\", 204\n\nclass GroupAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model, create=True)\n\n    def get(self):\n        items = self.model.query.all()\n        return jsonify([item.to_json() for item in items])\n\n    def post(self):\n        errors = self.validator.validate(request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        db.session.add(self.model.from_json(request.json))\n        db.session.commit()\n        return jsonify(item.to_json())\n\n\ndef register_api(app, model, name):\n    item = ItemAPI.as_view(f\"{name}-item\", model)\n    group = GroupAPI.as_view(f\"{name}-group\", model)\n    app.add_url_rule(f\"/{name}/<int:id>\", view_func=item)\n    app.add_url_rule(f\"/{name}/\", view_func=group)\n\nregister_api(app, User, \"users\")\nregister_api(app, Story, \"stories\")\n```\n\nThis produces the following views, a standard REST API!\n\n|     |     |     |\n| --- | --- | --- |\n| URL | Method | Description |\n| `/users/` | `GET` | List all users |\n| `/users/` | `POST` | Create a new user |\n| `/users/<id>` | `GET` | Show a single user |\n| `/users/<id>` | `PATCH` | Update a user |\n| `/users/<id>` | `DELETE` | Delete a user |\n| `/stories/` | `GET` | List all stories |\n| `/stories/` | `POST` | Create a new story |\n| `/stories/<id>` | `GET` | Show a single story |\n| `/stories/<id>` | `PATCH` | Update a story |\n| `/stories/<id>` | `DELETE` | Delete a story |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I basic reusable view in flask-stable?\n\nAssistant: To basic reusable view in flask-stable, here's what you do:\nLet’s walk through an example converting a view function to a view class. We start with a view function that queries a list of users then renders a template to show the list.\n\n```\n@app.route(\"/users/\")\ndef user_list():\n    users = User.query.all()\n    return render_template(\"users.html\", users=users)\n```\n\nThis works for the user model, but let’s say you also had more models that needed list pages. You’d need to write another view function for each model, even though the only thing that would change is the model and template name.\n\nInstead, you can write a `View` subclass that will query a model and render a template. As the first step, we’ll convert the view to a class without any customization.\n\n```\nfrom flask.views import View\n\nclass UserList(View):\n    def dispatch_request(self):\n        users = User.query.all()\n        return render_template(\"users.html\", objects=users)\n\napp.add_url_rule(\"/users/\", view_func=UserList.as_view(\"user_list\"))\n```\n\nThe `View.dispatch_request()` method is the equivalent of the view function. Calling `View.as_view()` method will create a view function that can be registered on the app with its `add_url_rule()` method. The first argument to `as_view` is the name to use to refer to the view with `url_for()`.\n\nNote\n\nYou can’t decorate the class with `@app.route()` the way you’d do with a basic view function.\n\nNext, we need to be able to register the same view class for different models and templates, to make it more useful than the original function. The class will take two arguments, the model and template, and store them on `self`. Then `dispatch_request` can reference these instead of hard-coded values.\n\n```\nclass ListView(View):\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n\nRemember, we create the view function with `View.as_view()` instead of creating the class directly. Any extra arguments passed to `as_view` are then passed when creating the class. Now we can register the same view to handle multiple models.\n\n```\napp.add_url_rule(\n    \"/users/\",\n    view_func=ListView.as_view(\"user_list\", User, \"users.html\"),\n)\napp.add_url_rule(\n    \"/stories/\",\n    view_func=ListView.as_view(\"story_list\", Story, \"stories.html\"),\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I url variables in flask-stable?\n\nAssistant: To url variables in flask-stable, here's what you do:\nAny variables captured by the URL are passed as keyword arguments to the `dispatch_request` method, as they would be for a regular view function.\n\n```\nclass DetailView(View):\n    def __init__(self, model):\n        self.model = model\n        self.template = f\"{model.__name__.lower()}/detail.html\"\n\n    def dispatch_request(self, id):\n        item = self.model.query.get_or_404(id)\n        return render_template(self.template, item=item)\n\napp.add_url_rule(\n    \"/users/<int:id>\",\n    view_func=DetailView.as_view(\"user_detail\", User)\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I view lifetime and `self` in flask-stable?\n\nAssistant: To view lifetime and `self` in flask-stable, here's what you do:\nBy default, a new instance of the view class is created every time a request is handled. This means that it is safe to write other data to `self` during the request, since the next request will not see it, unlike other forms of global state.\n\nHowever, if your view class needs to do a lot of complex initialization, doing it for every request is unnecessary and can be inefficient. To avoid this, set `View.init_every_request` to `False`, which will only create one instance of the class and use it for every request. In this case, writing to `self` is not safe. If you need to store data during the request, use `g` instead.\n\nIn the `ListView` example, nothing writes to `self` during the request, so it is more efficient to create a single instance.\n\n```\nclass ListView(View):\n    init_every_request = False\n\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I view decorators in flask-stable?\n\nAssistant: To view decorators in flask-stable, here's what you do:\nThe view class itself is not the view function. View decorators need to be applied to the view function returned by `as_view`, not the class itself. Set `View.decorators` to a list of decorators to apply.\n\n```\nclass UserList(View):\n    decorators = [cache(minutes=2), login_required]\n\napp.add_url_rule('/users/', view_func=UserList.as_view())\n```\n\nIf you didn’t set `decorators`, you could apply them manually instead. This is equivalent to:\n\n```\nview = UserList.as_view(\"users_list\")\nview = cache(minutes=2)(view)\nview = login_required(view)\napp.add_url_rule('/users/', view_func=view)\n```\n\nKeep in mind that order matters. If you’re used to `@decorator` style, this is equivalent to:\n\n```\n@app.route(\"/users/\")\n@login_required\n@cache(minutes=2)\ndef user_list():\n    ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I method hints in flask-stable?\n\nAssistant: To method hints in flask-stable, here's what you do:\nA common pattern is to register a view with `methods=[\"GET\", \"POST\"]`, then check `request.method == \"POST\"` to decide what to do. Setting `View.methods` is equivalent to passing the list of methods to `add_url_rule` or `route`.\n\n```\nclass MyView(View):\n    methods = [\"GET\", \"POST\"]\n\n    def dispatch_request(self):\n        if request.method == \"POST\":\n            ...\n        ...\n\napp.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))\n```\n\nThis is equivalent to the following, except further subclasses can inherit or change the methods.\n\n```\napp.add_url_rule(\n    \"/my-view\",\n    view_func=MyView.as_view(\"my-view\"),\n    methods=[\"GET\", \"POST\"],\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I method dispatching and apis in flask-stable?\n\nAssistant: To method dispatching and apis in flask-stable, here's what you do:\nFor APIs it can be helpful to use a different function for each HTTP method. `MethodView` extends the basic `View` to dispatch to different methods of the class based on the request method. Each HTTP method maps to a method of the class with the same (lowercase) name.\n\n`MethodView` automatically sets `View.methods` based on the methods defined by the class. It even knows how to handle subclasses that override or define other methods.\n\nWe can make a generic `ItemAPI` class that provides get (detail), patch (edit), and delete methods for a given model. A `GroupAPI` can provide get (list) and post (create) methods.\n\n```\nfrom flask.views import MethodView\n\nclass ItemAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model)\n\n    def _get_item(self, id):\n        return self.model.query.get_or_404(id)\n\n    def get(self, id):\n        item = self._get_item(id)\n        return jsonify(item.to_json())\n\n    def patch(self, id):\n        item = self._get_item(id)\n        errors = self.validator.validate(item, request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        item.update_from_json(request.json)\n        db.session.commit()\n        return jsonify(item.to_json())\n\n    def delete(self, id):\n        item = self._get_item(id)\n        db.session.delete(item)\n        db.session.commit()\n        return \"\", 204\n\nclass GroupAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model, create=True)\n\n    def get(self):\n        items = self.model.query.all()\n        return jsonify([item.to_json() for item in items])\n\n    def post(self):\n        errors = self.validator.validate(request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        db.session.add(self.model.from_json(request.json))\n        db.session.commit()\n        return jsonify(item.to_json())\n\n\ndef register_api(app, model, name):\n    item = ItemAPI.as_view(f\"{name}-item\", model)\n    group = GroupAPI.as_view(f\"{name}-group\", model)\n    app.add_url_rule(f\"/{name}/<int:id>\", view_func=item)\n    app.add_url_rule(f\"/{name}/\", view_func=group)\n\nregister_api(app, User, \"users\")\nregister_api(app, Story, \"stories\")\n```\n\nThis produces the following views, a standard REST API!\n\n|     |     |     |\n| --- | --- | --- |\n| URL | Method | Description |\n| `/users/` | `GET` | List all users |\n| `/users/` | `POST` | Create a new user |\n| `/users/<id>` | `GET` | Show a single user |\n| `/users/<id>` | `PATCH` | Update a user |\n| `/users/<id>` | `DELETE` | Delete a user |\n| `/stories/` | `GET` | List all stories |\n| `/stories/` | `POST` | Create a new story |\n| `/stories/<id>` | `GET` | Show a single story |\n| `/stories/<id>` | `PATCH` | Update a story |\n| `/stories/<id>` | `DELETE` | Delete a story |.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Class-based Views in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Reusable View Example**:\n\n```yaml\n```\n@app.route(\"/users/\")\ndef user_list():\n    users = User.query.all()\n    return render_template(\"users.html\", users=users)\n```\n```\n\nThis snippet shows you how to basic reusable view example, which is an important aspect of class-based views.\n\n**UserList Class Example**:\n\n```yaml\n```\nfrom flask.views import View\n\nclass UserList(View):\n    def dispatch_request(self):\n        users = User.query.all()\n        return render_template(\"users.html\", objects=users)\n\napp.add_url_rule(\"/users/\", view_func=UserList.as_view(\"user_list\"))\n```\n```\n\nThis snippet shows you how to userlist class example, which is an important aspect of class-based views.\n\n**ListView Class Example**:\n\n```yaml\n```\nclass ListView(View):\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n```\n\nThis snippet shows you how to listview class example, which is an important aspect of class-based views.\n\n**DetailView Class Example**:\n\n```yaml\n```\nclass DetailView(View):\n    def __init__(self, model):\n        self.model = model\n        self.template = f\"{model.__name__.lower()}/detail.html\"\n\n    def dispatch_request(self, id):\n        item = self.model.query.get_or_404(id)\n        return render_template(self.template, item=item)\n\napp.add_url_rule(\n    \"/users/<int:id>\",\n    view_func=DetailView.as_view(\"user_detail\", User)\n)\n```\n```\n\nThis snippet shows you how to detailview class example, which is an important aspect of class-based views.\n\n**ListView with init_every_request Example**:\n\n```yaml\n```\nclass ListView(View):\n    init_every_request = False\n\n    def __init__(self, model, template):\n        self.model = model\n        self.template = template\n\n    def dispatch_request(self):\n        items = self.model.query.all()\n        return render_template(self.template, items=items)\n```\n```\n\nThis snippet shows you how to listview with init_every_request example, which is an important aspect of class-based views.\n\n**UserList with Decorators Example**:\n\n```yaml\n```\nclass UserList(View):\n    decorators = [cache(minutes=2), login_required]\n\napp.add_url_rule('/users/', view_func=UserList.as_view())\n```\n```\n\nThis snippet shows you how to userlist with decorators example, which is an important aspect of class-based views.\n\n**MyView with Method Hints Example**:\n\n```yaml\n```\nclass MyView(View):\n    methods = [\"GET\", \"POST\"]\n\n    def dispatch_request(self):\n        if request.method == \"POST\":\n            ...\n        ...\n\napp.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))\n```\n```\n\nThis snippet shows you how to myview with method hints example, which is an important aspect of class-based views.\n\n**ItemAPI and GroupAPI Example**:\n\n```yaml\n```\nfrom flask.views import MethodView\n\nclass ItemAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model)\n\n    def _get_item(self, id):\n        return self.model.query.get_or_404(id)\n\n    def get(self, id):\n        item = self._get_item(id)\n        return jsonify(item.to_json())\n\n    def patch(self, id):\n        item = self._get_item(id)\n        errors = self.validator.validate(item, request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        item.update_from_json(request.json)\n        db.session.commit()\n        return jsonify(item.to_json())\n\n    def delete(self, id):\n        item = self._get_item(id)\n        db.session.delete(item)\n        db.session.commit()\n        return \"\", 204\n\nclass GroupAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model, create=True)\n\n    def get(self):\n        items = self.model.query.all()\n        return jsonify([item.to_json() for item in items])\n\n    def post(self):\n        errors = self.validator.validate(request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        db.session.add(self.model.from_json(request.json))\n        db.session.commit()\n        return jsonify(item.to_json())\n```\n```\n\nThis snippet shows you how to itemapi and groupapi example, which is an important aspect of class-based views.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Class-based Views in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can’t decorate the class with @app.route() the way you’d do with a basic view function.\n\nIf your view class needs to do a lot of complex initialization, doing it for every request is unnecessary and can be inefficient. To avoid this, set View.init_every_request to False.\n\nKeep in mind that order matters when applying decorators.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/views", "title": "Class-based Views", "description": "This page introduces using the `View` and `MethodView` classes to write class-based views.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:07:46", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/views/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "Class-based Views — Flask Documentation (3.1.x)", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "799c3016-0e21-490f-9391-9027e3c1ef81", "sourceURL": "https://flask.palletsprojects.com/en/stable/views", "url": "https://flask.palletsprojects.com/en/stable/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Working with the Shell is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Working with the Shell in flask-stable.\n\n# Working with the Shell\n\nThis section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.Here's a quick rundown of what this is about:\n\n## Changelog\n\nAdded in version 0.3.\n\n## Introduction\n\nOne of the reasons everybody loves Python is the interactive shell. It basically allows you to execute Python commands in real time and immediately get results back. Flask itself does not come with an interactive shell, because it does not require any specific setup upfront, just import your application and start playing around. There are however some handy helpers to make playing around in the shell a more pleasant experience. The main issue with interactive console sessions is that you’re not triggering a request like a browser does which means that `g`, `request` and others are not available. But the code you want to test might depend on them, so what can you do? This is where some helper functions come in handy. Keep in mind however that these functions are not only there for interactive shell usage, but also for unit testing and other situations that require a faked request context. Generally it’s recommended that you read The Request Context first.\n\n## Command Line Interface\n\nStarting with Flask 0.11 the recommended way to work with the shell is the `flask shell` command which does a lot of this automatically for you. For instance the shell is automatically initialized with a loaded application context. For more information see Command Line Interface.\n\n## Creating a Request Context\n\nThe easiest way to create a proper request context from the shell is by using the `test_request_context` method which creates us a `RequestContext`:\n\n```\n>>> ctx = app.test_request_context()\n```\n\nNormally you would use the `with` statement to make this request object active, but in the shell it’s easier to use the `push()` and `pop()` methods by hand:\n\n```\n>>> ctx.push()\n```\n\nFrom that point onwards you can work with the request object until you call `pop`:\n\n```\n>>> ctx.pop()\n```\n\n## Firing Before/After Request\n\nBy just creating a request context, you still don’t have run the code that is normally run before a request. This might result in your database being unavailable if you are connecting to the database in a before-request callback or the current user not being stored on the `g` object etc. This however can easily be done yourself. Just call `preprocess_request()`:\n\n```\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> app.preprocess_request()\n```\n\nKeep in mind that the `preprocess_request()` function might return a response object, in that case just ignore it. To shutdown a request, you need to trick a bit before the after request functions (triggered by `process_response()`) operate on a response object:\n\n```\n>>> app.process_response(app.response_class())\n<Response 0 bytes [200 OK]>\n>>> ctx.pop()\n```\n\nThe functions registered as `teardown_request()` are automatically called when the context is popped. So this is the perfect place to automatically tear down resources that were needed by the request context (such as database connections).\n\n## Further Improving the Shell Experience\n\nIf you like the idea of experimenting in a shell, create yourself a module with stuff you want to star import into your interactive session. There you could also define some more helper methods for common things such as initializing the database, dropping tables etc. Just put them into a module (like `shelltools`) and import from there:\n\n```\n>>> from shelltools import *\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "overview", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I changelog in flask-stable?\n\nAssistant: To changelog in flask-stable, here's what you do:\nAdded in version 0.3..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I introduction in flask-stable?\n\nAssistant: To introduction in flask-stable, here's what you do:\nOne of the reasons everybody loves Python is the interactive shell. It basically allows you to execute Python commands in real time and immediately get results back. Flask itself does not come with an interactive shell, because it does not require any specific setup upfront, just import your application and start playing around. There are however some handy helpers to make playing around in the shell a more pleasant experience. The main issue with interactive console sessions is that you’re not triggering a request like a browser does which means that `g`, `request` and others are not available. But the code you want to test might depend on them, so what can you do? This is where some helper functions come in handy. Keep in mind however that these functions are not only there for interactive shell usage, but also for unit testing and other situations that require a faked request context. Generally it’s recommended that you read The Request Context first..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I command line interface in flask-stable?\n\nAssistant: To command line interface in flask-stable, here's what you do:\nStarting with Flask 0.11 the recommended way to work with the shell is the `flask shell` command which does a lot of this automatically for you. For instance the shell is automatically initialized with a loaded application context. For more information see Command Line Interface..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I creating a request context in flask-stable?\n\nAssistant: To creating a request context in flask-stable, here's what you do:\nThe easiest way to create a proper request context from the shell is by using the `test_request_context` method which creates us a `RequestContext`:\n\n```\n>>> ctx = app.test_request_context()\n```\n\nNormally you would use the `with` statement to make this request object active, but in the shell it’s easier to use the `push()` and `pop()` methods by hand:\n\n```\n>>> ctx.push()\n```\n\nFrom that point onwards you can work with the request object until you call `pop`:\n\n```\n>>> ctx.pop()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I firing before/after request in flask-stable?\n\nAssistant: To firing before/after request in flask-stable, here's what you do:\nBy just creating a request context, you still don’t have run the code that is normally run before a request. This might result in your database being unavailable if you are connecting to the database in a before-request callback or the current user not being stored on the `g` object etc. This however can easily be done yourself. Just call `preprocess_request()`:\n\n```\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> app.preprocess_request()\n```\n\nKeep in mind that the `preprocess_request()` function might return a response object, in that case just ignore it. To shutdown a request, you need to trick a bit before the after request functions (triggered by `process_response()`) operate on a response object:\n\n```\n>>> app.process_response(app.response_class())\n<Response 0 bytes [200 OK]>\n>>> ctx.pop()\n```\n\nThe functions registered as `teardown_request()` are automatically called when the context is popped. So this is the perfect place to automatically tear down resources that were needed by the request context (such as database connections)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I further improving the shell experience in flask-stable?\n\nAssistant: To further improving the shell experience in flask-stable, here's what you do:\nIf you like the idea of experimenting in a shell, create yourself a module with stuff you want to star import into your interactive session. There you could also define some more helper methods for common things such as initializing the database, dropping tables etc. Just put them into a module (like `shelltools`) and import from there:\n\n```\n>>> from shelltools import *\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "section_detail", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Working with the Shell in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Request Context**:\n\n```yaml\n>>> ctx = app.test_request_context()\n```\n\nThis snippet shows you how to creating a request context, which is an important aspect of working with the shell.\n\n**Pushing the Context**:\n\n```yaml\n>>> ctx.push()\n```\n\nThis snippet shows you how to pushing the context, which is an important aspect of working with the shell.\n\n**Popping the Context**:\n\n```yaml\n>>> ctx.pop()\n```\n\nThis snippet shows you how to popping the context, which is an important aspect of working with the shell.\n\n**Preprocessing Request**:\n\n```yaml\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> app.preprocess_request()\n```\n\nThis snippet shows you how to preprocessing request, which is an important aspect of working with the shell.\n\n**Processing Response**:\n\n```yaml\n>>> app.process_response(app.response_class())\n<Response 0 bytes [200 OK]>\n>>> ctx.pop()\n```\n\nThis snippet shows you how to processing response, which is an important aspect of working with the shell.\n\n**Importing from Shelltools**:\n\n```yaml\n>>> from shelltools import *\n```\n\nThis snippet shows you how to importing from shelltools, which is an important aspect of working with the shell.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "code_examples", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Working with the Shell in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRead The Request Context first for better understanding.\n\nUse `flask shell` command for an easier shell experience.\n\nCreate a module for common shell tasks to improve your workflow.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/shell", "title": "Working with the Shell", "description": "This section covers how to use the interactive shell with Flask, including creating request contexts and firing before/after requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:08:16", "type": "best_practices", "page_metadata": {"title": "Working with the Shell — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/shell/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "214709be-4409-4de7-926a-280bacad441c", "sourceURL": "https://flask.palletsprojects.com/en/stable/shell", "url": "https://flask.palletsprojects.com/en/stable/shell/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Flask Documentation Index is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Flask Documentation Index in flask-stable.\n\n# Flask Documentation Index\n\nA comprehensive index of all the components and functions available in Flask.Here's a quick rundown of what this is about:\n\n## Index\n\nA comprehensive index of all the components and functions available in Flask, organized alphabetically.\n\n## A\n\nContains functions and classes starting with the letter A, including abort(), aborter, and various properties related to requests and responses.\n\n## B\n\nContains functions and classes starting with the letter B, including base_url, before_app_request(), and Blueprint.\n\n## C\n\nContains functions and classes starting with the letter C, including cache_control, calculate_content_length(), and Config.\n\n## D\n\nContains functions and classes starting with the letter D, including data, date, and debug.\n\n## E\n\nContains functions and classes starting with the letter E, including endpoint, ensure_ascii, and errorhandler().\n\n## F\n\nContains functions and classes starting with the letter F, including files, flash(), and Flask.\n\n## G\n\nContains functions and classes starting with the letter G, including g, get(), and get_data().\n\n## H\n\nContains functions and classes starting with the letter H, including handle_exception() and has_app_context().\n\n## I\n\nContains functions and classes starting with the letter I, including if_match, if_modified_since, and is_json.\n\n## J\n\nContains functions and classes starting with the letter J, including jinja_env and jsonify().\n\n## K\n\nContains functions and classes starting with the letter K, including key.\n\n## L\n\nContains functions and classes starting with the letter L, including last_modified and load().\n\n## M\n\nContains functions and classes starting with the letter M, including make_response() and max_content_length.\n\n## N\n\nContains functions and classes starting with the letter N, including name and new.\n\n## O\n\nContains functions and classes starting with the letter O, including open() and options.\n\n## P\n\nContains functions and classes starting with the letter P, including parameter_storage_class and post().\n\n## Q\n\nContains functions and classes starting with the letter Q, including query_string.\n\n## R\n\nContains functions and classes starting with the letter R, including redirect() and request.\n\n## S\n\nContains functions and classes starting with the letter S, including session and send_file().\n\n## T\n\nContains functions and classes starting with the letter T, including tag() and template_filter().\n\n## U\n\nContains functions and classes starting with the letter U, including url and update().\n\n## V\n\nContains functions and classes starting with the letter V, including values and View.\n\n## W\n\nContains functions and classes starting with the letter W, including want_form_data_parsed and wsgi_app().\n\n## Y\n\nContains functions and classes starting with the letter Y, including YOURAPPLICATION_SETTINGS.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I index in flask-stable?\n\nAssistant: To index in flask-stable, here's what you do:\nA comprehensive index of all the components and functions available in Flask, organized alphabetically..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I a in flask-stable?\n\nAssistant: To a in flask-stable, here's what you do:\nContains functions and classes starting with the letter A, including abort(), aborter, and various properties related to requests and responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I b in flask-stable?\n\nAssistant: To b in flask-stable, here's what you do:\nContains functions and classes starting with the letter B, including base_url, before_app_request(), and Blueprint..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I c in flask-stable?\n\nAssistant: To c in flask-stable, here's what you do:\nContains functions and classes starting with the letter C, including cache_control, calculate_content_length(), and Config..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I d in flask-stable?\n\nAssistant: To d in flask-stable, here's what you do:\nContains functions and classes starting with the letter D, including data, date, and debug..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I e in flask-stable?\n\nAssistant: To e in flask-stable, here's what you do:\nContains functions and classes starting with the letter E, including endpoint, ensure_ascii, and errorhandler()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I f in flask-stable?\n\nAssistant: To f in flask-stable, here's what you do:\nContains functions and classes starting with the letter F, including files, flash(), and Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I g in flask-stable?\n\nAssistant: To g in flask-stable, here's what you do:\nContains functions and classes starting with the letter G, including g, get(), and get_data()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I h in flask-stable?\n\nAssistant: To h in flask-stable, here's what you do:\nContains functions and classes starting with the letter H, including handle_exception() and has_app_context()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I i in flask-stable?\n\nAssistant: To i in flask-stable, here's what you do:\nContains functions and classes starting with the letter I, including if_match, if_modified_since, and is_json..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I j in flask-stable?\n\nAssistant: To j in flask-stable, here's what you do:\nContains functions and classes starting with the letter J, including jinja_env and jsonify()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I k in flask-stable?\n\nAssistant: To k in flask-stable, here's what you do:\nContains functions and classes starting with the letter K, including key..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I l in flask-stable?\n\nAssistant: To l in flask-stable, here's what you do:\nContains functions and classes starting with the letter L, including last_modified and load()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I m in flask-stable?\n\nAssistant: To m in flask-stable, here's what you do:\nContains functions and classes starting with the letter M, including make_response() and max_content_length..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I n in flask-stable?\n\nAssistant: To n in flask-stable, here's what you do:\nContains functions and classes starting with the letter N, including name and new..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I o in flask-stable?\n\nAssistant: To o in flask-stable, here's what you do:\nContains functions and classes starting with the letter O, including open() and options..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I p in flask-stable?\n\nAssistant: To p in flask-stable, here's what you do:\nContains functions and classes starting with the letter P, including parameter_storage_class and post()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I q in flask-stable?\n\nAssistant: To q in flask-stable, here's what you do:\nContains functions and classes starting with the letter Q, including query_string..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I r in flask-stable?\n\nAssistant: To r in flask-stable, here's what you do:\nContains functions and classes starting with the letter R, including redirect() and request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I s in flask-stable?\n\nAssistant: To s in flask-stable, here's what you do:\nContains functions and classes starting with the letter S, including session and send_file()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I t in flask-stable?\n\nAssistant: To t in flask-stable, here's what you do:\nContains functions and classes starting with the letter T, including tag() and template_filter()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I u in flask-stable?\n\nAssistant: To u in flask-stable, here's what you do:\nContains functions and classes starting with the letter U, including url and update()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I v in flask-stable?\n\nAssistant: To v in flask-stable, here's what you do:\nContains functions and classes starting with the letter V, including values and View..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I w in flask-stable?\n\nAssistant: To w in flask-stable, here's what you do:\nContains functions and classes starting with the letter W, including want_form_data_parsed and wsgi_app()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I y in flask-stable?\n\nAssistant: To y in flask-stable, here's what you do:\nContains functions and classes starting with the letter Y, including YOURAPPLICATION_SETTINGS..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/genindex", "title": "Flask Documentation Index", "description": "A comprehensive index of all the components and functions available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 25, "timestamp": "2025-03-01 03:08:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Index — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/genindex/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "scrapeId": "4eb2cafe-6735-4b69-b91f-3d41ab82b9b8", "sourceURL": "https://flask.palletsprojects.com/en/stable/genindex", "url": "https://flask.palletsprojects.com/en/stable/genindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Changes is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Changes in flask-stable.\n\n# Changes\n\nThis page documents the changes made in various versions of Flask.Here's a quick rundown of what this is about:\n\n## Version 3.1.1\n\nUnreleased\n\n- Fix type hint for `cli_runner.invoke`. [#5645](https://github.com/pallets/flask/issues/5645)\n\n## Version 3.1.0\n\nReleased 2024-11-13\n\n- Drop support for Python 3.8. [#5623](https://github.com/pallets/flask/pull/5623)\n\n- Update minimum dependency versions to latest feature releases.\nWerkzeug >= 3.1, ItsDangerous >= 2.2, Blinker >= 1.9. [#5624,5633](https://github.com/pallets/flask/pull/5624,5633)\n\n- Provide a configuration option to control automatic option\nresponses. [#5496](https://github.com/pallets/flask/pull/5496)\n\n- `Flask.open_resource`/ `open_instance_resource` and\n`Blueprint.open_resource` take an `encoding` parameter to use when\nopening in text mode. It defaults to `utf-8`. [#5504](https://github.com/pallets/flask/issues/5504)\n\n- `Request.max_content_length` can be customized per-request instead of only\nthrough the `MAX_CONTENT_LENGTH` config. Added\n`MAX_FORM_MEMORY_SIZE` and `MAX_FORM_PARTS` config. Added documentation\nabout resource limits to the security page. [#5625](https://github.com/pallets/flask/issues/5625)\n\n- Add support for the `Partitioned` cookie attribute (CHIPS), with the\n`SESSION_COOKIE_PARTITIONED` config. [#5472](https://github.com/pallets/flask/issues/5472)\n\n- `-e path` takes precedence over default `.env` and `.flaskenv` files.\n`load_dotenv` loads default files in addition to a path unless\n`load_defaults=False` is passed. [#5628](https://github.com/pallets/flask/issues/5628)\n\n- Support key rotation with the `SECRET_KEY_FALLBACKS` config, a list of old\nsecret keys that can still be used for unsigning. Extensions will need to\nadd support. [#5621](https://github.com/pallets/flask/issues/5621)\n\n- Fix how setting `host_matching=True` or `subdomain_matching=False`\ninteracts with `SERVER_NAME`. Setting `SERVER_NAME` no longer restricts\nrequests to only that domain. [#5553](https://github.com/pallets/flask/issues/5553)\n\n- `Request.trusted_hosts` is checked during routing, and can be set through\nthe `TRUSTED_HOSTS` config. [#5636](https://github.com/pallets/flask/issues/5636)\n\n## Version 3.0.3\n\nReleased 2024-04-07\n\n- The default `hashlib.sha1` may not be available in FIPS builds. Don’t\naccess it at import time so the developer has time to change the default.\n[#5448](https://github.com/pallets/flask/issues/5448)\n\n- Don’t initialize the `cli` attribute in the sansio scaffold, but rather in\nthe `Flask` concrete class. [#5270](https://github.com/pallets/flask/pull/5270)\n\n## Version 3.0.2\n\nReleased 2024-02-03\n\n- Correct type for `jinja_loader` property. [#5388](https://github.com/pallets/flask/issues/5388)\n\n- Fix error with `--extra-files` and `--exclude-patterns` CLI options.\n[#5391](https://github.com/pallets/flask/issues/5391)\n\n## Version 3.0.1\n\nReleased 2024-01-18\n\n- Correct type for `path` argument to `send_file`. [#5336](https://github.com/pallets/flask/issues/5336)\n\n- Fix a typo in an error message for the `flask run --key` option. [#5344](https://github.com/pallets/flask/pull/5344)\n\n- Session data is untagged without relying on the built-in `json.loads` `object_hook`. This allows other JSON providers that don’t implement that.\n[#5381](https://github.com/pallets/flask/issues/5381)\n\n- Address more type findings when using mypy strict mode. [#5383](https://github.com/pallets/flask/pull/5383)\n\n## Version 3.0.0\n\nReleased 2023-09-30\n\n- Remove previously deprecated code. [#5223](https://github.com/pallets/flask/pull/5223)\n\n- Deprecate the `__version__` attribute. Use feature detection, or\n`importlib.metadata.version(\"flask\")`, instead. [#5230](https://github.com/pallets/flask/issues/5230)\n\n- Restructure the code such that the Flask (app) and Blueprint\nclasses have Sans-IO bases. [#5127](https://github.com/pallets/flask/pull/5127)\n\n- Allow self as an argument to url_for. [#5264](https://github.com/pallets/flask/pull/5264)\n\n- Require Werkzeug >= 3.0.0.\n\n## Version 2.3.3\n\nReleased 2023-08-21\n\n- Python 3.12 compatibility.\n\n- Require Werkzeug >= 2.3.7.\n\n- Use `flit_core` instead of `setuptools` as build backend.\n\n- Refactor how an app’s root and instance paths are determined. [#5160](https://github.com/pallets/flask/issues/5160)\n\n## Version 2.3.2\n\nReleased 2023-05-01\n\n- Set `Vary: Cookie` header when the session is accessed, modified, or refreshed.\n\n- Update Werkzeug requirement to >=2.3.3 to apply recent bug fixes.\n\n## Version 2.3.1\n\nReleased 2023-04-25\n\n- Restore deprecated `from flask import Markup`. [#5084](https://github.com/pallets/flask/issues/5084)\n\n## Version 2.3.0\n\nReleased 2023-04-25\n\n- Drop support for Python 3.7. [#5072](https://github.com/pallets/flask/pull/5072)\n\n- Update minimum requirements to the latest versions: Werkzeug>=2.3.0, Jinja2>3.1.2,\nitsdangerous>=2.1.2, click>=8.1.3.\n\n- Remove previously deprecated code. [#4995](https://github.com/pallets/flask/pull/4995)\n\n  - The `push` and `pop` methods of the deprecated `_app_ctx_stack` and\n    `_request_ctx_stack` objects are removed. `top` still exists to give\n    extensions more time to update, but it will be removed.\n\n  - The `FLASK_ENV` environment variable, `ENV` config key, and `app.env`\n    property are removed.\n\n  - The `session_cookie_name`, `send_file_max_age_default`, `use_x_sendfile`,\n    `propagate_exceptions`, and `templates_auto_reload` properties\n    on `app` are removed.\n\n  - The `JSON_AS_ASCII`, `JSON_SORT_KEYS`, `JSONIFY_MIMETYPE`, and\n    `JSONIFY_PRETTYPRINT_REGULAR` config keys are removed.\n\n  - The `app.before_first_request` and `bp.before_app_first_request` decorators\n    are removed.\n\n  - `json_encoder` and `json_decoder` attributes on app and blueprint, and the\n    corresponding `json.JSONEncoder` and `JSONDecoder` classes, are removed.\n\n  - The `json.htmlsafe_dumps` and `htmlsafe_dump` functions are removed.\n\n  - Calling setup methods on blueprints after registration is an error instead of a\n    warning. [#4997](https://github.com/pallets/flask/pull/4997)\n- Importing `escape` and `Markup` from `flask` is deprecated. Import them\n  directly from `markupsafe` instead. [#4996](https://github.com/pallets/flask/pull/4996)\n\n- The `app.got_first_request` property is deprecated. [#4997](https://github.com/pallets/flask/pull/4997)\n\n- The `locked_cached_property` decorator is deprecated. Use a lock inside the\n  decorated function if locking is needed. [#4993](https://github.com/pallets/flask/issues/4993)\n\n- Signals are always available. `blinker>=1.6.2` is a required dependency. The\n  `signals_available` attribute is deprecated. [#5056](https://github.com/pallets/flask/issues/5056)\n\n- Signals support `async` subscriber functions. [#5049](https://github.com/pallets/flask/pull/5049)\n\n- Remove uses of locks that could cause requests to block each other very briefly.\n[#4993](https://github.com/pallets/flask/issues/4993)\n\n- Use modern packaging metadata with `pyproject.toml` instead of `setup.cfg`.\n[#4947](https://github.com/pallets/flask/pull/4947)\n\n- Ensure subdomains are applied with nested blueprints. [#4834](https://github.com/pallets/flask/issues/4834)\n\n- `config.from_file` can use `text=False` to indicate that the parser wants a\n  binary file instead. [#4989](https://github.com/pallets/flask/issues/4989)\n\n- If a blueprint is created with an empty name it raises a `ValueError`.\n[#5010](https://github.com/pallets/flask/issues/5010)\n\n- `SESSION_COOKIE_DOMAIN` does not fall back to `SERVER_NAME`. The default is not\nto set the domain, which modern browsers interpret as an exact match rather than\na subdomain match. Warnings about `localhost` and IP addresses are also removed.\n[#5051](https://github.com/pallets/flask/issues/5051)\n\n- The `routes` command shows each rule’s `subdomain` or `host` when domain\nmatching is in use. [#5004](https://github.com/pallets/flask/issues/5004)\n\n- Use postponed evaluation of annotations. [#5071](https://github.com/pallets/flask/pull/5071)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.1.1 in flask-stable?\n\nAssistant: To version 3.1.1 in flask-stable, here's what you do:\nUnreleased\n\n- Fix type hint for `cli_runner.invoke`. [#5645](https://github.com/pallets/flask/issues/5645).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.1.0 in flask-stable?\n\nAssistant: To version 3.1.0 in flask-stable, here's what you do:\nReleased 2024-11-13\n\n- Drop support for Python 3.8. [#5623](https://github.com/pallets/flask/pull/5623)\n\n- Update minimum dependency versions to latest feature releases.\nWerkzeug >= 3.1, ItsDangerous >= 2.2, Blinker >= 1.9. [#5624,5633](https://github.com/pallets/flask/pull/5624,5633)\n\n- Provide a configuration option to control automatic option\nresponses. [#5496](https://github.com/pallets/flask/pull/5496)\n\n- `Flask.open_resource`/ `open_instance_resource` and\n`Blueprint.open_resource` take an `encoding` parameter to use when\nopening in text mode. It defaults to `utf-8`. [#5504](https://github.com/pallets/flask/issues/5504)\n\n- `Request.max_content_length` can be customized per-request instead of only\nthrough the `MAX_CONTENT_LENGTH` config. Added\n`MAX_FORM_MEMORY_SIZE` and `MAX_FORM_PARTS` config. Added documentation\nabout resource limits to the security page. [#5625](https://github.com/pallets/flask/issues/5625)\n\n- Add support for the `Partitioned` cookie attribute (CHIPS), with the\n`SESSION_COOKIE_PARTITIONED` config. [#5472](https://github.com/pallets/flask/issues/5472)\n\n- `-e path` takes precedence over default `.env` and `.flaskenv` files.\n`load_dotenv` loads default files in addition to a path unless\n`load_defaults=False` is passed. [#5628](https://github.com/pallets/flask/issues/5628)\n\n- Support key rotation with the `SECRET_KEY_FALLBACKS` config, a list of old\nsecret keys that can still be used for unsigning. Extensions will need to\nadd support. [#5621](https://github.com/pallets/flask/issues/5621)\n\n- Fix how setting `host_matching=True` or `subdomain_matching=False`\ninteracts with `SERVER_NAME`. Setting `SERVER_NAME` no longer restricts\nrequests to only that domain. [#5553](https://github.com/pallets/flask/issues/5553)\n\n- `Request.trusted_hosts` is checked during routing, and can be set through\nthe `TRUSTED_HOSTS` config. [#5636](https://github.com/pallets/flask/issues/5636).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.0.3 in flask-stable?\n\nAssistant: To version 3.0.3 in flask-stable, here's what you do:\nReleased 2024-04-07\n\n- The default `hashlib.sha1` may not be available in FIPS builds. Don’t\naccess it at import time so the developer has time to change the default.\n[#5448](https://github.com/pallets/flask/issues/5448)\n\n- Don’t initialize the `cli` attribute in the sansio scaffold, but rather in\nthe `Flask` concrete class. [#5270](https://github.com/pallets/flask/pull/5270).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.0.2 in flask-stable?\n\nAssistant: To version 3.0.2 in flask-stable, here's what you do:\nReleased 2024-02-03\n\n- Correct type for `jinja_loader` property. [#5388](https://github.com/pallets/flask/issues/5388)\n\n- Fix error with `--extra-files` and `--exclude-patterns` CLI options.\n[#5391](https://github.com/pallets/flask/issues/5391).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.0.1 in flask-stable?\n\nAssistant: To version 3.0.1 in flask-stable, here's what you do:\nReleased 2024-01-18\n\n- Correct type for `path` argument to `send_file`. [#5336](https://github.com/pallets/flask/issues/5336)\n\n- Fix a typo in an error message for the `flask run --key` option. [#5344](https://github.com/pallets/flask/pull/5344)\n\n- Session data is untagged without relying on the built-in `json.loads` `object_hook`. This allows other JSON providers that don’t implement that.\n[#5381](https://github.com/pallets/flask/issues/5381)\n\n- Address more type findings when using mypy strict mode. [#5383](https://github.com/pallets/flask/pull/5383).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 3.0.0 in flask-stable?\n\nAssistant: To version 3.0.0 in flask-stable, here's what you do:\nReleased 2023-09-30\n\n- Remove previously deprecated code. [#5223](https://github.com/pallets/flask/pull/5223)\n\n- Deprecate the `__version__` attribute. Use feature detection, or\n`importlib.metadata.version(\"flask\")`, instead. [#5230](https://github.com/pallets/flask/issues/5230)\n\n- Restructure the code such that the Flask (app) and Blueprint\nclasses have Sans-IO bases. [#5127](https://github.com/pallets/flask/pull/5127)\n\n- Allow self as an argument to url_for. [#5264](https://github.com/pallets/flask/pull/5264)\n\n- Require Werkzeug >= 3.0.0..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 2.3.3 in flask-stable?\n\nAssistant: To version 2.3.3 in flask-stable, here's what you do:\nReleased 2023-08-21\n\n- Python 3.12 compatibility.\n\n- Require Werkzeug >= 2.3.7.\n\n- Use `flit_core` instead of `setuptools` as build backend.\n\n- Refactor how an app’s root and instance paths are determined. [#5160](https://github.com/pallets/flask/issues/5160).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 2.3.2 in flask-stable?\n\nAssistant: To version 2.3.2 in flask-stable, here's what you do:\nReleased 2023-05-01\n\n- Set `Vary: Cookie` header when the session is accessed, modified, or refreshed.\n\n- Update Werkzeug requirement to >=2.3.3 to apply recent bug fixes..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 2.3.1 in flask-stable?\n\nAssistant: To version 2.3.1 in flask-stable, here's what you do:\nReleased 2023-04-25\n\n- Restore deprecated `from flask import Markup`. [#5084](https://github.com/pallets/flask/issues/5084).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I version 2.3.0 in flask-stable?\n\nAssistant: To version 2.3.0 in flask-stable, here's what you do:\nReleased 2023-04-25\n\n- Drop support for Python 3.7. [#5072](https://github.com/pallets/flask/pull/5072)\n\n- Update minimum requirements to the latest versions: Werkzeug>=2.3.0, Jinja2>3.1.2,\nitsdangerous>=2.1.2, click>=8.1.3.\n\n- Remove previously deprecated code. [#4995](https://github.com/pallets/flask/pull/4995)\n\n  - The `push` and `pop` methods of the deprecated `_app_ctx_stack` and\n    `_request_ctx_stack` objects are removed. `top` still exists to give\n    extensions more time to update, but it will be removed.\n\n  - The `FLASK_ENV` environment variable, `ENV` config key, and `app.env`\n    property are removed.\n\n  - The `session_cookie_name`, `send_file_max_age_default`, `use_x_sendfile`,\n    `propagate_exceptions`, and `templates_auto_reload` properties\n    on `app` are removed.\n\n  - The `JSON_AS_ASCII`, `JSON_SORT_KEYS`, `JSONIFY_MIMETYPE`, and\n    `JSONIFY_PRETTYPRINT_REGULAR` config keys are removed.\n\n  - The `app.before_first_request` and `bp.before_app_first_request` decorators\n    are removed.\n\n  - `json_encoder` and `json_decoder` attributes on app and blueprint, and the\n    corresponding `json.JSONEncoder` and `JSONDecoder` classes, are removed.\n\n  - The `json.htmlsafe_dumps` and `htmlsafe_dump` functions are removed.\n\n  - Calling setup methods on blueprints after registration is an error instead of a\n    warning. [#4997](https://github.com/pallets/flask/pull/4997)\n- Importing `escape` and `Markup` from `flask` is deprecated. Import them\n  directly from `markupsafe` instead. [#4996](https://github.com/pallets/flask/pull/4996)\n\n- The `app.got_first_request` property is deprecated. [#4997](https://github.com/pallets/flask/pull/4997)\n\n- The `locked_cached_property` decorator is deprecated. Use a lock inside the\n  decorated function if locking is needed. [#4993](https://github.com/pallets/flask/issues/4993)\n\n- Signals are always available. `blinker>=1.6.2` is a required dependency. The\n  `signals_available` attribute is deprecated. [#5056](https://github.com/pallets/flask/issues/5056)\n\n- Signals support `async` subscriber functions. [#5049](https://github.com/pallets/flask/pull/5049)\n\n- Remove uses of locks that could cause requests to block each other very briefly.\n[#4993](https://github.com/pallets/flask/issues/4993)\n\n- Use modern packaging metadata with `pyproject.toml` instead of `setup.cfg`.\n[#4947](https://github.com/pallets/flask/pull/4947)\n\n- Ensure subdomains are applied with nested blueprints. [#4834](https://github.com/pallets/flask/issues/4834)\n\n- `config.from_file` can use `text=False` to indicate that the parser wants a\n  binary file instead. [#4989](https://github.com/pallets/flask/issues/4989)\n\n- If a blueprint is created with an empty name it raises a `ValueError`.\n[#5010](https://github.com/pallets/flask/issues/5010)\n\n- `SESSION_COOKIE_DOMAIN` does not fall back to `SERVER_NAME`. The default is not\nto set the domain, which modern browsers interpret as an exact match rather than\na subdomain match. Warnings about `localhost` and IP addresses are also removed.\n[#5051](https://github.com/pallets/flask/issues/5051)\n\n- The `routes` command shows each rule’s `subdomain` or `host` when domain\nmatching is in use. [#5004](https://github.com/pallets/flask/issues/5004)\n\n- Use postponed evaluation of annotations. [#5071](https://github.com/pallets/flask/pull/5071).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/changes", "title": "Changes", "description": "This page documents the changes made in various versions of Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-03-01 03:09:28", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "title": "Changes — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/changes/", "scrapeId": "6a176997-1613-458c-be8f-d6eb9007050b", "sourceURL": "https://flask.palletsprojects.com/en/stable/changes", "url": "https://flask.palletsprojects.com/en/stable/changes/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Templates is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Templates in flask-stable.\n\n# Templates\n\nFlask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.Here's a quick rundown of what this is about:\n\n## Jinja Setup\n\nUnless customized, Jinja2 is configured by Flask as follows:\n\n- autoescaping is enabled for all templates ending in `.html`, `.htm`, `.xml`, `.xhtml`, as well as `.svg` when using `render_template()`.\n\n- autoescaping is enabled for all strings when using `render_template_string()`.\n\n- a template has the ability to opt in/out autoescaping with the `{% autoescape %}` tag.\n\n- Flask inserts a couple of global functions and helpers into the Jinja2 context, additionally to the values that are present by default.\n\n## Standard Context\n\nThe following global variables are available within Jinja2 templates by default:\n\nconfig\n\nThe current configuration object ( [`flask.Flask.config`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.config \"flask.Flask.config\"))\n\nChangelog\n\nChanged in version 0.10: This is now always available, even in imported templates.\n\nAdded in version 0.6.\n\nrequest\n\nThe current request object ( [`flask.request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\")). This variable is unavailable if the template was rendered without an active request context.\n\nsession\n\nThe current session object ( [`flask.session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\")). This variable is unavailable if the template was rendered without an active request context.\n\ng\n\nThe request-bound object for global variables ( [`flask.g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\")). This variable is unavailable if the template was rendered without an active request context.\n\nurl_for()\n\nThe [`flask.url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\") function.\n\nget_flashed_messages()\n\nThe [`flask.get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\") function.\n\nThe Jinja Context Behavior\n\nThese variables are added to the context of variables, they are not global variables. The difference is that by default these will not show up in the context of imported templates. This is partially caused by performance considerations, partially to keep things explicit.\n\nWhat does this mean for you? If you have a macro you want to import, that needs to access the request object you have two possibilities:\n\n1. you explicitly pass the request to the macro as parameter, or the attribute of the request object you are interested in.\n\n2. you import the macro “with context”.\n\n## Controlling Autoescaping\n\nAutoescaping is the concept of automatically escaping special characters for you. Special characters in the sense of HTML (or XML, and thus XHTML) are `&`, `>`, `<`, `\"` as well as `'`. Because these characters carry specific meanings in documents on their own you have to replace them by so called “entities” if you want to use them for text. Not doing so would not only cause user frustration by the inability to use these characters in text, but can also lead to security problems. (see [Cross-Site Scripting (XSS)](https://flask.palletsprojects.com/en/stable/web-security/#security-xss))\n\nSometimes however you will need to disable autoescaping in templates. This can be the case if you want to explicitly inject HTML into pages, for example if they come from a system that generates secure HTML like a markdown to HTML converter.\n\nThere are three ways to accomplish that:\n\n- In the Python code, wrap the HTML string in a `Markup` object before passing it to the template. This is in general the recommended way.\n\n- Inside the template, use the `|safe` filter to explicitly mark a string as safe HTML ( `{{ myvariable|safe }}`)\n\n- Temporarily disable the autoescape system altogether.\n\nTo disable the autoescape system in templates, you can use the `{% autoescape %}` block:\n\n```\n{% autoescape false %}\n    <p>autoescaping is disabled here\n    <p>{{ will_not_be_escaped }}\n{% endautoescape %}\n```\n\nWhenever you do this, please be very cautious about the variables you are using in this block.\n\n## Registering Filters\n\nIf you want to register your own filters in Jinja2 you have two ways to do that. You can either put them by hand into the [`jinja_env`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.jinja_env \"flask.Flask.jinja_env\") of the application or use the [`template_filter()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.template_filter \"flask.Flask.template_filter\") decorator.\n\nThe two following examples work the same and both reverse an object:\n\n```\n@app.template_filter('reverse')\ndef reverse_filter(s):\n    return s[::-1]\n\ndef reverse_filter(s):\n    return s[::-1]\napp.jinja_env.filters['reverse'] = reverse_filter\n```\n\nIn case of the decorator the argument is optional if you want to use the function name as name of the filter. Once registered, you can use the filter in your templates in the same way as Jinja2’s builtin filters, for example if you have a Python list in context called `mylist`:\n\n```\n{% for x in mylist | reverse %}\n{% endfor %}\n```\n\n## Context Processors\n\nTo inject new variables automatically into the context of a template, context processors exist in Flask. Context processors run before the template is rendered and have the ability to inject new values into the template context. A context processor is a function that returns a dictionary. The keys and values of this dictionary are then merged with the template context, for all templates in the app:\n\n```\n@app.context_processor\ndef inject_user():\n    return dict(user=g.user)\n```\n\nThe context processor above makes a variable called `user` available in the template with the value of `g.user`. This example is not very interesting because `g` is available in templates anyways, but it gives an idea how this works.\n\nVariables are not limited to values; a context processor can also make functions available to templates (since Python allows passing around functions):\n\n```\n@app.context_processor\ndef utility_processor():\n    def format_price(amount, currency=\"€\"):\n        return f\"{amount:.2f}{currency}\"\n    return dict(format_price=format_price)\n```\n\nThe context processor above makes the `format_price` function available to all templates:\n\n```\n{{ format_price(0.33) }}\n```\n\n## Streaming\n\nIt can be useful to not render the whole template as one complete string, instead render it as a stream, yielding smaller incremental strings. This can be used for streaming HTML in chunks to speed up initial page load, or to save memory when rendering a very large template.\n\nThe Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions to make this easier to use.\n\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\nThese functions automatically apply the [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") wrapper if a request is active, so that it remains available in the template.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "overview", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I jinja setup in flask-stable?\n\nAssistant: To jinja setup in flask-stable, here's what you do:\nUnless customized, Jinja2 is configured by Flask as follows:\n\n- autoescaping is enabled for all templates ending in `.html`, `.htm`, `.xml`, `.xhtml`, as well as `.svg` when using `render_template()`.\n\n- autoescaping is enabled for all strings when using `render_template_string()`.\n\n- a template has the ability to opt in/out autoescaping with the `{% autoescape %}` tag.\n\n- Flask inserts a couple of global functions and helpers into the Jinja2 context, additionally to the values that are present by default..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I standard context in flask-stable?\n\nAssistant: To standard context in flask-stable, here's what you do:\nThe following global variables are available within Jinja2 templates by default:\n\nconfig\n\nThe current configuration object ( [`flask.Flask.config`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.config \"flask.Flask.config\"))\n\nChangelog\n\nChanged in version 0.10: This is now always available, even in imported templates.\n\nAdded in version 0.6.\n\nrequest\n\nThe current request object ( [`flask.request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\")). This variable is unavailable if the template was rendered without an active request context.\n\nsession\n\nThe current session object ( [`flask.session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\")). This variable is unavailable if the template was rendered without an active request context.\n\ng\n\nThe request-bound object for global variables ( [`flask.g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\")). This variable is unavailable if the template was rendered without an active request context.\n\nurl_for()\n\nThe [`flask.url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\") function.\n\nget_flashed_messages()\n\nThe [`flask.get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\") function.\n\nThe Jinja Context Behavior\n\nThese variables are added to the context of variables, they are not global variables. The difference is that by default these will not show up in the context of imported templates. This is partially caused by performance considerations, partially to keep things explicit.\n\nWhat does this mean for you? If you have a macro you want to import, that needs to access the request object you have two possibilities:\n\n1. you explicitly pass the request to the macro as parameter, or the attribute of the request object you are interested in.\n\n2. you import the macro “with context”..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I controlling autoescaping in flask-stable?\n\nAssistant: To controlling autoescaping in flask-stable, here's what you do:\nAutoescaping is the concept of automatically escaping special characters for you. Special characters in the sense of HTML (or XML, and thus XHTML) are `&`, `>`, `<`, `\"` as well as `'`. Because these characters carry specific meanings in documents on their own you have to replace them by so called “entities” if you want to use them for text. Not doing so would not only cause user frustration by the inability to use these characters in text, but can also lead to security problems. (see [Cross-Site Scripting (XSS)](https://flask.palletsprojects.com/en/stable/web-security/#security-xss))\n\nSometimes however you will need to disable autoescaping in templates. This can be the case if you want to explicitly inject HTML into pages, for example if they come from a system that generates secure HTML like a markdown to HTML converter.\n\nThere are three ways to accomplish that:\n\n- In the Python code, wrap the HTML string in a `Markup` object before passing it to the template. This is in general the recommended way.\n\n- Inside the template, use the `|safe` filter to explicitly mark a string as safe HTML ( `{{ myvariable|safe }}`)\n\n- Temporarily disable the autoescape system altogether.\n\nTo disable the autoescape system in templates, you can use the `{% autoescape %}` block:\n\n```\n{% autoescape false %}\n    <p>autoescaping is disabled here\n    <p>{{ will_not_be_escaped }}\n{% endautoescape %}\n```\n\nWhenever you do this, please be very cautious about the variables you are using in this block..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I registering filters in flask-stable?\n\nAssistant: To registering filters in flask-stable, here's what you do:\nIf you want to register your own filters in Jinja2 you have two ways to do that. You can either put them by hand into the [`jinja_env`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.jinja_env \"flask.Flask.jinja_env\") of the application or use the [`template_filter()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.template_filter \"flask.Flask.template_filter\") decorator.\n\nThe two following examples work the same and both reverse an object:\n\n```\n@app.template_filter('reverse')\ndef reverse_filter(s):\n    return s[::-1]\n\ndef reverse_filter(s):\n    return s[::-1]\napp.jinja_env.filters['reverse'] = reverse_filter\n```\n\nIn case of the decorator the argument is optional if you want to use the function name as name of the filter. Once registered, you can use the filter in your templates in the same way as Jinja2’s builtin filters, for example if you have a Python list in context called `mylist`:\n\n```\n{% for x in mylist | reverse %}\n{% endfor %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I context processors in flask-stable?\n\nAssistant: To context processors in flask-stable, here's what you do:\nTo inject new variables automatically into the context of a template, context processors exist in Flask. Context processors run before the template is rendered and have the ability to inject new values into the template context. A context processor is a function that returns a dictionary. The keys and values of this dictionary are then merged with the template context, for all templates in the app:\n\n```\n@app.context_processor\ndef inject_user():\n    return dict(user=g.user)\n```\n\nThe context processor above makes a variable called `user` available in the template with the value of `g.user`. This example is not very interesting because `g` is available in templates anyways, but it gives an idea how this works.\n\nVariables are not limited to values; a context processor can also make functions available to templates (since Python allows passing around functions):\n\n```\n@app.context_processor\ndef utility_processor():\n    def format_price(amount, currency=\"€\"):\n        return f\"{amount:.2f}{currency}\"\n    return dict(format_price=format_price)\n```\n\nThe context processor above makes the `format_price` function available to all templates:\n\n```\n{{ format_price(0.33) }}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I streaming in flask-stable?\n\nAssistant: To streaming in flask-stable, here's what you do:\nIt can be useful to not render the whole template as one complete string, instead render it as a stream, yielding smaller incremental strings. This can be used for streaming HTML in chunks to speed up initial page load, or to save memory when rendering a very large template.\n\nThe Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions to make this easier to use.\n\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\nThese functions automatically apply the [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") wrapper if a request is active, so that it remains available in the template..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "section_detail", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Templates in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Disabling Autoescaping**:\n\n```yaml\n{% autoescape false %}\n    <p>autoescaping is disabled here\n    <p>{{ will_not_be_escaped }}\n{% endautoescape %}\n```\n\nThis snippet shows you how to disabling autoescaping, which is an important aspect of templates.\n\n**Registering a Filter**:\n\n```yaml\n@app.template_filter('reverse')\ndef reverse_filter(s):\n    return s[::-1]\n\ndef reverse_filter(s):\n    return s[::-1]\napp.jinja_env.filters['reverse'] = reverse_filter\n```\n\nThis snippet shows you how to registering a filter, which is an important aspect of templates.\n\n**Using a Context Processor**:\n\n```yaml\n@app.context_processor\ndef inject_user():\n    return dict(user=g.user)\n```\n\nThis snippet shows you how to using a context processor, which is an important aspect of templates.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "code_examples", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Templates in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe cautious when disabling autoescaping in templates to avoid security issues.\n\nUse the `Markup` object to safely inject HTML into templates.\n\nRegister filters using the `template_filter()` decorator for better organization.\n\nUtilize context processors to inject variables or functions into templates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/templating", "title": "Templates", "description": "Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:10:17", "type": "best_practices", "page_metadata": {"title": "Templates — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/templating/", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "4ef93bad-38ec-4fcb-a5f5-05b19014445d", "sourceURL": "https://flask.palletsprojects.com/en/stable/templating", "url": "https://flask.palletsprojects.com/en/stable/templating/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Modular Applications with Blueprints is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Modular Applications with Blueprints in flask-stable.\n\n# Modular Applications with Blueprints\n\nFlask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.Here's a quick rundown of what this is about:\n\n## Why Blueprints?\n\nBlueprints in Flask are intended for these cases:\n\n- Factor an application into a set of blueprints. This is ideal for larger applications; a project could instantiate an application object, initialize several extensions, and register a collection of blueprints.\n\n- Register a blueprint on an application at a URL prefix and/or subdomain. Parameters in the URL prefix/subdomain become common view arguments (with defaults) across all view functions in the blueprint.\n\n- Register a blueprint multiple times on an application with different URL rules.\n\n- Provide template filters, static files, templates, and other utilities through blueprints. A blueprint does not have to implement applications or view functions.\n\n- Register a blueprint on an application for any of these cases when initializing a Flask extension.\n\nA blueprint in Flask is not a pluggable app because it is not actually an application – it’s a set of operations which can be registered on an application, even multiple times. Why not have multiple application objects? You can do that (see Application Dispatching), but your applications will have separate configs and will be managed at the WSGI layer.\n\nBlueprints instead provide separation at the Flask level, share application config, and can change an application object as necessary with being registered. The downside is that you cannot unregister a blueprint once an application was created without having to destroy the whole application object.\n\n## The Concept of Blueprints\n\nThe basic concept of blueprints is that they record operations to execute when registered on an application. Flask associates view functions with blueprints when dispatching requests and generating URLs from one endpoint to another.\n\n## My First Blueprint\n\nThis is what a very basic blueprint looks like. In this case we want to implement a blueprint that does simple rendering of static templates:\n\n```\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\nsimple_page = Blueprint('simple_page', __name__,\n                        template_folder='templates')\n\n@simple_page.route('/', defaults={'page': 'index'})\n@simple_page.route('/<page>')\ndef show(page):\n    try:\n        return render_template(f'pages/{page}.html')\n    except TemplateNotFound:\n        abort(404)\n```\n\nWhen you bind a function with the help of the `@simple_page.route` decorator, the blueprint will record the intention of registering the function `show` on the application when it’s later registered. Additionally it will prefix the endpoint of the function with the name of the blueprint which was given to the Blueprint constructor (in this case also `simple_page`). The blueprint’s name does not modify the URL, only the endpoint.\n\n## Registering Blueprints\n\nSo how do you register that blueprint? Like this:\n\n```\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n```\n\nIf you check the rules registered on the application, you will find these:\n\n```\n>>> app.url_map\nMap([<Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,\\\n <Rule '/<page>' (HEAD, OPTIONS, GET) -> simple_page.show>,\\\n <Rule '/' (HEAD, OPTIONS, GET) -> simple_page.show>])\n```\n\nThe first one is obviously from the application itself for the static files. The other two are for the `show` function of the `simple_page` blueprint. As you can see, they are also prefixed with the name of the blueprint and separated by a dot ( `.`).\n\nBlueprints however can also be mounted at different locations:\n\n```\napp.register_blueprint(simple_page, url_prefix='/pages')\n```\n\nAnd sure enough, these are the generated rules:\n\n```\n>>> app.url_map\nMap([<Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,\\\n <Rule '/pages/<page>' (HEAD, OPTIONS, GET) -> simple_page.show>,\\\n <Rule '/pages/' (HEAD, OPTIONS, GET) -> simple_page.show>])\n```\n\nOn top of that you can register blueprints multiple times though not every blueprint might respond properly to that. In fact it depends on how the blueprint is implemented if it can be mounted more than once.\n\n## Nesting Blueprints\n\nIt is possible to register a blueprint on another blueprint.\n\n```\nparent = Blueprint('parent', __name__, url_prefix='/parent')\nchild = Blueprint('child', __name__, url_prefix='/child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n```\n\nThe child blueprint will gain the parent’s name as a prefix to its name, and child URLs will be prefixed with the parent’s URL prefix.\n\n```\nurl_for('parent.child.create')\n/parent/child/create\n```\n\nIn addition a child blueprint’s will gain their parent’s subdomain, with their subdomain as prefix if present i.e.\n\n```\nparent = Blueprint('parent', __name__, subdomain='parent')\nchild = Blueprint('child', __name__, subdomain='child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n\nurl_for('parent.child.create', _external=True)\n\"child.parent.domain.tld\"\n```\n\nBlueprint-specific before request functions, etc. registered with the parent will trigger for the child. If a child does not have an error handler that can handle a given exception, the parent’s will be tried.\n\n## Blueprint Resources\n\nBlueprints can provide resources as well. Sometimes you might want to introduce a blueprint only for the resources it provides.\n\n## Blueprint Resource Folder\n\nLike for regular applications, blueprints are considered to be contained in a folder. While multiple blueprints can originate from the same folder, it does not have to be the case and it’s usually not recommended.\n\nThe folder is inferred from the second argument to `Blueprint` which is usually `__name__`. This argument specifies what logical Python module or package corresponds to the blueprint. If it points to an actual Python package that package (which is a folder on the filesystem) is the resource folder. If it’s a module, the package the module is contained in will be the resource folder. You can access the `Blueprint.root_path` property to see what the resource folder is:\n\n```\n>>> simple_page.root_path\n'/Users/username/TestProject/yourapplication'\n```\n\nTo quickly open sources from this folder you can use the `open_resource()` function:\n\n```\nwith simple_page.open_resource('static/style.css') as f:\n    code = f.read()\n```\n\n## Static Files\n\nA blueprint can expose a folder with static files by providing the path to the folder on the filesystem with the `static_folder` argument. It is either an absolute path or relative to the blueprint’s location:\n\n```\nadmin = Blueprint('admin', __name__, static_folder='static')\n```\n\nBy default the rightmost part of the path is where it is exposed on the web. This can be changed with the `static_url_path` argument. Because the folder is called `static` here it will be available at the `url_prefix` of the blueprint + `/static`. If the blueprint has the prefix `/admin`, the static URL will be `/admin/static`.\n\nThe endpoint is named `blueprint_name.static`. You can generate URLs to it with `url_for()` like you would with the static folder of the application:\n\n```\nurl_for('admin.static', filename='style.css')\n```\n\nHowever, if the blueprint does not have a `url_prefix`, it is not possible to access the blueprint’s static folder. This is because the URL would be `/static` in this case, and the application’s `/static` route takes precedence. Unlike template folders, blueprint static folders are not searched if the file does not exist in the application static folder.\n\n## Templates\n\nIf you want the blueprint to expose templates you can do that by providing the `template_folder` parameter to the `Blueprint` constructor:\n\n```\nadmin = Blueprint('admin', __name__, template_folder='templates')\n```\n\nFor static files, the path can be absolute or relative to the blueprint resource folder.\n\nThe template folder is added to the search path of templates but with a lower priority than the actual application’s template folder. That way you can easily override templates that a blueprint provides in the actual application. This also means that if you don’t want a blueprint template to be accidentally overridden, make sure that no other blueprint or actual application template has the same relative path. When multiple blueprints provide the same relative template path the first blueprint registered takes precedence over the others.\n\nSo if you have a blueprint in the folder `yourapplication/admin` and you want to render the template `'admin/index.html'` and you have provided `templates` as a `template_folder` you will have to create a file like this: `yourapplication/admin/templates/admin/index.html`. The reason for the extra `admin` folder is to avoid getting our template overridden by a template named `index.html` in the actual application template folder.\n\nTo further reiterate this: if you have a blueprint named `admin` and you want to render a template called `index.html` which is specific to this blueprint, the best idea is to lay out your templates like this:\n\n```\nyourpackage/\n    blueprints/\n        admin/\n            templates/\n                admin/\n                    index.html\n            __init__.py\n```\n\nAnd then when you want to render the template, use `admin/index.html` as the name to look up the template by. If you encounter problems loading the correct templates enable the `EXPLAIN_TEMPLATE_LOADING` config variable which will instruct Flask to print out the steps it goes through to locate templates on every `render_template` call.\n\n## Building URLs\n\nIf you want to link from one page to another you can use the `url_for()` function just like you normally would do just that you prefix the URL endpoint with the name of the blueprint and a dot ( `.`):\n\n```\nurl_for('admin.index')\n```\n\nAdditionally if you are in a view function of a blueprint or a rendered template and you want to link to another endpoint of the same blueprint, you can use relative redirects by prefixing the endpoint with a dot only:\n\n```\nurl_for('.index')\n```\n\nThis will link to `admin.index` for instance in case the current request was dispatched to any other admin blueprint endpoint.\n\n## Blueprint Error Handlers\n\nBlueprints support the `errorhandler` decorator just like the `Flask` application object, so it is easy to make Blueprint-specific custom error pages.\n\nHere is an example for a “404 Page Not Found” exception:\n\n```\n@simple_page.errorhandler(404)\ndef page_not_found(e):\n    return render_template('pages/404.html')\n```\n\nMost errorhandlers will simply work as expected; however, there is a caveat concerning handlers for 404 and 405 exceptions. These errorhandlers are only invoked from an appropriate `raise` statement or a call to `abort` in another of the blueprint’s view functions; they are not invoked by, e.g., an invalid URL access. This is because the blueprint does not “own” a certain URL space, so the application instance has no way of knowing which blueprint error handler it should run if given an invalid URL. If you would like to execute different handling strategies for these errors based on URL prefixes, they may be defined at the application level using the `request` proxy object:\n\n```\n@app.errorhandler(404)\n@app.errorhandler(405)\ndef _handle_api_error(ex):\n    if request.path.startswith('/api/'):\n        return jsonify(error=str(ex)), ex.code\n    else:\n        return ex\n```\n\nSee Handling Application Errors.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I why blueprints? in flask-stable?\n\nAssistant: To why blueprints? in flask-stable, here's what you do:\nBlueprints in Flask are intended for these cases:\n\n- Factor an application into a set of blueprints. This is ideal for larger applications; a project could instantiate an application object, initialize several extensions, and register a collection of blueprints.\n\n- Register a blueprint on an application at a URL prefix and/or subdomain. Parameters in the URL prefix/subdomain become common view arguments (with defaults) across all view functions in the blueprint.\n\n- Register a blueprint multiple times on an application with different URL rules.\n\n- Provide template filters, static files, templates, and other utilities through blueprints. A blueprint does not have to implement applications or view functions.\n\n- Register a blueprint on an application for any of these cases when initializing a Flask extension.\n\nA blueprint in Flask is not a pluggable app because it is not actually an application – it’s a set of operations which can be registered on an application, even multiple times. Why not have multiple application objects? You can do that (see Application Dispatching), but your applications will have separate configs and will be managed at the WSGI layer.\n\nBlueprints instead provide separation at the Flask level, share application config, and can change an application object as necessary with being registered. The downside is that you cannot unregister a blueprint once an application was created without having to destroy the whole application object..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the concept of blueprints in flask-stable?\n\nAssistant: To the concept of blueprints in flask-stable, here's what you do:\nThe basic concept of blueprints is that they record operations to execute when registered on an application. Flask associates view functions with blueprints when dispatching requests and generating URLs from one endpoint to another..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I my first blueprint in flask-stable?\n\nAssistant: To my first blueprint in flask-stable, here's what you do:\nThis is what a very basic blueprint looks like. In this case we want to implement a blueprint that does simple rendering of static templates:\n\n```\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\nsimple_page = Blueprint('simple_page', __name__,\n                        template_folder='templates')\n\n@simple_page.route('/', defaults={'page': 'index'})\n@simple_page.route('/<page>')\ndef show(page):\n    try:\n        return render_template(f'pages/{page}.html')\n    except TemplateNotFound:\n        abort(404)\n```\n\nWhen you bind a function with the help of the `@simple_page.route` decorator, the blueprint will record the intention of registering the function `show` on the application when it’s later registered. Additionally it will prefix the endpoint of the function with the name of the blueprint which was given to the Blueprint constructor (in this case also `simple_page`). The blueprint’s name does not modify the URL, only the endpoint..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I registering blueprints in flask-stable?\n\nAssistant: To registering blueprints in flask-stable, here's what you do:\nSo how do you register that blueprint? Like this:\n\n```\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n```\n\nIf you check the rules registered on the application, you will find these:\n\n```\n>>> app.url_map\nMap([<Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,\\\n <Rule '/<page>' (HEAD, OPTIONS, GET) -> simple_page.show>,\\\n <Rule '/' (HEAD, OPTIONS, GET) -> simple_page.show>])\n```\n\nThe first one is obviously from the application itself for the static files. The other two are for the `show` function of the `simple_page` blueprint. As you can see, they are also prefixed with the name of the blueprint and separated by a dot ( `.`).\n\nBlueprints however can also be mounted at different locations:\n\n```\napp.register_blueprint(simple_page, url_prefix='/pages')\n```\n\nAnd sure enough, these are the generated rules:\n\n```\n>>> app.url_map\nMap([<Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,\\\n <Rule '/pages/<page>' (HEAD, OPTIONS, GET) -> simple_page.show>,\\\n <Rule '/pages/' (HEAD, OPTIONS, GET) -> simple_page.show>])\n```\n\nOn top of that you can register blueprints multiple times though not every blueprint might respond properly to that. In fact it depends on how the blueprint is implemented if it can be mounted more than once..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I nesting blueprints in flask-stable?\n\nAssistant: To nesting blueprints in flask-stable, here's what you do:\nIt is possible to register a blueprint on another blueprint.\n\n```\nparent = Blueprint('parent', __name__, url_prefix='/parent')\nchild = Blueprint('child', __name__, url_prefix='/child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n```\n\nThe child blueprint will gain the parent’s name as a prefix to its name, and child URLs will be prefixed with the parent’s URL prefix.\n\n```\nurl_for('parent.child.create')\n/parent/child/create\n```\n\nIn addition a child blueprint’s will gain their parent’s subdomain, with their subdomain as prefix if present i.e.\n\n```\nparent = Blueprint('parent', __name__, subdomain='parent')\nchild = Blueprint('child', __name__, subdomain='child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n\nurl_for('parent.child.create', _external=True)\n\"child.parent.domain.tld\"\n```\n\nBlueprint-specific before request functions, etc. registered with the parent will trigger for the child. If a child does not have an error handler that can handle a given exception, the parent’s will be tried..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I blueprint resources in flask-stable?\n\nAssistant: To blueprint resources in flask-stable, here's what you do:\nBlueprints can provide resources as well. Sometimes you might want to introduce a blueprint only for the resources it provides..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I blueprint resource folder in flask-stable?\n\nAssistant: To blueprint resource folder in flask-stable, here's what you do:\nLike for regular applications, blueprints are considered to be contained in a folder. While multiple blueprints can originate from the same folder, it does not have to be the case and it’s usually not recommended.\n\nThe folder is inferred from the second argument to `Blueprint` which is usually `__name__`. This argument specifies what logical Python module or package corresponds to the blueprint. If it points to an actual Python package that package (which is a folder on the filesystem) is the resource folder. If it’s a module, the package the module is contained in will be the resource folder. You can access the `Blueprint.root_path` property to see what the resource folder is:\n\n```\n>>> simple_page.root_path\n'/Users/username/TestProject/yourapplication'\n```\n\nTo quickly open sources from this folder you can use the `open_resource()` function:\n\n```\nwith simple_page.open_resource('static/style.css') as f:\n    code = f.read()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I static files in flask-stable?\n\nAssistant: To static files in flask-stable, here's what you do:\nA blueprint can expose a folder with static files by providing the path to the folder on the filesystem with the `static_folder` argument. It is either an absolute path or relative to the blueprint’s location:\n\n```\nadmin = Blueprint('admin', __name__, static_folder='static')\n```\n\nBy default the rightmost part of the path is where it is exposed on the web. This can be changed with the `static_url_path` argument. Because the folder is called `static` here it will be available at the `url_prefix` of the blueprint + `/static`. If the blueprint has the prefix `/admin`, the static URL will be `/admin/static`.\n\nThe endpoint is named `blueprint_name.static`. You can generate URLs to it with `url_for()` like you would with the static folder of the application:\n\n```\nurl_for('admin.static', filename='style.css')\n```\n\nHowever, if the blueprint does not have a `url_prefix`, it is not possible to access the blueprint’s static folder. This is because the URL would be `/static` in this case, and the application’s `/static` route takes precedence. Unlike template folders, blueprint static folders are not searched if the file does not exist in the application static folder..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I templates in flask-stable?\n\nAssistant: To templates in flask-stable, here's what you do:\nIf you want the blueprint to expose templates you can do that by providing the `template_folder` parameter to the `Blueprint` constructor:\n\n```\nadmin = Blueprint('admin', __name__, template_folder='templates')\n```\n\nFor static files, the path can be absolute or relative to the blueprint resource folder.\n\nThe template folder is added to the search path of templates but with a lower priority than the actual application’s template folder. That way you can easily override templates that a blueprint provides in the actual application. This also means that if you don’t want a blueprint template to be accidentally overridden, make sure that no other blueprint or actual application template has the same relative path. When multiple blueprints provide the same relative template path the first blueprint registered takes precedence over the others.\n\nSo if you have a blueprint in the folder `yourapplication/admin` and you want to render the template `'admin/index.html'` and you have provided `templates` as a `template_folder` you will have to create a file like this: `yourapplication/admin/templates/admin/index.html`. The reason for the extra `admin` folder is to avoid getting our template overridden by a template named `index.html` in the actual application template folder.\n\nTo further reiterate this: if you have a blueprint named `admin` and you want to render a template called `index.html` which is specific to this blueprint, the best idea is to lay out your templates like this:\n\n```\nyourpackage/\n    blueprints/\n        admin/\n            templates/\n                admin/\n                    index.html\n            __init__.py\n```\n\nAnd then when you want to render the template, use `admin/index.html` as the name to look up the template by. If you encounter problems loading the correct templates enable the `EXPLAIN_TEMPLATE_LOADING` config variable which will instruct Flask to print out the steps it goes through to locate templates on every `render_template` call..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I building urls in flask-stable?\n\nAssistant: To building urls in flask-stable, here's what you do:\nIf you want to link from one page to another you can use the `url_for()` function just like you normally would do just that you prefix the URL endpoint with the name of the blueprint and a dot ( `.`):\n\n```\nurl_for('admin.index')\n```\n\nAdditionally if you are in a view function of a blueprint or a rendered template and you want to link to another endpoint of the same blueprint, you can use relative redirects by prefixing the endpoint with a dot only:\n\n```\nurl_for('.index')\n```\n\nThis will link to `admin.index` for instance in case the current request was dispatched to any other admin blueprint endpoint..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I blueprint error handlers in flask-stable?\n\nAssistant: To blueprint error handlers in flask-stable, here's what you do:\nBlueprints support the `errorhandler` decorator just like the `Flask` application object, so it is easy to make Blueprint-specific custom error pages.\n\nHere is an example for a “404 Page Not Found” exception:\n\n```\n@simple_page.errorhandler(404)\ndef page_not_found(e):\n    return render_template('pages/404.html')\n```\n\nMost errorhandlers will simply work as expected; however, there is a caveat concerning handlers for 404 and 405 exceptions. These errorhandlers are only invoked from an appropriate `raise` statement or a call to `abort` in another of the blueprint’s view functions; they are not invoked by, e.g., an invalid URL access. This is because the blueprint does not “own” a certain URL space, so the application instance has no way of knowing which blueprint error handler it should run if given an invalid URL. If you would like to execute different handling strategies for these errors based on URL prefixes, they may be defined at the application level using the `request` proxy object:\n\n```\n@app.errorhandler(404)\n@app.errorhandler(405)\ndef _handle_api_error(ex):\n    if request.path.startswith('/api/'):\n        return jsonify(error=str(ex)), ex.code\n    else:\n        return ex\n```\n\nSee Handling Application Errors..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Modular Applications with Blueprints in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**My First Blueprint Example**:\n\n```yaml\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\nsimple_page = Blueprint('simple_page', __name__,\n                        template_folder='templates')\n\n@simple_page.route('/', defaults={'page': 'index'})\n@simple_page.route('/<page>')\ndef show(page):\n    try:\n        return render_template(f'pages/{page}.html')\n    except TemplateNotFound:\n        abort(404)\n\n```\n\nThis snippet shows you how to my first blueprint example, which is an important aspect of modular applications with blueprints.\n\n**Registering Blueprints Example**:\n\n```yaml\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n\n```\n\nThis snippet shows you how to registering blueprints example, which is an important aspect of modular applications with blueprints.\n\n**Blueprint Registration with URL Prefix Example**:\n\n```yaml\napp.register_blueprint(simple_page, url_prefix='/pages')\n\n```\n\nThis snippet shows you how to blueprint registration with url prefix example, which is an important aspect of modular applications with blueprints.\n\n**Nesting Blueprints Example**:\n\n```yaml\nparent = Blueprint('parent', __name__, url_prefix='/parent')\nchild = Blueprint('child', __name__, url_prefix='/child')\nparent.register_blueprint(child)\napp.register_blueprint(parent)\n\n```\n\nThis snippet shows you how to nesting blueprints example, which is an important aspect of modular applications with blueprints.\n\n**Blueprint Resource Folder Example**:\n\n```yaml\n>>> simple_page.root_path\n'/Users/username/TestProject/yourapplication'\n\n```\n\nThis snippet shows you how to blueprint resource folder example, which is an important aspect of modular applications with blueprints.\n\n**Open Resource Example**:\n\n```yaml\nwith simple_page.open_resource('static/style.css') as f:\n    code = f.read()\n\n```\n\nThis snippet shows you how to open resource example, which is an important aspect of modular applications with blueprints.\n\n**Static Files Example**:\n\n```yaml\nadmin = Blueprint('admin', __name__, static_folder='static')\n\n```\n\nThis snippet shows you how to static files example, which is an important aspect of modular applications with blueprints.\n\n**Templates Example**:\n\n```yaml\nadmin = Blueprint('admin', __name__, template_folder='templates')\n\n```\n\nThis snippet shows you how to templates example, which is an important aspect of modular applications with blueprints.\n\n**Building URLs Example**:\n\n```yaml\nurl_for('admin.index')\n\n```\n\nThis snippet shows you how to building urls example, which is an important aspect of modular applications with blueprints.\n\n**Relative Redirects Example**:\n\n```yaml\nurl_for('.index')\n\n```\n\nThis snippet shows you how to relative redirects example, which is an important aspect of modular applications with blueprints.\n\n**Blueprint Error Handler Example**:\n\n```yaml\n@simple_page.errorhandler(404)\ndef page_not_found(e):\n    return render_template('pages/404.html')\n\n```\n\nThis snippet shows you how to blueprint error handler example, which is an important aspect of modular applications with blueprints.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Modular Applications with Blueprints in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen creating blueprints, ensure that the template paths are unique to avoid conflicts with other templates in the application.\n\nUse the `EXPLAIN_TEMPLATE_LOADING` config variable to debug template loading issues.\n\nOrganize templates in a way that prevents accidental overrides by other blueprints or application templates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/blueprints", "title": "Modular Applications with Blueprints", "description": "Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:16:17", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/blueprints/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "language": "en", "title": "Modular Applications with Blueprints — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "4dc63423-3e79-4f14-9c4b-d20c4af38e6b", "sourceURL": "https://flask.palletsprojects.com/en/stable/blueprints", "url": "https://flask.palletsprojects.com/en/stable/blueprints/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Logging is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Logging in flask-stable.\n\n# Logging\n\nFlask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.Here's a quick rundown of what this is about:\n\n## Logging\n\nFlask uses standard Python [`logging`](https://docs.python.org/3/library/logging.html#module-logging \"(in Python v3.13)\"). Messages about your Flask application are logged with [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\"), which takes the same name as [`app.name`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.name \"flask.Flask.name\"). This logger can also be used to log your own messages.\n\n```\n@app.route('/login', methods=['POST'])\ndef login():\n    user = get_user(request.form['username'])\n\n    if user.check_password(request.form['password']):\n        login_user(user)\n        app.logger.info('%s logged in successfully', user.username)\n        return redirect(url_for('index'))\n    else:\n        app.logger.info('%s failed to log in', user.username)\n        abort(401)\n```\n\nIf you don’t configure logging, Python’s default log level is usually ‘warning’. Nothing below the configured level will be visible.\n\n## Basic Configuration\n\nWhen you want to configure logging for your project, you should do it as soon as possible when the program starts. If [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") is accessed before logging is configured, it will add a default handler. If possible, configure logging before creating the application object.\n\nThis example uses [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig \"(in Python v3.13)\") to create a logging configuration similar to Flask’s default, except for all logs:\n\n```\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {'default': {\n        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n    }},\n    'handlers': {'wsgi': {\n        'class': 'logging.StreamHandler',\n        'stream': 'ext://flask.logging.wsgi_errors_stream',\n        'formatter': 'default'\n    }},\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n\napp = Flask(__name__)\n```\n\n## Default Configuration\n\nIf you do not configure logging yourself, Flask will add a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.13)\") to [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") automatically. During requests, it will write to the stream specified by the WSGI server in `environ['wsgi.errors']` (which is usually [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr \"(in Python v3.13)\")). Outside a request, it will log to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr \"(in Python v3.13)\").\n\n## Removing the Default Handler\n\nIf you configured logging after accessing [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\"), and need to remove the default handler, you can import and remove it:\n\n```\nfrom flask.logging import default_handler\n\napp.logger.removeHandler(default_handler)\n```\n\n## Email Errors to Admins\n\nWhen running the application on a remote server for production, you probably won’t be looking at the log messages very often. The WSGI server will probably send log messages to a file, and you’ll only check that file if a user tells you something went wrong.\n\nTo be proactive about discovering and fixing bugs, you can configure a [`logging.handlers.SMTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler \"(in Python v3.13)\") to send an email when errors and higher are logged.\n\n```\nimport logging\nfrom logging.handlers import SMTPHandler\n\nmail_handler = SMTPHandler(\n    mailhost='127.0.0.1',\n    fromaddr='server-error@example.com',\n    toaddrs=['admin@example.com'],\n    subject='Application Error'\n)\nmail_handler.setLevel(logging.ERROR)\nmail_handler.setFormatter(logging.Formatter(\n    '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n))\n\nif not app.debug:\n    app.logger.addHandler(mail_handler)\n```\n\n## Injecting Request Information\n\nSeeing more information about the request, such as the IP address, may help debugging some errors. You can subclass [`logging.Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter \"(in Python v3.13)\") to inject your own fields that can be used in messages. You can change the formatter for Flask’s default handler, the mail handler defined above, or any other handler.\n\n```\nfrom flask import has_request_context, request\nfrom flask.logging import default_handler\n\nclass RequestFormatter(logging.Formatter):\n    def format(self, record):\n        if has_request_context():\n            record.url = request.url\n            record.remote_addr = request.remote_addr\n        else:\n            record.url = None\n            record.remote_addr = None\n\n        return super().format(record)\n\nformatter = RequestFormatter(\n    '[%(asctime)s] %(remote_addr)s requested %(url)s\\n'\n    '%(levelname)s in %(module)s: %(message)s'\n)\ndefault_handler.setFormatter(formatter)\nmail_handler.setFormatter(formatter)\n```\n\n## Other Libraries\n\nOther libraries may use logging extensively, and you want to see relevant messages from those logs too. The simplest way to do this is to add handlers to the root logger instead of only the app logger.\n\n```\nfrom flask.logging import default_handler\n\nroot = logging.getLogger()\nroot.addHandler(default_handler)\nroot.addHandler(mail_handler)\n```\n\nDepending on your project, it may be more useful to configure each logger you care about separately, instead of configuring only the root logger.\n\n```\nfor logger in (\n    logging.getLogger(app.name),\n    logging.getLogger('sqlalchemy'),\n    logging.getLogger('other_package'),\n):\n    logger.addHandler(default_handler)\n    logger.addHandler(mail_handler)\n```\n\n## Werkzeug\n\nWerkzeug logs basic request/response information to the 'werkzeug' logger. If the root logger has no handlers configured, Werkzeug adds a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.13)\") to its logger.\n\n## Flask Extensions\n\nDepending on the situation, an extension may choose to log to [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") or its own named logger. Consult each extension’s documentation for details.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I logging in flask-stable?\n\nAssistant: To logging in flask-stable, here's what you do:\nFlask uses standard Python [`logging`](https://docs.python.org/3/library/logging.html#module-logging \"(in Python v3.13)\"). Messages about your Flask application are logged with [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\"), which takes the same name as [`app.name`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.name \"flask.Flask.name\"). This logger can also be used to log your own messages.\n\n```\n@app.route('/login', methods=['POST'])\ndef login():\n    user = get_user(request.form['username'])\n\n    if user.check_password(request.form['password']):\n        login_user(user)\n        app.logger.info('%s logged in successfully', user.username)\n        return redirect(url_for('index'))\n    else:\n        app.logger.info('%s failed to log in', user.username)\n        abort(401)\n```\n\nIf you don’t configure logging, Python’s default log level is usually ‘warning’. Nothing below the configured level will be visible..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I basic configuration in flask-stable?\n\nAssistant: To basic configuration in flask-stable, here's what you do:\nWhen you want to configure logging for your project, you should do it as soon as possible when the program starts. If [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") is accessed before logging is configured, it will add a default handler. If possible, configure logging before creating the application object.\n\nThis example uses [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig \"(in Python v3.13)\") to create a logging configuration similar to Flask’s default, except for all logs:\n\n```\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {'default': {\n        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n    }},\n    'handlers': {'wsgi': {\n        'class': 'logging.StreamHandler',\n        'stream': 'ext://flask.logging.wsgi_errors_stream',\n        'formatter': 'default'\n    }},\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n\napp = Flask(__name__)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I default configuration in flask-stable?\n\nAssistant: To default configuration in flask-stable, here's what you do:\nIf you do not configure logging yourself, Flask will add a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.13)\") to [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") automatically. During requests, it will write to the stream specified by the WSGI server in `environ['wsgi.errors']` (which is usually [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr \"(in Python v3.13)\")). Outside a request, it will log to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr \"(in Python v3.13)\")..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I removing the default handler in flask-stable?\n\nAssistant: To removing the default handler in flask-stable, here's what you do:\nIf you configured logging after accessing [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\"), and need to remove the default handler, you can import and remove it:\n\n```\nfrom flask.logging import default_handler\n\napp.logger.removeHandler(default_handler)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I email errors to admins in flask-stable?\n\nAssistant: To email errors to admins in flask-stable, here's what you do:\nWhen running the application on a remote server for production, you probably won’t be looking at the log messages very often. The WSGI server will probably send log messages to a file, and you’ll only check that file if a user tells you something went wrong.\n\nTo be proactive about discovering and fixing bugs, you can configure a [`logging.handlers.SMTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler \"(in Python v3.13)\") to send an email when errors and higher are logged.\n\n```\nimport logging\nfrom logging.handlers import SMTPHandler\n\nmail_handler = SMTPHandler(\n    mailhost='127.0.0.1',\n    fromaddr='server-error@example.com',\n    toaddrs=['admin@example.com'],\n    subject='Application Error'\n)\nmail_handler.setLevel(logging.ERROR)\nmail_handler.setFormatter(logging.Formatter(\n    '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n))\n\nif not app.debug:\n    app.logger.addHandler(mail_handler)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I injecting request information in flask-stable?\n\nAssistant: To injecting request information in flask-stable, here's what you do:\nSeeing more information about the request, such as the IP address, may help debugging some errors. You can subclass [`logging.Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter \"(in Python v3.13)\") to inject your own fields that can be used in messages. You can change the formatter for Flask’s default handler, the mail handler defined above, or any other handler.\n\n```\nfrom flask import has_request_context, request\nfrom flask.logging import default_handler\n\nclass RequestFormatter(logging.Formatter):\n    def format(self, record):\n        if has_request_context():\n            record.url = request.url\n            record.remote_addr = request.remote_addr\n        else:\n            record.url = None\n            record.remote_addr = None\n\n        return super().format(record)\n\nformatter = RequestFormatter(\n    '[%(asctime)s] %(remote_addr)s requested %(url)s\\n'\n    '%(levelname)s in %(module)s: %(message)s'\n)\ndefault_handler.setFormatter(formatter)\nmail_handler.setFormatter(formatter)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I other libraries in flask-stable?\n\nAssistant: To other libraries in flask-stable, here's what you do:\nOther libraries may use logging extensively, and you want to see relevant messages from those logs too. The simplest way to do this is to add handlers to the root logger instead of only the app logger.\n\n```\nfrom flask.logging import default_handler\n\nroot = logging.getLogger()\nroot.addHandler(default_handler)\nroot.addHandler(mail_handler)\n```\n\nDepending on your project, it may be more useful to configure each logger you care about separately, instead of configuring only the root logger.\n\n```\nfor logger in (\n    logging.getLogger(app.name),\n    logging.getLogger('sqlalchemy'),\n    logging.getLogger('other_package'),\n):\n    logger.addHandler(default_handler)\n    logger.addHandler(mail_handler)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I werkzeug in flask-stable?\n\nAssistant: To werkzeug in flask-stable, here's what you do:\nWerkzeug logs basic request/response information to the 'werkzeug' logger. If the root logger has no handlers configured, Werkzeug adds a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.13)\") to its logger..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I flask extensions in flask-stable?\n\nAssistant: To flask extensions in flask-stable, here's what you do:\nDepending on the situation, an extension may choose to log to [`app.logger`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.logger \"flask.Flask.logger\") or its own named logger. Consult each extension’s documentation for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Logging in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Logging Example**:\n\n```yaml\n@app.route('/login', methods=['POST'])\ndef login():\n    user = get_user(request.form['username'])\n\n    if user.check_password(request.form['password']):\n        login_user(user)\n        app.logger.info('%s logged in successfully', user.username)\n        return redirect(url_for('index'))\n    else:\n        app.logger.info('%s failed to log in', user.username)\n        abort(401)\n\n```\n\nThis snippet shows you how to logging example, which is an important aspect of logging.\n\n**Basic Configuration Example**:\n\n```yaml\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {'default': {\n        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n    }},\n    'handlers': {'wsgi': {\n        'class': 'logging.StreamHandler',\n        'stream': 'ext://flask.logging.wsgi_errors_stream',\n        'formatter': 'default'\n    }},\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n\napp = Flask(__name__)\n\n```\n\nThis snippet shows you how to basic configuration example, which is an important aspect of logging.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Logging in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConfigure logging as soon as possible when the program starts.\n\nIf possible, configure logging before creating the application object.\n\nUse SMTPHandler to send an email when errors are logged in production.\n\nSubclass logging.Formatter to inject request information into log messages.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/logging", "title": "Logging", "description": "Flask uses standard Python logging. Messages about your Flask application are logged with app.logger, which takes the same name as app.name. This logger can also be used to log your own messages.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:18:03", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Logging — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/logging/", "scrapeId": "699b4487-d976-464d-a8c3-a048159c2a62", "sourceURL": "https://flask.palletsprojects.com/en/stable/logging", "url": "https://flask.palletsprojects.com/en/stable/logging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Sample Documentation Page is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Sample Documentation Page in flask-stable.\n\n# Sample Documentation Page\n\nThis page provides an overview of the sample documentation structure.Here's a quick rundown of what this is about:\n\n## Introduction\n\nThis section introduces the purpose of the documentation.\n\n## Installation\n\nFollow these steps to install the software: 1. Download the installer. 2. Run the installer and follow the prompts.\n\n## Usage\n\nTo use the software, open the application and select the desired options.\n\n## Troubleshooting\n\nIf you encounter issues, refer to the troubleshooting section for common problems and solutions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I introduction in flask-stable?\n\nAssistant: To introduction in flask-stable, here's what you do:\nThis section introduces the purpose of the documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installation in flask-stable?\n\nAssistant: To installation in flask-stable, here's what you do:\nFollow these steps to install the software: 1. Download the installer. 2. Run the installer and follow the prompts..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I usage in flask-stable?\n\nAssistant: To usage in flask-stable, here's what you do:\nTo use the software, open the application and select the desired options..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I troubleshooting in flask-stable?\n\nAssistant: To troubleshooting in flask-stable, here's what you do:\nIf you encounter issues, refer to the troubleshooting section for common problems and solutions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Sample Documentation Page in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Installation Command**:\n\n```yaml\n$ sudo apt-get install sample-software\n```\n\nThis snippet shows you how to basic installation command, which is an important aspect of sample documentation page.\n\n**Configuration Example**:\n\n```yaml\n{\n  \"setting1\": \"value1\",\n  \"setting2\": \"value2\"\n}\n```\n\nThis snippet shows you how to configuration example, which is an important aspect of sample documentation page.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Sample Documentation Page in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways keep your software updated to the latest version.\n\nRefer to the FAQ section for common questions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/quickstart", "title": "Sample Documentation Page", "description": "This page provides an overview of the sample documentation structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:41", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "title": "Quickstart — Flask Documentation (3.1.x)", "scrapeId": "25845260-e877-4780-bba7-0a22f62b4bc9", "sourceURL": "https://flask.palletsprojects.com/en/stable/quickstart", "url": "https://flask.palletsprojects.com/en/stable/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what The Application Context is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain The Application Context in flask-stable.\n\n# The Application Context\n\nThe application context keeps track of the application-level data during a request, CLI command, or other activity.Here's a quick rundown of what this is about:\n\n## The Application Context\n\nThe application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the `current_app` and `g` proxies are accessed instead.\n\nThis is similar to The Request Context, which keeps track of request-level data during a request. A corresponding application context is pushed when a request context is pushed.\n\n## Purpose of the Context\n\nThe Flask application object has attributes, such as `config`, that are useful to access within views and CLI commands. However, importing the app instance within the modules in your project is prone to circular import issues. When using the app factory pattern or writing reusable blueprints or extensions there won’t be an app instance to import at all.\n\nFlask solves this issue with the application context. Rather than referring to an app directly, you use the `current_app` proxy, which points to the application handling the current activity.\n\nFlask automatically pushes an application context when handling a request. View functions, error handlers, and other functions that run during a request will have access to `current_app`.\n\nFlask will also automatically push an app context when running CLI commands registered with `Flask.cli` using `@app.cli.command()`.\n\n## Lifetime of the Context\n\nThe application context is created and destroyed as necessary. When a Flask application begins handling a request, it pushes an application context and a request context. When the request ends it pops the request context then the application context. Typically, an application context will have the same lifetime as a request.\n\nSee The Request Context for more information about how the contexts work and the full life cycle of a request.\n\n## Manually Push a Context\n\nIf you try to access `current_app`, or anything that uses it, outside an application context, you’ll get this error message:\n\n```\nRuntimeError: Working outside of application context.\n```\n\nThis typically means that you attempted to use functionality that needed to interface with the current application object in some way. To solve this, set up an application context with app.app_context().\n\nIf you see that error while configuring your application, such as when initializing an extension, you can push a context manually since you have direct access to the app. Use `app_context()` in a with block, and everything that runs in the block will have access to `current_app`.\n\n```\ndef create_app():\n    app = Flask(__name__)\n\n    with app.app_context():\n        init_db()\n\n    return app\n``\n\nIf you see that error somewhere else in your code not related to configuring the application, it most likely indicates that you should move that code into a view function or CLI command.\n\n## Storing Data\n\nThe application context is a good place to store common data during a request or CLI command. Flask provides the `g object` for this purpose. It is a simple namespace object that has the same lifetime as an application context.\n\nNote\n\nThe g name stands for “global”, but that is referring to the data being global within a context. The data on g is lost after the context ends, and it is not an appropriate place to store data between requests. Use the `session` or a database to store data across requests.\n\nA common use for `g` is to manage resources during a request.\n\n1. `get_X()` creates resource `X` if it does not exist, caching it as `g.X`.\n2. `teardown_X()` closes or otherwise deallocates the resource if it exists. It is registered as a `teardown_appcontext()` handler.\n\nFor example, you can manage a database connection using this pattern:\n\n```\nfrom flask import g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = connect_to_database()\n\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db(exception):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\nDuring a request, every call to `get_db()` will return the same connection, and it will be closed automatically at the end of the request.\n\nYou can use `LocalProxy` to make a new context local from `get_db()`:\n\n```\nfrom werkzeug.local import LocalProxy\ndb = LocalProxy(get_db)\n```\n\nAccessing `db` will call `get_db` internally, in the same way that `current_app` works.\n\n## Events and Signals\n\nThe application will call functions registered with `teardown_appcontext()` when the application context is popped.\n\nThe following signals are sent: `appcontext_pushed`, `appcontext_tearing_down`, and `appcontext_popped`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the application context in flask-stable?\n\nAssistant: To the application context in flask-stable, here's what you do:\nThe application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the `current_app` and `g` proxies are accessed instead.\n\nThis is similar to The Request Context, which keeps track of request-level data during a request. A corresponding application context is pushed when a request context is pushed..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I purpose of the context in flask-stable?\n\nAssistant: To purpose of the context in flask-stable, here's what you do:\nThe Flask application object has attributes, such as `config`, that are useful to access within views and CLI commands. However, importing the app instance within the modules in your project is prone to circular import issues. When using the app factory pattern or writing reusable blueprints or extensions there won’t be an app instance to import at all.\n\nFlask solves this issue with the application context. Rather than referring to an app directly, you use the `current_app` proxy, which points to the application handling the current activity.\n\nFlask automatically pushes an application context when handling a request. View functions, error handlers, and other functions that run during a request will have access to `current_app`.\n\nFlask will also automatically push an app context when running CLI commands registered with `Flask.cli` using `@app.cli.command()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I lifetime of the context in flask-stable?\n\nAssistant: To lifetime of the context in flask-stable, here's what you do:\nThe application context is created and destroyed as necessary. When a Flask application begins handling a request, it pushes an application context and a request context. When the request ends it pops the request context then the application context. Typically, an application context will have the same lifetime as a request.\n\nSee The Request Context for more information about how the contexts work and the full life cycle of a request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I manually push a context in flask-stable?\n\nAssistant: To manually push a context in flask-stable, here's what you do:\nIf you try to access `current_app`, or anything that uses it, outside an application context, you’ll get this error message:\n\n```\nRuntimeError: Working outside of application context.\n```\n\nThis typically means that you attempted to use functionality that needed to interface with the current application object in some way. To solve this, set up an application context with app.app_context().\n\nIf you see that error while configuring your application, such as when initializing an extension, you can push a context manually since you have direct access to the app. Use `app_context()` in a with block, and everything that runs in the block will have access to `current_app`.\n\n```\ndef create_app():\n    app = Flask(__name__)\n\n    with app.app_context():\n        init_db()\n\n    return app\n``\n\nIf you see that error somewhere else in your code not related to configuring the application, it most likely indicates that you should move that code into a view function or CLI command..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I storing data in flask-stable?\n\nAssistant: To storing data in flask-stable, here's what you do:\nThe application context is a good place to store common data during a request or CLI command. Flask provides the `g object` for this purpose. It is a simple namespace object that has the same lifetime as an application context.\n\nNote\n\nThe g name stands for “global”, but that is referring to the data being global within a context. The data on g is lost after the context ends, and it is not an appropriate place to store data between requests. Use the `session` or a database to store data across requests.\n\nA common use for `g` is to manage resources during a request.\n\n1. `get_X()` creates resource `X` if it does not exist, caching it as `g.X`.\n2. `teardown_X()` closes or otherwise deallocates the resource if it exists. It is registered as a `teardown_appcontext()` handler.\n\nFor example, you can manage a database connection using this pattern:\n\n```\nfrom flask import g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = connect_to_database()\n\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db(exception):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\nDuring a request, every call to `get_db()` will return the same connection, and it will be closed automatically at the end of the request.\n\nYou can use `LocalProxy` to make a new context local from `get_db()`:\n\n```\nfrom werkzeug.local import LocalProxy\ndb = LocalProxy(get_db)\n```\n\nAccessing `db` will call `get_db` internally, in the same way that `current_app` works..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I events and signals in flask-stable?\n\nAssistant: To events and signals in flask-stable, here's what you do:\nThe application will call functions registered with `teardown_appcontext()` when the application context is popped.\n\nThe following signals are sent: `appcontext_pushed`, `appcontext_tearing_down`, and `appcontext_popped`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for The Application Context in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Manually Push a Context Example**:\n\n```yaml\ndef create_app():\n    app = Flask(__name__)\n\n    with app.app_context():\n        init_db()\n\n    return app\n\n```\n\nThis snippet shows you how to manually push a context example, which is an important aspect of the application context.\n\n**Storing Data Example**:\n\n```yaml\nfrom flask import g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = connect_to_database()\n\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db(exception):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n\n```\n\nThis snippet shows you how to storing data example, which is an important aspect of the application context.\n\n**Using LocalProxy Example**:\n\n```yaml\nfrom werkzeug.local import LocalProxy\ndb = LocalProxy(get_db)\n```\n\nThis snippet shows you how to using localproxy example, which is an important aspect of the application context.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using The Application Context in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `g` object to store common data during a request or CLI command, but remember it is not suitable for data that needs to persist across requests.\n\nIf you encounter a RuntimeError about working outside of application context, ensure that your code is executed within an application context using `app.app_context()`.\n\nManage resources during a request using the `g` object to avoid repeated resource creation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/appcontext", "title": "The Application Context", "description": "The application context keeps track of the application-level data during a request, CLI command, or other activity.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:21:09", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/appcontext/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "The Application Context — Flask Documentation (3.1.x)", "language": "en", "scrapeId": "57bf6928-64f3-48c8-bd63-02852aa57888", "sourceURL": "https://flask.palletsprojects.com/en/stable/appcontext", "url": "https://flask.palletsprojects.com/en/stable/appcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Deploying to Production is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Deploying to Production in flask-stable.\n\n# Deploying to Production\n\nGuidance on making your Flask application available publicly, including self-hosted options and hosting platforms.Here's a quick rundown of what this is about:\n\n## Deploying to Production\n\nAfter developing your application, you’ll want to make it available publicly to other users. When you’re developing locally, you’re probably using the built-in development server, debugger, and reloader. These should not be used in production. Instead, you should use a dedicated WSGI server or hosting platform, some of which will be described here.\n\n“Production” means “not development”, which applies whether you’re serving your application publicly to millions of users or privately / locally to a single user. **Do not use the development server when** **deploying to production. It is intended for use only during local** **development. It is not designed to be particularly secure, stable, or** **efficient.**\n\n## Self-Hosted Options\n\nFlask is a WSGI _application_. A WSGI _server_ is used to run the application, converting incoming HTTP requests to the standard WSGI environ, and converting outgoing WSGI responses to HTTP responses.\n\nThe primary goal of these docs is to familiarize you with the concepts involved in running a WSGI application using a production WSGI server and HTTP server. There are many WSGI servers and HTTP servers, with many configuration possibilities. The pages below discuss the most common servers, and show the basics of running each one. The next section discusses platforms that can manage this for you.\n\n- [Gunicorn](https://flask.palletsprojects.com/en/stable/deploying/gunicorn/)\n- [Waitress](https://flask.palletsprojects.com/en/stable/deploying/waitress/)\n- [mod_wsgi](https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/)\n- [uWSGI](https://flask.palletsprojects.com/en/stable/deploying/uwsgi/)\n- [gevent](https://flask.palletsprojects.com/en/stable/deploying/gevent/)\n- [eventlet](https://flask.palletsprojects.com/en/stable/deploying/eventlet/)\n- [ASGI](https://flask.palletsprojects.com/en/stable/deploying/asgi/)\n\nWSGI servers have HTTP servers built-in. However, a dedicated HTTP server may be safer, more efficient, or more capable. Putting an HTTP server in front of the WSGI server is called a “reverse proxy.”\n\n- [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/)\n- [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/)\n- [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/)\n\nThis list is not exhaustive, and you should evaluate these and other servers based on your application’s needs. Different servers will have different capabilities, configuration, and support.\n\n## Hosting Platforms\n\nThere are many services available for hosting web applications without needing to maintain your own server, networking, domain, etc. Some services may have a free tier up to a certain time or bandwidth. Many of these services use one of the WSGI servers described above, or a similar interface. The links below are for some of the most common platforms, which have instructions for Flask, WSGI, or Python.\n\n- [PythonAnywhere](https://help.pythonanywhere.com/pages/Flask/)\n- [Google App Engine](https://cloud.google.com/appengine/docs/standard/python3/building-app)\n- [Google Cloud Run](https://cloud.google.com/run/docs/quickstarts/build-and-deploy/deploy-python-service)\n- [AWS Elastic Beanstalk](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html)\n- [Microsoft Azure](https://docs.microsoft.com/en-us/azure/app-service/quickstart-python)\n\nThis list is not exhaustive, and you should evaluate these and other services based on your application’s needs. Different services will have different capabilities, configuration, pricing, and support.\n\nYou’ll probably need to [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/) when using most hosting platforms.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying", "title": "Deploying to Production", "description": "Guidance on making your Flask application available publicly, including self-hosted options and hosting platforms.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:55", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Deploying to Production — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "b01d2ed0-96bf-4fd4-aa6c-fec8336e4c04", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying", "url": "https://flask.palletsprojects.com/en/stable/deploying/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I deploying to production in flask-stable?\n\nAssistant: To deploying to production in flask-stable, here's what you do:\nAfter developing your application, you’ll want to make it available publicly to other users. When you’re developing locally, you’re probably using the built-in development server, debugger, and reloader. These should not be used in production. Instead, you should use a dedicated WSGI server or hosting platform, some of which will be described here.\n\n“Production” means “not development”, which applies whether you’re serving your application publicly to millions of users or privately / locally to a single user. **Do not use the development server when** **deploying to production. It is intended for use only during local** **development. It is not designed to be particularly secure, stable, or** **efficient.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying", "title": "Deploying to Production", "description": "Guidance on making your Flask application available publicly, including self-hosted options and hosting platforms.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:55", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Deploying to Production — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "b01d2ed0-96bf-4fd4-aa6c-fec8336e4c04", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying", "url": "https://flask.palletsprojects.com/en/stable/deploying/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I self-hosted options in flask-stable?\n\nAssistant: To self-hosted options in flask-stable, here's what you do:\nFlask is a WSGI _application_. A WSGI _server_ is used to run the application, converting incoming HTTP requests to the standard WSGI environ, and converting outgoing WSGI responses to HTTP responses.\n\nThe primary goal of these docs is to familiarize you with the concepts involved in running a WSGI application using a production WSGI server and HTTP server. There are many WSGI servers and HTTP servers, with many configuration possibilities. The pages below discuss the most common servers, and show the basics of running each one. The next section discusses platforms that can manage this for you.\n\n- [Gunicorn](https://flask.palletsprojects.com/en/stable/deploying/gunicorn/)\n- [Waitress](https://flask.palletsprojects.com/en/stable/deploying/waitress/)\n- [mod_wsgi](https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/)\n- [uWSGI](https://flask.palletsprojects.com/en/stable/deploying/uwsgi/)\n- [gevent](https://flask.palletsprojects.com/en/stable/deploying/gevent/)\n- [eventlet](https://flask.palletsprojects.com/en/stable/deploying/eventlet/)\n- [ASGI](https://flask.palletsprojects.com/en/stable/deploying/asgi/)\n\nWSGI servers have HTTP servers built-in. However, a dedicated HTTP server may be safer, more efficient, or more capable. Putting an HTTP server in front of the WSGI server is called a “reverse proxy.”\n\n- [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/)\n- [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/)\n- [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/)\n\nThis list is not exhaustive, and you should evaluate these and other servers based on your application’s needs. Different servers will have different capabilities, configuration, and support..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying", "title": "Deploying to Production", "description": "Guidance on making your Flask application available publicly, including self-hosted options and hosting platforms.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:55", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Deploying to Production — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "b01d2ed0-96bf-4fd4-aa6c-fec8336e4c04", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying", "url": "https://flask.palletsprojects.com/en/stable/deploying/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I hosting platforms in flask-stable?\n\nAssistant: To hosting platforms in flask-stable, here's what you do:\nThere are many services available for hosting web applications without needing to maintain your own server, networking, domain, etc. Some services may have a free tier up to a certain time or bandwidth. Many of these services use one of the WSGI servers described above, or a similar interface. The links below are for some of the most common platforms, which have instructions for Flask, WSGI, or Python.\n\n- [PythonAnywhere](https://help.pythonanywhere.com/pages/Flask/)\n- [Google App Engine](https://cloud.google.com/appengine/docs/standard/python3/building-app)\n- [Google Cloud Run](https://cloud.google.com/run/docs/quickstarts/build-and-deploy/deploy-python-service)\n- [AWS Elastic Beanstalk](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html)\n- [Microsoft Azure](https://docs.microsoft.com/en-us/azure/app-service/quickstart-python)\n\nThis list is not exhaustive, and you should evaluate these and other services based on your application’s needs. Different services will have different capabilities, configuration, pricing, and support.\n\nYou’ll probably need to [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/) when using most hosting platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying", "title": "Deploying to Production", "description": "Guidance on making your Flask application available publicly, including self-hosted options and hosting platforms.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:55", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Deploying to Production — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "b01d2ed0-96bf-4fd4-aa6c-fec8336e4c04", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying", "url": "https://flask.palletsprojects.com/en/stable/deploying/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Deploying to Production in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly secure, stable, or efficient.\n\nEvaluate different servers and hosting platforms based on your application’s needs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying", "title": "Deploying to Production", "description": "Guidance on making your Flask application available publicly, including self-hosted options and hosting platforms.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:55", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Deploying to Production — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "b01d2ed0-96bf-4fd4-aa6c-fec8336e4c04", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying", "url": "https://flask.palletsprojects.com/en/stable/deploying/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Signals is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Signals in flask-stable.\n\n# Signals\n\nSignals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.Here's a quick rundown of what this is about:\n\n## Core Signals\n\nSee [Signals](https://flask.palletsprojects.com/en/stable/api/#core-signals-list) for a list of all built-in signals. The [Application Structure and Lifecycle](https://flask.palletsprojects.com/en/stable/lifecycle/) page also describes the order that signals and decorators execute.\n\n## Subscribing to Signals\n\nTo subscribe to a signal, you can use the `connect()` method of a signal. The first argument is the function that should be called when the signal is emitted, the optional second argument specifies a sender. To unsubscribe from a signal, you can use the `disconnect()` method.\n\nFor all core Flask signals, the sender is the application that issued the signal. When you subscribe to a signal, be sure to also provide a sender unless you really want to listen for signals from all applications. This is especially true if you are developing an extension.\n\nFor example, here is a helper context manager that can be used in a unit test to determine which templates were rendered and what variables were passed to the template:\n\n```\nfrom flask import template_rendered\nfrom contextlib import contextmanager\n\n@contextmanager\ndef captured_templates(app):\n    recorded = []\n    def record(sender, template, context, **extra):\n        recorded.append((template, context))\n    template_rendered.connect(record, app)\n    try:\n        yield recorded\n    finally:\n        template_rendered.disconnect(record, app)\n```\n\nThis can now easily be paired with a test client:\n\n```\nwith captured_templates(app) as templates:\n    rv = app.test_client().get('/')\n    assert rv.status_code == 200\n    assert len(templates) == 1\n    template, context = templates[0]\n    assert template.name == 'index.html'\n    assert len(context['items']) == 10\n```\n\nMake sure to subscribe with an extra `**extra` argument so that your calls don’t fail if Flask introduces new arguments to the signals.\n\nAll the template rendering in the code issued by the application `app` in the body of the `with` block will now be recorded in the `templates` variable. Whenever a template is rendered, the template object as well as context are appended to it.\n\nAdditionally there is a convenient helper method ( `connected_to()`) that allows you to temporarily subscribe a function to a signal with a context manager on its own. Because the return value of the context manager cannot be specified that way, you have to pass the list in as an argument:\n\n```\nfrom flask import template_rendered\n\ndef captured_templates(app, recorded, **extra):\n    def record(sender, template, context):\n        recorded.append((template, context))\n    return template_rendered.connected_to(record, app)\n```\n\nThe example above would then look like this:\n\n```\ntemplates = []\nwith captured_templates(app, templates, **extra):\n    ...\n    template, context = templates[0]\n```\n\n## Creating Signals\n\nIf you want to use signals in your own application, you can use the blinker library directly. The most common use case are named signals in a custom [`Namespace`](https://blinker.readthedocs.io/en/stable/#blinker.Namespace \"(in Blinker v1.9)\"). This is what is recommended most of the time:\n\n```\nfrom blinker import Namespace\nmy_signals = Namespace()\n```\n\nNow you can create new signals like this:\n\n```\nmodel_saved = my_signals.signal('model-saved')\n```\n\nThe name for the signal here makes it unique and also simplifies debugging. You can access the name of the signal with the `name` attribute.\n\n## Sending Signals\n\nIf you want to emit a signal, you can do so by calling the `send()` method. It accepts a sender as first argument and optionally some keyword arguments that are forwarded to the signal subscribers:\n\n```\nclass Model(object):\n    ...\n\n    def save(self):\n        model_saved.send(self)\n```\n\nTry to always pick a good sender. If you have a class that is emitting a signal, pass `self` as sender. If you are emitting a signal from a random function, you can pass `current_app._get_current_object()` as sender.\n\nPassing Proxies as Senders\n\nNever pass [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") as sender to a signal. Use `current_app._get_current_object()` instead. The reason for this is that [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") is a proxy and not the real application object.\n\n## Signals and Flask’s Request Context\n\nSignals fully support [The Request Context](https://flask.palletsprojects.com/en/stable/reqcontext/) when receiving signals. Context-local variables are consistently available between [`request_started`](https://flask.palletsprojects.com/en/stable/api/#flask.request_started \"flask.request_started\") and [`request_finished`](https://flask.palletsprojects.com/en/stable/api/#flask.request_finished \"flask.request_finished\"), so you can rely on [`flask.g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") and others as needed. Note the limitations described in [Sending Signals](https://flask.palletsprojects.com/en/stable/signals/#signals-sending) and the [`request_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.request_tearing_down \"flask.request_tearing_down\") signal.\n\n## Decorator Based Signal Subscriptions\n\nYou can also easily subscribe to signals by using the `connect_via()` decorator:\n\n```\nfrom flask import template_rendered\n\n@template_rendered.connect_via(app)\ndef when_template_rendered(sender, template, context, **extra):\n    print(f'Template {template.name} is rendered with {context}')\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "overview", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I core signals in flask-stable?\n\nAssistant: To core signals in flask-stable, here's what you do:\nSee [Signals](https://flask.palletsprojects.com/en/stable/api/#core-signals-list) for a list of all built-in signals. The [Application Structure and Lifecycle](https://flask.palletsprojects.com/en/stable/lifecycle/) page also describes the order that signals and decorators execute..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I subscribing to signals in flask-stable?\n\nAssistant: To subscribing to signals in flask-stable, here's what you do:\nTo subscribe to a signal, you can use the `connect()` method of a signal. The first argument is the function that should be called when the signal is emitted, the optional second argument specifies a sender. To unsubscribe from a signal, you can use the `disconnect()` method.\n\nFor all core Flask signals, the sender is the application that issued the signal. When you subscribe to a signal, be sure to also provide a sender unless you really want to listen for signals from all applications. This is especially true if you are developing an extension.\n\nFor example, here is a helper context manager that can be used in a unit test to determine which templates were rendered and what variables were passed to the template:\n\n```\nfrom flask import template_rendered\nfrom contextlib import contextmanager\n\n@contextmanager\ndef captured_templates(app):\n    recorded = []\n    def record(sender, template, context, **extra):\n        recorded.append((template, context))\n    template_rendered.connect(record, app)\n    try:\n        yield recorded\n    finally:\n        template_rendered.disconnect(record, app)\n```\n\nThis can now easily be paired with a test client:\n\n```\nwith captured_templates(app) as templates:\n    rv = app.test_client().get('/')\n    assert rv.status_code == 200\n    assert len(templates) == 1\n    template, context = templates[0]\n    assert template.name == 'index.html'\n    assert len(context['items']) == 10\n```\n\nMake sure to subscribe with an extra `**extra` argument so that your calls don’t fail if Flask introduces new arguments to the signals.\n\nAll the template rendering in the code issued by the application `app` in the body of the `with` block will now be recorded in the `templates` variable. Whenever a template is rendered, the template object as well as context are appended to it.\n\nAdditionally there is a convenient helper method ( `connected_to()`) that allows you to temporarily subscribe a function to a signal with a context manager on its own. Because the return value of the context manager cannot be specified that way, you have to pass the list in as an argument:\n\n```\nfrom flask import template_rendered\n\ndef captured_templates(app, recorded, **extra):\n    def record(sender, template, context):\n        recorded.append((template, context))\n    return template_rendered.connected_to(record, app)\n```\n\nThe example above would then look like this:\n\n```\ntemplates = []\nwith captured_templates(app, templates, **extra):\n    ...\n    template, context = templates[0]\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I creating signals in flask-stable?\n\nAssistant: To creating signals in flask-stable, here's what you do:\nIf you want to use signals in your own application, you can use the blinker library directly. The most common use case are named signals in a custom [`Namespace`](https://blinker.readthedocs.io/en/stable/#blinker.Namespace \"(in Blinker v1.9)\"). This is what is recommended most of the time:\n\n```\nfrom blinker import Namespace\nmy_signals = Namespace()\n```\n\nNow you can create new signals like this:\n\n```\nmodel_saved = my_signals.signal('model-saved')\n```\n\nThe name for the signal here makes it unique and also simplifies debugging. You can access the name of the signal with the `name` attribute..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I sending signals in flask-stable?\n\nAssistant: To sending signals in flask-stable, here's what you do:\nIf you want to emit a signal, you can do so by calling the `send()` method. It accepts a sender as first argument and optionally some keyword arguments that are forwarded to the signal subscribers:\n\n```\nclass Model(object):\n    ...\n\n    def save(self):\n        model_saved.send(self)\n```\n\nTry to always pick a good sender. If you have a class that is emitting a signal, pass `self` as sender. If you are emitting a signal from a random function, you can pass `current_app._get_current_object()` as sender.\n\nPassing Proxies as Senders\n\nNever pass [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") as sender to a signal. Use `current_app._get_current_object()` instead. The reason for this is that [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") is a proxy and not the real application object..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I signals and flask’s request context in flask-stable?\n\nAssistant: To signals and flask’s request context in flask-stable, here's what you do:\nSignals fully support [The Request Context](https://flask.palletsprojects.com/en/stable/reqcontext/) when receiving signals. Context-local variables are consistently available between [`request_started`](https://flask.palletsprojects.com/en/stable/api/#flask.request_started \"flask.request_started\") and [`request_finished`](https://flask.palletsprojects.com/en/stable/api/#flask.request_finished \"flask.request_finished\"), so you can rely on [`flask.g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") and others as needed. Note the limitations described in [Sending Signals](https://flask.palletsprojects.com/en/stable/signals/#signals-sending) and the [`request_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.request_tearing_down \"flask.request_tearing_down\") signal..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I decorator based signal subscriptions in flask-stable?\n\nAssistant: To decorator based signal subscriptions in flask-stable, here's what you do:\nYou can also easily subscribe to signals by using the `connect_via()` decorator:\n\n```\nfrom flask import template_rendered\n\n@template_rendered.connect_via(app)\ndef when_template_rendered(sender, template, context, **extra):\n    print(f'Template {template.name} is rendered with {context}')\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "section_detail", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Signals in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Captured Templates Context Manager**:\n\n```yaml\nfrom flask import template_rendered\nfrom contextlib import contextmanager\n\n@contextmanager\ndef captured_templates(app):\n    recorded = []\n    def record(sender, template, context, **extra):\n        recorded.append((template, context))\n    template_rendered.connect(record, app)\n    try:\n        yield recorded\n    finally:\n        template_rendered.disconnect(record, app)\n\n```\n\nThis snippet shows you how to captured templates context manager, which is an important aspect of signals.\n\n**Using Captured Templates with Test Client**:\n\n```yaml\nwith captured_templates(app) as templates:\n    rv = app.test_client().get('/')\n    assert rv.status_code == 200\n    assert len(templates) == 1\n    template, context = templates[0]\n    assert template.name == 'index.html'\n    assert len(context['items']) == 10\n\n```\n\nThis snippet shows you how to using captured templates with test client, which is an important aspect of signals.\n\n**Creating a Signal with Blinker**:\n\n```yaml\nfrom blinker import Namespace\nmy_signals = Namespace()\n\nmodel_saved = my_signals.signal('model-saved')\n\n```\n\nThis snippet shows you how to creating a signal with blinker, which is an important aspect of signals.\n\n**Sending a Signal**:\n\n```yaml\nclass Model(object):\n    ...\n\n    def save(self):\n        model_saved.send(self)\n\n```\n\nThis snippet shows you how to sending a signal, which is an important aspect of signals.\n\n**Decorator Based Signal Subscription**:\n\n```yaml\nfrom flask import template_rendered\n\n@template_rendered.connect_via(app)\ndef when_template_rendered(sender, template, context, **extra):\n    print(f'Template {template.name} is rendered with {context}')\n```\n\nThis snippet shows you how to decorator based signal subscription, which is an important aspect of signals.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "code_examples", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Signals in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to subscribe with an extra `**extra` argument so that your calls don’t fail if Flask introduces new arguments to the signals.\n\nNever pass `current_app` as sender to a signal. Use `current_app._get_current_object()` instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/signals", "title": "Signals", "description": "Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:32", "type": "best_practices", "page_metadata": {"title": "Signals — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/signals/", "scrapeId": "9f47c3ff-4537-4309-a2a2-d0848e704b20", "sourceURL": "https://flask.palletsprojects.com/en/stable/signals", "url": "https://flask.palletsprojects.com/en/stable/signals/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Configuration Handling is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Configuration Handling in flask-stable.\n\n# Configuration Handling\n\nApplications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.Here's a quick rundown of what this is about:\n\n## Configuration Basics\n\nThe [`config`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.config \"flask.Flask.config\") is actually a subclass of a dictionary and can be modified just like any dictionary:\n\n```\napp = Flask(__name__)\napp.config['TESTING'] = True\n```\n\nCertain configuration values are also forwarded to the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object so you can read and write them from there:\n\n```\napp.testing = True\n```\n\nTo update multiple keys at once you can use the [`dict.update()`](https://docs.python.org/3/library/stdtypes.html#dict.update \"(in Python v3.13)\") method:\n\n```\napp.config.update(\n    TESTING=True,\n    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n)\n```\n\n## Debug Mode\n\nThe [`DEBUG`](https://flask.palletsprojects.com/en/stable/config/#DEBUG \"DEBUG\") config value is special because it may behave inconsistently if changed after the app has begun setting up. In order to set debug mode reliably, use the `--debug` option on the `flask` or `flask run` command. `flask run` will use the interactive debugger and reloader by default in debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nUsing the option is recommended. While it is possible to set [`DEBUG`](https://flask.palletsprojects.com/en/stable/config/#DEBUG \"DEBUG\") in your config or code, this is strongly discouraged. It can’t be read early by the `flask run` command, and some systems or extensions may have already configured themselves based on a previous value.\n\n## Builtin Configuration Values\n\nThe following configuration values are used internally by Flask:\n\n**DEBUG**\nWhether debug mode is enabled. When using `flask run` to start the development server, an interactive debugger will be shown for unhandled exceptions, and the server will be reloaded when code changes. The [`debug`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.debug \"flask.Flask.debug\") attribute maps to this config key. This is set with the `FLASK_DEBUG` environment variable. It may not behave as expected if set in code.\n\n**Do not enable debug mode when deploying in production.**\n\nDefault: `False`\n\n**TESTING**\nEnable testing mode. Exceptions are propagated rather than handled by the app’s error handlers. Extensions may also change their behavior to facilitate easier testing. You should enable this in your own tests.\n\nDefault: `False`\n\n**PROPAGATE_EXCEPTIONS**\nExceptions are re-raised rather than being handled by the app’s error handlers. If not set, this is implicitly true if `TESTING` or `DEBUG` is enabled.\n\nDefault: `None`\n\n**TRAP_HTTP_EXCEPTIONS**\nIf there is no handler for an `HTTPException`-type exception, re-raise it to be handled by the interactive debugger instead of returning it as a simple error response.\n\nDefault: `False`\n\n**TRAP_BAD_REQUEST_ERRORS**\nTrying to access a key that doesn’t exist from request dicts like `args` and `form` will return a 400 Bad Request error page. Enable this to treat the error as an unhandled exception instead so that you get the interactive debugger. This is a more specific version of `TRAP_HTTP_EXCEPTIONS`. If unset, it is enabled in debug mode.\n\nDefault: `None`\n\n**SECRET_KEY**\nA secret key that will be used for securely signing the session cookie and can be used for any other security related needs by extensions or your application. It should be a long random `bytes` or `str`. For example, copy the output of this to your config:\n\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n**Do not reveal the secret key when posting questions or committing code.**\n\nDefault: `None`\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configuration basics in flask-stable?\n\nAssistant: To configuration basics in flask-stable, here's what you do:\nThe [`config`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.config \"flask.Flask.config\") is actually a subclass of a dictionary and can be modified just like any dictionary:\n\n```\napp = Flask(__name__)\napp.config['TESTING'] = True\n```\n\nCertain configuration values are also forwarded to the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") object so you can read and write them from there:\n\n```\napp.testing = True\n```\n\nTo update multiple keys at once you can use the [`dict.update()`](https://docs.python.org/3/library/stdtypes.html#dict.update \"(in Python v3.13)\") method:\n\n```\napp.config.update(\n    TESTING=True,\n    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I debug mode in flask-stable?\n\nAssistant: To debug mode in flask-stable, here's what you do:\nThe [`DEBUG`](https://flask.palletsprojects.com/en/stable/config/#DEBUG \"DEBUG\") config value is special because it may behave inconsistently if changed after the app has begun setting up. In order to set debug mode reliably, use the `--debug` option on the `flask` or `flask run` command. `flask run` will use the interactive debugger and reloader by default in debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nUsing the option is recommended. While it is possible to set [`DEBUG`](https://flask.palletsprojects.com/en/stable/config/#DEBUG \"DEBUG\") in your config or code, this is strongly discouraged. It can’t be read early by the `flask run` command, and some systems or extensions may have already configured themselves based on a previous value..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I builtin configuration values in flask-stable?\n\nAssistant: To builtin configuration values in flask-stable, here's what you do:\nThe following configuration values are used internally by Flask:\n\n**DEBUG**\nWhether debug mode is enabled. When using `flask run` to start the development server, an interactive debugger will be shown for unhandled exceptions, and the server will be reloaded when code changes. The [`debug`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.debug \"flask.Flask.debug\") attribute maps to this config key. This is set with the `FLASK_DEBUG` environment variable. It may not behave as expected if set in code.\n\n**Do not enable debug mode when deploying in production.**\n\nDefault: `False`\n\n**TESTING**\nEnable testing mode. Exceptions are propagated rather than handled by the app’s error handlers. Extensions may also change their behavior to facilitate easier testing. You should enable this in your own tests.\n\nDefault: `False`\n\n**PROPAGATE_EXCEPTIONS**\nExceptions are re-raised rather than being handled by the app’s error handlers. If not set, this is implicitly true if `TESTING` or `DEBUG` is enabled.\n\nDefault: `None`\n\n**TRAP_HTTP_EXCEPTIONS**\nIf there is no handler for an `HTTPException`-type exception, re-raise it to be handled by the interactive debugger instead of returning it as a simple error response.\n\nDefault: `False`\n\n**TRAP_BAD_REQUEST_ERRORS**\nTrying to access a key that doesn’t exist from request dicts like `args` and `form` will return a 400 Bad Request error page. Enable this to treat the error as an unhandled exception instead so that you get the interactive debugger. This is a more specific version of `TRAP_HTTP_EXCEPTIONS`. If unset, it is enabled in debug mode.\n\nDefault: `None`\n\n**SECRET_KEY**\nA secret key that will be used for securely signing the session cookie and can be used for any other security related needs by extensions or your application. It should be a long random `bytes` or `str`. For example, copy the output of this to your config:\n\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\n**Do not reveal the secret key when posting questions or committing code.**\n\nDefault: `None`.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Configuration Handling in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Configuration Example**:\n\n```yaml\napp = Flask(__name__)\napp.config['TESTING'] = True\n\n```\n\nThis snippet shows you how to basic configuration example, which is an important aspect of configuration handling.\n\n**Setting Debug Mode**:\n\n```yaml\n$ flask --app hello run --debug\n\n```\n\nThis snippet shows you how to setting debug mode, which is an important aspect of configuration handling.\n\n**Updating Configuration Values**:\n\n```yaml\napp.config.update(\n    TESTING=True,\n    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n)\n```\n\nThis snippet shows you how to updating configuration values, which is an important aspect of configuration handling.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Configuration Handling in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreate your application in a function and register blueprints on it.\n\nDo not write code that needs the configuration at import time.\n\nMake sure to load the configuration very early on, so that extensions can access the configuration when calling init_app.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/config", "title": "Configuration Handling", "description": "Applications need some kind of configuration. There are different settings you might want to change depending on the application environment like toggling the debug mode, setting the secret key, and other such environment-specific things.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:22:53", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Configuration Handling — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/config/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "7c6b4f7d-5667-4128-80af-b7e1093e268f", "sourceURL": "https://flask.palletsprojects.com/en/stable/config", "url": "https://flask.palletsprojects.com/en/stable/config/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Application Structure and Lifecycle is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Application Structure and Lifecycle in flask-stable.\n\n# Application Structure and Lifecycle\n\nFlask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.Here's a quick rundown of what this is about:\n\n## Application Setup\n\nThe first step in creating a Flask application is creating the application object. Each Flask application is an instance of the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") class, which collects all configuration, extensions, and views.\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    SECRET_KEY=\"dev\",\n)\napp.config.from_prefixed_env()\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n```\n\nThis is known as the “application setup phase”, it’s the code you write that’s outside any view functions or other handlers. It can be split up between different modules and sub-packages, but all code that you want to be part of your application must be imported in order for it to be registered.\n\nAll application setup must be completed before you start serving your application and handling requests. This is because WSGI servers divide work between multiple workers, or can be distributed across multiple machines. If the configuration changed in one worker, there’s no way for Flask to ensure consistency between other workers.\n\nFlask tries to help developers catch some of these setup ordering issues by showing an error if setup-related methods are called after requests are handled. In that case you’ll see this error:\n\n> The setup method ‘route’ can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.\n> Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it.\n\nHowever, it is not possible for Flask to detect all cases of out-of-order setup. In general, don’t do anything to modify the `Flask` app object and `Blueprint` objects from within view functions that run during requests. This includes:\n\n- Adding routes, view functions, and other request handlers with `@app.route`, `@app.errorhandler`, `@app.before_request`, etc.\n- Registering blueprints.\n- Loading configuration with `app.config`.\n- Setting up the Jinja template environment with `app.jinja_env`.\n- Setting a session interface, instead of the default itsdangerous cookie.\n- Setting a JSON provider with `app.json`, instead of the default provider.\n- Creating and initializing Flask extensions.\n\n## Serving the Application\n\nFlask is a WSGI application framework. The other half of WSGI is the WSGI server. During development, Flask, through Werkzeug, provides a development WSGI server with the `flask run` CLI command. When you are done with development, use a production server to serve your application, see [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/).\n\nRegardless of what server you’re using, it will follow the [**PEP 3333**](https://peps.python.org/pep-3333/) WSGI spec. The WSGI server will be told how to access your Flask application object, which is the WSGI application. Then it will start listening for HTTP requests, translate the request data into a WSGI environ, and call the WSGI application with that data. The WSGI application will return data that is translated into an HTTP response.\n\n1. Browser or other client makes HTTP request.\n2. WSGI server receives request.\n3. WSGI server converts HTTP data to WSGI `environ` dict.\n4. WSGI server calls WSGI application with the `environ`.\n5. Flask, the WSGI application, does all its internal processing to route the request to a view function, handle errors, etc.\n6. Flask translates View function return into WSGI response data, passes it to WSGI server.\n7. WSGI server creates and send an HTTP response.\n8. Client receives the HTTP response.\n\n## Middleware\n\nThe WSGI application above is a callable that behaves in a certain way. Middleware is a WSGI application that wraps another WSGI application. It’s a similar concept to Python decorators. The outermost middleware will be called by the server. It can modify the data passed to it, then call the WSGI application (or further middleware) that it wraps, and so on. And it can take the return value of that call and modify it further.\n\nFrom the WSGI server’s perspective, there is one WSGI application, the one it calls directly. Typically, Flask is the “real” application at the end of the chain of middleware. But even Flask can call further WSGI applications, although that’s an advanced, uncommon use case.\n\nA common middleware you’ll see used with Flask is Werkzeug’s [`ProxyFix`](https://werkzeug.palletsprojects.com/en/stable/middleware/proxy_fix/#werkzeug.middleware.proxy_fix.ProxyFix \"(in Werkzeug v3.1.x)\"), which modifies the request to look like it came directly from a client even if it passed through HTTP proxies on the way. There are other middleware that can handle serving static files, authentication, etc.\n\n## How a Request is Handled\n\nFor us, the interesting part of the steps above is when Flask gets called by the WSGI server (or middleware). At that point, it will do quite a lot to handle the request and generate the response. At the most basic, it will match the URL to a view function, call the view function, and pass the return value back to the server. But there are many more parts that you can use to customize its behavior.\n\n01. WSGI server calls the Flask object, which calls [`Flask.wsgi_app()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.wsgi_app \"flask.Flask.wsgi_app\").\n02. A [`RequestContext`](https://flask.palletsprojects.com/en/stable/api/#flask.ctx.RequestContext \"flask.ctx.RequestContext\") object is created. This converts the WSGI `environ` dict into a [`Request`](https://flask.palletsprojects.com/en/stable/api/#flask.Request \"flask.Request\") object. It also creates an `AppContext` object.\n03. The [app context](https://flask.palletsprojects.com/en/stable/appcontext/) is pushed, which makes [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") and [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") available.\n04. The [`appcontext_pushed`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_pushed \"flask.appcontext_pushed\") signal is sent.\n05. The [request context](https://flask.palletsprojects.com/en/stable/reqcontext/) is pushed, which makes [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") and [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\") available.\n06. The session is opened, loading any existing session data using the app’s [`session_interface`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.session_interface \"flask.Flask.session_interface\"), an instance of [`SessionInterface`](https://flask.palletsprojects.com/en/stable/api/#flask.sessions.SessionInterface \"flask.sessions.SessionInterface\").\n07. The URL is matched against the URL rules registered with the [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorator during application setup. If there is no match, the error - usually a 404, 405, or redirect - is stored to be handled later.\n08. The [`request_started`](https://flask.palletsprojects.com/en/stable/api/#flask.request_started \"flask.request_started\") signal is sent.\n09. Any [`url_value_preprocessor()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_value_preprocessor \"flask.Flask.url_value_preprocessor\") decorated functions are called.\n10. Any [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") decorated functions are called. If any of these function returns a value it is treated as the response immediately.\n11. If the URL didn’t match a route a few steps ago, that error is raised now.\n12. The [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorated view function associated with the matched URL is called and returns a value to be used as the response.\n13. If any step so far raised an exception, and there is an [`errorhandler()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.errorhandler \"flask.Flask.errorhandler\") decorated function that matches the exception class or HTTP error code, it is called to handle the error and return a response.\n14. Whatever returned a response value - a before request function, the view, or an error handler, that value is converted to a [`Response`](https://flask.palletsprojects.com/en/stable/api/#flask.Response \"flask.Response\") object.\n15. Any [`after_this_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.after_this_request \"flask.after_this_request\") decorated functions are called, then cleared.\n16. Any [`after_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.after_request \"flask.Flask.after_request\") decorated functions are called, which can modify the response object.\n17. The session is saved, persisting any modified session data using the app’s [`session_interface`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.session_interface \"flask.Flask.session_interface\").\n18. The [`request_finished`](https://flask.palletsprojects.com/en/stable/api/#flask.request_finished \"flask.request_finished\") signal is sent.\n19. If any step so far raised an exception, and it was not handled by an error handler function, it is handled now. HTTP exceptions are treated as responses with their corresponding status code, other exceptions are converted to a generic 500 response. The [`got_request_exception`](https://flask.palletsprojects.com/en/stable/api/#flask.got_request_exception \"flask.got_request_exception\") signal is sent.\n20. The response object’s status, headers, and body are returned to the WSGI server.\n21. Any [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\") decorated functions are called.\n22. The [`request_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.request_tearing_down \"flask.request_tearing_down\") signal is sent.\n23. The request context is popped, [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") and [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\") are no longer available.\n24. Any [`teardown_appcontext()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_appcontext \"flask.Flask.teardown_appcontext\") decorated functions are called.\n25. The [`appcontext_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_tearing_down \"flask.appcontext_tearing_down\") signal is sent.\n26. The app context is popped, [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") and [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") are no longer available.\n27. The [`appcontext_popped`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_popped \"flask.appcontext_popped\") signal is sent.\n\nThere are even more decorators and customization points than this, but that aren’t part of every request lifecycle. They’re more specific to certain things you might use during a request, such as templates, building URLs, or handling JSON data. See the rest of this documentation, as well as the [API](https://flask.palletsprojects.com/en/stable/api/) to explore further.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application setup in flask-stable?\n\nAssistant: To application setup in flask-stable, here's what you do:\nThe first step in creating a Flask application is creating the application object. Each Flask application is an instance of the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") class, which collects all configuration, extensions, and views.\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    SECRET_KEY=\"dev\",\n)\napp.config.from_prefixed_env()\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n```\n\nThis is known as the “application setup phase”, it’s the code you write that’s outside any view functions or other handlers. It can be split up between different modules and sub-packages, but all code that you want to be part of your application must be imported in order for it to be registered.\n\nAll application setup must be completed before you start serving your application and handling requests. This is because WSGI servers divide work between multiple workers, or can be distributed across multiple machines. If the configuration changed in one worker, there’s no way for Flask to ensure consistency between other workers.\n\nFlask tries to help developers catch some of these setup ordering issues by showing an error if setup-related methods are called after requests are handled. In that case you’ll see this error:\n\n> The setup method ‘route’ can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.\n> Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it.\n\nHowever, it is not possible for Flask to detect all cases of out-of-order setup. In general, don’t do anything to modify the `Flask` app object and `Blueprint` objects from within view functions that run during requests. This includes:\n\n- Adding routes, view functions, and other request handlers with `@app.route`, `@app.errorhandler`, `@app.before_request`, etc.\n- Registering blueprints.\n- Loading configuration with `app.config`.\n- Setting up the Jinja template environment with `app.jinja_env`.\n- Setting a session interface, instead of the default itsdangerous cookie.\n- Setting a JSON provider with `app.json`, instead of the default provider.\n- Creating and initializing Flask extensions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I serving the application in flask-stable?\n\nAssistant: To serving the application in flask-stable, here's what you do:\nFlask is a WSGI application framework. The other half of WSGI is the WSGI server. During development, Flask, through Werkzeug, provides a development WSGI server with the `flask run` CLI command. When you are done with development, use a production server to serve your application, see [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/).\n\nRegardless of what server you’re using, it will follow the [**PEP 3333**](https://peps.python.org/pep-3333/) WSGI spec. The WSGI server will be told how to access your Flask application object, which is the WSGI application. Then it will start listening for HTTP requests, translate the request data into a WSGI environ, and call the WSGI application with that data. The WSGI application will return data that is translated into an HTTP response.\n\n1. Browser or other client makes HTTP request.\n2. WSGI server receives request.\n3. WSGI server converts HTTP data to WSGI `environ` dict.\n4. WSGI server calls WSGI application with the `environ`.\n5. Flask, the WSGI application, does all its internal processing to route the request to a view function, handle errors, etc.\n6. Flask translates View function return into WSGI response data, passes it to WSGI server.\n7. WSGI server creates and send an HTTP response.\n8. Client receives the HTTP response..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I middleware in flask-stable?\n\nAssistant: To middleware in flask-stable, here's what you do:\nThe WSGI application above is a callable that behaves in a certain way. Middleware is a WSGI application that wraps another WSGI application. It’s a similar concept to Python decorators. The outermost middleware will be called by the server. It can modify the data passed to it, then call the WSGI application (or further middleware) that it wraps, and so on. And it can take the return value of that call and modify it further.\n\nFrom the WSGI server’s perspective, there is one WSGI application, the one it calls directly. Typically, Flask is the “real” application at the end of the chain of middleware. But even Flask can call further WSGI applications, although that’s an advanced, uncommon use case.\n\nA common middleware you’ll see used with Flask is Werkzeug’s [`ProxyFix`](https://werkzeug.palletsprojects.com/en/stable/middleware/proxy_fix/#werkzeug.middleware.proxy_fix.ProxyFix \"(in Werkzeug v3.1.x)\"), which modifies the request to look like it came directly from a client even if it passed through HTTP proxies on the way. There are other middleware that can handle serving static files, authentication, etc..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I how a request is handled in flask-stable?\n\nAssistant: To how a request is handled in flask-stable, here's what you do:\nFor us, the interesting part of the steps above is when Flask gets called by the WSGI server (or middleware). At that point, it will do quite a lot to handle the request and generate the response. At the most basic, it will match the URL to a view function, call the view function, and pass the return value back to the server. But there are many more parts that you can use to customize its behavior.\n\n01. WSGI server calls the Flask object, which calls [`Flask.wsgi_app()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.wsgi_app \"flask.Flask.wsgi_app\").\n02. A [`RequestContext`](https://flask.palletsprojects.com/en/stable/api/#flask.ctx.RequestContext \"flask.ctx.RequestContext\") object is created. This converts the WSGI `environ` dict into a [`Request`](https://flask.palletsprojects.com/en/stable/api/#flask.Request \"flask.Request\") object. It also creates an `AppContext` object.\n03. The [app context](https://flask.palletsprojects.com/en/stable/appcontext/) is pushed, which makes [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") and [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") available.\n04. The [`appcontext_pushed`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_pushed \"flask.appcontext_pushed\") signal is sent.\n05. The [request context](https://flask.palletsprojects.com/en/stable/reqcontext/) is pushed, which makes [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") and [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\") available.\n06. The session is opened, loading any existing session data using the app’s [`session_interface`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.session_interface \"flask.Flask.session_interface\"), an instance of [`SessionInterface`](https://flask.palletsprojects.com/en/stable/api/#flask.sessions.SessionInterface \"flask.sessions.SessionInterface\").\n07. The URL is matched against the URL rules registered with the [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorator during application setup. If there is no match, the error - usually a 404, 405, or redirect - is stored to be handled later.\n08. The [`request_started`](https://flask.palletsprojects.com/en/stable/api/#flask.request_started \"flask.request_started\") signal is sent.\n09. Any [`url_value_preprocessor()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_value_preprocessor \"flask.Flask.url_value_preprocessor\") decorated functions are called.\n10. Any [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") decorated functions are called. If any of these function returns a value it is treated as the response immediately.\n11. If the URL didn’t match a route a few steps ago, that error is raised now.\n12. The [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorated view function associated with the matched URL is called and returns a value to be used as the response.\n13. If any step so far raised an exception, and there is an [`errorhandler()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.errorhandler \"flask.Flask.errorhandler\") decorated function that matches the exception class or HTTP error code, it is called to handle the error and return a response.\n14. Whatever returned a response value - a before request function, the view, or an error handler, that value is converted to a [`Response`](https://flask.palletsprojects.com/en/stable/api/#flask.Response \"flask.Response\") object.\n15. Any [`after_this_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.after_this_request \"flask.after_this_request\") decorated functions are called, then cleared.\n16. Any [`after_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.after_request \"flask.Flask.after_request\") decorated functions are called, which can modify the response object.\n17. The session is saved, persisting any modified session data using the app’s [`session_interface`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.session_interface \"flask.Flask.session_interface\").\n18. The [`request_finished`](https://flask.palletsprojects.com/en/stable/api/#flask.request_finished \"flask.request_finished\") signal is sent.\n19. If any step so far raised an exception, and it was not handled by an error handler function, it is handled now. HTTP exceptions are treated as responses with their corresponding status code, other exceptions are converted to a generic 500 response. The [`got_request_exception`](https://flask.palletsprojects.com/en/stable/api/#flask.got_request_exception \"flask.got_request_exception\") signal is sent.\n20. The response object’s status, headers, and body are returned to the WSGI server.\n21. Any [`teardown_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_request \"flask.Flask.teardown_request\") decorated functions are called.\n22. The [`request_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.request_tearing_down \"flask.request_tearing_down\") signal is sent.\n23. The request context is popped, [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") and [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\") are no longer available.\n24. Any [`teardown_appcontext()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.teardown_appcontext \"flask.Flask.teardown_appcontext\") decorated functions are called.\n25. The [`appcontext_tearing_down`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_tearing_down \"flask.appcontext_tearing_down\") signal is sent.\n26. The app context is popped, [`current_app`](https://flask.palletsprojects.com/en/stable/api/#flask.current_app \"flask.current_app\") and [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") are no longer available.\n27. The [`appcontext_popped`](https://flask.palletsprojects.com/en/stable/api/#flask.appcontext_popped \"flask.appcontext_popped\") signal is sent.\n\nThere are even more decorators and customization points than this, but that aren’t part of every request lifecycle. They’re more specific to certain things you might use during a request, such as templates, building URLs, or handling JSON data. See the rest of this documentation, as well as the [API](https://flask.palletsprojects.com/en/stable/api/) to explore further..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Application Structure and Lifecycle in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Application Setup Example**:\n\n```yaml\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    SECRET_KEY=\"dev\",\n)\napp.config.from_prefixed_env()\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n```\n\nThis snippet shows you how to application setup example, which is an important aspect of application structure and lifecycle.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Application Structure and Lifecycle in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAll application setup must be completed before you start serving your application and handling requests.\n\nDon’t do anything to modify the Flask app object and Blueprint objects from within view functions that run during requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/lifecycle", "title": "Application Structure and Lifecycle", "description": "Flask makes it pretty easy to write a web application. But there are quite a few different parts to an application and to each request it handles. Knowing what happens during application setup, serving, and handling requests will help you know what’s possible in Flask and how to structure your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:48", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Application Structure and Lifecycle — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/lifecycle/", "scrapeId": "500fa747-4deb-4660-8bf1-f09d21183813", "sourceURL": "https://flask.palletsprojects.com/en/stable/lifecycle", "url": "https://flask.palletsprojects.com/en/stable/lifecycle/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what The Request Context is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain The Request Context in flask-stable.\n\n# The Request Context\n\nThe request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.Here's a quick rundown of what this is about:\n\n## Purpose of the Context\n\nWhen the Flask application handles a request, it creates a Request object based on the environment it received from the WSGI server. Because a worker (thread, process, or coroutine depending on the server) handles only one request at a time, the request data can be considered global to that worker during that request. Flask uses the term context local for this.\n\nFlask automatically pushes a request context when handling a request. View functions, error handlers, and other functions that run during a request will have access to the request proxy, which points to the request object for the current request.\n\n## Lifetime of the Context\n\nWhen a Flask application begins handling a request, it pushes a request context, which also pushes an app context. When the request ends it pops the request context then the application context.\n\nThe context is unique to each thread (or other worker type). request cannot be passed to another thread, the other thread has a different context space and will not know about the request the parent thread was pointing to.\n\nContext locals are implemented using Python’s contextvars and Werkzeug’s LocalProxy. Python manages the lifetime of context vars automatically, and local proxy wraps that low-level interface to make the data easier to work with.\n\n## Manually Push a Context\n\nIf you try to access request, or anything that uses it, outside a request context, you’ll get this error message:\n\n```\nRuntimeError: Working outside of request context.\n```\n\nThis typically means that you attempted to use functionality that needed an active HTTP request. Consult the documentation on testing for information about how to avoid this problem.\n\nThis should typically only happen when testing code that expects an active request. One option is to use the test client to simulate a full request. Or you can use test_request_context() in a with block, and everything that runs in the block will have access to request, populated with your test data.\n\n```\ndef generate_report(year):\n    format = request.args.get(\"format\")\n    ...\n\nwith app.test_request_context(\n    \"/make_report/2017\", query_string={\"format\": \"short\"}\n):\n    generate_report()\n```\n\nIf you see that error somewhere else in your code not related to testing, it most likely indicates that you should move that code into a view function.\n\n## How the Context Works\n\nThe Flask.wsgi_app() method is called to handle each request. It manages the contexts during the request. Internally, the request and application contexts work like stacks. When contexts are pushed, the proxies that depend on them are available and point at information from the top item.\n\nWhen the request starts, a RequestContext is created and pushed, which creates and pushes an AppContext first if a context for that application is not already the top context. While these contexts are pushed, the current_app, g, request, and session proxies are available to the original thread handling the request.\n\n## Callbacks and Errors\n\nFlask dispatches a request in multiple stages which can affect the request, response, and how errors are handled. The contexts are active during all of these stages.\n\nA Blueprint can add handlers for these events that are specific to the blueprint. The handlers for a blueprint will run if the blueprint owns the route that matches the request.\n\n1. Before each request, before_request() functions are called. If one of these functions return a value, the other functions are skipped. The return value is treated as the response and the view function is not called.\n\n2. If the before_request() functions did not return a response, the view function for the matched route is called and returns a response.\n\n3. The return value of the view is converted into an actual response object and passed to the after_request() functions. Each function returns a modified or new response object.\n\n4. After the response is returned, the contexts are popped, which calls the teardown_request() and teardown_appcontext() functions. These functions are called even if an unhandled exception was raised at any point above.\n\n## Teardown Callbacks\n\nThe teardown callbacks are independent of the request dispatch, and are instead called by the contexts when they are popped. The functions are called even if there is an unhandled exception during dispatch, and for manually pushed contexts. This means there is no guarantee that any other parts of the request dispatch have run first. Be sure to write these functions in a way that does not depend on other callbacks and will not fail.\n\n## Signals\n\nThe following signals are sent:\n\n1. request_started is sent before the before_request() functions are called.\n\n2. request_finished is sent after the after_request() functions are called.\n\n3. got_request_exception is sent when an exception begins to be handled, but before an errorhandler() is looked up or called.\n\n4. request_tearing_down is sent after the teardown_request() functions are called.\n\n## Notes On Proxies\n\nSome of the objects provided by Flask are proxies to other objects. The proxies are accessed in the same way for each worker thread, but point to the unique object bound to each worker behind the scenes as described on this page.\n\nMost of the time you don’t have to care about that, but there are some exceptions where it is good to know that this object is actually a proxy:\n\n- The proxy objects cannot fake their type as the actual object types. If you want to perform instance checks, you have to do that on the object being proxied.\n\n- The reference to the proxied object is needed in some situations, such as sending Signals or passing data to a background thread.\n\nIf you need to access the underlying object that is proxied, use the _get_current_object() method:\n\n```\napp = current_app._get_current_object()\nmy_signal.send(app)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I purpose of the context in flask-stable?\n\nAssistant: To purpose of the context in flask-stable, here's what you do:\nWhen the Flask application handles a request, it creates a Request object based on the environment it received from the WSGI server. Because a worker (thread, process, or coroutine depending on the server) handles only one request at a time, the request data can be considered global to that worker during that request. Flask uses the term context local for this.\n\nFlask automatically pushes a request context when handling a request. View functions, error handlers, and other functions that run during a request will have access to the request proxy, which points to the request object for the current request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I lifetime of the context in flask-stable?\n\nAssistant: To lifetime of the context in flask-stable, here's what you do:\nWhen a Flask application begins handling a request, it pushes a request context, which also pushes an app context. When the request ends it pops the request context then the application context.\n\nThe context is unique to each thread (or other worker type). request cannot be passed to another thread, the other thread has a different context space and will not know about the request the parent thread was pointing to.\n\nContext locals are implemented using Python’s contextvars and Werkzeug’s LocalProxy. Python manages the lifetime of context vars automatically, and local proxy wraps that low-level interface to make the data easier to work with..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I manually push a context in flask-stable?\n\nAssistant: To manually push a context in flask-stable, here's what you do:\nIf you try to access request, or anything that uses it, outside a request context, you’ll get this error message:\n\n```\nRuntimeError: Working outside of request context.\n```\n\nThis typically means that you attempted to use functionality that needed an active HTTP request. Consult the documentation on testing for information about how to avoid this problem.\n\nThis should typically only happen when testing code that expects an active request. One option is to use the test client to simulate a full request. Or you can use test_request_context() in a with block, and everything that runs in the block will have access to request, populated with your test data.\n\n```\ndef generate_report(year):\n    format = request.args.get(\"format\")\n    ...\n\nwith app.test_request_context(\n    \"/make_report/2017\", query_string={\"format\": \"short\"}\n):\n    generate_report()\n```\n\nIf you see that error somewhere else in your code not related to testing, it most likely indicates that you should move that code into a view function..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I how the context works in flask-stable?\n\nAssistant: To how the context works in flask-stable, here's what you do:\nThe Flask.wsgi_app() method is called to handle each request. It manages the contexts during the request. Internally, the request and application contexts work like stacks. When contexts are pushed, the proxies that depend on them are available and point at information from the top item.\n\nWhen the request starts, a RequestContext is created and pushed, which creates and pushes an AppContext first if a context for that application is not already the top context. While these contexts are pushed, the current_app, g, request, and session proxies are available to the original thread handling the request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I callbacks and errors in flask-stable?\n\nAssistant: To callbacks and errors in flask-stable, here's what you do:\nFlask dispatches a request in multiple stages which can affect the request, response, and how errors are handled. The contexts are active during all of these stages.\n\nA Blueprint can add handlers for these events that are specific to the blueprint. The handlers for a blueprint will run if the blueprint owns the route that matches the request.\n\n1. Before each request, before_request() functions are called. If one of these functions return a value, the other functions are skipped. The return value is treated as the response and the view function is not called.\n\n2. If the before_request() functions did not return a response, the view function for the matched route is called and returns a response.\n\n3. The return value of the view is converted into an actual response object and passed to the after_request() functions. Each function returns a modified or new response object.\n\n4. After the response is returned, the contexts are popped, which calls the teardown_request() and teardown_appcontext() functions. These functions are called even if an unhandled exception was raised at any point above..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I teardown callbacks in flask-stable?\n\nAssistant: To teardown callbacks in flask-stable, here's what you do:\nThe teardown callbacks are independent of the request dispatch, and are instead called by the contexts when they are popped. The functions are called even if there is an unhandled exception during dispatch, and for manually pushed contexts. This means there is no guarantee that any other parts of the request dispatch have run first. Be sure to write these functions in a way that does not depend on other callbacks and will not fail..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I signals in flask-stable?\n\nAssistant: To signals in flask-stable, here's what you do:\nThe following signals are sent:\n\n1. request_started is sent before the before_request() functions are called.\n\n2. request_finished is sent after the after_request() functions are called.\n\n3. got_request_exception is sent when an exception begins to be handled, but before an errorhandler() is looked up or called.\n\n4. request_tearing_down is sent after the teardown_request() functions are called..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I notes on proxies in flask-stable?\n\nAssistant: To notes on proxies in flask-stable, here's what you do:\nSome of the objects provided by Flask are proxies to other objects. The proxies are accessed in the same way for each worker thread, but point to the unique object bound to each worker behind the scenes as described on this page.\n\nMost of the time you don’t have to care about that, but there are some exceptions where it is good to know that this object is actually a proxy:\n\n- The proxy objects cannot fake their type as the actual object types. If you want to perform instance checks, you have to do that on the object being proxied.\n\n- The reference to the proxied object is needed in some situations, such as sending Signals or passing data to a background thread.\n\nIf you need to access the underlying object that is proxied, use the _get_current_object() method:\n\n```\napp = current_app._get_current_object()\nmy_signal.send(app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for The Request Context in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Error Message for Working Outside of Request Context**:\n\n```yaml\nRuntimeError: Working outside of request context.\n```\n\nThis snippet shows you how to error message for working outside of request context, which is an important aspect of the request context.\n\n**Example of Generating a Report**:\n\n```yaml\ndef generate_report(year):\n    format = request.args.get(\"format\")\n    ...\n\nwith app.test_request_context(\n    \"/make_report/2017\", query_string={\"format\": \"short\"}\n):\n    generate_report()\n```\n\nThis snippet shows you how to example of generating a report, which is an important aspect of the request context.\n\n**Example of Teardown Callbacks**:\n\n```yaml\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    print('during view')\n    return 'Hello, World!'\n\n@app.teardown_request\ndef show_teardown(exception):\n    print('after with block')\n\nwith app.test_request_context():\n    print('during with block')\n\nwith app.test_client() as client:\n    client.get('/')\n    print(request.path)\n```\n\nThis snippet shows you how to example of teardown callbacks, which is an important aspect of the request context.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using The Request Context in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the test client to simulate a full request when testing code that expects an active request.\n\nUse test_request_context() in a with block to access request data during testing.\n\nWrite teardown functions in a way that does not depend on other callbacks and will not fail.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/reqcontext", "title": "The Request Context", "description": "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the request and session proxies are accessed instead.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:11", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/reqcontext/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "The Request Context — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "39f39198-dec4-43c8-9207-1359257e1e62", "sourceURL": "https://flask.palletsprojects.com/en/stable/reqcontext", "url": "https://flask.palletsprojects.com/en/stable/reqcontext/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Development Server is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Development Server in flask-stable.\n\n# Development Server\n\nFlask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.Here's a quick rundown of what this is about:\n\n## Command Line\n\nThe `flask run` CLI command is the recommended way to run the development server. Use the `--app` option to point to your application, and the `--debug` option to enable debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nThis enables debug mode, including the interactive debugger and reloader, and then starts the server on [http://localhost:5000/](http://localhost:5000/). Use `flask run --help` to see the available options, and [Command Line Interface](https://flask.palletsprojects.com/en/stable/cli/) for detailed instructions about configuring and using the CLI.\n\n## Address already in use\n\nIf another program is already using port 5000, you’ll see an `OSError` when the server tries to start. It may have one of the following messages:\n\n- `OSError: [Errno 98] Address already in use`\n- `OSError: [WinError 10013] An attempt was made to access a socket in a way forbidden by its access permissions`\n\nEither identify and stop the other program, or use `flask run --port 5001` to pick a different port.\n\nYou can use `netstat` or `lsof` to identify what process id is using a port, then use other operating system tools stop that process. The following example shows that process id 6847 is using port 5000.\n\n`netstat` (Linux)\n`lsof` (macOS / Linux)\n`netstat` (Windows)\n\n```\n$ netstat -nlp | grep 5000\ntcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 6847/python\n```\n\n```\n$ lsof -P -i :5000\nPython 6847 IPv4 TCP localhost:5000 (LISTEN)\n```\n\n```\n> netstat -ano | findstr 5000\nTCP 127.0.0.1:5000 0.0.0.0:0 LISTENING 6847\n```\n\nmacOS Monterey and later automatically starts a service that uses port 5000. You can choose to disable this service instead of using a different port by searching for “AirPlay Receiver” in System Preferences and toggling it off.\n\n## Deferred Errors on Reload\n\nWhen using the `flask run` command with the reloader, the server will continue to run even if you introduce syntax errors or other initialization errors into the code. Accessing the site will show the interactive debugger for the error, rather than crashing the server.\n\nIf a syntax error is already present when calling `flask run`, it will fail immediately and show the traceback rather than waiting until the site is accessed. This is intended to make errors more visible initially while still allowing the server to handle errors on reload.\n\n## In Code\n\nThe development server can also be started from Python with the [`Flask.run()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.run \"flask.Flask.run\") method. This method takes arguments similar to the CLI options to control the server. The main difference from the CLI command is that the server will crash if there are errors when reloading. `debug=True` can be passed to enable debug mode.\n\nPlace the call in a main block, otherwise it will interfere when trying to import and run the application with a production server later.\n\n```\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n```\n$ python hello.py\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I command line in flask-stable?\n\nAssistant: To command line in flask-stable, here's what you do:\nThe `flask run` CLI command is the recommended way to run the development server. Use the `--app` option to point to your application, and the `--debug` option to enable debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nThis enables debug mode, including the interactive debugger and reloader, and then starts the server on [http://localhost:5000/](http://localhost:5000/). Use `flask run --help` to see the available options, and [Command Line Interface](https://flask.palletsprojects.com/en/stable/cli/) for detailed instructions about configuring and using the CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I address already in use in flask-stable?\n\nAssistant: To address already in use in flask-stable, here's what you do:\nIf another program is already using port 5000, you’ll see an `OSError` when the server tries to start. It may have one of the following messages:\n\n- `OSError: [Errno 98] Address already in use`\n- `OSError: [WinError 10013] An attempt was made to access a socket in a way forbidden by its access permissions`\n\nEither identify and stop the other program, or use `flask run --port 5001` to pick a different port.\n\nYou can use `netstat` or `lsof` to identify what process id is using a port, then use other operating system tools stop that process. The following example shows that process id 6847 is using port 5000.\n\n`netstat` (Linux)\n`lsof` (macOS / Linux)\n`netstat` (Windows)\n\n```\n$ netstat -nlp | grep 5000\ntcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 6847/python\n```\n\n```\n$ lsof -P -i :5000\nPython 6847 IPv4 TCP localhost:5000 (LISTEN)\n```\n\n```\n> netstat -ano | findstr 5000\nTCP 127.0.0.1:5000 0.0.0.0:0 LISTENING 6847\n```\n\nmacOS Monterey and later automatically starts a service that uses port 5000. You can choose to disable this service instead of using a different port by searching for “AirPlay Receiver” in System Preferences and toggling it off..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I deferred errors on reload in flask-stable?\n\nAssistant: To deferred errors on reload in flask-stable, here's what you do:\nWhen using the `flask run` command with the reloader, the server will continue to run even if you introduce syntax errors or other initialization errors into the code. Accessing the site will show the interactive debugger for the error, rather than crashing the server.\n\nIf a syntax error is already present when calling `flask run`, it will fail immediately and show the traceback rather than waiting until the site is accessed. This is intended to make errors more visible initially while still allowing the server to handle errors on reload..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I in code in flask-stable?\n\nAssistant: To in code in flask-stable, here's what you do:\nThe development server can also be started from Python with the [`Flask.run()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.run \"flask.Flask.run\") method. This method takes arguments similar to the CLI options to control the server. The main difference from the CLI command is that the server will crash if there are errors when reloading. `debug=True` can be passed to enable debug mode.\n\nPlace the call in a main block, otherwise it will interfere when trying to import and run the application with a production server later.\n\n```\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n```\n$ python hello.py\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Development Server in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Run Flask Development Server**:\n\n```yaml\n$ flask --app hello run --debug\n```\n\nThis snippet shows you how to run flask development server, which is an important aspect of development server.\n\n**Check Port Usage (Linux)**:\n\n```yaml\n$ netstat -nlp | grep 5000\n```\n\nThis snippet shows you how to check port usage (linux), which is an important aspect of development server.\n\n**Check Port Usage (macOS / Linux)**:\n\n```yaml\n$ lsof -P -i :5000\n```\n\nThis snippet shows you how to check port usage (macos / linux), which is an important aspect of development server.\n\n**Check Port Usage (Windows)**:\n\n```yaml\n> netstat -ano | findstr 5000\n```\n\nThis snippet shows you how to check port usage (windows), which is an important aspect of development server.\n\n**Start Flask Server in Code**:\n\n```yaml\nif __name__ == \"__main__\":\n    app.run(debug=True)\n$ python hello.py\n```\n\nThis snippet shows you how to start flask server in code, which is an important aspect of development server.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Development Server in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly efficient, stable, or secure.\n\nUse `flask run --port 5001` to pick a different port if port 5000 is already in use.\n\nmacOS Monterey and later automatically starts a service that uses port 5000. You can disable this service by searching for 'AirPlay Receiver' in System Preferences.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/server", "title": "Development Server", "description": "Flask provides a `run` command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:25:40", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Development Server — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/server/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "680d9e9a-d8c1-477d-bfa5-00ef952d8554", "sourceURL": "https://flask.palletsprojects.com/en/stable/server", "url": "https://flask.palletsprojects.com/en/stable/server/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Installation is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Installation in flask-stable.\n\n# Installation\n\nInstructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.Here's a quick rundown of what this is about:\n\n## Python Version\n\nWe recommend using the latest version of Python. Flask supports Python 3.9 and newer.\n\n## Dependencies\n\nThese distributions will be installed automatically when installing Flask.\n\n- [Werkzeug](https://palletsprojects.com/p/werkzeug/) implements WSGI, the standard Python interface between applications and servers.\n\n- [Jinja](https://palletsprojects.com/p/jinja/) is a template language that renders the pages your application serves.\n\n- [MarkupSafe](https://palletsprojects.com/p/markupsafe/) comes with Jinja. It escapes untrusted input when rendering templates to avoid injection attacks.\n\n- [ItsDangerous](https://palletsprojects.com/p/itsdangerous/) securely signs data to ensure its integrity. This is used to protect Flask’s session cookie.\n\n- [Click](https://palletsprojects.com/p/click/) is a framework for writing command line applications. It provides the `flask` command and allows adding custom management commands.\n\n- [Blinker](https://blinker.readthedocs.io/) provides support for [Signals](https://flask.palletsprojects.com/en/stable/signals/).\n\n## Optional dependencies\n\nThese distributions will not be installed automatically. Flask will detect and use them if you install them.\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv#readme) enables support for [Environment Variables From dotenv](https://flask.palletsprojects.com/en/stable/cli/#dotenv) when running `flask` commands.\n\n- [Watchdog](https://pythonhosted.org/watchdog/) provides a faster, more efficient reloader for the development server.\n\n## greenlet\n\nYou may choose to use gevent or eventlet with your application. In this case, greenlet>=1.0 is required. When using PyPy, PyPy>=7.3.7 is required.\n\nThese are not minimum supported versions, they only indicate the first versions that added necessary features. You should use the latest versions of each.\n\n## Virtual environments\n\nUse a virtual environment to manage the dependencies for your project, both in development and in production.\n\nWhat problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project.\n\nVirtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system’s packages.\n\nPython comes bundled with the [`venv`](https://docs.python.org/3/library/venv.html#module-venv) module to create virtual environments.\n\n## Create an environment\n\nCreate a project folder and a `.venv` folder within:\n\nmacOS/Linux\n\n```\n$ mkdir myproject\n$ cd myproject\n$ python3 -m venv .venv\n```\n\nWindows\n\n```\n> mkdir myproject\n> cd myproject\n> py -3 -m venv .venv\n```\n\n## Activate the environment\n\nBefore you work on your project, activate the corresponding environment:\n\nmacOS/Linux\n\n```\n$ . .venv/bin/activate\n```\n\nWindows\n\n```\n> .venv\\Scripts\\activate\n```\n\nYour shell prompt will change to show the name of the activated environment.\n\n## Install Flask\n\nWithin the activated environment, use the following command to install Flask:\n\n```\n$ pip install Flask\n```\n\nFlask is now installed. Check out the [Quickstart](https://flask.palletsprojects.com/en/stable/quickstart/) or go to the [Documentation Overview](https://flask.palletsprojects.com/en/stable/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "overview", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I python version in flask-stable?\n\nAssistant: To python version in flask-stable, here's what you do:\nWe recommend using the latest version of Python. Flask supports Python 3.9 and newer..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I dependencies in flask-stable?\n\nAssistant: To dependencies in flask-stable, here's what you do:\nThese distributions will be installed automatically when installing Flask.\n\n- [Werkzeug](https://palletsprojects.com/p/werkzeug/) implements WSGI, the standard Python interface between applications and servers.\n\n- [Jinja](https://palletsprojects.com/p/jinja/) is a template language that renders the pages your application serves.\n\n- [MarkupSafe](https://palletsprojects.com/p/markupsafe/) comes with Jinja. It escapes untrusted input when rendering templates to avoid injection attacks.\n\n- [ItsDangerous](https://palletsprojects.com/p/itsdangerous/) securely signs data to ensure its integrity. This is used to protect Flask’s session cookie.\n\n- [Click](https://palletsprojects.com/p/click/) is a framework for writing command line applications. It provides the `flask` command and allows adding custom management commands.\n\n- [Blinker](https://blinker.readthedocs.io/) provides support for [Signals](https://flask.palletsprojects.com/en/stable/signals/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I optional dependencies in flask-stable?\n\nAssistant: To optional dependencies in flask-stable, here's what you do:\nThese distributions will not be installed automatically. Flask will detect and use them if you install them.\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv#readme) enables support for [Environment Variables From dotenv](https://flask.palletsprojects.com/en/stable/cli/#dotenv) when running `flask` commands.\n\n- [Watchdog](https://pythonhosted.org/watchdog/) provides a faster, more efficient reloader for the development server..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I greenlet in flask-stable?\n\nAssistant: To greenlet in flask-stable, here's what you do:\nYou may choose to use gevent or eventlet with your application. In this case, greenlet>=1.0 is required. When using PyPy, PyPy>=7.3.7 is required.\n\nThese are not minimum supported versions, they only indicate the first versions that added necessary features. You should use the latest versions of each..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I virtual environments in flask-stable?\n\nAssistant: To virtual environments in flask-stable, here's what you do:\nUse a virtual environment to manage the dependencies for your project, both in development and in production.\n\nWhat problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project.\n\nVirtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system’s packages.\n\nPython comes bundled with the [`venv`](https://docs.python.org/3/library/venv.html#module-venv) module to create virtual environments..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create an environment in flask-stable?\n\nAssistant: To create an environment in flask-stable, here's what you do:\nCreate a project folder and a `.venv` folder within:\n\nmacOS/Linux\n\n```\n$ mkdir myproject\n$ cd myproject\n$ python3 -m venv .venv\n```\n\nWindows\n\n```\n> mkdir myproject\n> cd myproject\n> py -3 -m venv .venv\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I activate the environment in flask-stable?\n\nAssistant: To activate the environment in flask-stable, here's what you do:\nBefore you work on your project, activate the corresponding environment:\n\nmacOS/Linux\n\n```\n$ . .venv/bin/activate\n```\n\nWindows\n\n```\n> .venv\\Scripts\\activate\n```\n\nYour shell prompt will change to show the name of the activated environment..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I install flask in flask-stable?\n\nAssistant: To install flask in flask-stable, here's what you do:\nWithin the activated environment, use the following command to install Flask:\n\n```\n$ pip install Flask\n```\n\nFlask is now installed. Check out the [Quickstart](https://flask.palletsprojects.com/en/stable/quickstart/) or go to the [Documentation Overview](https://flask.palletsprojects.com/en/stable/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "section_detail", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Installation in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create an environment (macOS/Linux)**:\n\n```yaml\n$ mkdir myproject\n$ cd myproject\n$ python3 -m venv .venv\n```\n\nThis snippet shows you how to create an environment (macos/linux), which is an important aspect of installation.\n\n**Create an environment (Windows)**:\n\n```yaml\n> mkdir myproject\n> cd myproject\n> py -3 -m venv .venv\n```\n\nThis snippet shows you how to create an environment (windows), which is an important aspect of installation.\n\n**Activate the environment (macOS/Linux)**:\n\n```yaml\n$ . .venv/bin/activate\n```\n\nThis snippet shows you how to activate the environment (macos/linux), which is an important aspect of installation.\n\n**Activate the environment (Windows)**:\n\n```yaml\n> .venv\\Scripts\\activate\n```\n\nThis snippet shows you how to activate the environment (windows), which is an important aspect of installation.\n\n**Install Flask**:\n\n```yaml\n$ pip install Flask\n```\n\nThis snippet shows you how to install flask, which is an important aspect of installation.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "code_examples", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Installation in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a virtual environment to manage dependencies for your project, both in development and in production.\n\nAlways use the latest version of Python that Flask supports.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/installation", "title": "Installation", "description": "Instructions on how to install Flask, including Python version requirements, dependencies, and setting up virtual environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:26:14", "type": "best_practices", "page_metadata": {"title": "Installation — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/installation/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "8cf3edad-686d-4519-962c-aa1901962ee3", "sourceURL": "https://flask.palletsprojects.com/en/stable/installation", "url": "https://flask.palletsprojects.com/en/stable/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Debugging Application Errors is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Debugging Application Errors in flask-stable.\n\n# Debugging Application Errors\n\nThis page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.Here's a quick rundown of what this is about:\n\n## In Production\n\n**Do not run the development server, or enable the built-in debugger, in** **a production environment.** The debugger allows executing arbitrary Python code from the browser. It’s protected by a pin, but that should not be relied on for security.\n\nUse an error logging tool, such as Sentry, as described in [Error Logging Tools](https://flask.palletsprojects.com/en/stable/errorhandling/#error-logging-tools), or enable logging and notifications as described in [Logging](https://flask.palletsprojects.com/en/stable/logging/).\n\nIf you have access to the server, you could add some code to start an external debugger if `request.remote_addr` matches your IP. Some IDE debuggers also have a remote mode so breakpoints on the server can be interacted with locally. Only enable a debugger temporarily.\n\n## The Built-In Debugger\n\nThe built-in Werkzeug development server provides a debugger which shows an interactive traceback in the browser when an unhandled error occurs during a request. This debugger should only be used during development.\n\n![screenshot of debugger in action](https://flask.palletsprojects.com/en/stable/_images/debugger.png)\n\nWarning\n\nThe debugger allows executing arbitrary Python code from the browser. It is protected by a pin, but still represents a major security risk. Do not run the development server or debugger in a production environment.\n\nThe debugger is enabled by default when the development server is run in debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nWhen running from Python code, passing `debug=True` enables debug mode, which is mostly equivalent.\n\n```\napp.run(debug=True)\n```\n\n[Development Server](https://flask.palletsprojects.com/en/stable/server/) and [Command Line Interface](https://flask.palletsprojects.com/en/stable/cli/) have more information about running the debugger and debug mode. More information about the debugger can be found in the [Werkzeug\\ documentation](https://werkzeug.palletsprojects.com/debug/).\n\n## External Debuggers\n\nExternal debuggers, such as those provided by IDEs, can offer a more powerful debugging experience than the built-in debugger. They can also be used to step through code during a request before an error is raised, or if no error is raised. Some even have a remote mode so you can debug code running on another machine.\n\nWhen using an external debugger, the app should still be in debug mode, otherwise Flask turns unhandled errors into generic 500 error pages. However, the built-in debugger and reloader should be disabled so they don’t interfere with the external debugger.\n\n```\n$ flask --app hello run --debug --no-debugger --no-reload\n```\n\nWhen running from Python:\n\n```\napp.run(debug=True, use_debugger=False, use_reloader=False)\n```\n\nDisabling these isn’t required, an external debugger will continue to work with the following caveats.\n\n- If the built-in debugger is not disabled, it will catch unhandled exceptions before the external debugger can.\n\n- If the reloader is not disabled, it could cause an unexpected reload if code changes during a breakpoint.\n\n- The development server will still catch unhandled exceptions if the built-in debugger is disabled, otherwise it would crash on any error. If you want that (and usually you don’t) pass `passthrough_errors=True` to `app.run`.\n\n```\napp.run(\n      debug=True, passthrough_errors=True,\n      use_debugger=False, use_reloader=False\n)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I in production in flask-stable?\n\nAssistant: To in production in flask-stable, here's what you do:\n**Do not run the development server, or enable the built-in debugger, in** **a production environment.** The debugger allows executing arbitrary Python code from the browser. It’s protected by a pin, but that should not be relied on for security.\n\nUse an error logging tool, such as Sentry, as described in [Error Logging Tools](https://flask.palletsprojects.com/en/stable/errorhandling/#error-logging-tools), or enable logging and notifications as described in [Logging](https://flask.palletsprojects.com/en/stable/logging/).\n\nIf you have access to the server, you could add some code to start an external debugger if `request.remote_addr` matches your IP. Some IDE debuggers also have a remote mode so breakpoints on the server can be interacted with locally. Only enable a debugger temporarily..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the built-in debugger in flask-stable?\n\nAssistant: To the built-in debugger in flask-stable, here's what you do:\nThe built-in Werkzeug development server provides a debugger which shows an interactive traceback in the browser when an unhandled error occurs during a request. This debugger should only be used during development.\n\n![screenshot of debugger in action](https://flask.palletsprojects.com/en/stable/_images/debugger.png)\n\nWarning\n\nThe debugger allows executing arbitrary Python code from the browser. It is protected by a pin, but still represents a major security risk. Do not run the development server or debugger in a production environment.\n\nThe debugger is enabled by default when the development server is run in debug mode.\n\n```\n$ flask --app hello run --debug\n```\n\nWhen running from Python code, passing `debug=True` enables debug mode, which is mostly equivalent.\n\n```\napp.run(debug=True)\n```\n\n[Development Server](https://flask.palletsprojects.com/en/stable/server/) and [Command Line Interface](https://flask.palletsprojects.com/en/stable/cli/) have more information about running the debugger and debug mode. More information about the debugger can be found in the [Werkzeug\\ documentation](https://werkzeug.palletsprojects.com/debug/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I external debuggers in flask-stable?\n\nAssistant: To external debuggers in flask-stable, here's what you do:\nExternal debuggers, such as those provided by IDEs, can offer a more powerful debugging experience than the built-in debugger. They can also be used to step through code during a request before an error is raised, or if no error is raised. Some even have a remote mode so you can debug code running on another machine.\n\nWhen using an external debugger, the app should still be in debug mode, otherwise Flask turns unhandled errors into generic 500 error pages. However, the built-in debugger and reloader should be disabled so they don’t interfere with the external debugger.\n\n```\n$ flask --app hello run --debug --no-debugger --no-reload\n```\n\nWhen running from Python:\n\n```\napp.run(debug=True, use_debugger=False, use_reloader=False)\n```\n\nDisabling these isn’t required, an external debugger will continue to work with the following caveats.\n\n- If the built-in debugger is not disabled, it will catch unhandled exceptions before the external debugger can.\n\n- If the reloader is not disabled, it could cause an unexpected reload if code changes during a breakpoint.\n\n- The development server will still catch unhandled exceptions if the built-in debugger is disabled, otherwise it would crash on any error. If you want that (and usually you don’t) pass `passthrough_errors=True` to `app.run`.\n\n```\napp.run(\n      debug=True, passthrough_errors=True,\n      use_debugger=False, use_reloader=False\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Debugging Application Errors in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Run Flask with Debug Mode**:\n\n```yaml\n$ flask --app hello run --debug\n```\n\nThis snippet shows you how to run flask with debug mode, which is an important aspect of debugging application errors.\n\n**Run Flask from Python with Debug Mode**:\n\n```yaml\napp.run(debug=True)\n```\n\nThis snippet shows you how to run flask from python with debug mode, which is an important aspect of debugging application errors.\n\n**Run Flask with External Debugger Disabled**:\n\n```yaml\n$ flask --app hello run --debug --no-debugger --no-reload\n```\n\nThis snippet shows you how to run flask with external debugger disabled, which is an important aspect of debugging application errors.\n\n**Run Flask from Python with External Debugger Disabled**:\n\n```yaml\napp.run(debug=True, use_debugger=False, use_reloader=False)\n```\n\nThis snippet shows you how to run flask from python with external debugger disabled, which is an important aspect of debugging application errors.\n\n**Run Flask with Passthrough Errors**:\n\n```yaml\napp.run(\n      debug=True, passthrough_errors=True,\n      use_debugger=False, use_reloader=False\n)\n```\n\nThis snippet shows you how to run flask with passthrough errors, which is an important aspect of debugging application errors.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Debugging Application Errors in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not run the development server or enable the built-in debugger in a production environment.\n\nUse an error logging tool, such as Sentry, for production error logging.\n\nOnly enable a debugger temporarily when necessary.\n\nDisable the built-in debugger and reloader when using an external debugger.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/debugging", "title": "Debugging Application Errors", "description": "This page covers how to debug application errors in Flask, including best practices for production environments, using the built-in debugger, and external debuggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:28:54", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Debugging Application Errors — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/debugging/", "readthedocs-http-status": "200", "scrapeId": "db15f458-572e-4fb1-8770-062e095dbea8", "sourceURL": "https://flask.palletsprojects.com/en/stable/debugging", "url": "https://flask.palletsprojects.com/en/stable/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Patterns for Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Patterns for Flask in flask-stable.\n\n# Patterns for Flask\n\nThis section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.Here's a quick rundown of what this is about:\n\n## Patterns for Flask\n\nCertain features and interactions are common enough that you will find them in most web applications. For example, many applications use a relational database and user authentication. They will open a database connection at the beginning of the request and get the information for the logged in user. At the end of the request, the database connection is closed.\n\nThese types of patterns may be a bit outside the scope of Flask itself, but Flask makes it easy to implement them. Some common patterns are collected in the following pages.\n\n## Large Applications as Packages\n\nThis section discusses how to structure large applications as packages, including simple packages and working with blueprints.\n\n## Application Factories\n\nThis section covers the concept of application factories, including basic factories, factories and extensions, using applications, and factory improvements.\n\n## Application Dispatching\n\nThis section explains how to dispatch applications, including combining applications, dispatching by subdomain, and dispatching by path.\n\n## Using URL Processors\n\nThis section discusses how to use URL processors, including internationalized application URLs and internationalized blueprint URLs.\n\n## Using SQLite 3 with Flask\n\nThis section covers how to use SQLite 3 with Flask, including connecting on demand, easy querying, and initial schemas.\n\n## SQLAlchemy in Flask\n\nThis section discusses using SQLAlchemy with Flask, including the Flask-SQLAlchemy extension, declarative mapping, manual object relational mapping, and SQL abstraction layer.\n\n## Uploading Files\n\nThis section covers file uploads in Flask, including a gentle introduction, improving uploads, upload progress bars, and easier solutions.\n\n## Caching\n\nThis section discusses caching strategies in Flask.\n\n## View Decorators\n\nThis section covers view decorators, including login required, caching, templating, and endpoint decorators.\n\n## Form Validation with WTForms\n\nThis section discusses form validation using WTForms, including the forms, usage in views, and forms in templates.\n\n## Template Inheritance\n\nThis section covers template inheritance in Flask, including base and child templates.\n\n## Message Flashing\n\nThis section discusses message flashing in Flask, including simple flashing, flashing with categories, and filtering flash messages.\n\n## JavaScript, fetch, and JSON\n\nThis section covers using JavaScript with Flask, including rendering templates, generating URLs, making requests with fetch, following redirects, replacing content, returning JSON from views, and receiving JSON in views.\n\n## Lazily Loading Views\n\nThis section discusses lazy loading views, including converting to a centralized URL map and loading late.\n\n## MongoDB with MongoEngine\n\nThis section covers using MongoDB with Flask and MongoEngine, including configuration, mapping documents, creating data, and queries.\n\n## Adding a favicon\n\nThis section discusses how to add a favicon to your Flask application.\n\n## Streaming Contents\n\nThis section covers streaming contents in Flask, including basic usage, streaming from templates, and streaming with context.\n\n## Deferred Request Callbacks\n\nThis section discusses deferred request callbacks in Flask.\n\n## Adding HTTP Method Overrides\n\nThis section covers adding HTTP method overrides in Flask.\n\n## Request Content Checksums\n\nThis section discusses request content checksums in Flask.\n\n## Background Tasks with Celery\n\nThis section covers background tasks with Celery, including installation, integration with Flask, application factory, defining tasks, calling tasks, getting results, and passing data to tasks.\n\n## Subclassing Flask\n\nThis section discusses subclassing Flask.\n\n## Single-Page Applications\n\nThis section covers building single-page applications with Flask.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "overview", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I patterns for flask in flask-stable?\n\nAssistant: To patterns for flask in flask-stable, here's what you do:\nCertain features and interactions are common enough that you will find them in most web applications. For example, many applications use a relational database and user authentication. They will open a database connection at the beginning of the request and get the information for the logged in user. At the end of the request, the database connection is closed.\n\nThese types of patterns may be a bit outside the scope of Flask itself, but Flask makes it easy to implement them. Some common patterns are collected in the following pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I large applications as packages in flask-stable?\n\nAssistant: To large applications as packages in flask-stable, here's what you do:\nThis section discusses how to structure large applications as packages, including simple packages and working with blueprints..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application factories in flask-stable?\n\nAssistant: To application factories in flask-stable, here's what you do:\nThis section covers the concept of application factories, including basic factories, factories and extensions, using applications, and factory improvements..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application dispatching in flask-stable?\n\nAssistant: To application dispatching in flask-stable, here's what you do:\nThis section explains how to dispatch applications, including combining applications, dispatching by subdomain, and dispatching by path..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using url processors in flask-stable?\n\nAssistant: To using url processors in flask-stable, here's what you do:\nThis section discusses how to use URL processors, including internationalized application URLs and internationalized blueprint URLs..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using sqlite 3 with flask in flask-stable?\n\nAssistant: To using sqlite 3 with flask in flask-stable, here's what you do:\nThis section covers how to use SQLite 3 with Flask, including connecting on demand, easy querying, and initial schemas..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I sqlalchemy in flask in flask-stable?\n\nAssistant: To sqlalchemy in flask in flask-stable, here's what you do:\nThis section discusses using SQLAlchemy with Flask, including the Flask-SQLAlchemy extension, declarative mapping, manual object relational mapping, and SQL abstraction layer..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I uploading files in flask-stable?\n\nAssistant: To uploading files in flask-stable, here's what you do:\nThis section covers file uploads in Flask, including a gentle introduction, improving uploads, upload progress bars, and easier solutions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I caching in flask-stable?\n\nAssistant: To caching in flask-stable, here's what you do:\nThis section discusses caching strategies in Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I view decorators in flask-stable?\n\nAssistant: To view decorators in flask-stable, here's what you do:\nThis section covers view decorators, including login required, caching, templating, and endpoint decorators..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I form validation with wtforms in flask-stable?\n\nAssistant: To form validation with wtforms in flask-stable, here's what you do:\nThis section discusses form validation using WTForms, including the forms, usage in views, and forms in templates..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I template inheritance in flask-stable?\n\nAssistant: To template inheritance in flask-stable, here's what you do:\nThis section covers template inheritance in Flask, including base and child templates..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I message flashing in flask-stable?\n\nAssistant: To message flashing in flask-stable, here's what you do:\nThis section discusses message flashing in Flask, including simple flashing, flashing with categories, and filtering flash messages..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I javascript, fetch, and json in flask-stable?\n\nAssistant: To javascript, fetch, and json in flask-stable, here's what you do:\nThis section covers using JavaScript with Flask, including rendering templates, generating URLs, making requests with fetch, following redirects, replacing content, returning JSON from views, and receiving JSON in views..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I lazily loading views in flask-stable?\n\nAssistant: To lazily loading views in flask-stable, here's what you do:\nThis section discusses lazy loading views, including converting to a centralized URL map and loading late..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I mongodb with mongoengine in flask-stable?\n\nAssistant: To mongodb with mongoengine in flask-stable, here's what you do:\nThis section covers using MongoDB with Flask and MongoEngine, including configuration, mapping documents, creating data, and queries..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I adding a favicon in flask-stable?\n\nAssistant: To adding a favicon in flask-stable, here's what you do:\nThis section discusses how to add a favicon to your Flask application..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I streaming contents in flask-stable?\n\nAssistant: To streaming contents in flask-stable, here's what you do:\nThis section covers streaming contents in Flask, including basic usage, streaming from templates, and streaming with context..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I deferred request callbacks in flask-stable?\n\nAssistant: To deferred request callbacks in flask-stable, here's what you do:\nThis section discusses deferred request callbacks in Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I adding http method overrides in flask-stable?\n\nAssistant: To adding http method overrides in flask-stable, here's what you do:\nThis section covers adding HTTP method overrides in Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I request content checksums in flask-stable?\n\nAssistant: To request content checksums in flask-stable, here's what you do:\nThis section discusses request content checksums in Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I background tasks with celery in flask-stable?\n\nAssistant: To background tasks with celery in flask-stable, here's what you do:\nThis section covers background tasks with Celery, including installation, integration with Flask, application factory, defining tasks, calling tasks, getting results, and passing data to tasks..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I subclassing flask in flask-stable?\n\nAssistant: To subclassing flask in flask-stable, here's what you do:\nThis section discusses subclassing Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I single-page applications in flask-stable?\n\nAssistant: To single-page applications in flask-stable, here's what you do:\nThis section covers building single-page applications with Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns", "title": "Patterns for Flask", "description": "This section covers common patterns and practices for building web applications using Flask, including application structures, database interactions, and user authentication.", "has_code_examples": false, "has_best_practices": false, "section_count": 24, "timestamp": "2025-03-01 03:29:23", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Patterns for Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "124283ef-3f1e-4cdc-8bc8-10e0761351bd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns", "url": "https://flask.palletsprojects.com/en/stable/patterns/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Tutorial is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Tutorial in flask-stable.\n\n# Tutorial\n\nThis tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.Here's a quick rundown of what this is about:\n\n## Contents\n\n- [Project Layout](https://flask.palletsprojects.com/en/stable/tutorial/layout/)\n- [Application Setup](https://flask.palletsprojects.com/en/stable/tutorial/factory/)\n- [Define and Access the Database](https://flask.palletsprojects.com/en/stable/tutorial/database/)\n- [Blueprints and Views](https://flask.palletsprojects.com/en/stable/tutorial/views/)\n- [Templates](https://flask.palletsprojects.com/en/stable/tutorial/templates/)\n- [Static Files](https://flask.palletsprojects.com/en/stable/tutorial/static/)\n- [Blog Blueprint](https://flask.palletsprojects.com/en/stable/tutorial/blog/)\n- [Make the Project Installable](https://flask.palletsprojects.com/en/stable/tutorial/install/)\n- [Test Coverage](https://flask.palletsprojects.com/en/stable/tutorial/tests/)\n- [Deploy to Production](https://flask.palletsprojects.com/en/stable/tutorial/deploy/)\n- [Keep Developing!](https://flask.palletsprojects.com/en/stable/tutorial/next/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial", "title": "Tutorial", "description": "This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:29:56", "type": "overview", "page_metadata": {"language": "en", "title": "Tutorial — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "scrapeId": "65888b41-5a39-47e3-9112-91c2eb0471f9", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial", "url": "https://flask.palletsprojects.com/en/stable/tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I contents in flask-stable?\n\nAssistant: To contents in flask-stable, here's what you do:\n- [Project Layout](https://flask.palletsprojects.com/en/stable/tutorial/layout/)\n- [Application Setup](https://flask.palletsprojects.com/en/stable/tutorial/factory/)\n- [Define and Access the Database](https://flask.palletsprojects.com/en/stable/tutorial/database/)\n- [Blueprints and Views](https://flask.palletsprojects.com/en/stable/tutorial/views/)\n- [Templates](https://flask.palletsprojects.com/en/stable/tutorial/templates/)\n- [Static Files](https://flask.palletsprojects.com/en/stable/tutorial/static/)\n- [Blog Blueprint](https://flask.palletsprojects.com/en/stable/tutorial/blog/)\n- [Make the Project Installable](https://flask.palletsprojects.com/en/stable/tutorial/install/)\n- [Test Coverage](https://flask.palletsprojects.com/en/stable/tutorial/tests/)\n- [Deploy to Production](https://flask.palletsprojects.com/en/stable/tutorial/deploy/)\n- [Keep Developing!](https://flask.palletsprojects.com/en/stable/tutorial/next/).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial", "title": "Tutorial", "description": "This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:29:56", "type": "section_detail", "page_metadata": {"language": "en", "title": "Tutorial — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "scrapeId": "65888b41-5a39-47e3-9112-91c2eb0471f9", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial", "url": "https://flask.palletsprojects.com/en/stable/tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Tutorial in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt’s assumed that you’re already familiar with Python. The official tutorial in the Python docs is a great way to learn or review first.\n\nWhile it’s designed to give a good starting point, the tutorial doesn’t cover all of Flask’s features. Check out the Quickstart for an overview of what Flask can do, then dive into the docs to find out more.\n\nFlask is flexible. It doesn’t require you to use any particular project or code layout. However, when first starting, it’s helpful to use a more structured approach. This means that the tutorial will require a bit of boilerplate up front, but it’s done to avoid many common pitfalls that new developers encounter, and it creates a project that’s easy to expand on. Once you become more comfortable with Flask, you can step out of this structure and take full advantage of Flask’s flexibility.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial", "title": "Tutorial", "description": "This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:29:56", "type": "best_practices", "page_metadata": {"language": "en", "title": "Tutorial — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "scrapeId": "65888b41-5a39-47e3-9112-91c2eb0471f9", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial", "url": "https://flask.palletsprojects.com/en/stable/tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Extensions is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Extensions in flask-stable.\n\n# Extensions\n\nExtensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.Here's a quick rundown of what this is about:\n\n## Finding Extensions\n\nFlask extensions are usually named “Flask-Foo” or “Foo-Flask”. You can search PyPI for packages tagged with Framework :: Flask.\n\n## Using Extensions\n\nConsult each extension’s documentation for installation, configuration, and usage instructions. Generally, extensions pull their own configuration from `app.config` and are passed an application instance during initialization. For example, an extension called “Flask-Foo” might be used like this:\n\n```\nfrom flask_foo import Foo\n\nfoo = Foo()\n\napp = Flask(__name__)\napp.config.update(\n    FOO_BAR='baz',\n    FOO_SPAM='eggs',\n)\n\nfoo.init_app(app)\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensions", "title": "Extensions", "description": "Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:30:06", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/extensions/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "title": "Extensions — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "scrapeId": "97b3f05c-2ac4-4bbd-aa20-99ba6a1c407d", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensions", "url": "https://flask.palletsprojects.com/en/stable/extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I finding extensions in flask-stable?\n\nAssistant: To finding extensions in flask-stable, here's what you do:\nFlask extensions are usually named “Flask-Foo” or “Foo-Flask”. You can search PyPI for packages tagged with Framework :: Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensions", "title": "Extensions", "description": "Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:30:06", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/extensions/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "title": "Extensions — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "scrapeId": "97b3f05c-2ac4-4bbd-aa20-99ba6a1c407d", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensions", "url": "https://flask.palletsprojects.com/en/stable/extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using extensions in flask-stable?\n\nAssistant: To using extensions in flask-stable, here's what you do:\nConsult each extension’s documentation for installation, configuration, and usage instructions. Generally, extensions pull their own configuration from `app.config` and are passed an application instance during initialization. For example, an extension called “Flask-Foo” might be used like this:\n\n```\nfrom flask_foo import Foo\n\nfoo = Foo()\n\napp = Flask(__name__)\napp.config.update(\n    FOO_BAR='baz',\n    FOO_SPAM='eggs',\n)\n\nfoo.init_app(app)\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensions", "title": "Extensions", "description": "Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:30:06", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/extensions/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "title": "Extensions — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "scrapeId": "97b3f05c-2ac4-4bbd-aa20-99ba6a1c407d", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensions", "url": "https://flask.palletsprojects.com/en/stable/extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Extensions in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using Flask-Foo Extension**:\n\n```yaml\nfrom flask_foo import Foo\n\nfoo = Foo()\n\napp = Flask(__name__)\napp.config.update(\n    FOO_BAR='baz',\n    FOO_SPAM='eggs',\n)\n\nfoo.init_app(app)\n```\n\nThis snippet shows you how to using flask-foo extension, which is an important aspect of extensions.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensions", "title": "Extensions", "description": "Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:30:06", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/extensions/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "title": "Extensions — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "scrapeId": "97b3f05c-2ac4-4bbd-aa20-99ba6a1c407d", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensions", "url": "https://flask.palletsprojects.com/en/stable/extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Extensions in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsult each extension’s documentation for installation, configuration, and usage instructions.\n\nIf you cannot find an extension that fits your need, consider creating your own and publishing it for others to use.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/extensions", "title": "Extensions", "description": "Extensions are extra packages that add functionality to a Flask application. For example, an extension might add support for sending email or connecting to a database. Some extensions add entire new frameworks to help build certain types of applications, like a REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:30:06", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/extensions/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "title": "Extensions — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "scrapeId": "97b3f05c-2ac4-4bbd-aa20-99ba6a1c407d", "sourceURL": "https://flask.palletsprojects.com/en/stable/extensions", "url": "https://flask.palletsprojects.com/en/stable/extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what BSD-3-Clause License is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain BSD-3-Clause License in flask-stable.\n\n# BSD-3-Clause License\n\nDetails the terms and conditions of the BSD-3-Clause License for the Flask framework.Here's a quick rundown of what this is about:\n\n## BSD-3-Clause License\n\nCopyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/license", "title": "BSD-3-Clause License", "description": "Details the terms and conditions of the BSD-3-Clause License for the Flask framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:30:31", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "title": "BSD-3-Clause License — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/license/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "3f936616-2033-410b-bdc8-fb52aea5ae79", "sourceURL": "https://flask.palletsprojects.com/en/stable/license", "url": "https://flask.palletsprojects.com/en/stable/license/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I bsd-3-clause license in flask-stable?\n\nAssistant: To bsd-3-clause license in flask-stable, here's what you do:\nCopyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/license", "title": "BSD-3-Clause License", "description": "Details the terms and conditions of the BSD-3-Clause License for the Flask framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:30:31", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "title": "BSD-3-Clause License — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/license/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "3f936616-2033-410b-bdc8-fb52aea5ae79", "sourceURL": "https://flask.palletsprojects.com/en/stable/license", "url": "https://flask.palletsprojects.com/en/stable/license/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for BSD-3-Clause License in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**BSD-3-Clause License Text**:\n\n```yaml\nCopyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\nThis snippet shows you how to bsd-3-clause license text, which is an important aspect of bsd-3-clause license.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/license", "title": "BSD-3-Clause License", "description": "Details the terms and conditions of the BSD-3-Clause License for the Flask framework.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:30:31", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "title": "BSD-3-Clause License — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/license/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "3f936616-2033-410b-bdc8-fb52aea5ae79", "sourceURL": "https://flask.palletsprojects.com/en/stable/license", "url": "https://flask.palletsprojects.com/en/stable/license/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Contributing is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Contributing in flask-stable.\n\n# Contributing\n\nGuidelines and resources for contributing to the Flask project.Here's a quick rundown of what this is about:\n\n## Overview\n\nSee the Pallets detailed contributing documentation for many ways to contribute, including reporting issues, requesting features, asking or answering questions, and making PRs.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/contributing", "title": "Contributing", "description": "Guidelines and resources for contributing to the Flask project.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:31:01", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/contributing/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Contributing — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "39d3526c-16fc-4a34-9619-ef08c6bfe4ab", "sourceURL": "https://flask.palletsprojects.com/en/stable/contributing", "url": "https://flask.palletsprojects.com/en/stable/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I overview in flask-stable?\n\nAssistant: To overview in flask-stable, here's what you do:\nSee the Pallets detailed contributing documentation for many ways to contribute, including reporting issues, requesting features, asking or answering questions, and making PRs..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/contributing", "title": "Contributing", "description": "Guidelines and resources for contributing to the Flask project.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:31:01", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/contributing/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Contributing — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "39d3526c-16fc-4a34-9619-ef08c6bfe4ab", "sourceURL": "https://flask.palletsprojects.com/en/stable/contributing", "url": "https://flask.palletsprojects.com/en/stable/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Contributing in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRefer to the detailed contributing documentation for comprehensive guidelines on contributing to Flask.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/contributing", "title": "Contributing", "description": "Guidelines and resources for contributing to the Flask project.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:31:01", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/contributing/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Contributing — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "39d3526c-16fc-4a34-9619-ef08c6bfe4ab", "sourceURL": "https://flask.palletsprojects.com/en/stable/contributing", "url": "https://flask.palletsprojects.com/en/stable/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Blog Blueprint is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Blog Blueprint in flask-stable.\n\n# Blog Blueprint\n\nYou’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.Here's a quick rundown of what this is about:\n\n## The Blueprint\n\nDefine the blueprint and register it in the application factory.\n\n`flaskr/blog.py`\n\n```\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n```\n\nImport and register the blueprint from the factory using [`app.register_blueprint()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.register_blueprint). Place the new code at the end of the factory function before returning the app.\n\n`flaskr/__init__.py`\n\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n```\n\nUnlike the auth blueprint, the blog blueprint does not have a `url_prefix`. So the `index` view will be at `/`, the `create` view at `/create`, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index.\n\nHowever, the endpoint for the `index` view defined below will be `blog.index`. Some of the authentication views referred to a plain `index` endpoint. [`app.add_url_rule()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.add_url_rule) associates the endpoint name `'index'` with the `/` url so that `url_for('index')` or `url_for('blog.index')` will both work, generating the same `/` URL either way.\n\nIn another application you might give the blog blueprint a `url_prefix` and define a separate `index` view in the application factory, similar to the `hello` view. Then the `index` and `blog.index` endpoints and URLs would be different.\n\n## Index\n\nThe index will show all of the posts, most recent first. A `JOIN` is used so that the author information from the `user` table is available in the result.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n```\n\n`flaskr/templates/blog/index.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Posts{% endblock %}</h1>\n  {% if g.user %}\n    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    <article class=\"post\">\n      <header>\n        <div>\n          <h1>{{ post['title'] }}</h1>\n          <div class=\"about\">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>\n        </div>\n        {% if g.user['id'] == post['author_id'] %}\n          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>\n        {% endif %}\n      </header>\n      <p class=\"body\">{{ post['body'] }}</p>\n    </article>\n    {% if not loop.last %}\n      <hr>\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n```\n\nWhen a user is logged in, the `header` block adds a link to the `create` view. When the user is the author of a post, they’ll see an “Edit” link to the `update` view for that post. `loop.last` is a special variable available inside [Jinja for loops](https://jinja.palletsprojects.com/templates/#for). It’s used to display a line after each post except the last one, to visually separate them.\n\n## Create\n\nThe `create` view works the same as the auth `register` view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown.\n\nThe `login_required` decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n```\n\n`flaskr/templates/blog/create.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}New Post{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n{% endblock %}\n```\n\n\n\n## Update\n\nBoth the `update` and `delete` views will need to fetch a `post` by `id` and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the `post` and call it from each view.\n\n`flaskr/blog.py`\n\n```\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n```\n\n[`abort()`](https://flask.palletsprojects.com/en/stable/api/#flask.abort) will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used. `404` means “Not Found”, and `403` means “Forbidden”. ( `401` means “Unauthorized”, but you redirect to the login page instead of returning that status.)\n\nThe `check_author` argument is defined so that the function can be used to get a `post` without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn’t matter because they’re not modifying the post.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n```\n\nUnlike the views you’ve written so far, the `update` function takes an argument, `id`. That corresponds to the `<int:id>` in the route. A real URL will look like `/1/update`. Flask will capture the `1`, ensure it’s an [`int`](https://docs.python.org/3/library/functions.html#int), and pass it as the `id` argument. If you don’t specify `int:` and instead do `<id>`, it will be a string.\nTo generate a URL to the update page, [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for) needs to be passed the `id` so it knows what to fill in:\n`url_for('blog.update', id=post['id'])`. This is also in the `index.html` file above.\n\nThe `create` and `update` views look very similar. The main difference is that the `update` view uses a `post` object and an `UPDATE` query instead of an `INSERT`. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it’s clearer to keep them separate.\n\n`flaskr/templates/blog/update.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\"\n      value=\"{{ request.form['title'] or post['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] or post['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n  <hr>\n  <form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\">\n    <input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\">\n  </form>\n{% endblock %}\n```\n\nThis template has two forms. The first posts the edited data to the current page ( `/<id>/update`). The other form contains only a button and specifies an `action` attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting.\nThe pattern `{{ request.form['title'] or post['title'] }}` is used to choose what data appears in the form. When the form hasn’t been submitted, the original `post` data appears, but if invalid form data was posted you want to display that so the user can fix the error, so `request.form` is used instead.\n\n## Delete\n\nThe delete view doesn’t have its own template, the delete button is part of `update.html` and posts to the `/<id>/delete` URL. Since there is no template, it will only handle the `POST` method and then redirect to the `index` view.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/<int:id>/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n```\n\nCongratulations, you’ve now finished writing your application! Take some time to try out everything in the browser. However, there’s still more to do before the project is complete.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the blueprint in flask-stable?\n\nAssistant: To the blueprint in flask-stable, here's what you do:\nDefine the blueprint and register it in the application factory.\n\n`flaskr/blog.py`\n\n```\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n```\n\nImport and register the blueprint from the factory using [`app.register_blueprint()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.register_blueprint). Place the new code at the end of the factory function before returning the app.\n\n`flaskr/__init__.py`\n\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n```\n\nUnlike the auth blueprint, the blog blueprint does not have a `url_prefix`. So the `index` view will be at `/`, the `create` view at `/create`, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index.\n\nHowever, the endpoint for the `index` view defined below will be `blog.index`. Some of the authentication views referred to a plain `index` endpoint. [`app.add_url_rule()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.add_url_rule) associates the endpoint name `'index'` with the `/` url so that `url_for('index')` or `url_for('blog.index')` will both work, generating the same `/` URL either way.\n\nIn another application you might give the blog blueprint a `url_prefix` and define a separate `index` view in the application factory, similar to the `hello` view. Then the `index` and `blog.index` endpoints and URLs would be different..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I index in flask-stable?\n\nAssistant: To index in flask-stable, here's what you do:\nThe index will show all of the posts, most recent first. A `JOIN` is used so that the author information from the `user` table is available in the result.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n```\n\n`flaskr/templates/blog/index.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Posts{% endblock %}</h1>\n  {% if g.user %}\n    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    <article class=\"post\">\n      <header>\n        <div>\n          <h1>{{ post['title'] }}</h1>\n          <div class=\"about\">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>\n        </div>\n        {% if g.user['id'] == post['author_id'] %}\n          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>\n        {% endif %}\n      </header>\n      <p class=\"body\">{{ post['body'] }}</p>\n    </article>\n    {% if not loop.last %}\n      <hr>\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n```\n\nWhen a user is logged in, the `header` block adds a link to the `create` view. When the user is the author of a post, they’ll see an “Edit” link to the `update` view for that post. `loop.last` is a special variable available inside [Jinja for loops](https://jinja.palletsprojects.com/templates/#for). It’s used to display a line after each post except the last one, to visually separate them..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create in flask-stable?\n\nAssistant: To create in flask-stable, here's what you do:\nThe `create` view works the same as the auth `register` view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown.\n\nThe `login_required` decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n```\n\n`flaskr/templates/blog/create.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}New Post{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n{% endblock %}\n```\n\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I update in flask-stable?\n\nAssistant: To update in flask-stable, here's what you do:\nBoth the `update` and `delete` views will need to fetch a `post` by `id` and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the `post` and call it from each view.\n\n`flaskr/blog.py`\n\n```\ndef get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n```\n\n[`abort()`](https://flask.palletsprojects.com/en/stable/api/#flask.abort) will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used. `404` means “Not Found”, and `403` means “Forbidden”. ( `401` means “Unauthorized”, but you redirect to the login page instead of returning that status.)\n\nThe `check_author` argument is defined so that the function can be used to get a `post` without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn’t matter because they’re not modifying the post.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n```\n\nUnlike the views you’ve written so far, the `update` function takes an argument, `id`. That corresponds to the `<int:id>` in the route. A real URL will look like `/1/update`. Flask will capture the `1`, ensure it’s an [`int`](https://docs.python.org/3/library/functions.html#int), and pass it as the `id` argument. If you don’t specify `int:` and instead do `<id>`, it will be a string.\nTo generate a URL to the update page, [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for) needs to be passed the `id` so it knows what to fill in:\n`url_for('blog.update', id=post['id'])`. This is also in the `index.html` file above.\n\nThe `create` and `update` views look very similar. The main difference is that the `update` view uses a `post` object and an `UPDATE` query instead of an `INSERT`. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it’s clearer to keep them separate.\n\n`flaskr/templates/blog/update.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"title\">Title</label>\n    <input name=\"title\" id=\"title\"\n      value=\"{{ request.form['title'] or post['title'] }}\" required>\n    <label for=\"body\">Body</label>\n    <textarea name=\"body\" id=\"body\">{{ request.form['body'] or post['body'] }}</textarea>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n  <hr>\n  <form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\">\n    <input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\">\n  </form>\n{% endblock %}\n```\n\nThis template has two forms. The first posts the edited data to the current page ( `/<id>/update`). The other form contains only a button and specifies an `action` attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting.\nThe pattern `{{ request.form['title'] or post['title'] }}` is used to choose what data appears in the form. When the form hasn’t been submitted, the original `post` data appears, but if invalid form data was posted you want to display that so the user can fix the error, so `request.form` is used instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I delete in flask-stable?\n\nAssistant: To delete in flask-stable, here's what you do:\nThe delete view doesn’t have its own template, the delete button is part of `update.html` and posts to the `/<id>/delete` URL. Since there is no template, it will only handle the `POST` method and then redirect to the `index` view.\n\n`flaskr/blog.py`\n\n```\n@bp.route('/<int:id>/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n```\n\nCongratulations, you’ve now finished writing your application! Take some time to try out everything in the browser. However, there’s still more to do before the project is complete..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Blog Blueprint in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**The Blueprint**:\n\n```yaml\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n```\n\nThis snippet shows you how to the blueprint, which is an important aspect of blog blueprint.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "title": "Blog Blueprint", "description": "You’ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 03:31:43", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/blog/", "readthedocs-version-slug": "stable", "title": "Blog Blueprint — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2dd22a0a-693b-472b-804e-0f9738af1c00", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/blog", "url": "https://flask.palletsprojects.com/en/stable/tutorial/blog/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Form Validation with WTForms is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Form Validation with WTForms in flask-stable.\n\n# Form Validation with WTForms\n\nThis page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.Here's a quick rundown of what this is about:\n\n## Form Validation with WTForms\n\nWhen you have to work with form data submitted by a browser view, code quickly becomes very hard to read. There are libraries out there designed to make this process easier to manage. One of them is [WTForms](https://wtforms.readthedocs.io/) which we will handle here. If you find yourself in the situation of having many forms, you might want to give it a try.\n\nWhen you are working with WTForms you have to define your forms as classes first. I recommend breaking up the application into multiple modules ( [Large Applications as Packages](https://flask.palletsprojects.com/en/stable/patterns/packages/)) for that and adding a separate module for the forms.\n\nGetting the most out of WTForms with an Extension\n\nThe [Flask-WTF](https://flask-wtf.readthedocs.io/) extension expands on this pattern and adds a few little helpers that make working with forms and Flask more fun. You can get it from [PyPI](https://pypi.org/project/Flask-WTF/).\n\n## The Forms\n\nThis is an example form for a typical registration page:\n\n```\nfrom wtforms import Form, BooleanField, StringField, PasswordField, validators\n\nclass RegistrationForm(Form):\n    username = StringField('Username', [validators.Length(min=4, max=25)])\n    email = StringField('Email Address', [validators.Length(min=6, max=35)])\n    password = PasswordField('New Password', [\\\n        validators.DataRequired(),\\\n        validators.EqualTo('confirm', message='Passwords must match')\\\n    ])\n    confirm = PasswordField('Repeat Password')\n    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])\n``\n\n## In the View\n\nIn the view function, the usage of this form looks like this:\n\n```\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm(request.form)\n    if request.method == 'POST' and form.validate():\n        user = User(form.username.data, form.email.data,\n                    form.password.data)\n        db_session.add(user)\n        flash('Thanks for registering')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n``\n\nNotice we’re implying that the view is using SQLAlchemy here ( [SQLAlchemy in Flask](https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/)), but that’s not a requirement, of course. Adapt the code as necessary.\n\nThings to remember:\n\n1. create the form from the request `form` value if the data is submitted via the HTTP `POST` method and `args` if the data is submitted as `GET`.\n\n2. to validate the data, call the `validate()` method, which will return `True` if the data validates, `False` otherwise.\n\n3. to access individual values from the form, access `form.<NAME>.data`.\n\n## Forms in Templates\n\nNow to the template side. When you pass the form to the templates, you can easily render them there. Look at the following example template to see how easy this is. WTForms does half the form generation for us already. To make it even nicer, we can write a macro that renders a field with label and a list of errors if there are any.\n\nHere’s an example `_formhelpers.html` template with such a macro:\n\n```\n{% macro render_field(field) %}\n  <dt>{{ field.label }}\n  <dd>{{ field(**kwargs)|safe }}\n  {% if field.errors %}\n    <ul class=errors>\n    {% for error in field.errors %}\n      <li>{{ error }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n  </dd>\n{% endmacro %}\n``\n\nThis macro accepts a couple of keyword arguments that are forwarded to WTForm’s field function, which renders the field for us. The keyword arguments will be inserted as HTML attributes. So, for example, you can call `render_field(form.username, class='username')` to add a class to the input element. Note that WTForms returns standard Python strings, so we have to tell Jinja2 that this data is already HTML-escaped with the `|safe` filter.\n\nHere is the `register.html` template for the function we used above, which takes advantage of the `_formhelpers.html` template:\n\n```\n{% from \"_formhelpers.html\" import render_field %}\n<form method=post>\n  <dl>\n    {{ render_field(form.username) }}\n    {{ render_field(form.email) }}\n    {{ render_field(form.password) }}\n    {{ render_field(form.confirm) }}\n    {{ render_field(form.accept_tos) }}\n  </dl>\n  <p><input type=submit value=Register>\n</form>\n``\n\nFor more information about WTForms, head over to the [WTForms\\ website](https://wtforms.readthedocs.io/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I form validation with wtforms in flask-stable?\n\nAssistant: To form validation with wtforms in flask-stable, here's what you do:\nWhen you have to work with form data submitted by a browser view, code quickly becomes very hard to read. There are libraries out there designed to make this process easier to manage. One of them is [WTForms](https://wtforms.readthedocs.io/) which we will handle here. If you find yourself in the situation of having many forms, you might want to give it a try.\n\nWhen you are working with WTForms you have to define your forms as classes first. I recommend breaking up the application into multiple modules ( [Large Applications as Packages](https://flask.palletsprojects.com/en/stable/patterns/packages/)) for that and adding a separate module for the forms.\n\nGetting the most out of WTForms with an Extension\n\nThe [Flask-WTF](https://flask-wtf.readthedocs.io/) extension expands on this pattern and adds a few little helpers that make working with forms and Flask more fun. You can get it from [PyPI](https://pypi.org/project/Flask-WTF/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the forms in flask-stable?\n\nAssistant: To the forms in flask-stable, here's what you do:\nThis is an example form for a typical registration page:\n\n```\nfrom wtforms import Form, BooleanField, StringField, PasswordField, validators\n\nclass RegistrationForm(Form):\n    username = StringField('Username', [validators.Length(min=4, max=25)])\n    email = StringField('Email Address', [validators.Length(min=6, max=35)])\n    password = PasswordField('New Password', [\\\n        validators.DataRequired(),\\\n        validators.EqualTo('confirm', message='Passwords must match')\\\n    ])\n    confirm = PasswordField('Repeat Password')\n    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I in the view in flask-stable?\n\nAssistant: To in the view in flask-stable, here's what you do:\nIn the view function, the usage of this form looks like this:\n\n```\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm(request.form)\n    if request.method == 'POST' and form.validate():\n        user = User(form.username.data, form.email.data,\n                    form.password.data)\n        db_session.add(user)\n        flash('Thanks for registering')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n``\n\nNotice we’re implying that the view is using SQLAlchemy here ( [SQLAlchemy in Flask](https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/)), but that’s not a requirement, of course. Adapt the code as necessary.\n\nThings to remember:\n\n1. create the form from the request `form` value if the data is submitted via the HTTP `POST` method and `args` if the data is submitted as `GET`.\n\n2. to validate the data, call the `validate()` method, which will return `True` if the data validates, `False` otherwise.\n\n3. to access individual values from the form, access `form.<NAME>.data`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I forms in templates in flask-stable?\n\nAssistant: To forms in templates in flask-stable, here's what you do:\nNow to the template side. When you pass the form to the templates, you can easily render them there. Look at the following example template to see how easy this is. WTForms does half the form generation for us already. To make it even nicer, we can write a macro that renders a field with label and a list of errors if there are any.\n\nHere’s an example `_formhelpers.html` template with such a macro:\n\n```\n{% macro render_field(field) %}\n  <dt>{{ field.label }}\n  <dd>{{ field(**kwargs)|safe }}\n  {% if field.errors %}\n    <ul class=errors>\n    {% for error in field.errors %}\n      <li>{{ error }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n  </dd>\n{% endmacro %}\n``\n\nThis macro accepts a couple of keyword arguments that are forwarded to WTForm’s field function, which renders the field for us. The keyword arguments will be inserted as HTML attributes. So, for example, you can call `render_field(form.username, class='username')` to add a class to the input element. Note that WTForms returns standard Python strings, so we have to tell Jinja2 that this data is already HTML-escaped with the `|safe` filter.\n\nHere is the `register.html` template for the function we used above, which takes advantage of the `_formhelpers.html` template:\n\n```\n{% from \"_formhelpers.html\" import render_field %}\n<form method=post>\n  <dl>\n    {{ render_field(form.username) }}\n    {{ render_field(form.email) }}\n    {{ render_field(form.password) }}\n    {{ render_field(form.confirm) }}\n    {{ render_field(form.accept_tos) }}\n  </dl>\n  <p><input type=submit value=Register>\n</form>\n``\n\nFor more information about WTForms, head over to the [WTForms\\ website](https://wtforms.readthedocs.io/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Form Validation with WTForms in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Registration Form Example**:\n\n```yaml\nfrom wtforms import Form, BooleanField, StringField, PasswordField, validators\n\nclass RegistrationForm(Form):\n    username = StringField('Username', [validators.Length(min=4, max=25)])\n    email = StringField('Email Address', [validators.Length(min=6, max=35)])\n    password = PasswordField('New Password', [\\\n        validators.DataRequired(),\\\n        validators.EqualTo('confirm', message='Passwords must match')\\\n    ])\n    confirm = PasswordField('Repeat Password')\n    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])\n\n```\n\nThis snippet shows you how to registration form example, which is an important aspect of form validation with wtforms.\n\n**View Function Example**:\n\n```yaml\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm(request.form)\n    if request.method == 'POST' and form.validate():\n        user = User(form.username.data, form.email.data,\n                    form.password.data)\n        db_session.add(user)\n        flash('Thanks for registering')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n```\n\nThis snippet shows you how to view function example, which is an important aspect of form validation with wtforms.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Form Validation with WTForms in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreate the form from the request `form` value if the data is submitted via the HTTP `POST` method and `args` if the data is submitted as `GET`.\n\nTo validate the data, call the `validate()` method, which will return `True` if the data validates, `False` otherwise.\n\nTo access individual values from the form, access `form.<NAME>.data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "title": "Form Validation with WTForms", "description": "This page covers how to handle form data in Flask applications using the WTForms library, including form creation, validation, and rendering in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:33:10", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Form Validation with WTForms — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/wtforms/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "scrapeId": "ef56c737-e8ba-4283-bb02-1e08793347ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/wtforms", "url": "https://flask.palletsprojects.com/en/stable/patterns/wtforms/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Security Considerations is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Security Considerations in flask-stable.\n\n# Security Considerations\n\nWeb applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.Here's a quick rundown of what this is about:\n\n## Resource Use\n\nA common category of attacks is “Denial of Service” (DoS or DDoS). This is a very broad category, and different variants target different layers in a deployed application. In general, something is done to increase how much processing time or memory is used to handle each request, to the point where there are not enough resources to handle legitimate requests.\n\nFlask provides a few configuration options to handle resource use. They can also be set on individual requests to customize only that request. The documentation for each goes into more detail.\n\n- [`MAX_CONTENT_LENGTH`](https://flask.palletsprojects.com/en/stable/config/#MAX_CONTENT_LENGTH \"MAX_CONTENT_LENGTH\") or [`Request.max_content_length`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_content_length \"flask.Request.max_content_length\") controls how much data will be read from a request. It is not set by default, although it will still block truly unlimited streams unless the WSGI server indicates support.\n\n- [`MAX_FORM_MEMORY_SIZE`](https://flask.palletsprojects.com/en/stable/config/#MAX_FORM_MEMORY_SIZE \"MAX_FORM_MEMORY_SIZE\") or [`Request.max_form_memory_size`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_form_memory_size \"flask.Request.max_form_memory_size\") controls how large any non-file `multipart/form-data` field can be. It is set to 500kB by default.\n\n- [`MAX_FORM_PARTS`](https://flask.palletsprojects.com/en/stable/config/#MAX_FORM_PARTS \"MAX_FORM_PARTS\") or [`Request.max_form_parts`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_form_parts \"flask.Request.max_form_parts\") controls how many `multipart/form-data` fields can be parsed. It is set to 1000 by default. Combined with the default `max_form_memory_size`, this means that a form will occupy at most 500MB of memory.\n\nRegardless of these settings, you should also review what settings are available from your operating system, container deployment (Docker etc), WSGI server, HTTP server, and hosting platform. They typically have ways to set process resource limits, timeouts, and other checks regardless of how Flask is configured.\n\n## Cross-Site Scripting (XSS)\n\nCross site scripting is the concept of injecting arbitrary HTML (and with it JavaScript) into the context of a website. To remedy this, developers have to properly escape text so that it cannot include arbitrary HTML tags. For more information on that have a look at the Wikipedia article on [Cross-Site Scripting](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\nFlask configures Jinja2 to automatically escape all values unless explicitly told otherwise. This should rule out all XSS problems caused in templates, but there are still other places where you have to be careful:\n\n- generating HTML without the help of Jinja2\n\n- calling `Markup` on data submitted by users\n\n- sending out HTML from uploaded files, never do that, use the `Content-Disposition: attachment` header to prevent that problem.\n\n- sending out textfiles from uploaded files. Some browsers are using content-type guessing based on the first few bytes so users could trick a browser to execute HTML.\n\nAnother thing that is very important are unquoted attributes. While Jinja2 can protect you from XSS issues by escaping HTML, there is one thing it cannot protect you from: XSS by attribute injection. To counter this possible attack vector, be sure to always quote your attributes with either double or single quotes when using Jinja expressions in them:\n\n```\n<input value=\"{{ value }}\">\n```\n\nWhy is this necessary? Because if you would not be doing that, an attacker could easily inject custom JavaScript handlers. For example an attacker could inject this piece of HTML+JavaScript:\n\n```\nonmouseover=alert(document.cookie)\n```\n\nWhen the user would then move with the mouse over the input, the cookie would be presented to the user in an alert window. But instead of showing the cookie to the user, a good attacker might also execute any other JavaScript code. In combination with CSS injections the attacker might even make the element fill out the entire page so that the user would just have to have the mouse anywhere on the page to trigger the attack.\n\nThere is one class of XSS issues that Jinja’s escaping does not protect against. The `a` tag’s `href` attribute can contain a `javascript:` URI, which the browser will execute when clicked if not secured properly.\n\n```\n<a href=\"{{ value }}\">click here</a>\n<a href=\"javascript:alert('unsafe');\">click here</a>\n```\n\nTo prevent this, you’ll need to set the [Content Security Policy (CSP)](https://flask.palletsprojects.com/en/stable/web-security/#security-csp) response header.\n\n## Cross-Site Request Forgery (CSRF)\n\nAnother big problem is CSRF. This is a very complex topic and I won’t outline it here in detail just mention what it is and how to theoretically prevent it.\n\nIf your authentication information is stored in cookies, you have implicit state management. The state of “being logged in” is controlled by a cookie, and that cookie is sent with each request to a page. Unfortunately that includes requests triggered by 3rd party sites. If you don’t keep that in mind, some people might be able to trick your application’s users with social engineering to do stupid things without them knowing.\n\nSay you have a specific URL that, when you sent `POST` requests to will delete a user’s profile (say `http://example.com/user/delete`). If an attacker now creates a page that sends a post request to that page with some JavaScript they just have to trick some users to load that page and their profiles will end up being deleted.\n\nImagine you were to run Facebook with millions of concurrent users and someone would send out links to images of little kittens. When users would go to that page, their profiles would get deleted while they are looking at images of fluffy cats.\n\nHow can you prevent that? Basically for each request that modifies content on the server you would have to either use a one-time token and store that in the cookie **and** also transmit it with the form data. After receiving the data on the server again, you would then have to compare the two tokens and ensure they are equal.\n\nWhy does Flask not do that for you? The ideal place for this to happen is the form validation framework, which does not exist in Flask.\n\n## JSON Security\n\nIn Flask 0.10 and lower, `jsonify()` did not serialize top-level arrays to JSON. This was because of a security vulnerability in ECMAScript 4.\n\nECMAScript 5 closed this vulnerability, so only extremely old browsers are still vulnerable. All of these browsers have [other more serious vulnerabilities](https://github.com/pallets/flask/issues/248#issuecomment-59934857), so this behavior was changed and `jsonify()` now supports serializing arrays.\n\n## Security Headers\n\nBrowsers recognize various response headers in order to control security. We recommend reviewing each of the headers below for use in your application. The [Flask-Talisman](https://github.com/GoogleCloudPlatform/flask-talisman) extension can be used to manage HTTPS and the security headers for you.\n\n### HTTP Strict Transport Security (HSTS)\n\nTells the browser to convert all HTTP requests to HTTPS, preventing man-in-the-middle (MITM) attacks.\n\n```\nresponse.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)\n\n### Content Security Policy (CSP)\n\nTell the browser where it can load various types of resource from. This header should be used whenever possible, but requires some work to define the correct policy for your site. A very strict policy would be:\n\n```\nresponse.headers['Content-Security-Policy'] = \"default-src 'self'\"\n```\n\n- [https://csp.withgoogle.com/docs/index.html](https://csp.withgoogle.com/docs/index.html)\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n\n### X-Content-Type-Options\n\nForces the browser to honor the response content type instead of trying to detect it, which can be abused to generate a cross-site scripting (XSS) attack.\n\n```\nresponse.headers['X-Content-Type-Options'] = 'nosniff'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)\n\n### X-Frame-Options\n\nPrevents external sites from embedding your site in an `iframe`. This prevents a class of attacks where clicks in the outer frame can be translated invisibly to clicks on your page’s elements. This is also known as “clickjacking”.\n\n```\nresponse.headers['X-Frame-Options'] = 'SAMEORIGIN'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\n\n### Set-Cookie options\n\nThese options can be added to a `Set-Cookie` header to improve their security. Flask has configuration options to set these on the session cookie. They can be set on other cookies too.\n\n- `Secure` limits cookies to HTTPS traffic only.\n\n- `HttpOnly` protects the contents of cookies from being read with JavaScript.\n\n- `SameSite` restricts how cookies are sent with requests from external sites. Can be set to `'Lax'` (recommended) or `'Strict'`. `Lax` prevents sending cookies with CSRF-prone requests from external sites, such as submitting a form. `Strict` prevents sending cookies with all external requests, including following regular links.\n\n```\napp.config.update(\n    SESSION_COOKIE_SECURE=True,\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n)\n\nresponse.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')\n```\n\nSpecifying `Expires` or `Max-Age` options, will remove the cookie after the given time, or the current time plus the age, respectively. If neither option is set, the cookie will be removed when the browser is closed.\n\n```\n# cookie expires after 10 minutes\nresponse.set_cookie('snakes', '3', max_age=600)\n```\n\nFor the session cookie, if [`session.permanent`](https://flask.palletsprojects.com/en/stable/api/#flask.session.permanent \"flask.session.permanent\") is set, then [`PERMANENT_SESSION_LIFETIME`](https://flask.palletsprojects.com/en/stable/config/#PERMANENT_SESSION_LIFETIME \"PERMANENT_SESSION_LIFETIME\") is used to set the expiration. Flask’s default cookie implementation validates that the cryptographic signature is not older than this value. Lowering this value may help mitigate replay attacks, where intercepted cookies can be sent at a later time.\n\n```\napp.config.update(\n    PERMANENT_SESSION_LIFETIME=600\n)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    ...\n    session.clear()\n    session['user_id'] = user.id\n    session.permanent = True\n    ...\n```\n\nUse `itsdangerous.TimedSerializer` to sign and validate other cookie values (or any values that need secure signatures).\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)\n\n### HTTP Public Key Pinning (HPKP)\n\nThis tells the browser to authenticate with the server using only the specific certificate key to prevent MITM attacks.\n\nWarning\n\nBe careful when enabling this, as it is very difficult to undo if you set up or upgrade your key incorrectly.\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "overview", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I resource use in flask-stable?\n\nAssistant: To resource use in flask-stable, here's what you do:\nA common category of attacks is “Denial of Service” (DoS or DDoS). This is a very broad category, and different variants target different layers in a deployed application. In general, something is done to increase how much processing time or memory is used to handle each request, to the point where there are not enough resources to handle legitimate requests.\n\nFlask provides a few configuration options to handle resource use. They can also be set on individual requests to customize only that request. The documentation for each goes into more detail.\n\n- [`MAX_CONTENT_LENGTH`](https://flask.palletsprojects.com/en/stable/config/#MAX_CONTENT_LENGTH \"MAX_CONTENT_LENGTH\") or [`Request.max_content_length`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_content_length \"flask.Request.max_content_length\") controls how much data will be read from a request. It is not set by default, although it will still block truly unlimited streams unless the WSGI server indicates support.\n\n- [`MAX_FORM_MEMORY_SIZE`](https://flask.palletsprojects.com/en/stable/config/#MAX_FORM_MEMORY_SIZE \"MAX_FORM_MEMORY_SIZE\") or [`Request.max_form_memory_size`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_form_memory_size \"flask.Request.max_form_memory_size\") controls how large any non-file `multipart/form-data` field can be. It is set to 500kB by default.\n\n- [`MAX_FORM_PARTS`](https://flask.palletsprojects.com/en/stable/config/#MAX_FORM_PARTS \"MAX_FORM_PARTS\") or [`Request.max_form_parts`](https://flask.palletsprojects.com/en/stable/api/#flask.Request.max_form_parts \"flask.Request.max_form_parts\") controls how many `multipart/form-data` fields can be parsed. It is set to 1000 by default. Combined with the default `max_form_memory_size`, this means that a form will occupy at most 500MB of memory.\n\nRegardless of these settings, you should also review what settings are available from your operating system, container deployment (Docker etc), WSGI server, HTTP server, and hosting platform. They typically have ways to set process resource limits, timeouts, and other checks regardless of how Flask is configured..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "section_detail", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I cross-site scripting (xss) in flask-stable?\n\nAssistant: To cross-site scripting (xss) in flask-stable, here's what you do:\nCross site scripting is the concept of injecting arbitrary HTML (and with it JavaScript) into the context of a website. To remedy this, developers have to properly escape text so that it cannot include arbitrary HTML tags. For more information on that have a look at the Wikipedia article on [Cross-Site Scripting](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\nFlask configures Jinja2 to automatically escape all values unless explicitly told otherwise. This should rule out all XSS problems caused in templates, but there are still other places where you have to be careful:\n\n- generating HTML without the help of Jinja2\n\n- calling `Markup` on data submitted by users\n\n- sending out HTML from uploaded files, never do that, use the `Content-Disposition: attachment` header to prevent that problem.\n\n- sending out textfiles from uploaded files. Some browsers are using content-type guessing based on the first few bytes so users could trick a browser to execute HTML.\n\nAnother thing that is very important are unquoted attributes. While Jinja2 can protect you from XSS issues by escaping HTML, there is one thing it cannot protect you from: XSS by attribute injection. To counter this possible attack vector, be sure to always quote your attributes with either double or single quotes when using Jinja expressions in them:\n\n```\n<input value=\"{{ value }}\">\n```\n\nWhy is this necessary? Because if you would not be doing that, an attacker could easily inject custom JavaScript handlers. For example an attacker could inject this piece of HTML+JavaScript:\n\n```\nonmouseover=alert(document.cookie)\n```\n\nWhen the user would then move with the mouse over the input, the cookie would be presented to the user in an alert window. But instead of showing the cookie to the user, a good attacker might also execute any other JavaScript code. In combination with CSS injections the attacker might even make the element fill out the entire page so that the user would just have to have the mouse anywhere on the page to trigger the attack.\n\nThere is one class of XSS issues that Jinja’s escaping does not protect against. The `a` tag’s `href` attribute can contain a `javascript:` URI, which the browser will execute when clicked if not secured properly.\n\n```\n<a href=\"{{ value }}\">click here</a>\n<a href=\"javascript:alert('unsafe');\">click here</a>\n```\n\nTo prevent this, you’ll need to set the [Content Security Policy (CSP)](https://flask.palletsprojects.com/en/stable/web-security/#security-csp) response header..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "section_detail", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I cross-site request forgery (csrf) in flask-stable?\n\nAssistant: To cross-site request forgery (csrf) in flask-stable, here's what you do:\nAnother big problem is CSRF. This is a very complex topic and I won’t outline it here in detail just mention what it is and how to theoretically prevent it.\n\nIf your authentication information is stored in cookies, you have implicit state management. The state of “being logged in” is controlled by a cookie, and that cookie is sent with each request to a page. Unfortunately that includes requests triggered by 3rd party sites. If you don’t keep that in mind, some people might be able to trick your application’s users with social engineering to do stupid things without them knowing.\n\nSay you have a specific URL that, when you sent `POST` requests to will delete a user’s profile (say `http://example.com/user/delete`). If an attacker now creates a page that sends a post request to that page with some JavaScript they just have to trick some users to load that page and their profiles will end up being deleted.\n\nImagine you were to run Facebook with millions of concurrent users and someone would send out links to images of little kittens. When users would go to that page, their profiles would get deleted while they are looking at images of fluffy cats.\n\nHow can you prevent that? Basically for each request that modifies content on the server you would have to either use a one-time token and store that in the cookie **and** also transmit it with the form data. After receiving the data on the server again, you would then have to compare the two tokens and ensure they are equal.\n\nWhy does Flask not do that for you? The ideal place for this to happen is the form validation framework, which does not exist in Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "section_detail", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I json security in flask-stable?\n\nAssistant: To json security in flask-stable, here's what you do:\nIn Flask 0.10 and lower, `jsonify()` did not serialize top-level arrays to JSON. This was because of a security vulnerability in ECMAScript 4.\n\nECMAScript 5 closed this vulnerability, so only extremely old browsers are still vulnerable. All of these browsers have [other more serious vulnerabilities](https://github.com/pallets/flask/issues/248#issuecomment-59934857), so this behavior was changed and `jsonify()` now supports serializing arrays..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "section_detail", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I security headers in flask-stable?\n\nAssistant: To security headers in flask-stable, here's what you do:\nBrowsers recognize various response headers in order to control security. We recommend reviewing each of the headers below for use in your application. The [Flask-Talisman](https://github.com/GoogleCloudPlatform/flask-talisman) extension can be used to manage HTTPS and the security headers for you.\n\n### HTTP Strict Transport Security (HSTS)\n\nTells the browser to convert all HTTP requests to HTTPS, preventing man-in-the-middle (MITM) attacks.\n\n```\nresponse.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)\n\n### Content Security Policy (CSP)\n\nTell the browser where it can load various types of resource from. This header should be used whenever possible, but requires some work to define the correct policy for your site. A very strict policy would be:\n\n```\nresponse.headers['Content-Security-Policy'] = \"default-src 'self'\"\n```\n\n- [https://csp.withgoogle.com/docs/index.html](https://csp.withgoogle.com/docs/index.html)\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n\n### X-Content-Type-Options\n\nForces the browser to honor the response content type instead of trying to detect it, which can be abused to generate a cross-site scripting (XSS) attack.\n\n```\nresponse.headers['X-Content-Type-Options'] = 'nosniff'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)\n\n### X-Frame-Options\n\nPrevents external sites from embedding your site in an `iframe`. This prevents a class of attacks where clicks in the outer frame can be translated invisibly to clicks on your page’s elements. This is also known as “clickjacking”.\n\n```\nresponse.headers['X-Frame-Options'] = 'SAMEORIGIN'\n```\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\n\n### Set-Cookie options\n\nThese options can be added to a `Set-Cookie` header to improve their security. Flask has configuration options to set these on the session cookie. They can be set on other cookies too.\n\n- `Secure` limits cookies to HTTPS traffic only.\n\n- `HttpOnly` protects the contents of cookies from being read with JavaScript.\n\n- `SameSite` restricts how cookies are sent with requests from external sites. Can be set to `'Lax'` (recommended) or `'Strict'`. `Lax` prevents sending cookies with CSRF-prone requests from external sites, such as submitting a form. `Strict` prevents sending cookies with all external requests, including following regular links.\n\n```\napp.config.update(\n    SESSION_COOKIE_SECURE=True,\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n)\n\nresponse.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')\n```\n\nSpecifying `Expires` or `Max-Age` options, will remove the cookie after the given time, or the current time plus the age, respectively. If neither option is set, the cookie will be removed when the browser is closed.\n\n```\n# cookie expires after 10 minutes\nresponse.set_cookie('snakes', '3', max_age=600)\n```\n\nFor the session cookie, if [`session.permanent`](https://flask.palletsprojects.com/en/stable/api/#flask.session.permanent \"flask.session.permanent\") is set, then [`PERMANENT_SESSION_LIFETIME`](https://flask.palletsprojects.com/en/stable/config/#PERMANENT_SESSION_LIFETIME \"PERMANENT_SESSION_LIFETIME\") is used to set the expiration. Flask’s default cookie implementation validates that the cryptographic signature is not older than this value. Lowering this value may help mitigate replay attacks, where intercepted cookies can be sent at a later time.\n\n```\napp.config.update(\n    PERMANENT_SESSION_LIFETIME=600\n)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    ...\n    session.clear()\n    session['user_id'] = user.id\n    session.permanent = True\n    ...\n```\n\nUse `itsdangerous.TimedSerializer` to sign and validate other cookie values (or any values that need secure signatures).\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)\n\n### HTTP Public Key Pinning (HPKP)\n\nThis tells the browser to authenticate with the server using only the specific certificate key to prevent MITM attacks.\n\nWarning\n\nBe careful when enabling this, as it is very difficult to undo if you set up or upgrade your key incorrectly.\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "section_detail", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Security Considerations in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTTP Strict Transport Security (HSTS)**:\n\n```yaml\nresponse.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n```\n\nThis snippet shows you how to http strict transport security (hsts), which is an important aspect of security considerations.\n\n**Content Security Policy (CSP)**:\n\n```yaml\nresponse.headers['Content-Security-Policy'] = \"default-src 'self'\"\n```\n\nThis snippet shows you how to content security policy (csp), which is an important aspect of security considerations.\n\n**X-Content-Type-Options**:\n\n```yaml\nresponse.headers['X-Content-Type-Options'] = 'nosniff'\n```\n\nThis snippet shows you how to x-content-type-options, which is an important aspect of security considerations.\n\n**X-Frame-Options**:\n\n```yaml\nresponse.headers['X-Frame-Options'] = 'SAMEORIGIN'\n```\n\nThis snippet shows you how to x-frame-options, which is an important aspect of security considerations.\n\n**Set-Cookie options**:\n\n```yaml\napp.config.update(\n    SESSION_COOKIE_SECURE=True,\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n)\n\nresponse.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')\n\n# cookie expires after 10 minutes\nresponse.set_cookie('snakes', '3', max_age=600)\n```\n\nThis snippet shows you how to set-cookie options, which is an important aspect of security considerations.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "code_examples", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Security Considerations in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReview settings available from your operating system, container deployment, WSGI server, HTTP server, and hosting platform for resource limits and timeouts.\n\nAlways quote your attributes with either double or single quotes when using Jinja expressions to prevent XSS by attribute injection.\n\nSet the Content Security Policy (CSP) response header to prevent XSS issues with the `a` tag’s `href` attribute.\n\nUse a one-time token for each request that modifies content on the server to prevent CSRF attacks.\n\nConsider using the Flask-Talisman extension to manage HTTPS and security headers.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/web-security", "title": "Security Considerations", "description": "Web applications face many types of potential security problems, and it can be hard to get everything right, or even to know what “right” is in general. Flask tries to solve a few of these things by default, but there are other parts you may have to take care of yourself.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:35:58", "type": "best_practices", "page_metadata": {"title": "Security Considerations — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-resolver-filename": "/web-security/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "23ca1852-8523-46ff-a6f2-c54bfb93f887", "sourceURL": "https://flask.palletsprojects.com/en/stable/web-security", "url": "https://flask.palletsprojects.com/en/stable/web-security/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Application Dispatching is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Application Dispatching in flask-stable.\n\n# Application Dispatching\n\nApplication dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.Here's a quick rundown of what this is about:\n\n## Working with this Document\n\nEach of the techniques and examples below results in an `application` object that can be run with any WSGI server. For development, use the `flask run` command to start a development server. For production, see [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/).\n\n## Combining Applications\n\nIf you have entirely separated applications and you want them to work next to each other in the same Python interpreter process you can take advantage of the `werkzeug.wsgi.DispatcherMiddleware`. The idea here is that each Flask application is a valid WSGI application and they are combined by the dispatcher middleware into a larger one that is dispatched based on prefix.\n\n## Dispatch by Subdomain\n\nSometimes you might want to use multiple instances of the same application with different configurations. Assuming the application is created inside a function and you can call that function to instantiate it, that is really easy to implement. In order to develop your application to support creating new instances in functions have a look at the [Application Factories](https://flask.palletsprojects.com/en/stable/patterns/appfactories/) pattern.\n\n## Dispatch by Path\n\nDispatching by a path on the URL is very similar. Instead of looking at the `Host` header to figure out the subdomain one simply looks at the request path up to the first slash.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I working with this document in flask-stable?\n\nAssistant: To working with this document in flask-stable, here's what you do:\nEach of the techniques and examples below results in an `application` object that can be run with any WSGI server. For development, use the `flask run` command to start a development server. For production, see [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I combining applications in flask-stable?\n\nAssistant: To combining applications in flask-stable, here's what you do:\nIf you have entirely separated applications and you want them to work next to each other in the same Python interpreter process you can take advantage of the `werkzeug.wsgi.DispatcherMiddleware`. The idea here is that each Flask application is a valid WSGI application and they are combined by the dispatcher middleware into a larger one that is dispatched based on prefix..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I dispatch by subdomain in flask-stable?\n\nAssistant: To dispatch by subdomain in flask-stable, here's what you do:\nSometimes you might want to use multiple instances of the same application with different configurations. Assuming the application is created inside a function and you can call that function to instantiate it, that is really easy to implement. In order to develop your application to support creating new instances in functions have a look at the [Application Factories](https://flask.palletsprojects.com/en/stable/patterns/appfactories/) pattern..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I dispatch by path in flask-stable?\n\nAssistant: To dispatch by path in flask-stable, here's what you do:\nDispatching by a path on the URL is very similar. Instead of looking at the `Host` header to figure out the subdomain one simply looks at the request path up to the first slash..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Application Dispatching in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Flask Application**:\n\n```yaml\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n```\n\nThis snippet shows you how to basic flask application, which is an important aspect of application dispatching.\n\n**Combining Applications with DispatcherMiddleware**:\n\n```yaml\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend': backend\n})\n\n```\n\nThis snippet shows you how to combining applications with dispatchermiddleware, which is an important aspect of application dispatching.\n\n**Subdomain Dispatcher Example**:\n\n```yaml\nfrom threading import Lock\n\nclass SubdomainDispatcher:\n\n    def __init__(self, domain, create_app):\n        self.domain = domain\n        self.create_app = create_app\n        self.lock = Lock()\n        self.instances = {}\n\n    def get_application(self, host):\n        host = host.split(':')[0]\n        assert host.endswith(self.domain), 'Configuration error'\n        subdomain = host[:-len(self.domain)].rstrip('.')\n        with self.lock:\n            app = self.instances.get(subdomain)\n            if app is None:\n                app = self.create_app(subdomain)\n                self.instances[subdomain] = app\n            return app\n\n    def __call__(self, environ, start_response):\n        app = self.get_application(environ['HTTP_HOST'])\n        return app(environ, start_response)\n\n```\n\nThis snippet shows you how to subdomain dispatcher example, which is an important aspect of application dispatching.\n\n**Path Dispatcher Example**:\n\n```yaml\nfrom threading import Lock\nfrom wsgiref.util import shift_path_info\n\nclass PathDispatcher:\n\n    def __init__(self, default_app, create_app):\n        self.default_app = default_app\n        self.create_app = create_app\n        self.lock = Lock()\n        self.instances = {}\n\n    def get_application(self, prefix):\n        with self.lock:\n            app = self.instances.get(prefix)\n            if app is None:\n                app = self.create_app(prefix)\n                if app is not None:\n                    self.instances[prefix] = app\n            return app\n\n    def __call__(self, environ, start_response):\n        app = self.get_application(_peek_path_info(environ))\n        if app is not None:\n            shift_path_info(environ)\n        else:\n            app = self.default_app\n        return app(environ, start_response)\n\ndef _peek_path_info(environ):\n    segments = environ.get(\"PATH_INFO\", \"\").lstrip(\"/\").split(\"/\", 1)\n    if segments:\n        return segments[0]\n\n    return None\n\n```\n\nThis snippet shows you how to path dispatcher example, which is an important aspect of application dispatching.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Application Dispatching in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor development, use the `flask run` command to start a development server.\n\nFor production, see the documentation on Deploying to Production.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "title": "Application Dispatching", "description": "Application dispatching is the process of combining multiple Flask applications on the WSGI level. You can combine not only Flask applications but any WSGI application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:17", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/appdispatch/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "title": "Application Dispatching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7e49089f-831e-4ebf-9762-92ef4826e125", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch", "url": "https://flask.palletsprojects.com/en/stable/patterns/appdispatch/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Application Setup is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Application Setup in flask-stable.\n\n# Application Setup\n\nA guide on how to set up a Flask application using the application factory pattern.Here's a quick rundown of what this is about:\n\n## The Application Factory\n\nIt’s time to start coding! Create the `flaskr` directory and add the `__init__.py` file. The `__init__.py` serves double duty: it will contain the application factory, and it tells Python that the `flaskr` directory should be treated as a package.\n\n```\n$ mkdir flaskr\n```\n\n`flaskr/__init__.py`\n\n```\nimport os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n```\n\n`create_app` is the application factory function. You’ll add to it later in the tutorial, but it already does a lot.\n\n1. `app = Flask(__name__, instance_relative_config=True)` creates the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") instance.\n\n   - `__name__` is the name of the current Python module. The app needs to know where it’s located to set up some paths, and `__name__` is a convenient way to tell it that.\n\n   - `instance_relative_config=True` tells the app that configuration files are relative to the [instance folder](https://flask.palletsprojects.com/en/stable/config/#instance-folders). The instance folder is located outside the `flaskr` package and can hold local data that shouldn’t be committed to version control, such as configuration secrets and the database file.\n2. [`app.config.from_mapping()`](https://flask.palletsprojects.com/en/stable/api/#flask.Config.from_mapping \"flask.Config.from_mapping\") sets some default configuration that the app will use:\n\n   - [`SECRET_KEY`](https://flask.palletsprojects.com/en/stable/config/#SECRET_KEY \"SECRET_KEY\") is used by Flask and extensions to keep data safe. It’s set to `'dev'` to provide a convenient value during development, but it should be overridden with a random value when deploying.\n\n   - `DATABASE` is the path where the SQLite database file will be saved. It’s under [`app.instance_path`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.instance_path \"flask.Flask.instance_path\"), which is the path that Flask has chosen for the instance folder. You’ll learn more about the database in the next section.\n3. [`app.config.from_pyfile()`](https://flask.palletsprojects.com/en/stable/api/#flask.Config.from_pyfile \"flask.Config.from_pyfile\") overrides the default configuration with values taken from the `config.py` file in the instance folder if it exists. For example, when deploying, this can be used to set a real `SECRET_KEY`.\n\n   - `test_config` can also be passed to the factory, and will be used instead of the instance configuration. This is so the tests you’ll write later in the tutorial can be configured independently of any development values you have configured.\n4. [`os.makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs \"(in Python v3.13)\") ensures that [`app.instance_path`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.instance_path \"flask.Flask.instance_path\") exists. Flask doesn’t create the instance folder automatically, but it needs to be created because your project will create the SQLite database file there.\n\n5. [`@app.route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") creates a simple route so you can see the application working before getting into the rest of the tutorial. It creates a connection between the URL `/hello` and a function that returns a response, the string `'Hello, World!'` in this case.\n\n## Run The Application\n\nNow you can run your application using the `flask` command. From the terminal, tell Flask where to find your application, then run it in debug mode. Remember, you should still be in the top-level `flask-tutorial` directory, not the `flaskr` package.\n\nDebug mode shows an interactive debugger whenever a page raises an exception, and restarts the server whenever you make changes to the code. You can leave it running and just reload the browser page as you follow the tutorial.\n\n```\n$ flask --app flaskr run --debug\n```\n\nYou’ll see output similar to this:\n\n```\n* Serving Flask app \"flaskr\"\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: nnn-nnn-nnn\n```\n\nVisit [http://127.0.0.1:5000/hello](http://127.0.0.1:5000/hello) in a browser and you should see the “Hello, World!” message. Congratulations, you’re now running your Flask web application!\n\nIf another program is already using port 5000, you’ll see `OSError: [Errno 98]` or `OSError: [WinError 10013]` when the server tries to start. See [Address already in use](https://flask.palletsprojects.com/en/stable/server/#address-already-in-use) for how to handle that.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "title": "Application Setup", "description": "A guide on how to set up a Flask application using the application factory pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:38:46", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "title": "Application Setup — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/factory/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2f3f3daa-851e-40a6-9b11-d8dd9d427d59", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "url": "https://flask.palletsprojects.com/en/stable/tutorial/factory/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the application factory in flask-stable?\n\nAssistant: To the application factory in flask-stable, here's what you do:\nIt’s time to start coding! Create the `flaskr` directory and add the `__init__.py` file. The `__init__.py` serves double duty: it will contain the application factory, and it tells Python that the `flaskr` directory should be treated as a package.\n\n```\n$ mkdir flaskr\n```\n\n`flaskr/__init__.py`\n\n```\nimport os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n```\n\n`create_app` is the application factory function. You’ll add to it later in the tutorial, but it already does a lot.\n\n1. `app = Flask(__name__, instance_relative_config=True)` creates the [`Flask`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask \"flask.Flask\") instance.\n\n   - `__name__` is the name of the current Python module. The app needs to know where it’s located to set up some paths, and `__name__` is a convenient way to tell it that.\n\n   - `instance_relative_config=True` tells the app that configuration files are relative to the [instance folder](https://flask.palletsprojects.com/en/stable/config/#instance-folders). The instance folder is located outside the `flaskr` package and can hold local data that shouldn’t be committed to version control, such as configuration secrets and the database file.\n2. [`app.config.from_mapping()`](https://flask.palletsprojects.com/en/stable/api/#flask.Config.from_mapping \"flask.Config.from_mapping\") sets some default configuration that the app will use:\n\n   - [`SECRET_KEY`](https://flask.palletsprojects.com/en/stable/config/#SECRET_KEY \"SECRET_KEY\") is used by Flask and extensions to keep data safe. It’s set to `'dev'` to provide a convenient value during development, but it should be overridden with a random value when deploying.\n\n   - `DATABASE` is the path where the SQLite database file will be saved. It’s under [`app.instance_path`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.instance_path \"flask.Flask.instance_path\"), which is the path that Flask has chosen for the instance folder. You’ll learn more about the database in the next section.\n3. [`app.config.from_pyfile()`](https://flask.palletsprojects.com/en/stable/api/#flask.Config.from_pyfile \"flask.Config.from_pyfile\") overrides the default configuration with values taken from the `config.py` file in the instance folder if it exists. For example, when deploying, this can be used to set a real `SECRET_KEY`.\n\n   - `test_config` can also be passed to the factory, and will be used instead of the instance configuration. This is so the tests you’ll write later in the tutorial can be configured independently of any development values you have configured.\n4. [`os.makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs \"(in Python v3.13)\") ensures that [`app.instance_path`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.instance_path \"flask.Flask.instance_path\") exists. Flask doesn’t create the instance folder automatically, but it needs to be created because your project will create the SQLite database file there.\n\n5. [`@app.route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") creates a simple route so you can see the application working before getting into the rest of the tutorial. It creates a connection between the URL `/hello` and a function that returns a response, the string `'Hello, World!'` in this case..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "title": "Application Setup", "description": "A guide on how to set up a Flask application using the application factory pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:38:46", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "title": "Application Setup — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/factory/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2f3f3daa-851e-40a6-9b11-d8dd9d427d59", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "url": "https://flask.palletsprojects.com/en/stable/tutorial/factory/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I run the application in flask-stable?\n\nAssistant: To run the application in flask-stable, here's what you do:\nNow you can run your application using the `flask` command. From the terminal, tell Flask where to find your application, then run it in debug mode. Remember, you should still be in the top-level `flask-tutorial` directory, not the `flaskr` package.\n\nDebug mode shows an interactive debugger whenever a page raises an exception, and restarts the server whenever you make changes to the code. You can leave it running and just reload the browser page as you follow the tutorial.\n\n```\n$ flask --app flaskr run --debug\n```\n\nYou’ll see output similar to this:\n\n```\n* Serving Flask app \"flaskr\"\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: nnn-nnn-nnn\n```\n\nVisit [http://127.0.0.1:5000/hello](http://127.0.0.1:5000/hello) in a browser and you should see the “Hello, World!” message. Congratulations, you’re now running your Flask web application!\n\nIf another program is already using port 5000, you’ll see `OSError: [Errno 98]` or `OSError: [WinError 10013]` when the server tries to start. See [Address already in use](https://flask.palletsprojects.com/en/stable/server/#address-already-in-use) for how to handle that..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "title": "Application Setup", "description": "A guide on how to set up a Flask application using the application factory pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:38:46", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "title": "Application Setup — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/factory/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2f3f3daa-851e-40a6-9b11-d8dd9d427d59", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "url": "https://flask.palletsprojects.com/en/stable/tutorial/factory/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Application Setup in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating the Flask Application**:\n\n```yaml\n$ mkdir flaskr\n\nimport os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n\n```\n\nThis snippet shows you how to creating the flask application, which is an important aspect of application setup.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "title": "Application Setup", "description": "A guide on how to set up a Flask application using the application factory pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:38:46", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "title": "Application Setup — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/factory/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2f3f3daa-851e-40a6-9b11-d8dd9d427d59", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "url": "https://flask.palletsprojects.com/en/stable/tutorial/factory/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Application Setup in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreate the Flask application instance inside a function to avoid issues as the project grows.\n\nUse the application factory pattern for better organization and configuration management.\n\nRun the application in debug mode to see errors and changes in real-time.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "title": "Application Setup", "description": "A guide on how to set up a Flask application using the application factory pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:38:46", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "title": "Application Setup — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/factory/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "2f3f3daa-851e-40a6-9b11-d8dd9d427d59", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/factory", "url": "https://flask.palletsprojects.com/en/stable/tutorial/factory/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Message Flashing is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Message Flashing in flask-stable.\n\n# Message Flashing\n\nGood applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.Here's a quick rundown of what this is about:\n\n## Message Flashing\n\nGood applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it next request and only next request. This is usually combined with a layout template that does this. Note that browsers and sometimes web servers enforce a limit on cookie sizes. This means that flashing messages that are too large for session cookies causes message flashing to fail silently.\n\n## Simple Flashing\n\nSo here is a full example:\n\n```\nfrom flask import Flask, flash, redirect, render_template, \\\n     request, url_for\n\napp = Flask(__name__)\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if request.form['username'] != 'admin' or \\\n                request.form['password'] != 'secret':\n            error = 'Invalid credentials'\n        else:\n            flash('You were successfully logged in')\n            return redirect(url_for('index'))\n    return render_template('login.html', error=error)\n```\n\nAnd here is the `layout.html` template which does the magic:\n\n```\n<!doctype html>\n<title>My Application</title>\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n{% block body %}{% endblock %}\n```\n\nHere is the `index.html` template which inherits from `layout.html`:\n\n```\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>Overview</h1>\n  <p>Do you want to <a href=\"{{ url_for('login') }}\">log in?</a>\n{% endblock %}\n```\n\nAnd here is the `login.html` template which also inherits from `layout.html`:\n\n```\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>Login</h1>\n  {% if error %}\n    <p class=error><strong>Error:</strong> {{ error }}\n  {% endif %}\n  <form method=post>\n    <dl>\n      <dt>Username:\n      <dd><input type=text name=username value=\"{{ request.form.username }}\">\n      <dt>Password:\n      <dd><input type=password name=password>\n    </dl>\n    <p><input type=submit value=Login>\n  </form>\n{% endblock %}\n```\n\n## Flashing With Categories\n\nChangelog\n\nAdded in version 0.3.\n\nIt is also possible to provide categories when flashing a message. The default category if nothing is provided is 'message'. Alternative categories can be used to give the user better feedback. For example error messages could be displayed with a red background.\n\nTo flash a message with a different category, just use the second argument to the [`flash()`](https://flask.palletsprojects.com/en/stable/api/#flask.flash \"flask.flash\") function:\n\n```\nflash('Invalid password provided', 'error')\n```\n\nInside the template you then have to tell the [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\") function to also return the categories. The loop looks slightly different in that situation then:\n\n```\n{% with messages = get_flashed_messages(with_categories=true) %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for category, message in messages %}\n      <li class=\"{{ category }}\">{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n```\n\n## Filtering Flash Messages\n\nChangelog\n\nAdded in version 0.9.\n\nOptionally you can pass a list of categories which filters the results of [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\"). This is useful if you wish to render each category in a separate block.\n\n```\n{% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n{% if errors %}\n<div class=\"alert-message block-message error\">\n  <a class=\"close\" href=\"#\">×</a>\n  <ul>\n    {%- for msg in errors %}\n    <li>{{ msg }}</li>\n    {% endfor -%}\n  </ul>\n</div>\n{% endif %}\n{% endwith %}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "overview", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I message flashing in flask-stable?\n\nAssistant: To message flashing in flask-stable, here's what you do:\nGood applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it next request and only next request. This is usually combined with a layout template that does this. Note that browsers and sometimes web servers enforce a limit on cookie sizes. This means that flashing messages that are too large for session cookies causes message flashing to fail silently..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I simple flashing in flask-stable?\n\nAssistant: To simple flashing in flask-stable, here's what you do:\nSo here is a full example:\n\n```\nfrom flask import Flask, flash, redirect, render_template, \\\n     request, url_for\n\napp = Flask(__name__)\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if request.form['username'] != 'admin' or \\\n                request.form['password'] != 'secret':\n            error = 'Invalid credentials'\n        else:\n            flash('You were successfully logged in')\n            return redirect(url_for('index'))\n    return render_template('login.html', error=error)\n```\n\nAnd here is the `layout.html` template which does the magic:\n\n```\n<!doctype html>\n<title>My Application</title>\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n{% block body %}{% endblock %}\n```\n\nHere is the `index.html` template which inherits from `layout.html`:\n\n```\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>Overview</h1>\n  <p>Do you want to <a href=\"{{ url_for('login') }}\">log in?</a>\n{% endblock %}\n```\n\nAnd here is the `login.html` template which also inherits from `layout.html`:\n\n```\n{% extends \"layout.html\" %}\n{% block body %}\n  <h1>Login</h1>\n  {% if error %}\n    <p class=error><strong>Error:</strong> {{ error }}\n  {% endif %}\n  <form method=post>\n    <dl>\n      <dt>Username:\n      <dd><input type=text name=username value=\"{{ request.form.username }}\">\n      <dt>Password:\n      <dd><input type=password name=password>\n    </dl>\n    <p><input type=submit value=Login>\n  </form>\n{% endblock %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I flashing with categories in flask-stable?\n\nAssistant: To flashing with categories in flask-stable, here's what you do:\nChangelog\n\nAdded in version 0.3.\n\nIt is also possible to provide categories when flashing a message. The default category if nothing is provided is 'message'. Alternative categories can be used to give the user better feedback. For example error messages could be displayed with a red background.\n\nTo flash a message with a different category, just use the second argument to the [`flash()`](https://flask.palletsprojects.com/en/stable/api/#flask.flash \"flask.flash\") function:\n\n```\nflash('Invalid password provided', 'error')\n```\n\nInside the template you then have to tell the [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\") function to also return the categories. The loop looks slightly different in that situation then:\n\n```\n{% with messages = get_flashed_messages(with_categories=true) %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for category, message in messages %}\n      <li class=\"{{ category }}\">{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I filtering flash messages in flask-stable?\n\nAssistant: To filtering flash messages in flask-stable, here's what you do:\nChangelog\n\nAdded in version 0.9.\n\nOptionally you can pass a list of categories which filters the results of [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\"). This is useful if you wish to render each category in a separate block.\n\n```\n{% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n{% if errors %}\n<div class=\"alert-message block-message error\">\n  <a class=\"close\" href=\"#\">×</a>\n  <ul>\n    {%- for msg in errors %}\n    <li>{{ msg }}</li>\n    {% endfor -%}\n  </ul>\n</div>\n{% endif %}\n{% endwith %}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Message Flashing in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Simple Flashing Example**:\n\n```yaml\nfrom flask import Flask, flash, redirect, render_template, \\n     request, url_for\\n\\napp = Flask(__name__)\\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@app.route('/login', methods=['GET', 'POST'])\\ndef login():\\n    error = None\\n    if request.method == 'POST':\\n        if request.form['username'] != 'admin' or \\\\n                request.form['password'] != 'secret':\\n            error = 'Invalid credentials'\\n        else:\\n            flash('You were successfully logged in')\\n            return redirect(url_for('index'))\\n    return render_template('login.html', error=error)\\n\n```\n\nThis snippet shows you how to simple flashing example, which is an important aspect of message flashing.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Message Flashing in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that flashing messages are concise to avoid cookie size limitations.\n\nUse categories for messages to provide better user feedback and styling options.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "title": "Message Flashing", "description": "Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:39:14", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "title": "Message Flashing — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/flashing/", "scrapeId": "8e194404-9640-40af-ba97-9441c447e234", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/flashing", "url": "https://flask.palletsprojects.com/en/stable/patterns/flashing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Background Tasks with Celery is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Background Tasks with Celery in flask-stable.\n\n# Background Tasks with Celery\n\nThis guide will show you how to configure Celery using Flask for handling long-running tasks in the background.Here's a quick rundown of what this is about:\n\n## Install\n\nInstall Celery from PyPI, for example using pip:\n\n```\n$ pip install celery\n```\n\n\n## Integrate Celery with Flask\n\nYou can use Celery without any integration with Flask, but it’s convenient to configure it through Flask’s config, and to let tasks access the Flask application.\n\nCelery uses similar ideas to Flask, with a `Celery` app object that has configuration and registers tasks. While creating a Flask app, use the following code to create and configure a Celery app as well.\n\n```\nfrom celery import Celery, Task\n\ndef celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app\n```\n\nThis creates and returns a `Celery` app object. Celery [configuration](https://celery.readthedocs.io/en/stable/userguide/configuration.html) is taken from the `CELERY` key in the Flask configuration. The Celery app is set as the default, so that it is seen during each request. The `Task` subclass automatically runs task functions with a Flask app context active, so that services like your database connections are available.\n\nHere’s a basic `example.py` that configures Celery to use Redis for communication. We enable a result backend, but ignore results by default. This allows us to store results only for tasks where we care about the result.\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    CELERY=dict(\n        broker_url=\"redis://localhost\",\n        result_backend=\"redis://localhost\",\n        task_ignore_result=True,\n    ),\n)\ncelery_app = celery_init_app(app)\n```\n\nPoint the `celery worker` command at this and it will find the `celery_app` object.\n\n```\n$ celery -A example worker --loglevel INFO\n```\n\nYou can also run the `celery beat` command to run tasks on a schedule. See Celery’s docs for more information about defining schedules.\n\n```\n$ celery -A example beat --loglevel INFO\n```\n\n## Application Factory\n\nWhen using the Flask application factory pattern, call the `celery_init_app` function inside the factory. It sets `app.extensions[\"celery\"]` to the Celery app object, which can be used to get the Celery app from the Flask app returned by the factory.\n\n```\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n    return app\n```\n\nTo use `celery` commands, Celery needs an app object, but that’s no longer directly available. Create a `make_celery.py` file that calls the Flask app factory and gets the Celery app from the returned Flask app.\n\n```\nfrom example import create_app\n\nflask_app = create_app()\ncelery_app = flask_app.extensions[\"celery\"]\n```\n\nPoint the `celery` command to this file.\n\n```\n$ celery -A make_celery worker --loglevel INFO\n$ celery -A make_celery beat --loglevel INFO\n```\n\n## Defining Tasks\n\nUsing `@celery_app.task` to decorate task functions requires access to the `celery_app` object, which won’t be available when using the factory pattern. It also means that the decorated tasks are tied to the specific Flask and Celery app instances, which could be an issue during testing if you change configuration for a test.\n\nInstead, use Celery’s `@shared_task` decorator. This creates task objects that will access whatever the “current app” is, which is a similar concept to Flask’s blueprints and app context. This is why we called `celery_app.set_default()` above.\n\nHere’s an example task that adds two numbers together and returns the result.\n\n```\nfrom celery import shared_task\n\n@shared_task(ignore_result=False)\ndef add_together(a: int, b: int) -> int:\n    return a + b\n```\n\nEarlier, we configured Celery to ignore task results by default. Since we want to know the return value of this task, we set `ignore_result=False`. On the other hand, a task that didn’t need a result, such as sending an email, wouldn’t set this.\n\n## Calling Tasks\n\nThe decorated function becomes a task object with methods to call it in the background. The simplest way is to use the `delay(*args, **kwargs)` method. See Celery’s docs for more methods.\n\nA Celery worker must be running to run the task. Starting a worker is shown in the previous sections.\n\n```\nfrom flask import request\n\n@app.post(\"/add\")\ndef start_add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = add_together.delay(a, b)\n    return {\"result_id\": result.id}\n```\n\nThe route doesn’t get the task’s result immediately. That would defeat the purpose by blocking the response. Instead, we return the running task’s result id, which we can use later to get the result.\n\n## Getting Results\n\nTo fetch the result of the task we started above, we’ll add another route that takes the result id we returned before. We return whether the task is finished (ready), whether it finished successfully, and what the return value (or error) was if it is finished.\n\n```\nfrom celery.result import AsyncResult\n\n@app.get(\"/result/<id>\")\ndef task_result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    return {\n        \"ready\": result.ready(),\n        \"successful\": result.successful(),\n        \"value\": result.result if result.ready() else None,\n    }\n```\n\nNow you can start the task using the first route, then poll for the result using the second route. This keeps the Flask request workers from being blocked waiting for tasks to finish.\n\n## Passing Data to Tasks\n\nThe “add” task above took two integers as arguments. To pass arguments to tasks, Celery has to serialize them to a format that it can pass to other processes. Therefore, passing complex objects is not recommended. For example, it would be impossible to pass a SQLAlchemy model object, since that object is probably not serializable and is tied to the session that queried it.\n\nPass the minimal amount of data necessary to fetch or recreate any complex data within the task. Consider a task that will run when the logged in user asks for an archive of their data. The Flask request knows the logged in user, and has the user object queried from the database. It got that by querying the database for a given id, so the task can do the same thing. Pass the user’s id rather than the user object.\n\n```\n@shared_task\ndef generate_user_archive(user_id: str) -> None:\n    user = db.session.get(User, user_id)\n    ...\ngenerate_user_archive.delay(current_user.id)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I install in flask-stable?\n\nAssistant: To install in flask-stable, here's what you do:\nInstall Celery from PyPI, for example using pip:\n\n```\n$ pip install celery\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I integrate celery with flask in flask-stable?\n\nAssistant: To integrate celery with flask in flask-stable, here's what you do:\nYou can use Celery without any integration with Flask, but it’s convenient to configure it through Flask’s config, and to let tasks access the Flask application.\n\nCelery uses similar ideas to Flask, with a `Celery` app object that has configuration and registers tasks. While creating a Flask app, use the following code to create and configure a Celery app as well.\n\n```\nfrom celery import Celery, Task\n\ndef celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app\n```\n\nThis creates and returns a `Celery` app object. Celery [configuration](https://celery.readthedocs.io/en/stable/userguide/configuration.html) is taken from the `CELERY` key in the Flask configuration. The Celery app is set as the default, so that it is seen during each request. The `Task` subclass automatically runs task functions with a Flask app context active, so that services like your database connections are available.\n\nHere’s a basic `example.py` that configures Celery to use Redis for communication. We enable a result backend, but ignore results by default. This allows us to store results only for tasks where we care about the result.\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    CELERY=dict(\n        broker_url=\"redis://localhost\",\n        result_backend=\"redis://localhost\",\n        task_ignore_result=True,\n    ),\n)\ncelery_app = celery_init_app(app)\n```\n\nPoint the `celery worker` command at this and it will find the `celery_app` object.\n\n```\n$ celery -A example worker --loglevel INFO\n```\n\nYou can also run the `celery beat` command to run tasks on a schedule. See Celery’s docs for more information about defining schedules.\n\n```\n$ celery -A example beat --loglevel INFO\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application factory in flask-stable?\n\nAssistant: To application factory in flask-stable, here's what you do:\nWhen using the Flask application factory pattern, call the `celery_init_app` function inside the factory. It sets `app.extensions[\"celery\"]` to the Celery app object, which can be used to get the Celery app from the Flask app returned by the factory.\n\n```\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n    return app\n```\n\nTo use `celery` commands, Celery needs an app object, but that’s no longer directly available. Create a `make_celery.py` file that calls the Flask app factory and gets the Celery app from the returned Flask app.\n\n```\nfrom example import create_app\n\nflask_app = create_app()\ncelery_app = flask_app.extensions[\"celery\"]\n```\n\nPoint the `celery` command to this file.\n\n```\n$ celery -A make_celery worker --loglevel INFO\n$ celery -A make_celery beat --loglevel INFO\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I defining tasks in flask-stable?\n\nAssistant: To defining tasks in flask-stable, here's what you do:\nUsing `@celery_app.task` to decorate task functions requires access to the `celery_app` object, which won’t be available when using the factory pattern. It also means that the decorated tasks are tied to the specific Flask and Celery app instances, which could be an issue during testing if you change configuration for a test.\n\nInstead, use Celery’s `@shared_task` decorator. This creates task objects that will access whatever the “current app” is, which is a similar concept to Flask’s blueprints and app context. This is why we called `celery_app.set_default()` above.\n\nHere’s an example task that adds two numbers together and returns the result.\n\n```\nfrom celery import shared_task\n\n@shared_task(ignore_result=False)\ndef add_together(a: int, b: int) -> int:\n    return a + b\n```\n\nEarlier, we configured Celery to ignore task results by default. Since we want to know the return value of this task, we set `ignore_result=False`. On the other hand, a task that didn’t need a result, such as sending an email, wouldn’t set this..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I calling tasks in flask-stable?\n\nAssistant: To calling tasks in flask-stable, here's what you do:\nThe decorated function becomes a task object with methods to call it in the background. The simplest way is to use the `delay(*args, **kwargs)` method. See Celery’s docs for more methods.\n\nA Celery worker must be running to run the task. Starting a worker is shown in the previous sections.\n\n```\nfrom flask import request\n\n@app.post(\"/add\")\ndef start_add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = add_together.delay(a, b)\n    return {\"result_id\": result.id}\n```\n\nThe route doesn’t get the task’s result immediately. That would defeat the purpose by blocking the response. Instead, we return the running task’s result id, which we can use later to get the result..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I getting results in flask-stable?\n\nAssistant: To getting results in flask-stable, here's what you do:\nTo fetch the result of the task we started above, we’ll add another route that takes the result id we returned before. We return whether the task is finished (ready), whether it finished successfully, and what the return value (or error) was if it is finished.\n\n```\nfrom celery.result import AsyncResult\n\n@app.get(\"/result/<id>\")\ndef task_result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    return {\n        \"ready\": result.ready(),\n        \"successful\": result.successful(),\n        \"value\": result.result if result.ready() else None,\n    }\n```\n\nNow you can start the task using the first route, then poll for the result using the second route. This keeps the Flask request workers from being blocked waiting for tasks to finish..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I passing data to tasks in flask-stable?\n\nAssistant: To passing data to tasks in flask-stable, here's what you do:\nThe “add” task above took two integers as arguments. To pass arguments to tasks, Celery has to serialize them to a format that it can pass to other processes. Therefore, passing complex objects is not recommended. For example, it would be impossible to pass a SQLAlchemy model object, since that object is probably not serializable and is tied to the session that queried it.\n\nPass the minimal amount of data necessary to fetch or recreate any complex data within the task. Consider a task that will run when the logged in user asks for an archive of their data. The Flask request knows the logged in user, and has the user object queried from the database. It got that by querying the database for a given id, so the task can do the same thing. Pass the user’s id rather than the user object.\n\n```\n@shared_task\ndef generate_user_archive(user_id: str) -> None:\n    user = db.session.get(User, user_id)\n    ...\ngenerate_user_archive.delay(current_user.id)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Background Tasks with Celery in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Celery**:\n\n```yaml\n$ pip install celery\n```\n\nThis snippet shows you how to install celery, which is an important aspect of background tasks with celery.\n\n**Integrate Celery with Flask**:\n\n```yaml\nfrom celery import Celery, Task\n\ndef celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app\n\n```\n\nThis snippet shows you how to integrate celery with flask, which is an important aspect of background tasks with celery.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/celery", "title": "Background Tasks with Celery", "description": "This guide will show you how to configure Celery using Flask for handling long-running tasks in the background.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 03:42:12", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "flask", "title": "Background Tasks with Celery — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/celery/", "readthedocs-version-slug": "stable", "scrapeId": "bc0bebfd-cd9c-4986-8491-c552a5cd464c", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/celery", "url": "https://flask.palletsprojects.com/en/stable/patterns/celery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Templates is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Templates in flask-stable.\n\n# Templates\n\nThis section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.Here's a quick rundown of what this is about:\n\n## Templates\n\nYou’ve written the authentication views for your application, but if you’re running the server and try to go to any of the URLs, you’ll see a `TemplateNotFound` error. That’s because the views are calling [`render_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.render_template \"flask.render_template\"), but you haven’t written the templates yet. The template files will be stored in the `templates` directory inside the `flaskr` package.\n\nTemplates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the [Jinja](https://jinja.palletsprojects.com/templates/) template library to render templates.\n\nIn your application, you will use templates to render [HTML](https://developer.mozilla.org/docs/Web/HTML) which will display in the user’s browser. In Flask, Jinja is configured to _autoescape_ any data that is rendered in HTML templates. This means that it’s safe to render user input; any characters they’ve entered that could mess with the HTML, such as `<` and `>` will be _escaped_ with _safe_ values that look the same in the browser but don’t cause unwanted effects.\n\nJinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between `{{` and `}}` is an expression that will be output to the final document. `{%` and `%}` denotes a control flow statement like `if` and `for`. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation.\n\n## The Base Layout\n\nEach page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will _extend_ a base template and override specific sections.\n\n`flaskr/templates/base.html`\n\n```\n<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1>Flaskr</h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n```\n\n[`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") is automatically available in templates. Based on if `g.user` is set (from `load_logged_in_user`), either the username and a log out link are displayed, or links to register and log in are displayed. [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\") is also automatically available, and is used to generate URLs to views instead of writing them out manually.\n\nAfter the page title, and before the content, the template loops over each message returned by [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\"). You used [`flash()`](https://flask.palletsprojects.com/en/stable/api/#flask.flash \"flask.flash\") in the views to show error messages, and this is the code that will display them.\n\nThere are three blocks defined here that will be overridden in the other templates:\n\n1. `{% block title %}` will change the title displayed in the browser’s tab and window title.\n2. `{% block header %}` is similar to `title` but will change the title displayed on the page.\n3. `{% block content %}` is where the content of each page goes, such as the login form or a blog post.\n\nThe base template is directly in the `templates` directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint.\n\n## Register\n\n`flaskr/templates/auth/register.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Register{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Register\">\n  </form>\n{% endblock %}\n```\n\n`{% extends 'base.html' %}` tells Jinja that this template should replace the blocks from the base template. All the rendered content must appear inside `{% block %}` tags that override blocks from the base template.\n\nA useful pattern used here is to place `{% block title %}` inside `{% block header %}`. This will set the title block and then output the value of it into the header block, so that both the window and page share the same title without writing it twice.\n\nThe `input` tags are using the `required` attribute here. This tells the browser not to submit the form until those fields are filled in. If the user is using an older browser that doesn’t support that attribute, or if they are using something besides a browser to make requests, you still want to validate the data in the Flask view. It’s important to always fully validate the data on the server, even if the client does some validation as well.\n\n## Log In\n\nThis is identical to the register template except for the title and submit button.\n\n`flaskr/templates/auth/login.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Log In{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Log In\">\n  </form>\n{% endblock %}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I templates in flask-stable?\n\nAssistant: To templates in flask-stable, here's what you do:\nYou’ve written the authentication views for your application, but if you’re running the server and try to go to any of the URLs, you’ll see a `TemplateNotFound` error. That’s because the views are calling [`render_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.render_template \"flask.render_template\"), but you haven’t written the templates yet. The template files will be stored in the `templates` directory inside the `flaskr` package.\n\nTemplates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the [Jinja](https://jinja.palletsprojects.com/templates/) template library to render templates.\n\nIn your application, you will use templates to render [HTML](https://developer.mozilla.org/docs/Web/HTML) which will display in the user’s browser. In Flask, Jinja is configured to _autoescape_ any data that is rendered in HTML templates. This means that it’s safe to render user input; any characters they’ve entered that could mess with the HTML, such as `<` and `>` will be _escaped_ with _safe_ values that look the same in the browser but don’t cause unwanted effects.\n\nJinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between `{{` and `}}` is an expression that will be output to the final document. `{%` and `%}` denotes a control flow statement like `if` and `for`. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the base layout in flask-stable?\n\nAssistant: To the base layout in flask-stable, here's what you do:\nEach page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will _extend_ a base template and override specific sections.\n\n`flaskr/templates/base.html`\n\n```\n<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1>Flaskr</h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n```\n\n[`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") is automatically available in templates. Based on if `g.user` is set (from `load_logged_in_user`), either the username and a log out link are displayed, or links to register and log in are displayed. [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\") is also automatically available, and is used to generate URLs to views instead of writing them out manually.\n\nAfter the page title, and before the content, the template loops over each message returned by [`get_flashed_messages()`](https://flask.palletsprojects.com/en/stable/api/#flask.get_flashed_messages \"flask.get_flashed_messages\"). You used [`flash()`](https://flask.palletsprojects.com/en/stable/api/#flask.flash \"flask.flash\") in the views to show error messages, and this is the code that will display them.\n\nThere are three blocks defined here that will be overridden in the other templates:\n\n1. `{% block title %}` will change the title displayed in the browser’s tab and window title.\n2. `{% block header %}` is similar to `title` but will change the title displayed on the page.\n3. `{% block content %}` is where the content of each page goes, such as the login form or a blog post.\n\nThe base template is directly in the `templates` directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I register in flask-stable?\n\nAssistant: To register in flask-stable, here's what you do:\n`flaskr/templates/auth/register.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Register{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Register\">\n  </form>\n{% endblock %}\n```\n\n`{% extends 'base.html' %}` tells Jinja that this template should replace the blocks from the base template. All the rendered content must appear inside `{% block %}` tags that override blocks from the base template.\n\nA useful pattern used here is to place `{% block title %}` inside `{% block header %}`. This will set the title block and then output the value of it into the header block, so that both the window and page share the same title without writing it twice.\n\nThe `input` tags are using the `required` attribute here. This tells the browser not to submit the form until those fields are filled in. If the user is using an older browser that doesn’t support that attribute, or if they are using something besides a browser to make requests, you still want to validate the data in the Flask view. It’s important to always fully validate the data on the server, even if the client does some validation as well..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I log in in flask-stable?\n\nAssistant: To log in in flask-stable, here's what you do:\nThis is identical to the register template except for the title and submit button.\n\n`flaskr/templates/auth/login.html`\n\n```\n{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Log In{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Log In\">\n  </form>\n{% endblock %}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Templates in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Base Layout Template**:\n\n```yaml\n<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1>Flaskr</h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n```\n\nThis snippet shows you how to base layout template, which is an important aspect of templates.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Templates in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways validate data on the server, even if the client does some validation as well.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "title": "Templates", "description": "This section covers how to create and use templates in a Flask application, including the base layout and specific templates for user registration and login.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:04", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/tutorial/templates/", "title": "Templates — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "290e9ce0-6bc0-44fe-b120-eeada4c9c236", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/templates", "url": "https://flask.palletsprojects.com/en/stable/tutorial/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Blueprints and Views is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Blueprints and Views in flask-stable.\n\n# Blueprints and Views\n\nThis section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.Here's a quick rundown of what this is about:\n\n## Create a Blueprint\n\nA `Blueprint` is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.\n\nFlaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you’ll write the authentication one first.\n\n## The First View: Register\n\nWhen the user visits the `/auth/register` URL, the `register` view will return HTML with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.\n\n## Login\n\nThis view follows the same pattern as the `register` view above.\n\n## Logout\n\nTo log out, you need to remove the user id from the `session`. Then `load_logged_in_user` won’t load a user on subsequent requests.\n\n## Require Authentication in Other Views\n\nCreating, editing, and deleting blog posts will require a user to be logged in. A decorator can be used to check this for each view it’s applied to.\n\n## Endpoints and URLs\n\nThe `url_for()` function generates the URL to a view based on a name and arguments. The name associated with a view is also called the endpoint, and by default it’s the same as the name of the view function.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create a blueprint in flask-stable?\n\nAssistant: To create a blueprint in flask-stable, here's what you do:\nA `Blueprint` is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.\n\nFlaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you’ll write the authentication one first..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I the first view: register in flask-stable?\n\nAssistant: To the first view: register in flask-stable, here's what you do:\nWhen the user visits the `/auth/register` URL, the `register` view will return HTML with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I login in flask-stable?\n\nAssistant: To login in flask-stable, here's what you do:\nThis view follows the same pattern as the `register` view above..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I logout in flask-stable?\n\nAssistant: To logout in flask-stable, here's what you do:\nTo log out, you need to remove the user id from the `session`. Then `load_logged_in_user` won’t load a user on subsequent requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I require authentication in other views in flask-stable?\n\nAssistant: To require authentication in other views in flask-stable, here's what you do:\nCreating, editing, and deleting blog posts will require a user to be logged in. A decorator can be used to check this for each view it’s applied to..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I endpoints and urls in flask-stable?\n\nAssistant: To endpoints and urls in flask-stable, here's what you do:\nThe `url_for()` function generates the URL to a view based on a name and arguments. The name associated with a view is also called the endpoint, and by default it’s the same as the name of the view function..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Blueprints and Views in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a Blueprint**:\n\n```yaml\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n```\n\nThis snippet shows you how to create a blueprint, which is an important aspect of blueprints and views.\n\n**Register View Function**:\n\n```yaml\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\\\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n```\n\nThis snippet shows you how to register view function, which is an important aspect of blueprints and views.\n\n**Login View Function**:\n\n```yaml\n@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n\n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n\n        flash(error)\n\n    return render_template('auth/login.html')\n```\n\nThis snippet shows you how to login view function, which is an important aspect of blueprints and views.\n\n**Logout View Function**:\n\n```yaml\n@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n```\n\nThis snippet shows you how to logout view function, which is an important aspect of blueprints and views.\n\n**Load Logged In User Function**:\n\n```yaml\n@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n```\n\nThis snippet shows you how to load logged in user function, which is an important aspect of blueprints and views.\n\n**Login Required Decorator**:\n\n```yaml\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n\n    return wrapped_view\n```\n\nThis snippet shows you how to login required decorator, which is an important aspect of blueprints and views.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Blueprints and Views in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse blueprints to organize related views and code in your Flask application.\n\nAlways validate user input to prevent errors and security issues.\n\nUse hashed passwords for security when storing user credentials.\n\nUtilize decorators to manage authentication and authorization in your views.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/views", "title": "Blueprints and Views", "description": "This section covers how to create blueprints in Flask, manage views, and handle user authentication including registration, login, and logout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:43:24", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/tutorial/views/", "readthedocs-project-slug": "flask", "title": "Blueprints and Views — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "f13eb69c-415f-42e2-9b88-ea0818b2df98", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/views", "url": "https://flask.palletsprojects.com/en/stable/tutorial/views/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what uWSGI is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain uWSGI in flask-stable.\n\n# uWSGI\n\nThis page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.Here's a quick rundown of what this is about:\n\n## Installing\n\nuWSGI has multiple ways to install it. The most straightforward is to install the `pyuwsgi` package, which provides precompiled wheels for common platforms. However, it does not provide SSL support, which can be provided with a reverse proxy instead.\n\nCreate a virtualenv, install your application, then install `pyuwsgi`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install pyuwsgi\n```\n\nIf you have a compiler available, you can install the `uwsgi` package instead. Or install the `pyuwsgi` package from sdist instead of wheel. Either method will include SSL support.\n\n```\n$ pip install uwsgi\n\n# or\n$ pip install --no-binary pyuwsgi pyuwsgi\n```\n\n## Running\n\nThe most basic way to run uWSGI is to tell it to start an HTTP server and import your application.\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: preforking ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 1)\nspawned uWSGI worker 2 (pid: x, cores: 1)\nspawned uWSGI worker 3 (pid: x, cores: 1)\nspawned uWSGI worker 4 (pid: x, cores: 1)\nspawned uWSGI http 1 (pid: x)\n```\n\nIf you’re using the app factory pattern, you’ll need to create a small Python file to create the app, then point uWSGI at that.\n\n`wsgi.py`\n\n```\nfrom hello import create_app\n\napp = create_app()\n```\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app\n```\n\nThe `--http` option starts an HTTP server at 127.0.0.1 port 8000. The `--master` option specifies the standard worker manager. The `-p` option starts 4 worker processes; a starting value could be `CPU * 2`. The `-w` option tells uWSGI how to import your application.\n\n## Binding Externally\n\nuWSGI should not be run as root with the configuration shown in this doc because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of uWSGI. It is possible to run uWSGI as root securely, but that is beyond the scope of this doc.\n\nuWSGI has optimized integration with [Nginx uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html) and [Apache mod_proxy_uwsgi](https://uwsgi-docs.readthedocs.io/en/latest/Apache.html#mod-proxy-uwsgi), and possibly other servers, instead of using a standard HTTP proxy. That configuration is beyond the scope of this doc, see the links for more information.\n\nYou can bind to all external IPs on a non-privileged port using the `--http 0.0.0.0:8000` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n```\n$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n## Async with gevent\n\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, uWSGI provides a [gevent](https://www.gevent.org/) worker. This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent in your own code to see any benefit to using the worker.\n\nWhen using gevent, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: async ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 100)\nspawned uWSGI http 1 (pid: x)\n*** running gevent loop engine [addr:x] ***\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nuWSGI has multiple ways to install it. The most straightforward is to install the `pyuwsgi` package, which provides precompiled wheels for common platforms. However, it does not provide SSL support, which can be provided with a reverse proxy instead.\n\nCreate a virtualenv, install your application, then install `pyuwsgi`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install pyuwsgi\n```\n\nIf you have a compiler available, you can install the `uwsgi` package instead. Or install the `pyuwsgi` package from sdist instead of wheel. Either method will include SSL support.\n\n```\n$ pip install uwsgi\n\n# or\n$ pip install --no-binary pyuwsgi pyuwsgi\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nThe most basic way to run uWSGI is to tell it to start an HTTP server and import your application.\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: preforking ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 1)\nspawned uWSGI worker 2 (pid: x, cores: 1)\nspawned uWSGI worker 3 (pid: x, cores: 1)\nspawned uWSGI worker 4 (pid: x, cores: 1)\nspawned uWSGI http 1 (pid: x)\n```\n\nIf you’re using the app factory pattern, you’ll need to create a small Python file to create the app, then point uWSGI at that.\n\n`wsgi.py`\n\n```\nfrom hello import create_app\n\napp = create_app()\n```\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app\n```\n\nThe `--http` option starts an HTTP server at 127.0.0.1 port 8000. The `--master` option specifies the standard worker manager. The `-p` option starts 4 worker processes; a starting value could be `CPU * 2`. The `-w` option tells uWSGI how to import your application..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\nuWSGI should not be run as root with the configuration shown in this doc because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of uWSGI. It is possible to run uWSGI as root securely, but that is beyond the scope of this doc.\n\nuWSGI has optimized integration with [Nginx uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html) and [Apache mod_proxy_uwsgi](https://uwsgi-docs.readthedocs.io/en/latest/Apache.html#mod-proxy-uwsgi), and possibly other servers, instead of using a standard HTTP proxy. That configuration is beyond the scope of this doc, see the links for more information.\n\nYou can bind to all external IPs on a non-privileged port using the `--http 0.0.0.0:8000` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n```\n$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I async with gevent in flask-stable?\n\nAssistant: To async with gevent in flask-stable, here's what you do:\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, uWSGI provides a [gevent](https://www.gevent.org/) worker. This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent in your own code to see any benefit to using the worker.\n\nWhen using gevent, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\n```\n$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: async ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 100)\nspawned uWSGI http 1 (pid: x)\n*** running gevent loop engine [addr:x] ***\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for uWSGI in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing pyuwsgi**:\n\n```yaml\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install pyuwsgi\n\n```\n\nThis snippet shows you how to installing pyuwsgi, which is an important aspect of uwsgi.\n\n**Installing uwsgi**:\n\n```yaml\n$ pip install uwsgi\n\n# or\n$ pip install --no-binary pyuwsgi pyuwsgi\n\n```\n\nThis snippet shows you how to installing uwsgi, which is an important aspect of uwsgi.\n\n**Running uWSGI**:\n\n```yaml\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app\n\n```\n\nThis snippet shows you how to running uwsgi, which is an important aspect of uwsgi.\n\n**Creating wsgi.py**:\n\n```yaml\nfrom hello import create_app\n\napp = create_app()\n\n```\n\nThis snippet shows you how to creating wsgi.py, which is an important aspect of uwsgi.\n\n**Running uWSGI with wsgi.py**:\n\n```yaml\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app\n\n```\n\nThis snippet shows you how to running uwsgi with wsgi.py, which is an important aspect of uwsgi.\n\n**Binding to all external IPs**:\n\n```yaml\n$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app\n\n```\n\nThis snippet shows you how to binding to all external ips, which is an important aspect of uwsgi.\n\n**Running uWSGI with gevent**:\n\n```yaml\n$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app\n\n```\n\nThis snippet shows you how to running uwsgi with gevent, which is an important aspect of uwsgi.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using uWSGI in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nuWSGI can be very performant due to being a compiled program.\n\nIt is complex to configure beyond the basic application, and has so many options that it can be difficult for beginners to understand.\n\nuWSGI does not support Windows (but does run on WSL).\n\nuWSGI requires a compiler to install in some cases.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "title": "uWSGI", "description": "This page outlines the basics of running uWSGI, a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:47", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/uwsgi/", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "uWSGI — Flask Documentation (3.1.x)", "scrapeId": "dcdd3303-99fc-434b-9d19-184bf4713bc8", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/uwsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what JavaScript, `fetch`, and JSON is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain JavaScript, `fetch`, and JSON in flask-stable.\n\n# JavaScript, `fetch`, and JSON\n\nThis section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.Here's a quick rundown of what this is about:\n\n## Rendering Templates\n\nIt is important to understand the difference between templates and JavaScript. Templates are rendered on the server, before the response is sent to the user’s browser. JavaScript runs in the user’s browser, after the template is rendered and sent. Therefore, it is impossible to use JavaScript to affect how the Jinja template is rendered, but it is possible to render data into the JavaScript that will run.\n\nTo provide data to JavaScript when rendering the template, use the `tojson()` filter in a `<script>` block. This will convert the data to a valid JavaScript object, and ensure that any unsafe HTML characters are rendered safely. If you do not use the `tojson` filter, you will get a `SyntaxError` in the browser console.\n\n```\ndata = generate_report()\nreturn render_template(\"report.html\", chart_data=data)\n```\n\n```\n<script>\n    const chart_data = {{ chart_data|tojson }}\n    chartLib.makeChart(chart_data)\n</script>\n```\n\nA less common pattern is to add the data to a `data-` attribute on an HTML tag. In this case, you must use single quotes around the value, not double quotes, otherwise you will produce invalid or unsafe HTML.\n\n```\n<div data-chart='{{ chart_data|tojson }}'></div>\n``\n\n## Generating URLs\n\nThe other way to get data from the server to JavaScript is to make a request for it. First, you need to know the URL to request.\n\nThe simplest way to generate URLs is to continue to use `url_for()` when rendering the template. For example:\n\n```\nconst user_url = {{ url_for(\"user\", id=current_user.id)|tojson }}\nfetch(user_url).then(...)\n```\n\nHowever, you might need to generate a URL based on information you only know in JavaScript. As discussed above, JavaScript runs in the user’s browser, not as part of the template rendering, so you can’t use `url_for` at that point.\n\nIn this case, you need to know the “root URL” under which your application is served. In simple setups, this is `/`, but it might also be something else, like `https://example.com/myapp/`.\n\nA simple way to tell your JavaScript code about this root is to set it as a global variable when rendering the template. Then you can use it when generating URLs from JavaScript.\n\n```\nconst SCRIPT_ROOT = {{ request.script_root|tojson }}\nlet user_id = ...  // do something to get a user id from the page\nlet user_url = `${SCRIPT_ROOT}/user/${user_id}`\nfetch(user_url).then(...)\n``\n\n## Making a Request with `fetch`\n\n`fetch()` takes two arguments, a URL and an object with other options, and returns a `Promise`. We won’t cover all the available options, and will only use `then()` on the promise, not other callbacks or `await` syntax. Read the linked MDN docs for more information about those features.\n\nBy default, the GET method is used. If the response contains JSON, it can be used with a `then()` callback chain.\n\n```\nconst room_url = {{ url_for(\"room_detail\", id=room.id)|tojson }}\nfetch(room_url)\n    .then(response => response.json())\n    .then(data => {\n        // data is a parsed JSON object\n    })\n```\n\nTo send data, use a data method such as POST, and pass the `body` option. The most common types for data are form data or JSON data.\n\nTo send form data, pass a populated `FormData` object. This uses the same format as an HTML form, and would be accessed with `request.form` in a Flask view.\n\n```\nlet data = new FormData()\ndata.append(\"name\", \"Flask Room\")\ndata.append(\"description\", \"Talk about Flask here.\")\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"body\": data,\n}).then(...)\n```\n\nIn general, prefer sending request data as form data, as would be used when submitting an HTML form. JSON can represent more complex data, but unless you need that it’s better to stick with the simpler format. When sending JSON data, the `Content-Type: application/json` header must be sent as well, otherwise Flask will return a 400 error.\n\n```\nlet data = {\n    \"name\": \"Flask Room\",\n    \"description\": \"Talk about Flask here.\",\n}\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"headers\": {\"Content-Type\": \"application/json\"},\n    \"body\": JSON.stringify(data),\n}).then(...)\n``\n\n## Following Redirects\n\nA response might be a redirect, for example if you logged in with JavaScript instead of a traditional HTML form, and your view returned a redirect instead of JSON. JavaScript requests do follow redirects, but they don’t change the page. If you want to make the page change you can inspect the response and apply the redirect manually.\n\n```\nfetch(\"/login\", {\"body\": ...}).then(\n    response => {\n        if (response.redirected) {\n            window.location = response.url\n        } else {\n            showLoginError()\n        }\n    }\n)\n``\n\n## Replacing Content\n\nA response might be new HTML, either a new section of the page to add or replace, or an entirely new page. In general, if you’re returning the entire page, it would be better to handle that with a redirect as shown in the previous section. The following example shows how to replace a `<div>` with the HTML returned by a request.\n\n```\n<div id=\"geology-fact\">\n    {{ include \"geology_fact.html\" }}\n</div>\n<script>\n    const geology_url = {{ url_for(\"geology_fact\")|tojson }}\n    const geology_div = getElementById(\"geology-fact\")\n    fetch(geology_url)\n        .then(response => response.text)\n        .then(text => geology_div.innerHTML = text)\n</script>\n``\n\n## Return JSON from Views\n\nTo return a JSON object from your API view, you can directly return a dict from the view. It will be serialized to JSON automatically.\n\n```\n@app.route(\"/user/<int:id>\")\ndef user_detail(id):\n    user = User.query.get_or_404(id)\n    return {\n        \"username\": User.username,\n        \"email\": User.email,\n        \"picture\": url_for(\"static\", filename=f\"users/{id}/profile.png\"),\n    }\n```\n\nIf you want to return another JSON type, use the `jsonify()` function, which creates a response object with the given data serialized to JSON.\n\n```\nfrom flask import jsonify\n\n@app.route(\"/users\")\ndef user_list():\n    users = User.query.order_by(User.name).all()\n    return jsonify([u.to_json() for u in users])\n```\n\nIt is usually not a good idea to return file data in a JSON response. JSON cannot represent binary data directly, so it must be base64 encoded, which can be slow, takes more bandwidth to send, and is not as easy to cache. Instead, serve files using one view, and generate a URL to the desired file to include in the JSON. Then the client can make a separate request to get the linked resource after getting the JSON.\n\n## Receiving JSON in Views\n\nUse the `json` property of the `request` object to decode the request’s body as JSON. If the body is not valid JSON, or the `Content-Type` header is not set to `application/json`, a 400 Bad Request error will be raised.\n\n```\nfrom flask import request\n\n@app.post(\"/user/<int:id>\")\ndef user_update(id):\n    user = User.query.get_or_404(id)\n    user.update_from_json(request.json)\n    db.session.commit()\n    return user.to_json()\n``\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I rendering templates in flask-stable?\n\nAssistant: To rendering templates in flask-stable, here's what you do:\nIt is important to understand the difference between templates and JavaScript. Templates are rendered on the server, before the response is sent to the user’s browser. JavaScript runs in the user’s browser, after the template is rendered and sent. Therefore, it is impossible to use JavaScript to affect how the Jinja template is rendered, but it is possible to render data into the JavaScript that will run.\n\nTo provide data to JavaScript when rendering the template, use the `tojson()` filter in a `<script>` block. This will convert the data to a valid JavaScript object, and ensure that any unsafe HTML characters are rendered safely. If you do not use the `tojson` filter, you will get a `SyntaxError` in the browser console.\n\n```\ndata = generate_report()\nreturn render_template(\"report.html\", chart_data=data)\n```\n\n```\n<script>\n    const chart_data = {{ chart_data|tojson }}\n    chartLib.makeChart(chart_data)\n</script>\n```\n\nA less common pattern is to add the data to a `data-` attribute on an HTML tag. In this case, you must use single quotes around the value, not double quotes, otherwise you will produce invalid or unsafe HTML.\n\n```\n<div data-chart='{{ chart_data|tojson }}'></div>\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I generating urls in flask-stable?\n\nAssistant: To generating urls in flask-stable, here's what you do:\nThe other way to get data from the server to JavaScript is to make a request for it. First, you need to know the URL to request.\n\nThe simplest way to generate URLs is to continue to use `url_for()` when rendering the template. For example:\n\n```\nconst user_url = {{ url_for(\"user\", id=current_user.id)|tojson }}\nfetch(user_url).then(...)\n```\n\nHowever, you might need to generate a URL based on information you only know in JavaScript. As discussed above, JavaScript runs in the user’s browser, not as part of the template rendering, so you can’t use `url_for` at that point.\n\nIn this case, you need to know the “root URL” under which your application is served. In simple setups, this is `/`, but it might also be something else, like `https://example.com/myapp/`.\n\nA simple way to tell your JavaScript code about this root is to set it as a global variable when rendering the template. Then you can use it when generating URLs from JavaScript.\n\n```\nconst SCRIPT_ROOT = {{ request.script_root|tojson }}\nlet user_id = ...  // do something to get a user id from the page\nlet user_url = `${SCRIPT_ROOT}/user/${user_id}`\nfetch(user_url).then(...)\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I making a request with `fetch` in flask-stable?\n\nAssistant: To making a request with `fetch` in flask-stable, here's what you do:\n`fetch()` takes two arguments, a URL and an object with other options, and returns a `Promise`. We won’t cover all the available options, and will only use `then()` on the promise, not other callbacks or `await` syntax. Read the linked MDN docs for more information about those features.\n\nBy default, the GET method is used. If the response contains JSON, it can be used with a `then()` callback chain.\n\n```\nconst room_url = {{ url_for(\"room_detail\", id=room.id)|tojson }}\nfetch(room_url)\n    .then(response => response.json())\n    .then(data => {\n        // data is a parsed JSON object\n    })\n```\n\nTo send data, use a data method such as POST, and pass the `body` option. The most common types for data are form data or JSON data.\n\nTo send form data, pass a populated `FormData` object. This uses the same format as an HTML form, and would be accessed with `request.form` in a Flask view.\n\n```\nlet data = new FormData()\ndata.append(\"name\", \"Flask Room\")\ndata.append(\"description\", \"Talk about Flask here.\")\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"body\": data,\n}).then(...)\n```\n\nIn general, prefer sending request data as form data, as would be used when submitting an HTML form. JSON can represent more complex data, but unless you need that it’s better to stick with the simpler format. When sending JSON data, the `Content-Type: application/json` header must be sent as well, otherwise Flask will return a 400 error.\n\n```\nlet data = {\n    \"name\": \"Flask Room\",\n    \"description\": \"Talk about Flask here.\",\n}\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"headers\": {\"Content-Type\": \"application/json\"},\n    \"body\": JSON.stringify(data),\n}).then(...)\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I following redirects in flask-stable?\n\nAssistant: To following redirects in flask-stable, here's what you do:\nA response might be a redirect, for example if you logged in with JavaScript instead of a traditional HTML form, and your view returned a redirect instead of JSON. JavaScript requests do follow redirects, but they don’t change the page. If you want to make the page change you can inspect the response and apply the redirect manually.\n\n```\nfetch(\"/login\", {\"body\": ...}).then(\n    response => {\n        if (response.redirected) {\n            window.location = response.url\n        } else {\n            showLoginError()\n        }\n    }\n)\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I replacing content in flask-stable?\n\nAssistant: To replacing content in flask-stable, here's what you do:\nA response might be new HTML, either a new section of the page to add or replace, or an entirely new page. In general, if you’re returning the entire page, it would be better to handle that with a redirect as shown in the previous section. The following example shows how to replace a `<div>` with the HTML returned by a request.\n\n```\n<div id=\"geology-fact\">\n    {{ include \"geology_fact.html\" }}\n</div>\n<script>\n    const geology_url = {{ url_for(\"geology_fact\")|tojson }}\n    const geology_div = getElementById(\"geology-fact\")\n    fetch(geology_url)\n        .then(response => response.text)\n        .then(text => geology_div.innerHTML = text)\n</script>\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I return json from views in flask-stable?\n\nAssistant: To return json from views in flask-stable, here's what you do:\nTo return a JSON object from your API view, you can directly return a dict from the view. It will be serialized to JSON automatically.\n\n```\n@app.route(\"/user/<int:id>\")\ndef user_detail(id):\n    user = User.query.get_or_404(id)\n    return {\n        \"username\": User.username,\n        \"email\": User.email,\n        \"picture\": url_for(\"static\", filename=f\"users/{id}/profile.png\"),\n    }\n```\n\nIf you want to return another JSON type, use the `jsonify()` function, which creates a response object with the given data serialized to JSON.\n\n```\nfrom flask import jsonify\n\n@app.route(\"/users\")\ndef user_list():\n    users = User.query.order_by(User.name).all()\n    return jsonify([u.to_json() for u in users])\n```\n\nIt is usually not a good idea to return file data in a JSON response. JSON cannot represent binary data directly, so it must be base64 encoded, which can be slow, takes more bandwidth to send, and is not as easy to cache. Instead, serve files using one view, and generate a URL to the desired file to include in the JSON. Then the client can make a separate request to get the linked resource after getting the JSON..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I receiving json in views in flask-stable?\n\nAssistant: To receiving json in views in flask-stable, here's what you do:\nUse the `json` property of the `request` object to decode the request’s body as JSON. If the body is not valid JSON, or the `Content-Type` header is not set to `application/json`, a 400 Bad Request error will be raised.\n\n```\nfrom flask import request\n\n@app.post(\"/user/<int:id>\")\ndef user_update(id):\n    user = User.query.get_or_404(id)\n    user.update_from_json(request.json)\n    db.session.commit()\n    return user.to_json()\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for JavaScript, `fetch`, and JSON in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Rendering Templates Example**:\n\n```yaml\ndata = generate_report()\nreturn render_template(\"report.html\", chart_data=data)\n```\n\nThis snippet shows you how to rendering templates example, which is an important aspect of javascript, `fetch`, and json.\n\n**JavaScript Template Rendering Example**:\n\n```yaml\n<script>\n    const chart_data = {{ chart_data|tojson }}\n    chartLib.makeChart(chart_data)\n</script>\n```\n\nThis snippet shows you how to javascript template rendering example, which is an important aspect of javascript, `fetch`, and json.\n\n**Generating URLs Example**:\n\n```yaml\nconst user_url = {{ url_for(\"user\", id=current_user.id)|tojson }}\nfetch(user_url).then(...)\n```\n\nThis snippet shows you how to generating urls example, which is an important aspect of javascript, `fetch`, and json.\n\n**Making a Request with fetch Example**:\n\n```yaml\nconst room_url = {{ url_for(\"room_detail\", id=room.id)|tojson }}\nfetch(room_url)\n    .then(response => response.json())\n    .then(data => {\n        // data is a parsed JSON object\n    })\n```\n\nThis snippet shows you how to making a request with fetch example, which is an important aspect of javascript, `fetch`, and json.\n\n**Sending Form Data Example**:\n\n```yaml\nlet data = new FormData()\ndata.append(\"name\", \"Flask Room\")\ndata.append(\"description\", \"Talk about Flask here.\")\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"body\": data,\n}).then(...)\n```\n\nThis snippet shows you how to sending form data example, which is an important aspect of javascript, `fetch`, and json.\n\n**Sending JSON Data Example**:\n\n```yaml\nlet data = {\n    \"name\": \"Flask Room\",\n    \"description\": \"Talk about Flask here.\",\n}\nfetch(room_url, {\n    \"method\": \"POST\",\n    \"headers\": {\"Content-Type\": \"application/json\"},\n    \"body\": JSON.stringify(data),\n}).then(...)\n```\n\nThis snippet shows you how to sending json data example, which is an important aspect of javascript, `fetch`, and json.\n\n**Following Redirects Example**:\n\n```yaml\nfetch(\"/login\", {\"body\": ...}).then(\n    response => {\n        if (response.redirected) {\n            window.location = response.url\n        } else {\n            showLoginError()\n        }\n    }\n)\n```\n\nThis snippet shows you how to following redirects example, which is an important aspect of javascript, `fetch`, and json.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using JavaScript, `fetch`, and JSON in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPrefer sending request data as form data when possible.\n\nWhen sending JSON data, ensure to set the Content-Type header to application/json.\n\nAvoid returning file data in JSON responses; instead, serve files using a separate view.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "title": "JavaScript, `fetch`, and JSON", "description": "This section covers how to make HTML pages dynamic using JavaScript, specifically focusing on the `fetch()` API for making requests and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:44:35", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/javascript/", "readthedocs-project-slug": "flask", "language": "en", "title": "JavaScript, fetch, and JSON — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "scrapeId": "7c3273f0-87e3-4547-b3f1-9e34971da154", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/javascript", "url": "https://flask.palletsprojects.com/en/stable/patterns/javascript/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Define and Access the Database is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Define and Access the Database in flask-stable.\n\n# Define and Access the Database\n\nThe application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.Here's a quick rundown of what this is about:\n\n## Connect to the Database\n\nThe first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished.\n\nIn web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent.\n\n`flaskr/db.py`\n\n```\nimport sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n`g` is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if `get_db` is called a second time in the same request.\n\n`current_app` is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code. `get_db` will be called when the application has been created and is handling a request, so `current_app` can be used.\n\n`sqlite3.connect()` establishes a connection to the file pointed at by the `DATABASE` configuration key. This file doesn’t have to exist yet, and won’t until you initialize the database later.\n\n`sqlite3.Row` tells the connection to return rows that behave like dicts. This allows accessing the columns by name.\n\n`close_db` checks if a connection was created by checking if `g.db` was set. If the connection exists, it is closed. Further down you will tell your application about the `close_db` function in the application factory so that it is called after each request.\n\n## Create the Tables\n\nIn SQLite, data is stored in _tables_ and _columns_. These need to be created before you can store and retrieve data. Flaskr will store users in the `user` table, and posts in the `post` table. Create a file with the SQL commands needed to create empty tables:\n\n`flaskr/schema.sql`\n\n```\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\nAdd the Python functions that will run these SQL commands to the `db.py` file:\n\n`flaskr/db.py`\n\n```\ndef init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n\nsqlite3.register_converter(\n    \"timestamp\", lambda v: datetime.fromisoformat(v.decode())\n)\n```\n\n`open_resource()` opens a file relative to the `flaskr` package, which is useful since you won’t necessarily know where that location is when deploying the application later. `get_db` returns a database connection, which is used to execute the commands read from the file.\n\n`click.command()` defines a command line command called `init-db` that calls the `init_db` function and shows a success message to the user. You can read Command Line Interface to learn more about writing commands.\n\nThe call to `sqlite3.register_converter()` tells Python how to interpret timestamp values in the database. We convert the value to a `datetime.datetime`.\n\n## Register with the Application\n\nThe `close_db` and `init_db_command` functions need to be registered with the application instance; otherwise, they won’t be used by the application. However, since you’re using a factory function, that instance isn’t available when writing the functions. Instead, write a function that takes an application and does the registration.\n\n`flaskr/db.py`\n\n```\ndef init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n```\n\n`app.teardown_appcontext()` tells Flask to call that function when cleaning up after returning the response.\n\n`app.cli.add_command()` adds a new command that can be called with the `flask` command.\n\nImport and call this function from the factory. Place the new code at the end of the factory function before returning the app.\n\n`flaskr/__init__.py`\n\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import db\n    db.init_app(app)\n\n    return app\n```\n\n\n## Initialize the Database File\n\nNow that `init-db` has been registered with the app, it can be called using the `flask` command, similar to the `run` command from the previous page.\n\nNote\n\nIf you’re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in Installation.\n\nRun the `init-db` command:\n\n```\n$ flask --app flaskr init-db\nInitialized the database.\n```\n\nThere will now be a `flaskr.sqlite` file in the `instance` folder in your project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "overview", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I connect to the database in flask-stable?\n\nAssistant: To connect to the database in flask-stable, here's what you do:\nThe first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished.\n\nIn web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent.\n\n`flaskr/db.py`\n\n```\nimport sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n`g` is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if `get_db` is called a second time in the same request.\n\n`current_app` is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code. `get_db` will be called when the application has been created and is handling a request, so `current_app` can be used.\n\n`sqlite3.connect()` establishes a connection to the file pointed at by the `DATABASE` configuration key. This file doesn’t have to exist yet, and won’t until you initialize the database later.\n\n`sqlite3.Row` tells the connection to return rows that behave like dicts. This allows accessing the columns by name.\n\n`close_db` checks if a connection was created by checking if `g.db` was set. If the connection exists, it is closed. Further down you will tell your application about the `close_db` function in the application factory so that it is called after each request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "section_detail", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create the tables in flask-stable?\n\nAssistant: To create the tables in flask-stable, here's what you do:\nIn SQLite, data is stored in _tables_ and _columns_. These need to be created before you can store and retrieve data. Flaskr will store users in the `user` table, and posts in the `post` table. Create a file with the SQL commands needed to create empty tables:\n\n`flaskr/schema.sql`\n\n```\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n```\n\nAdd the Python functions that will run these SQL commands to the `db.py` file:\n\n`flaskr/db.py`\n\n```\ndef init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n\nsqlite3.register_converter(\n    \"timestamp\", lambda v: datetime.fromisoformat(v.decode())\n)\n```\n\n`open_resource()` opens a file relative to the `flaskr` package, which is useful since you won’t necessarily know where that location is when deploying the application later. `get_db` returns a database connection, which is used to execute the commands read from the file.\n\n`click.command()` defines a command line command called `init-db` that calls the `init_db` function and shows a success message to the user. You can read Command Line Interface to learn more about writing commands.\n\nThe call to `sqlite3.register_converter()` tells Python how to interpret timestamp values in the database. We convert the value to a `datetime.datetime`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "section_detail", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I register with the application in flask-stable?\n\nAssistant: To register with the application in flask-stable, here's what you do:\nThe `close_db` and `init_db_command` functions need to be registered with the application instance; otherwise, they won’t be used by the application. However, since you’re using a factory function, that instance isn’t available when writing the functions. Instead, write a function that takes an application and does the registration.\n\n`flaskr/db.py`\n\n```\ndef init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n```\n\n`app.teardown_appcontext()` tells Flask to call that function when cleaning up after returning the response.\n\n`app.cli.add_command()` adds a new command that can be called with the `flask` command.\n\nImport and call this function from the factory. Place the new code at the end of the factory function before returning the app.\n\n`flaskr/__init__.py`\n\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import db\n    db.init_app(app)\n\n    return app\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "section_detail", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I initialize the database file in flask-stable?\n\nAssistant: To initialize the database file in flask-stable, here's what you do:\nNow that `init-db` has been registered with the app, it can be called using the `flask` command, similar to the `run` command from the previous page.\n\nNote\n\nIf you’re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in Installation.\n\nRun the `init-db` command:\n\n```\n$ flask --app flaskr init-db\nInitialized the database.\n```\n\nThere will now be a `flaskr.sqlite` file in the `instance` folder in your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "section_detail", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Define and Access the Database in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Connect to the Database**:\n\n```yaml\nimport sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\nThis snippet shows you how to connect to the database, which is an important aspect of define and access the database.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/database", "title": "Define and Access the Database", "description": "The application will use a SQLite database to store users and posts. Python comes with built-in support for SQLite in the sqlite3 module.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:45:02", "type": "code_examples", "page_metadata": {"title": "Define and Access the Database — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/tutorial/database/", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "7cdcab25-7be1-408f-9609-26248a3f5aca", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/database", "url": "https://flask.palletsprojects.com/en/stable/tutorial/database/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Large Applications as Packages is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Large Applications as Packages in flask-stable.\n\n# Large Applications as Packages\n\nThis section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.Here's a quick rundown of what this is about:\n\n## Large Applications as Packages\n\nImagine a simple flask application structure that looks like this:\n\n```\n/yourapplication\n    yourapplication.py\n    /static\n        style.css\n    /templates\n        layout.html\n        index.html\n        login.html\n        ...\n```\n\nWhile this is fine for small applications, for larger applications it’s a good idea to use a package instead of a module. The [Tutorial](https://flask.palletsprojects.com/en/stable/tutorial/) is structured to use the package pattern, see the [example code](https://github.com/pallets/flask/tree/main/examples/tutorial).\n\n## Simple Packages\n\nTo convert that into a larger one, just create a new folder `yourapplication` inside the existing one and move everything below it. Then rename `yourapplication.py` to `__init__.py`. (Make sure to delete all `.pyc` files first, otherwise things would most likely break)\n\nYou should then end up with something like that:\n\n```\n/yourapplication\n    /yourapplication\n        __init__.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            login.html\n            ...\n```\n\nBut how do you run your application now? The naive `python yourapplication/__init__.py` will not work. Let’s just say that Python does not want modules in packages to be the startup file. But that is not a big problem, just add a new file called `pyproject.toml` next to the inner `yourapplication` folder with the following contents:\n\n```\n[project]\nname = \"yourapplication\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nInstall your application so it is importable:\n\n```\n$ pip install -e .\n```\n\nTo use the `flask` command and run your application you need to set the `--app` option that tells Flask where to find the application instance:\n\n```\n$ flask --app yourapplication run\n```\n\nWhat did we gain from this? Now we can restructure the application a bit into multiple modules. The only thing you have to remember is the following quick checklist:\n\n1. the `Flask` application object creation has to be in the `__init__.py` file. That way each module can import it safely and the `__name__` variable will resolve to the correct package.\n\n2. all the view functions (the ones with a [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorator on top) have to be imported in the `__init__.py` file. Not the object itself, but the module it is in. Import the view module **after the application object is created**.\n\nHere’s an example `__init__.py`:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\nimport yourapplication.views\n```\n\nAnd this is what `views.py` would look like:\n\n```\nfrom yourapplication import app\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\nYou should then end up with something like that:\n\n```\n/yourapplication\n    pyproject.toml\n    /yourapplication\n        __init__.py\n        views.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            login.html\n            ...\n```\n\nCircular Imports\n\nEvery Python programmer hates them, and yet we just added some: circular imports (That’s when two modules depend on each other. In this case `views.py` depends on `__init__.py`). Be advised that this is a bad idea in general but here it is actually fine. The reason for this is that we are not actually using the views in `__init__.py` and just ensuring the module is imported and we are doing that at the bottom of the file.\n\n## Working with Blueprints\n\nIf you have larger applications it’s recommended to divide them into smaller groups where each group is implemented with the help of a blueprint. For a gentle introduction into this topic refer to the [Modular Applications with Blueprints](https://flask.palletsprojects.com/en/stable/blueprints/) chapter of the documentation.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I large applications as packages in flask-stable?\n\nAssistant: To large applications as packages in flask-stable, here's what you do:\nImagine a simple flask application structure that looks like this:\n\n```\n/yourapplication\n    yourapplication.py\n    /static\n        style.css\n    /templates\n        layout.html\n        index.html\n        login.html\n        ...\n```\n\nWhile this is fine for small applications, for larger applications it’s a good idea to use a package instead of a module. The [Tutorial](https://flask.palletsprojects.com/en/stable/tutorial/) is structured to use the package pattern, see the [example code](https://github.com/pallets/flask/tree/main/examples/tutorial)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I simple packages in flask-stable?\n\nAssistant: To simple packages in flask-stable, here's what you do:\nTo convert that into a larger one, just create a new folder `yourapplication` inside the existing one and move everything below it. Then rename `yourapplication.py` to `__init__.py`. (Make sure to delete all `.pyc` files first, otherwise things would most likely break)\n\nYou should then end up with something like that:\n\n```\n/yourapplication\n    /yourapplication\n        __init__.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            login.html\n            ...\n```\n\nBut how do you run your application now? The naive `python yourapplication/__init__.py` will not work. Let’s just say that Python does not want modules in packages to be the startup file. But that is not a big problem, just add a new file called `pyproject.toml` next to the inner `yourapplication` folder with the following contents:\n\n```\n[project]\nname = \"yourapplication\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nInstall your application so it is importable:\n\n```\n$ pip install -e .\n```\n\nTo use the `flask` command and run your application you need to set the `--app` option that tells Flask where to find the application instance:\n\n```\n$ flask --app yourapplication run\n```\n\nWhat did we gain from this? Now we can restructure the application a bit into multiple modules. The only thing you have to remember is the following quick checklist:\n\n1. the `Flask` application object creation has to be in the `__init__.py` file. That way each module can import it safely and the `__name__` variable will resolve to the correct package.\n\n2. all the view functions (the ones with a [`route()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.route \"flask.Flask.route\") decorator on top) have to be imported in the `__init__.py` file. Not the object itself, but the module it is in. Import the view module **after the application object is created**.\n\nHere’s an example `__init__.py`:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\nimport yourapplication.views\n```\n\nAnd this is what `views.py` would look like:\n\n```\nfrom yourapplication import app\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\nYou should then end up with something like that:\n\n```\n/yourapplication\n    pyproject.toml\n    /yourapplication\n        __init__.py\n        views.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            login.html\n            ...\n```\n\nCircular Imports\n\nEvery Python programmer hates them, and yet we just added some: circular imports (That’s when two modules depend on each other. In this case `views.py` depends on `__init__.py`). Be advised that this is a bad idea in general but here it is actually fine. The reason for this is that we are not actually using the views in `__init__.py` and just ensuring the module is imported and we are doing that at the bottom of the file..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I working with blueprints in flask-stable?\n\nAssistant: To working with blueprints in flask-stable, here's what you do:\nIf you have larger applications it’s recommended to divide them into smaller groups where each group is implemented with the help of a blueprint. For a gentle introduction into this topic refer to the [Modular Applications with Blueprints](https://flask.palletsprojects.com/en/stable/blueprints/) chapter of the documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Large Applications as Packages in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**pyproject.toml**:\n\n```yaml\n[project]\nname = \"yourapplication\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nThis snippet shows you how to pyproject.toml, which is an important aspect of large applications as packages.\n\n**Install Application Command**:\n\n```yaml\n$ pip install -e .\n```\n\nThis snippet shows you how to install application command, which is an important aspect of large applications as packages.\n\n**Run Application Command**:\n\n```yaml\n$ flask --app yourapplication run\n```\n\nThis snippet shows you how to run application command, which is an important aspect of large applications as packages.\n\n**Example __init__.py**:\n\n```yaml\nfrom flask import Flask\napp = Flask(__name__)\n\nimport yourapplication.views\n```\n\nThis snippet shows you how to example __init__.py, which is an important aspect of large applications as packages.\n\n**Example views.py**:\n\n```yaml\nfrom yourapplication import app\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n```\n\nThis snippet shows you how to example views.py, which is an important aspect of large applications as packages.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Large Applications as Packages in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure to delete all .pyc files before restructuring your application.\n\nThe Flask application object creation has to be in the __init__.py file.\n\nAll view functions must be imported in the __init__.py file after the application object is created.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/packages", "title": "Large Applications as Packages", "description": "This section covers how to structure larger Flask applications using packages instead of modules, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:54", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "Large Applications as Packages — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/packages/", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "7f3cdac7-c368-40d1-bf8b-32a98e57b6fd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/packages", "url": "https://flask.palletsprojects.com/en/stable/patterns/packages/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Application Factories is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Application Factories in flask-stable.\n\n# Application Factories\n\nThis section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.Here's a quick rundown of what this is about:\n\n## Application Factories\n\nIf you are already using packages and blueprints for your application (Modular Applications with Blueprints) there are a couple of really nice ways to further improve the experience. A common pattern is creating the application object when the blueprint is imported. But if you move the creation of this object into a function, you can then create multiple instances of this app later.\n\nSo why would you want to do this?\n\n1. Testing. You can have instances of the application with different settings to test every case.\n\n2. Multiple instances. Imagine you want to run different versions of the same application. Of course you could have multiple instances with different configs set up in your webserver, but if you use factories, you can have multiple instances of the same application running in the same application process which can be handy.\n\n## Basic Factories\n\nThe idea is to set up the application in a function. Like this:\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n\n    from yourapplication.views.admin import admin\n    from yourapplication.views.frontend import frontend\n    app.register_blueprint(admin)\n    app.register_blueprint(frontend)\n\n    return app\n```\n\nThe downside is that you cannot use the application object in the blueprints at import time. You can however use it from within a request. How do you get access to the application with the config? Use `current_app`:\n\n```\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin.route('/')\ndef index():\n    return render_template(current_app.config['INDEX_TEMPLATE'])\n```\n\nHere we look up the name of a template in the config.\n\n## Factories & Extensions\n\nIt’s preferable to create your extensions and app factories so that the extension object does not initially get bound to the application.\n\nUsing Flask-SQLAlchemy, as an example, you should not do something along those lines:\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    db = SQLAlchemy(app)\n```\n\nBut, rather, in model.py (or equivalent):\n\n```\ndb = SQLAlchemy()\n```\n\nand in your application.py (or equivalent):\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n```\n\nUsing this design pattern, no application-specific state is stored on the extension object, so one extension object can be used for multiple apps. For more information about the design of extensions refer to Flask Extension Development.\n\n## Using Applications\n\nTo run such an application, you can use the **flask** command:\n\n```\n$ flask --app hello run\n```\n\nFlask will automatically detect the factory if it is named `create_app` or `make_app` in `hello`. You can also pass arguments to the factory like this:\n\n```\n$ flask --app hello:create_app(local_auth=True) run\n```\n\nThen the `create_app` factory in `myapp` is called with the keyword argument `local_auth=True`. See Command Line Interface for more detail.\n\n## Factory Improvements\n\nThe factory function above is not very clever, but you can improve it. The following changes are straightforward to implement:\n\n1. Make it possible to pass in configuration values for unit tests so that you don’t have to create config files on the filesystem.\n\n2. Call a function from a blueprint when the application is setting up so that you have a place to modify attributes of the application (like hooking in before/after request handlers etc.)\n\n3. Add in WSGI middlewares when the application is being created if necessary.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application factories in flask-stable?\n\nAssistant: To application factories in flask-stable, here's what you do:\nIf you are already using packages and blueprints for your application (Modular Applications with Blueprints) there are a couple of really nice ways to further improve the experience. A common pattern is creating the application object when the blueprint is imported. But if you move the creation of this object into a function, you can then create multiple instances of this app later.\n\nSo why would you want to do this?\n\n1. Testing. You can have instances of the application with different settings to test every case.\n\n2. Multiple instances. Imagine you want to run different versions of the same application. Of course you could have multiple instances with different configs set up in your webserver, but if you use factories, you can have multiple instances of the same application running in the same application process which can be handy..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I basic factories in flask-stable?\n\nAssistant: To basic factories in flask-stable, here's what you do:\nThe idea is to set up the application in a function. Like this:\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n\n    from yourapplication.views.admin import admin\n    from yourapplication.views.frontend import frontend\n    app.register_blueprint(admin)\n    app.register_blueprint(frontend)\n\n    return app\n```\n\nThe downside is that you cannot use the application object in the blueprints at import time. You can however use it from within a request. How do you get access to the application with the config? Use `current_app`:\n\n```\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin.route('/')\ndef index():\n    return render_template(current_app.config['INDEX_TEMPLATE'])\n```\n\nHere we look up the name of a template in the config..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I factories & extensions in flask-stable?\n\nAssistant: To factories & extensions in flask-stable, here's what you do:\nIt’s preferable to create your extensions and app factories so that the extension object does not initially get bound to the application.\n\nUsing Flask-SQLAlchemy, as an example, you should not do something along those lines:\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    db = SQLAlchemy(app)\n```\n\nBut, rather, in model.py (or equivalent):\n\n```\ndb = SQLAlchemy()\n```\n\nand in your application.py (or equivalent):\n\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n```\n\nUsing this design pattern, no application-specific state is stored on the extension object, so one extension object can be used for multiple apps. For more information about the design of extensions refer to Flask Extension Development..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using applications in flask-stable?\n\nAssistant: To using applications in flask-stable, here's what you do:\nTo run such an application, you can use the **flask** command:\n\n```\n$ flask --app hello run\n```\n\nFlask will automatically detect the factory if it is named `create_app` or `make_app` in `hello`. You can also pass arguments to the factory like this:\n\n```\n$ flask --app hello:create_app(local_auth=True) run\n```\n\nThen the `create_app` factory in `myapp` is called with the keyword argument `local_auth=True`. See Command Line Interface for more detail..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I factory improvements in flask-stable?\n\nAssistant: To factory improvements in flask-stable, here's what you do:\nThe factory function above is not very clever, but you can improve it. The following changes are straightforward to implement:\n\n1. Make it possible to pass in configuration values for unit tests so that you don’t have to create config files on the filesystem.\n\n2. Call a function from a blueprint when the application is setting up so that you have a place to modify attributes of the application (like hooking in before/after request handlers etc.)\n\n3. Add in WSGI middlewares when the application is being created if necessary..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Application Factories in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Factory Example**:\n\n```yaml\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n\n    from yourapplication.views.admin import admin\n    from yourapplication.views.frontend import frontend\n    app.register_blueprint(admin)\n    app.register_blueprint(frontend)\n\n    return app\n```\n\nThis snippet shows you how to basic factory example, which is an important aspect of application factories.\n\n**Using current_app in Blueprint**:\n\n```yaml\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin.route('/')\ndef index():\n    return render_template(current_app.config['INDEX_TEMPLATE'])\n```\n\nThis snippet shows you how to using current_app in blueprint, which is an important aspect of application factories.\n\n**Creating SQLAlchemy instance**:\n\n```yaml\ndb = SQLAlchemy()\n```\n\nThis snippet shows you how to creating sqlalchemy instance, which is an important aspect of application factories.\n\n**Running the application with Flask command**:\n\n```yaml\n$ flask --app hello run\n```\n\nThis snippet shows you how to running the application with flask command, which is an important aspect of application factories.\n\n**Passing arguments to factory**:\n\n```yaml\n$ flask --app hello:create_app(local_auth=True) run\n```\n\nThis snippet shows you how to passing arguments to factory, which is an important aspect of application factories.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Application Factories in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse application factories to create multiple instances of an application for testing and different configurations.\n\nAvoid binding extension objects to the application initially to allow for reuse across multiple apps.\n\nConsider passing configuration values directly to the factory for unit testing.\n\nHook in before/after request handlers during application setup for better control.\n\nAdd WSGI middlewares when creating the application if necessary.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "title": "Application Factories", "description": "This section covers how to create application factories in Flask, allowing for multiple instances of an application with different configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:23", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-resolver-filename": "/patterns/appfactories/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "Application Factories — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "489a172c-7fc4-42fd-9b63-b7f0001d7cf6", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/appfactories", "url": "https://flask.palletsprojects.com/en/stable/patterns/appfactories/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Uploading Files is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Uploading Files in flask-stable.\n\n# Uploading Files\n\nThis section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.Here's a quick rundown of what this is about:\n\n## A Gentle Introduction\n\nLet’s start with a very basic application that uploads a file to a specific upload folder and displays a file to the user. Let’s look at the bootstrapping code for our application:\n\n```python\nimport os\nfrom flask import Flask, flash, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n```\n\nSo first we need a couple of imports. Most should be straightforward, the `werkzeug.secure_filename()` is explained a little bit later. The `UPLOAD_FOLDER` is where we will store the uploaded files and the `ALLOWED_EXTENSIONS` is the set of allowed file extensions.\n\nWhy do we limit the extensions that are allowed? You probably don’t want your users to be able to upload everything there if the server is directly sending out the data to the client. That way you can make sure that users are not able to upload HTML files that would cause XSS problems (see [Cross-Site Scripting (XSS)](https://flask.palletsprojects.com/en/stable/web-security/#security-xss)). Also make sure to disallow `.php` files if the server executes them, but who has PHP installed on their server, right? :)\n\nNext the functions that check if an extension is valid and that uploads the file and redirects the user to the URL for the uploaded file:\n\n```python\ndef allowed_file(filename):\n    return '.' in filename and \n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('download_file', name=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n```\n\nSo what does that [`secure_filename()`](https://werkzeug.palletsprojects.com/en/stable/utils/#werkzeug.utils.secure_filename \"(in Werkzeug v3.1.x)\") function actually do? Now the problem is that there is that principle called “never trust user input”. This is also true for the filename of an uploaded file. All submitted form data can be forged, and filenames can be dangerous. For the moment just remember: always use that function to secure a filename before storing it directly on the filesystem.\n\n## Improving Uploads\n\nChangelog\n\nAdded in version 0.6.\n\nSo how exactly does Flask handle uploads? Well it will store them in the webserver’s memory if the files are reasonably small, otherwise in a temporary location (as returned by [`tempfile.gettempdir()`](https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir \"(in Python v3.13)\")). But how do you specify the maximum file size after which an upload is aborted? By default Flask will happily accept file uploads with an unlimited amount of memory, but you can limit that by setting the `MAX_CONTENT_LENGTH` config key:\n\n```python\nfrom flask import Flask, Request\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000\n```\n\nThe code above will limit the maximum allowed payload to 16 megabytes. If a larger file is transmitted, Flask will raise a [`RequestEntityTooLarge`](https://werkzeug.palletsprojects.com/en/stable/exceptions/#werkzeug.exceptions.RequestEntityTooLarge \"(in Werkzeug v3.1.x)\") exception.\n\nConnection Reset Issue\n\nWhen using the local development server, you may get a connection reset error instead of a 413 response. You will get the correct status response when running the app with a production WSGI server.\n\nThis feature was added in Flask 0.6 but can be achieved in older versions as well by subclassing the request object. For more information on that consult the Werkzeug documentation on file handling.\n\n## Upload Progress Bars\n\nA while ago many developers had the idea to read the incoming file in small chunks and store the upload progress in the database to be able to poll the progress with JavaScript from the client. The client asks the server every 5 seconds how much it has transmitted, but this is something it should already know.\n\n## An Easier Solution\n\nNow there are better solutions that work faster and are more reliable. There are JavaScript libraries like [jQuery](https://jquery.com/) that have form plugins to ease the construction of progress bar.\n\nBecause the common pattern for file uploads exists almost unchanged in all applications dealing with uploads, there are also some Flask extensions that implement a full fledged upload mechanism that allows controlling which file extensions are allowed to be uploaded.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "overview", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I a gentle introduction in flask-stable?\n\nAssistant: To a gentle introduction in flask-stable, here's what you do:\nLet’s start with a very basic application that uploads a file to a specific upload folder and displays a file to the user. Let’s look at the bootstrapping code for our application:\n\n```python\nimport os\nfrom flask import Flask, flash, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n```\n\nSo first we need a couple of imports. Most should be straightforward, the `werkzeug.secure_filename()` is explained a little bit later. The `UPLOAD_FOLDER` is where we will store the uploaded files and the `ALLOWED_EXTENSIONS` is the set of allowed file extensions.\n\nWhy do we limit the extensions that are allowed? You probably don’t want your users to be able to upload everything there if the server is directly sending out the data to the client. That way you can make sure that users are not able to upload HTML files that would cause XSS problems (see [Cross-Site Scripting (XSS)](https://flask.palletsprojects.com/en/stable/web-security/#security-xss)). Also make sure to disallow `.php` files if the server executes them, but who has PHP installed on their server, right? :)\n\nNext the functions that check if an extension is valid and that uploads the file and redirects the user to the URL for the uploaded file:\n\n```python\ndef allowed_file(filename):\n    return '.' in filename and \n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('download_file', name=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n```\n\nSo what does that [`secure_filename()`](https://werkzeug.palletsprojects.com/en/stable/utils/#werkzeug.utils.secure_filename \"(in Werkzeug v3.1.x)\") function actually do? Now the problem is that there is that principle called “never trust user input”. This is also true for the filename of an uploaded file. All submitted form data can be forged, and filenames can be dangerous. For the moment just remember: always use that function to secure a filename before storing it directly on the filesystem..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "section_detail", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I improving uploads in flask-stable?\n\nAssistant: To improving uploads in flask-stable, here's what you do:\nChangelog\n\nAdded in version 0.6.\n\nSo how exactly does Flask handle uploads? Well it will store them in the webserver’s memory if the files are reasonably small, otherwise in a temporary location (as returned by [`tempfile.gettempdir()`](https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir \"(in Python v3.13)\")). But how do you specify the maximum file size after which an upload is aborted? By default Flask will happily accept file uploads with an unlimited amount of memory, but you can limit that by setting the `MAX_CONTENT_LENGTH` config key:\n\n```python\nfrom flask import Flask, Request\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000\n```\n\nThe code above will limit the maximum allowed payload to 16 megabytes. If a larger file is transmitted, Flask will raise a [`RequestEntityTooLarge`](https://werkzeug.palletsprojects.com/en/stable/exceptions/#werkzeug.exceptions.RequestEntityTooLarge \"(in Werkzeug v3.1.x)\") exception.\n\nConnection Reset Issue\n\nWhen using the local development server, you may get a connection reset error instead of a 413 response. You will get the correct status response when running the app with a production WSGI server.\n\nThis feature was added in Flask 0.6 but can be achieved in older versions as well by subclassing the request object. For more information on that consult the Werkzeug documentation on file handling..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "section_detail", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I upload progress bars in flask-stable?\n\nAssistant: To upload progress bars in flask-stable, here's what you do:\nA while ago many developers had the idea to read the incoming file in small chunks and store the upload progress in the database to be able to poll the progress with JavaScript from the client. The client asks the server every 5 seconds how much it has transmitted, but this is something it should already know..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "section_detail", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I an easier solution in flask-stable?\n\nAssistant: To an easier solution in flask-stable, here's what you do:\nNow there are better solutions that work faster and are more reliable. There are JavaScript libraries like [jQuery](https://jquery.com/) that have form plugins to ease the construction of progress bar.\n\nBecause the common pattern for file uploads exists almost unchanged in all applications dealing with uploads, there are also some Flask extensions that implement a full fledged upload mechanism that allows controlling which file extensions are allowed to be uploaded..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "section_detail", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Uploading Files in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic File Upload Example**:\n\n```yaml\nimport os\nfrom flask import Flask, flash, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n\ndef allowed_file(filename):\n    return '.' in filename and \n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('download_file', name=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n\n```\n\nThis snippet shows you how to basic file upload example, which is an important aspect of uploading files.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "code_examples", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Uploading Files in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways use `secure_filename()` to sanitize filenames before saving them to the filesystem to prevent directory traversal attacks.\n\nLimit the types of files that can be uploaded by checking file extensions to avoid security vulnerabilities.\n\nSet a maximum content length for uploads to prevent excessive memory usage and potential denial of service attacks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "title": "Uploading Files", "description": "This section covers how to handle file uploads in Flask applications, including setting up the upload form, validating file types, and saving files securely.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:47:49", "type": "best_practices", "page_metadata": {"title": "Uploading Files — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/fileuploads/", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "abcd8253-2195-4401-a274-f37d389ab25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads", "url": "https://flask.palletsprojects.com/en/stable/patterns/fileuploads/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Deploy to Production is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Deploy to Production in flask-stable.\n\n# Deploy to Production\n\nThis part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.Here's a quick rundown of what this is about:\n\n## Build and Install\n\nWhen you want to deploy your application elsewhere, you build a _wheel_ ( `.whl`) file. Install and use the `build` tool to do this.\n\n```\n$ pip install build\n$ python -m build --wheel\n```\n\nYou can find the file in `dist/flaskr-1.0.0-py3-none-any.whl`. The file name is in the format of {project name}-{version}-{python tag}-{abi tag}-{platform tag}.\n\nCopy this file to another machine, [set up a new virtualenv](https://flask.palletsprojects.com/en/stable/installation/#install-create-env), then install the file with `pip`.\n\n```\n$ pip install flaskr-1.0.0-py3-none-any.whl\n```\n\nPip will install your project along with its dependencies.\n\nSince this is a different machine, you need to run `init-db` again to create the database in the instance folder.\n\n> ```\n> $ flask --app flaskr init-db\n> ```\n\nWhen Flask detects that it’s installed (not in editable mode), it uses a different directory for the instance folder. You can find it at `.venv/var/flaskr-instance` instead.\n\n## Configure the Secret Key\n\nIn the beginning of the tutorial that you gave a default value for [`SECRET_KEY`](https://flask.palletsprojects.com/en/stable/config/#SECRET_KEY). This should be changed to some random bytes in production. Otherwise, attackers could use the public 'dev' key to modify the session cookie, or anything else that uses the secret key.\n\nYou can use the following command to output a random secret key:\n\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\nCreate the `config.py` file in the instance folder, which the factory will read from if it exists. Copy the generated value into it.\n\n`.venv/var/flaskr-instance/config.py`\n\n```\nSECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\nYou can also set any other necessary configuration here, although `SECRET_KEY` is the only one needed for Flaskr.\n\n## Run with a Production Server\n\nWhen running publicly rather than in development, you should not use the built-in development server ( `flask run`). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure.\n\nInstead, use a production WSGI server. For example, to use [Waitress](https://docs.pylonsproject.org/projects/waitress/en/stable/), first install it in the virtual environment:\n\n```\n$ pip install waitress\n```\n\nYou need to tell Waitress about your application, but it doesn’t use `--app` like `flask run` does. You need to tell it to import and call the application factory to get an application object.\n\n```\n$ waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080\n```\n\nSee [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/) for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I build and install in flask-stable?\n\nAssistant: To build and install in flask-stable, here's what you do:\nWhen you want to deploy your application elsewhere, you build a _wheel_ ( `.whl`) file. Install and use the `build` tool to do this.\n\n```\n$ pip install build\n$ python -m build --wheel\n```\n\nYou can find the file in `dist/flaskr-1.0.0-py3-none-any.whl`. The file name is in the format of {project name}-{version}-{python tag}-{abi tag}-{platform tag}.\n\nCopy this file to another machine, [set up a new virtualenv](https://flask.palletsprojects.com/en/stable/installation/#install-create-env), then install the file with `pip`.\n\n```\n$ pip install flaskr-1.0.0-py3-none-any.whl\n```\n\nPip will install your project along with its dependencies.\n\nSince this is a different machine, you need to run `init-db` again to create the database in the instance folder.\n\n> ```\n> $ flask --app flaskr init-db\n> ```\n\nWhen Flask detects that it’s installed (not in editable mode), it uses a different directory for the instance folder. You can find it at `.venv/var/flaskr-instance` instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configure the secret key in flask-stable?\n\nAssistant: To configure the secret key in flask-stable, here's what you do:\nIn the beginning of the tutorial that you gave a default value for [`SECRET_KEY`](https://flask.palletsprojects.com/en/stable/config/#SECRET_KEY). This should be changed to some random bytes in production. Otherwise, attackers could use the public 'dev' key to modify the session cookie, or anything else that uses the secret key.\n\nYou can use the following command to output a random secret key:\n\n```\n$ python -c 'import secrets; print(secrets.token_hex())'\n\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\nCreate the `config.py` file in the instance folder, which the factory will read from if it exists. Copy the generated value into it.\n\n`.venv/var/flaskr-instance/config.py`\n\n```\nSECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n```\n\nYou can also set any other necessary configuration here, although `SECRET_KEY` is the only one needed for Flaskr..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I run with a production server in flask-stable?\n\nAssistant: To run with a production server in flask-stable, here's what you do:\nWhen running publicly rather than in development, you should not use the built-in development server ( `flask run`). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure.\n\nInstead, use a production WSGI server. For example, to use [Waitress](https://docs.pylonsproject.org/projects/waitress/en/stable/), first install it in the virtual environment:\n\n```\n$ pip install waitress\n```\n\nYou need to tell Waitress about your application, but it doesn’t use `--app` like `flask run` does. You need to tell it to import and call the application factory to get an application object.\n\n```\n$ waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080\n```\n\nSee [Deploying to Production](https://flask.palletsprojects.com/en/stable/deploying/) for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Deploy to Production in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Build and Install Command**:\n\n```yaml\n$ pip install build\n$ python -m build --wheel\n```\n\nThis snippet shows you how to build and install command, which is an important aspect of deploy to production.\n\n**Install Wheel File Command**:\n\n```yaml\n$ pip install flaskr-1.0.0-py3-none-any.whl\n```\n\nThis snippet shows you how to install wheel file command, which is an important aspect of deploy to production.\n\n**Initialize Database Command**:\n\n```yaml\n$ flask --app flaskr init-db\n```\n\nThis snippet shows you how to initialize database command, which is an important aspect of deploy to production.\n\n**Generate Random Secret Key Command**:\n\n```yaml\n$ python -c 'import secrets; print(secrets.token_hex())'\n```\n\nThis snippet shows you how to generate random secret key command, which is an important aspect of deploy to production.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Deploy to Production in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a production WSGI server instead of the built-in development server.\n\nChange the default SECRET_KEY to a random value in production.\n\nRun init-db again on a different machine after installation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "title": "Deploy to Production", "description": "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won’t go into specifics about what server or software to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:48:14", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "title": "Deploy to Production — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/deploy/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "690051bd-e463-429e-9390-2671c0db939e", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/deploy", "url": "https://flask.palletsprojects.com/en/stable/tutorial/deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Test Coverage is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Test Coverage in flask-stable.\n\n# Test Coverage\n\nWriting unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.Here's a quick rundown of what this is about:\n\n## Test Coverage\n\nWriting unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.\n\nYou should test as much of your code as possible. Code in functions only runs when the function is called, and code in branches, such as `if` blocks, only runs when the condition is met. You want to make sure that each function is tested with data that covers each branch.\n\nThe closer you get to 100% coverage, the more comfortable you can be that making a change won’t unexpectedly change other behavior. However, 100% coverage doesn’t guarantee that your application doesn’t have bugs. In particular, it doesn’t test how the user interacts with the application in the browser. Despite this, test coverage is an important tool to use during development.\n\nNote\n\nThis is being introduced late in the tutorial, but in your future projects you should test as you develop.\n\nYou’ll use [pytest](https://pytest.readthedocs.io/) and [coverage](https://coverage.readthedocs.io/) to test and measure your code.\nInstall them both:\n\n```\n$ pip install pytest coverage\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "title": "Test Coverage", "description": "Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:50:08", "type": "overview", "page_metadata": {"language": "en", "title": "Test Coverage — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/tests/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2328a64b-d02f-4d8d-8ede-a5cfddfde70c", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "url": "https://flask.palletsprojects.com/en/stable/tutorial/tests/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I test coverage in flask-stable?\n\nAssistant: To test coverage in flask-stable, here's what you do:\nWriting unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.\n\nYou should test as much of your code as possible. Code in functions only runs when the function is called, and code in branches, such as `if` blocks, only runs when the condition is met. You want to make sure that each function is tested with data that covers each branch.\n\nThe closer you get to 100% coverage, the more comfortable you can be that making a change won’t unexpectedly change other behavior. However, 100% coverage doesn’t guarantee that your application doesn’t have bugs. In particular, it doesn’t test how the user interacts with the application in the browser. Despite this, test coverage is an important tool to use during development.\n\nNote\n\nThis is being introduced late in the tutorial, but in your future projects you should test as you develop.\n\nYou’ll use [pytest](https://pytest.readthedocs.io/) and [coverage](https://coverage.readthedocs.io/) to test and measure your code.\nInstall them both:\n\n```\n$ pip install pytest coverage\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "title": "Test Coverage", "description": "Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:50:08", "type": "section_detail", "page_metadata": {"language": "en", "title": "Test Coverage — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/tests/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2328a64b-d02f-4d8d-8ede-a5cfddfde70c", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "url": "https://flask.palletsprojects.com/en/stable/tutorial/tests/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Test Coverage in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**SQL Data Insertion**:\n\n```yaml\nINSERT INTO user (username, password)\nVALUES\n  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),\n  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');\n\nINSERT INTO post (title, body, author_id, created)\nVALUES\n  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');\n\n```\n\nThis snippet shows you how to sql data insertion, which is an important aspect of test coverage.\n\n**App Fixture Code**:\n\n```yaml\nimport os\nimport tempfile\n\nimport pytest\nfrom flaskr import create_app\nfrom flaskr.db import get_db, init_db\n\nwith open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:\n    _data_sql = f.read().decode('utf8')\n\n@pytest.fixture\ndef app():\n    db_fd, db_path = tempfile.mkstemp()\n\n    app = create_app({\n        'TESTING': True,\n        'DATABASE': db_path,\n    })\n\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    os.close(db_fd)\n    os.unlink(db_path)\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n\n@pytest.fixture\ndef runner(app):\n    return app.test_cli_runner()\n\n```\n\nThis snippet shows you how to app fixture code, which is an important aspect of test coverage.\n\n**Test Factory Code**:\n\n```yaml\nfrom flaskr import create_app\n\ndef test_config():\n    assert not create_app().testing\n    assert create_app({'TESTING': True}).testing\n\ndef test_hello(client):\n    response = client.get('/hello')\n    assert response.data == b'Hello, World!'\n\n```\n\nThis snippet shows you how to test factory code, which is an important aspect of test coverage.\n\n**Test Database Command**:\n\n```yaml\ndef test_init_db_command(runner, monkeypatch):\n    class Recorder(object):\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)\n    result = runner.invoke(args=['init-db'])\n    assert 'Initialized' in result.output\n    assert Recorder.called\n\n```\n\nThis snippet shows you how to test database command, which is an important aspect of test coverage.\n\n**Test Login Code**:\n\n```yaml\ndef test_login(client, auth):\n    assert client.get('/auth/login').status_code == 200\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"/\"\n\n    with client:\n        client.get('/')\n        assert session['user_id'] == 1\n        assert g.user['username'] == 'test'\n\n```\n\nThis snippet shows you how to test login code, which is an important aspect of test coverage.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "title": "Test Coverage", "description": "Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:50:08", "type": "code_examples", "page_metadata": {"language": "en", "title": "Test Coverage — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/tests/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2328a64b-d02f-4d8d-8ede-a5cfddfde70c", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "url": "https://flask.palletsprojects.com/en/stable/tutorial/tests/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Test Coverage in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTest as much of your code as possible to ensure all branches are covered.\n\nAim for close to 100% test coverage, but understand it doesn't guarantee bug-free code.\n\nUse pytest and coverage for testing and measuring code coverage.\n\nTest as you develop in future projects, rather than waiting until the end.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "title": "Test Coverage", "description": "Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:50:08", "type": "best_practices", "page_metadata": {"language": "en", "title": "Test Coverage — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/tests/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2328a64b-d02f-4d8d-8ede-a5cfddfde70c", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/tests", "url": "https://flask.palletsprojects.com/en/stable/tutorial/tests/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Using SQLite 3 with Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Using SQLite 3 with Flask in flask-stable.\n\n# Using SQLite 3 with Flask\n\nIn Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).Here's a quick rundown of what this is about:\n\n## Using SQLite 3 with Flask\n\nIn Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).\n\nHere is a simple example of how you can use SQLite 3 with Flask:\n\n```\nimport sqlite3\nfrom flask import g\n\nDATABASE = '/path/to/database.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n```\n\nNow, to use the database, the application must either have an active application context (which is always true if there is a request in flight) or create an application context itself. At that point the `get_db` function can be used to get the current database connection. Whenever the context is destroyed the database connection will be terminated.\n\nExample:\n\n```\n@app.route('/')\ndef index():\n    cur = get_db().cursor()\n    ...\n```\n\nNote\n\nPlease keep in mind that the teardown request and appcontext functions are always executed, even if a before-request handler failed or was never executed. Because of this we have to make sure here that the database is there before we close it.\n\n## Connect on Demand\n\nThe upside of this approach (connecting on first use) is that this will only open the connection if truly necessary. If you want to use this code outside a request context you can use it in a Python shell by opening the application context by hand:\n\n```\nwith app.app_context():\n    # now you can use get_db()\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "title": "Using SQLite 3 with Flask", "description": "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:50:27", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/sqlite3/", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Using SQLite 3 with Flask — Flask Documentation (3.1.x)", "scrapeId": "22f84bdd-5372-48bc-a927-56f233bd37a8", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using sqlite 3 with flask in flask-stable?\n\nAssistant: To using sqlite 3 with flask in flask-stable, here's what you do:\nIn Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).\n\nHere is a simple example of how you can use SQLite 3 with Flask:\n\n```\nimport sqlite3\nfrom flask import g\n\nDATABASE = '/path/to/database.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n```\n\nNow, to use the database, the application must either have an active application context (which is always true if there is a request in flight) or create an application context itself. At that point the `get_db` function can be used to get the current database connection. Whenever the context is destroyed the database connection will be terminated.\n\nExample:\n\n```\n@app.route('/')\ndef index():\n    cur = get_db().cursor()\n    ...\n```\n\nNote\n\nPlease keep in mind that the teardown request and appcontext functions are always executed, even if a before-request handler failed or was never executed. Because of this we have to make sure here that the database is there before we close it..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "title": "Using SQLite 3 with Flask", "description": "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:50:27", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/sqlite3/", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Using SQLite 3 with Flask — Flask Documentation (3.1.x)", "scrapeId": "22f84bdd-5372-48bc-a927-56f233bd37a8", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I connect on demand in flask-stable?\n\nAssistant: To connect on demand in flask-stable, here's what you do:\nThe upside of this approach (connecting on first use) is that this will only open the connection if truly necessary. If you want to use this code outside a request context you can use it in a Python shell by opening the application context by hand:\n\n```\nwith app.app_context():\n    # now you can use get_db()\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "title": "Using SQLite 3 with Flask", "description": "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:50:27", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/sqlite3/", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Using SQLite 3 with Flask — Flask Documentation (3.1.x)", "scrapeId": "22f84bdd-5372-48bc-a927-56f233bd37a8", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Using SQLite 3 with Flask in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Database Connection Example**:\n\n```yaml\nimport sqlite3\nfrom flask import g\n\nDATABASE = '/path/to/database.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n```\n\nThis snippet shows you how to database connection example, which is an important aspect of using sqlite 3 with flask.\n\n**Using the Database in a Route**:\n\n```yaml\n@app.route('/')\ndef index():\n    cur = get_db().cursor()\n    ...\n```\n\nThis snippet shows you how to using the database in a route, which is an important aspect of using sqlite 3 with flask.\n\n**Row Factory Example**:\n\n```yaml\ndef make_dicts(cursor, row):\n    return dict((cursor.description[idx][0], value)\n                for idx, value in enumerate(row))\n\ndb.row_factory = make_dicts\n```\n\nThis snippet shows you how to row factory example, which is an important aspect of using sqlite 3 with flask.\n\n**Query Function Example**:\n\n```yaml\ndef query_db(query, args=(), one=False):\n    cur = get_db().execute(query, args)\n    rv = cur.fetchall()\n    cur.close()\n    return (rv[0] if rv else None) if one else rv\n\nfor user in query_db('select * from users'):\n    print(user['username'], 'has the id', user['user_id'])\n```\n\nThis snippet shows you how to query function example, which is an important aspect of using sqlite 3 with flask.\n\n**Initializing the Database**:\n\n```yaml\ndef init_db():\n    with app.app_context():\n        db = get_db()\n        with app.open_resource('schema.sql', mode='r') as f:\n            db.cursor().executescript(f.read())\n        db.commit()\n```\n\nThis snippet shows you how to initializing the database, which is an important aspect of using sqlite 3 with flask.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "title": "Using SQLite 3 with Flask", "description": "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:50:27", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/sqlite3/", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Using SQLite 3 with Flask — Flask Documentation (3.1.x)", "scrapeId": "22f84bdd-5372-48bc-a927-56f233bd37a8", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Using SQLite 3 with Flask in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways ensure the database connection is closed after use to prevent memory leaks.\n\nUse parameterized queries to prevent SQL injection attacks.\n\nConsider using a row factory to simplify data access from the database.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "title": "Using SQLite 3 with Flask", "description": "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request).", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:50:27", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/sqlite3/", "language": "en", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Using SQLite 3 with Flask — Flask Documentation (3.1.x)", "scrapeId": "22f84bdd-5372-48bc-a927-56f233bd37a8", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlite3/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what View Decorators is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain View Decorators in flask-stable.\n\n# View Decorators\n\nThis page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.Here's a quick rundown of what this is about:\n\n## View Decorators\n\nPython has a really interesting feature called function decorators. This allows some really neat things for web applications. Because each view in Flask is a function, decorators can be used to inject additional functionality to one or more functions. The `route()` decorator is the one you probably used already. But there are use cases for implementing your own decorator. For instance, imagine you have a view that should only be used by people that are logged in. If a user goes to the site and is not logged in, they should be redirected to the login page. This is a good example of a use case where a decorator is an excellent solution.\n\n## Login Required Decorator\n\nSo let’s implement such a decorator. A decorator is a function that wraps and replaces another function. Since the original function is replaced, you need to remember to copy the original function’s information to the new function. Use `functools.wraps()` to handle this for you.\n\nThis example assumes that the login page is called 'login' and that the current user is stored in `g.user` and is `None` if there is no-one logged in.\n\n## Caching Decorator\n\nImagine you have a view function that does an expensive calculation and because of that you would like to cache the generated results for a certain amount of time. A decorator would be nice for that. We’re assuming you have set up a cache like mentioned in Caching.\n\nHere is an example cache function. It generates the cache key from a specific prefix (actually a format string) and the current path of the request. Notice that we are using a function that first creates the decorator that then decorates the function. Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read.\n\n## Templating Decorator\n\nA common pattern invented by the TurboGears guys a while back is a templating decorator. The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered. With that, the following three examples do exactly the same.\n\n## Endpoint Decorator\n\nWhen you want to use the werkzeug routing system for more flexibility you need to map the endpoint as defined in the `Rule` to a view function. This is possible with this decorator.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I view decorators in flask-stable?\n\nAssistant: To view decorators in flask-stable, here's what you do:\nPython has a really interesting feature called function decorators. This allows some really neat things for web applications. Because each view in Flask is a function, decorators can be used to inject additional functionality to one or more functions. The `route()` decorator is the one you probably used already. But there are use cases for implementing your own decorator. For instance, imagine you have a view that should only be used by people that are logged in. If a user goes to the site and is not logged in, they should be redirected to the login page. This is a good example of a use case where a decorator is an excellent solution..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I login required decorator in flask-stable?\n\nAssistant: To login required decorator in flask-stable, here's what you do:\nSo let’s implement such a decorator. A decorator is a function that wraps and replaces another function. Since the original function is replaced, you need to remember to copy the original function’s information to the new function. Use `functools.wraps()` to handle this for you.\n\nThis example assumes that the login page is called 'login' and that the current user is stored in `g.user` and is `None` if there is no-one logged in..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I caching decorator in flask-stable?\n\nAssistant: To caching decorator in flask-stable, here's what you do:\nImagine you have a view function that does an expensive calculation and because of that you would like to cache the generated results for a certain amount of time. A decorator would be nice for that. We’re assuming you have set up a cache like mentioned in Caching.\n\nHere is an example cache function. It generates the cache key from a specific prefix (actually a format string) and the current path of the request. Notice that we are using a function that first creates the decorator that then decorates the function. Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I templating decorator in flask-stable?\n\nAssistant: To templating decorator in flask-stable, here's what you do:\nA common pattern invented by the TurboGears guys a while back is a templating decorator. The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered. With that, the following three examples do exactly the same..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I endpoint decorator in flask-stable?\n\nAssistant: To endpoint decorator in flask-stable, here's what you do:\nWhen you want to use the werkzeug routing system for more flexibility you need to map the endpoint as defined in the `Rule` to a view function. This is possible with this decorator..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for View Decorators in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Login Required Decorator Example**:\n\n```yaml\nfrom functools import wraps\nfrom flask import g, request, redirect, url_for\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if g.user is None:\n            return redirect(url_for('login', next=request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n```\n\nThis snippet shows you how to login required decorator example, which is an important aspect of view decorators.\n\n**Using Login Required Decorator**:\n\n```yaml\n@app.route('/secret_page')\n@login_required\ndef secret_page():\n    pass\n```\n\nThis snippet shows you how to using login required decorator, which is an important aspect of view decorators.\n\n**Hidden Input for Next Value**:\n\n```yaml\n<input type=\"hidden\" value=\"{{ request.args.get('next', '') }}\"/>\n```\n\nThis snippet shows you how to hidden input for next value, which is an important aspect of view decorators.\n\n**Caching Decorator Example**:\n\n```yaml\nfrom functools import wraps\nfrom flask import request\n\ndef cached(timeout=5 * 60, key='view/{}'):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            cache_key = key.format(request.path)\n            rv = cache.get(cache_key)\n            if rv is not None:\n                return rv\n            rv = f(*args, **kwargs)\n            cache.set(cache_key, rv, timeout=timeout)\n            return rv\n        return decorated_function\n    return decorator\n```\n\nThis snippet shows you how to caching decorator example, which is an important aspect of view decorators.\n\n**Templating Decorator Example**:\n\n```yaml\nfrom functools import wraps\nfrom flask import request, render_template\n\ndef templated(template=None):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            template_name = template\n            if template_name is None:\n                template_name = f\"{request.endpoint.replace('.', '/')}.html\"\n            ctx = f(*args, **kwargs)\n            if ctx is None:\n                ctx = {}\n            elif not isinstance(ctx, dict):\n                return ctx\n            return render_template(template_name, **ctx)\n        return decorated_function\n    return decorator\n```\n\nThis snippet shows you how to templating decorator example, which is an important aspect of view decorators.\n\n**Endpoint Decorator Example**:\n\n```yaml\nfrom flask import Flask\nfrom werkzeug.routing import Rule\n\napp = Flask(__name__)\napp.url_map.add(Rule('/', endpoint='index'))\n\n@app.endpoint('index')\ndef my_index():\n    return \"Hello world\"\n```\n\nThis snippet shows you how to endpoint decorator example, which is an important aspect of view decorators.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using View Decorators in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways use `functools.wraps()` when creating decorators to preserve the original function's metadata.\n\nWhen using multiple decorators, apply the `route()` decorator as the outermost decorator.\n\nEnsure that the `next` value is passed along when sending a `POST` request from the login form.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "title": "View Decorators", "description": "This page covers the use of decorators in Flask to enhance view functions with additional functionality, including login requirements, caching, templating, and endpoint mapping.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:50:44", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "title": "View Decorators — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/viewdecorators/", "scrapeId": "475cbb3b-5e23-461e-b0f5-79b2ee1e5a1e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators", "url": "https://flask.palletsprojects.com/en/stable/patterns/viewdecorators/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Using URL Processors is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Using URL Processors in flask-stable.\n\n# Using URL Processors\n\nThis page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.Here's a quick rundown of what this is about:\n\n## Changelog\n\nAdded in version 0.7.\n\nFlask 0.7 introduces the concept of URL processors. The idea is that you might have a bunch of resources with common parts in the URL that you don’t always explicitly want to provide. For instance you might have a bunch of URLs that have the language code in it but you don’t want to have to handle it in every single function yourself.\n\nURL processors are especially helpful when combined with blueprints. We will handle both application specific URL processors here as well as blueprint specifics.\n\n## Internationalized Application URLs\n\nConsider an application like this:\n\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.route('/<lang_code>/')\ndef index(lang_code):\n    g.lang_code = lang_code\n    ...\n\n@app.route('/<lang_code>/about')\ndef about(lang_code):\n    g.lang_code = lang_code\n    ...\n```\n\nThis is an awful lot of repetition as you have to handle the language code setting on the [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") object yourself in every single function. Sure, a decorator could be used to simplify this, but if you want to generate URLs from one function to another you would have to still provide the language code explicitly which can be annoying.\n\nFor the latter, this is where [`url_defaults()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_defaults \"flask.Flask.url_defaults\") functions come in. They can automatically inject values into a call to [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\"). The code below checks if the language code is not yet in the dictionary of URL values and if the endpoint wants a value named 'lang_code':\n\n```\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n```\n\nThe method [`is_endpoint_expecting()`](https://werkzeug.palletsprojects.com/en/stable/routing/#werkzeug.routing.Map.is_endpoint_expecting \"(in Werkzeug v3.1.x)\") of the URL map can be used to figure out if it would make sense to provide a language code for the given endpoint.\n\nThe reverse of that function are [`url_value_preprocessor()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_value_preprocessor \"flask.Flask.url_value_preprocessor\") s. They are executed right after the request was matched and can execute code based on the URL values. The idea is that they pull information out of the values dictionary and put it somewhere else:\n\n```\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n```\n\nThat way you no longer have to do the `lang_code` assignment to [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") in every function. You can further improve that by writing your own decorator that prefixes URLs with the language code, but the more beautiful solution is using a blueprint. Once the `'lang_code'` is popped from the values dictionary and it will no longer be forwarded to the view function reducing the code to this:\n\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n\n@app.route('/<lang_code>/')\ndef index():\n    ...\n\n@app.route('/<lang_code>/about')\ndef about():\n    ...\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "title": "Using URL Processors", "description": "This page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:51:22", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "title": "Using URL Processors — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/urlprocessors/", "scrapeId": "1bf4e554-19ab-4287-b8b4-8c70afaff064", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I changelog in flask-stable?\n\nAssistant: To changelog in flask-stable, here's what you do:\nAdded in version 0.7.\n\nFlask 0.7 introduces the concept of URL processors. The idea is that you might have a bunch of resources with common parts in the URL that you don’t always explicitly want to provide. For instance you might have a bunch of URLs that have the language code in it but you don’t want to have to handle it in every single function yourself.\n\nURL processors are especially helpful when combined with blueprints. We will handle both application specific URL processors here as well as blueprint specifics..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "title": "Using URL Processors", "description": "This page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:51:22", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "title": "Using URL Processors — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/urlprocessors/", "scrapeId": "1bf4e554-19ab-4287-b8b4-8c70afaff064", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I internationalized application urls in flask-stable?\n\nAssistant: To internationalized application urls in flask-stable, here's what you do:\nConsider an application like this:\n\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.route('/<lang_code>/')\ndef index(lang_code):\n    g.lang_code = lang_code\n    ...\n\n@app.route('/<lang_code>/about')\ndef about(lang_code):\n    g.lang_code = lang_code\n    ...\n```\n\nThis is an awful lot of repetition as you have to handle the language code setting on the [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") object yourself in every single function. Sure, a decorator could be used to simplify this, but if you want to generate URLs from one function to another you would have to still provide the language code explicitly which can be annoying.\n\nFor the latter, this is where [`url_defaults()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_defaults \"flask.Flask.url_defaults\") functions come in. They can automatically inject values into a call to [`url_for()`](https://flask.palletsprojects.com/en/stable/api/#flask.url_for \"flask.url_for\"). The code below checks if the language code is not yet in the dictionary of URL values and if the endpoint wants a value named 'lang_code':\n\n```\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n```\n\nThe method [`is_endpoint_expecting()`](https://werkzeug.palletsprojects.com/en/stable/routing/#werkzeug.routing.Map.is_endpoint_expecting \"(in Werkzeug v3.1.x)\") of the URL map can be used to figure out if it would make sense to provide a language code for the given endpoint.\n\nThe reverse of that function are [`url_value_preprocessor()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.url_value_preprocessor \"flask.Flask.url_value_preprocessor\") s. They are executed right after the request was matched and can execute code based on the URL values. The idea is that they pull information out of the values dictionary and put it somewhere else:\n\n```\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n```\n\nThat way you no longer have to do the `lang_code` assignment to [`g`](https://flask.palletsprojects.com/en/stable/api/#flask.g \"flask.g\") in every function. You can further improve that by writing your own decorator that prefixes URLs with the language code, but the more beautiful solution is using a blueprint. Once the `'lang_code'` is popped from the values dictionary and it will no longer be forwarded to the view function reducing the code to this:\n\n```\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.url_defaults\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n\n@app.route('/<lang_code>/')\ndef index():\n    ...\n\n@app.route('/<lang_code>/about')\ndef about():\n    ...\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "title": "Using URL Processors", "description": "This page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:51:22", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "title": "Using URL Processors — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/urlprocessors/", "scrapeId": "1bf4e554-19ab-4287-b8b4-8c70afaff064", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Using URL Processors in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Internationalized Application URLs Example**:\n\n```yaml\nfrom flask import Flask, g\n\napp = Flask(__name__)\n\n@app.route('/<lang_code>/')\ndef index(lang_code):\n    g.lang_code = lang_code\n    ...\n\n@app.route('/<lang_code>/about')\ndef about(lang_code):\n    g.lang_code = lang_code\n    ...\n\n```\n\nThis snippet shows you how to internationalized application urls example, which is an important aspect of using url processors.\n\n**URL Defaults Example**:\n\n```yaml\n@app.url_defaults\n\ndef add_language_code(endpoint, values):\n    if 'lang_code' in values or not g.lang_code:\n        return\n    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n        values['lang_code'] = g.lang_code\n\n```\n\nThis snippet shows you how to url defaults example, which is an important aspect of using url processors.\n\n**URL Value Preprocessor Example**:\n\n```yaml\n@app.url_value_preprocessor\n\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code', None)\n\n```\n\nThis snippet shows you how to url value preprocessor example, which is an important aspect of using url processors.\n\n**Internationalized Blueprint URLs Example**:\n\n```yaml\nfrom flask import Blueprint, g\n\nbp = Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n\n@bp.url_defaults\ndef add_language_code(endpoint, values):\n    values.setdefault('lang_code', g.lang_code)\n\n@bp.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\n    g.lang_code = values.pop('lang_code')\n\n@bp.route('/')\ndef index():\n    ...\n\n@bp.route('/about')\ndef about():\n    ...\n\n```\n\nThis snippet shows you how to internationalized blueprint urls example, which is an important aspect of using url processors.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "title": "Using URL Processors", "description": "This page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:51:22", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "title": "Using URL Processors — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/urlprocessors/", "scrapeId": "1bf4e554-19ab-4287-b8b4-8c70afaff064", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Using URL Processors in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse URL processors to avoid repetition in handling common URL parts like language codes.\n\nCombine URL processors with blueprints for cleaner and more maintainable code.\n\nUtilize `url_defaults()` to automatically inject values into URL generation.\n\nImplement `url_value_preprocessor()` to manage URL values efficiently.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "title": "Using URL Processors", "description": "This page covers the concept of URL processors in Flask, including how to handle internationalized application URLs and blueprint URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:51:22", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "title": "Using URL Processors — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/urlprocessors/", "scrapeId": "1bf4e554-19ab-4287-b8b4-8c70afaff064", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors", "url": "https://flask.palletsprojects.com/en/stable/patterns/urlprocessors/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Waitress is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Waitress in flask-stable.\n\n# Waitress\n\nThis page outlines the basics of running Waitress, a pure Python WSGI server.Here's a quick rundown of what this is about:\n\n## Waitress\n\n[Waitress](https://docs.pylonsproject.org/projects/waitress/) is a pure Python WSGI server.\n\n- It is easy to configure.\n- It supports Windows directly.\n- It is easy to install as it does not require additional dependencies or compilation.\n- It does not support streaming requests, full request data is always buffered.\n- It uses a single process with multiple thread workers.\n\n## Installing\n\nCreate a virtualenv, install your application, then install `waitress`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install waitress\n```\n\n\n## Running\n\nThe only required argument to `waitress-serve` tells it how to load your Flask application. The syntax is `{module}:{app}`. `module` is the dotted import name to the module with your application. `app` is the variable with the application. If you’re using the app factory pattern, use `--call {module}:{factory}` instead.\n\n```\n# equivalent to 'from hello import app'\n$ waitress-serve --host 127.0.0.1 hello:app\n\n# equivalent to 'from hello import create_app; create_app()'\n$ waitress-serve --host 127.0.0.1 --call hello:create_app\n\nServing on http://127.0.0.1:8080\n```\n\nThe `--host` option binds the server to local `127.0.0.1` only.\n\nLogs for each request aren’t shown, only errors are shown. Logging can be configured through the Python interface instead of the command line.\n\n## Binding Externally\n\nWaitress should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of Waitress.\n\nYou can bind to all external IPs on a non-privileged port by not specifying the `--host` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "overview", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I waitress in flask-stable?\n\nAssistant: To waitress in flask-stable, here's what you do:\n[Waitress](https://docs.pylonsproject.org/projects/waitress/) is a pure Python WSGI server.\n\n- It is easy to configure.\n- It supports Windows directly.\n- It is easy to install as it does not require additional dependencies or compilation.\n- It does not support streaming requests, full request data is always buffered.\n- It uses a single process with multiple thread workers..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "section_detail", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nCreate a virtualenv, install your application, then install `waitress`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install waitress\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "section_detail", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nThe only required argument to `waitress-serve` tells it how to load your Flask application. The syntax is `{module}:{app}`. `module` is the dotted import name to the module with your application. `app` is the variable with the application. If you’re using the app factory pattern, use `--call {module}:{factory}` instead.\n\n```\n# equivalent to 'from hello import app'\n$ waitress-serve --host 127.0.0.1 hello:app\n\n# equivalent to 'from hello import create_app; create_app()'\n$ waitress-serve --host 127.0.0.1 --call hello:create_app\n\nServing on http://127.0.0.1:8080\n```\n\nThe `--host` option binds the server to local `127.0.0.1` only.\n\nLogs for each request aren’t shown, only errors are shown. Logging can be configured through the Python interface instead of the command line..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "section_detail", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\nWaitress should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of Waitress.\n\nYou can bind to all external IPs on a non-privileged port by not specifying the `--host` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "section_detail", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Waitress in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing Waitress**:\n\n```yaml\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install waitress\n```\n```\n\nThis snippet shows you how to installing waitress, which is an important aspect of waitress.\n\n**Running Waitress**:\n\n```yaml\n```\n# equivalent to 'from hello import app'\n$ waitress-serve --host 127.0.0.1 hello:app\n\n# equivalent to 'from hello import create_app; create_app()'\n$ waitress-serve --host 127.0.0.1 --call hello:create_app\n\nServing on http://127.0.0.1:8080\n```\n```\n\nThis snippet shows you how to running waitress, which is an important aspect of waitress.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "code_examples", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Waitress in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRead the Waitress documentation and `waitress-serve --help` to understand available features.\n\nDo not run Waitress as root to avoid security risks.\n\nUse a reverse proxy like nginx or Apache httpd in front of Waitress for production deployments.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "title": "Waitress", "description": "This page outlines the basics of running Waitress, a pure Python WSGI server.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:52:02", "type": "best_practices", "page_metadata": {"title": "Waitress — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/waitress/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "a49307a2-c63e-451a-9df0-9cac09db35b5", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/waitress", "url": "https://flask.palletsprojects.com/en/stable/deploying/waitress/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Using `async` and `await` is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Using `async` and `await` in flask-stable.\n\n# Using `async` and `await`\n\nThis section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.Here's a quick rundown of what this is about:\n\n## Using `async` and `await`\n\nChangelog\n\nAdded in version 2.0.\n\nRoutes, error handlers, before request, after request, and teardown functions can all be coroutine functions if Flask is installed with the `async` extra ( `pip install flask[async]`). This allows views to be defined with `async def` and use `await`.\n\n```python\n@app.route(\"/get-data\")\nasync def get_data():\n    data = await async_db_query(...)\n    return jsonify(data)\n```\n\nPluggable class-based views also support handlers that are implemented as coroutines. This applies to the [`dispatch_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View.dispatch_request \"flask.views.View.dispatch_request\") method in views that inherit from the [`flask.views.View`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View \"flask.views.View\") class, as well as all the HTTP method handlers in views that inherit from the [`flask.views.MethodView`](https://flask.palletsprojects.com/en/stable/api/#flask.views.MethodView \"flask.views.MethodView\") class.\n\nUsing `async` with greenlet\n\nWhen using gevent or eventlet to serve an application or patch the runtime, greenlet>=1.0 is required. When using PyPy, PyPy>=7.3.7 is required.\n\n## Performance\n\nAsync functions require an event loop to run. Flask, as a WSGI application, uses one worker to handle one request/response cycle. When a request comes in to an async view, Flask will start an event loop in a thread, run the view function there, then return the result.\n\nEach request still ties up one worker, even for async views. The upside is that you can run async code within a view, for example to make multiple concurrent database queries, HTTP requests to an external API, etc. However, the number of requests your application can handle at one time will remain the same.\n\n**Async is not inherently faster than sync code.** Async is beneficial when performing concurrent IO-bound tasks, but will probably not improve CPU-bound tasks. Traditional Flask views will still be appropriate for most use cases, but Flask’s async support enables writing and using code that wasn’t possible natively before.\n\n## Background tasks\n\nAsync functions will run in an event loop until they complete, at which stage the event loop will stop. This means any additional spawned tasks that haven’t completed when the async function completes will be cancelled. Therefore you cannot spawn background tasks, for example via `asyncio.create_task`.\n\nIf you wish to use background tasks it is best to use a task queue to trigger background work, rather than spawn tasks in a view function. With that in mind you can spawn asyncio tasks by serving Flask with an ASGI server and utilising the asgiref WsgiToAsgi adapter as described in [ASGI](https://flask.palletsprojects.com/en/stable/deploying/asgi/). This works as the adapter creates an event loop that runs continually.\n\n## When to use Quart instead\n\nFlask’s async support is less performant than async-first frameworks due to the way it is implemented. If you have a mainly async codebase it would make sense to consider [Quart](https://github.com/pallets/quart). Quart is a reimplementation of Flask based on the [ASGI](https://asgi.readthedocs.io/en/latest/) standard instead of WSGI. This allows it to handle many concurrent requests, long running requests, and websockets without requiring multiple worker processes or threads.\n\nIt has also already been possible to run Flask with Gevent or Eventlet to get many of the benefits of async request handling. These libraries patch low-level Python functions to accomplish this, whereas `async`/`await` and ASGI use standard, modern Python capabilities. Deciding whether you should use Flask, Quart, or something else is ultimately up to understanding the specific needs of your project.\n\n## Extensions\n\nFlask extensions predating Flask’s async support do not expect async views. If they provide decorators to add functionality to views, those will probably not work with async views because they will not await the function or be awaitable. Other functions they provide will not be awaitable either and will probably be blocking if called within an async view.\n\nExtension authors can support async functions by utilising the [`flask.Flask.ensure_sync()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.ensure_sync \"flask.Flask.ensure_sync\") method. For example, if the extension provides a view function decorator add `ensure_sync` before calling the decorated function,\n\n```python\ndef extension(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        ...  # Extension logic\n        return current_app.ensure_sync(func)(*args, **kwargs)\n\n    return wrapper\n```\n\nCheck the changelog of the extension you want to use to see if they’ve implemented async support, or make a feature request or PR to them.\n\n## Other event loops\n\nAt the moment Flask only supports [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio \"(in Python v3.13)\"). It’s possible to override [`flask.Flask.ensure_sync()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.ensure_sync \"flask.Flask.ensure_sync\") to change how async functions are wrapped to use a different library.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I using `async` and `await` in flask-stable?\n\nAssistant: To using `async` and `await` in flask-stable, here's what you do:\nChangelog\n\nAdded in version 2.0.\n\nRoutes, error handlers, before request, after request, and teardown functions can all be coroutine functions if Flask is installed with the `async` extra ( `pip install flask[async]`). This allows views to be defined with `async def` and use `await`.\n\n```python\n@app.route(\"/get-data\")\nasync def get_data():\n    data = await async_db_query(...)\n    return jsonify(data)\n```\n\nPluggable class-based views also support handlers that are implemented as coroutines. This applies to the [`dispatch_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View.dispatch_request \"flask.views.View.dispatch_request\") method in views that inherit from the [`flask.views.View`](https://flask.palletsprojects.com/en/stable/api/#flask.views.View \"flask.views.View\") class, as well as all the HTTP method handlers in views that inherit from the [`flask.views.MethodView`](https://flask.palletsprojects.com/en/stable/api/#flask.views.MethodView \"flask.views.MethodView\") class.\n\nUsing `async` with greenlet\n\nWhen using gevent or eventlet to serve an application or patch the runtime, greenlet>=1.0 is required. When using PyPy, PyPy>=7.3.7 is required..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I performance in flask-stable?\n\nAssistant: To performance in flask-stable, here's what you do:\nAsync functions require an event loop to run. Flask, as a WSGI application, uses one worker to handle one request/response cycle. When a request comes in to an async view, Flask will start an event loop in a thread, run the view function there, then return the result.\n\nEach request still ties up one worker, even for async views. The upside is that you can run async code within a view, for example to make multiple concurrent database queries, HTTP requests to an external API, etc. However, the number of requests your application can handle at one time will remain the same.\n\n**Async is not inherently faster than sync code.** Async is beneficial when performing concurrent IO-bound tasks, but will probably not improve CPU-bound tasks. Traditional Flask views will still be appropriate for most use cases, but Flask’s async support enables writing and using code that wasn’t possible natively before..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I background tasks in flask-stable?\n\nAssistant: To background tasks in flask-stable, here's what you do:\nAsync functions will run in an event loop until they complete, at which stage the event loop will stop. This means any additional spawned tasks that haven’t completed when the async function completes will be cancelled. Therefore you cannot spawn background tasks, for example via `asyncio.create_task`.\n\nIf you wish to use background tasks it is best to use a task queue to trigger background work, rather than spawn tasks in a view function. With that in mind you can spawn asyncio tasks by serving Flask with an ASGI server and utilising the asgiref WsgiToAsgi adapter as described in [ASGI](https://flask.palletsprojects.com/en/stable/deploying/asgi/). This works as the adapter creates an event loop that runs continually..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I when to use quart instead in flask-stable?\n\nAssistant: To when to use quart instead in flask-stable, here's what you do:\nFlask’s async support is less performant than async-first frameworks due to the way it is implemented. If you have a mainly async codebase it would make sense to consider [Quart](https://github.com/pallets/quart). Quart is a reimplementation of Flask based on the [ASGI](https://asgi.readthedocs.io/en/latest/) standard instead of WSGI. This allows it to handle many concurrent requests, long running requests, and websockets without requiring multiple worker processes or threads.\n\nIt has also already been possible to run Flask with Gevent or Eventlet to get many of the benefits of async request handling. These libraries patch low-level Python functions to accomplish this, whereas `async`/`await` and ASGI use standard, modern Python capabilities. Deciding whether you should use Flask, Quart, or something else is ultimately up to understanding the specific needs of your project..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I extensions in flask-stable?\n\nAssistant: To extensions in flask-stable, here's what you do:\nFlask extensions predating Flask’s async support do not expect async views. If they provide decorators to add functionality to views, those will probably not work with async views because they will not await the function or be awaitable. Other functions they provide will not be awaitable either and will probably be blocking if called within an async view.\n\nExtension authors can support async functions by utilising the [`flask.Flask.ensure_sync()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.ensure_sync \"flask.Flask.ensure_sync\") method. For example, if the extension provides a view function decorator add `ensure_sync` before calling the decorated function,\n\n```python\ndef extension(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        ...  # Extension logic\n        return current_app.ensure_sync(func)(*args, **kwargs)\n\n    return wrapper\n```\n\nCheck the changelog of the extension you want to use to see if they’ve implemented async support, or make a feature request or PR to them..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I other event loops in flask-stable?\n\nAssistant: To other event loops in flask-stable, here's what you do:\nAt the moment Flask only supports [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio \"(in Python v3.13)\"). It’s possible to override [`flask.Flask.ensure_sync()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.ensure_sync \"flask.Flask.ensure_sync\") to change how async functions are wrapped to use a different library..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Using `async` and `await` in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of an async route**:\n\n```yaml\n```python\n@app.route(\"/get-data\")\nasync def get_data():\n    data = await async_db_query(...)\n    return jsonify(data)\n```\n```\n\nThis snippet shows you how to example of an async route, which is an important aspect of using `async` and `await`.\n\n**Example of an extension with ensure_sync**:\n\n```yaml\n```python\ndef extension(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        ...  # Extension logic\n        return current_app.ensure_sync(func)(*args, **kwargs)\n\n    return wrapper\n```\n```\n\nThis snippet shows you how to example of an extension with ensure_sync, which is an important aspect of using `async` and `await`.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Using `async` and `await` in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAsync is not inherently faster than sync code; it is beneficial for concurrent IO-bound tasks.\n\nUse a task queue for background tasks instead of spawning tasks in a view function.\n\nConsider using Quart for a mainly async codebase.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/async-await", "title": "Using `async` and `await`", "description": "This section covers how to use async and await in Flask, including performance considerations, background tasks, and compatibility with extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:52:36", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "title": "Using async and await — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/async-await/", "scrapeId": "95fa73bb-ff37-4037-9d84-ed03127231c5", "sourceURL": "https://flask.palletsprojects.com/en/stable/async-await", "url": "https://flask.palletsprojects.com/en/stable/async-await/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Lazily Loading Views is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Lazily Loading Views in flask-stable.\n\n# Lazily Loading Views\n\nThis section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.Here's a quick rundown of what this is about:\n\n## Lazily Loading Views\n\nFlask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.\n\nThis can be a problem if your application has to import quick. It might have to do that on systems like Google’s App Engine or other systems. So if you suddenly notice that your application outgrows this approach you can fall back to a centralized URL mapping.\n\nThe system that enables having a central URL map is the `add_url_rule()` function. Instead of using decorators, you have a file that sets up the application with all URLs.\n\n## Converting to Centralized URL Map\n\nImagine the current application looks somewhat like this:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    pass\n\n@app.route('/user/<username>')\ndef user(username):\n    pass\n```\n\nThen, with the centralized approach you would have one file with the views ( `views.py`) but without any decorator:\n\n```\ndef index():\n    pass\n\ndef user(username):\n    pass\n```\n\nAnd then a file that sets up an application which maps the functions to URLs:\n\n```\nfrom flask import Flask\nfrom yourapplication import views\napp = Flask(__name__)\napp.add_url_rule('/', view_func=views.index)\napp.add_url_rule('/user/<username>', view_func=views.user)\n```\n\n## Loading Late\n\nSo far we only split up the views and the routing, but the module is still loaded upfront. The trick is to actually load the view function as needed. This can be accomplished with a helper class that behaves just like a function but internally imports the real function on first use:\n\n```\nfrom werkzeug.utils import import_string, cached_property\n\nclass LazyView(object):\n\n    def __init__(self, import_name):\n        self.__module__, self.__name__ = import_name.rsplit('.', 1)\n        self.import_name = import_name\n\n    @cached_property\n    def view(self):\n        return import_string(self.import_name)\n\n    def __call__(self, *args, **kwargs):\n        return self.view(*args, **kwargs)\n```\n\nWhat’s important here is is that `__module__` and `__name__` are properly set. This is used by Flask internally to figure out how to name the URL rules in case you don’t provide a name for the rule yourself.\n\nThen you can define your central place to combine the views like this:\n\n```\nfrom flask import Flask\nfrom yourapplication.helpers import LazyView\napp = Flask(__name__)\napp.add_url_rule('/',\n                 view_func=LazyView('yourapplication.views.index'))\napp.add_url_rule('/user/<username>',\n                 view_func=LazyView('yourapplication.views.user'))\n```\n\nYou can further optimize this in terms of amount of keystrokes needed to write this by having a function that calls into `add_url_rule()` by prefixing a string with the project name and a dot, and by wrapping `view_func` in a `LazyView` as needed.\n\n```\ndef url(import_name, url_rules=[], **options):\n    view = LazyView(f\"yourapplication.{import_name}\")\n    for url_rule in url_rules:\n        app.add_url_rule(url_rule, view_func=view, **options)\n\n# add a single route to the index view\nurl('views.index', ['/'])\n\n# add two routes to a single function endpoint\nurl_rules = ['/user/','/user/<username>']\nurl('views.user', url_rules)\n```\n\nOne thing to keep in mind is that before and after request handlers have to be in a file that is imported upfront to work properly on the first request. The same goes for any kind of remaining decorator.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I lazily loading views in flask-stable?\n\nAssistant: To lazily loading views in flask-stable, here's what you do:\nFlask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.\n\nThis can be a problem if your application has to import quick. It might have to do that on systems like Google’s App Engine or other systems. So if you suddenly notice that your application outgrows this approach you can fall back to a centralized URL mapping.\n\nThe system that enables having a central URL map is the `add_url_rule()` function. Instead of using decorators, you have a file that sets up the application with all URLs..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I converting to centralized url map in flask-stable?\n\nAssistant: To converting to centralized url map in flask-stable, here's what you do:\nImagine the current application looks somewhat like this:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    pass\n\n@app.route('/user/<username>')\ndef user(username):\n    pass\n```\n\nThen, with the centralized approach you would have one file with the views ( `views.py`) but without any decorator:\n\n```\ndef index():\n    pass\n\ndef user(username):\n    pass\n```\n\nAnd then a file that sets up an application which maps the functions to URLs:\n\n```\nfrom flask import Flask\nfrom yourapplication import views\napp = Flask(__name__)\napp.add_url_rule('/', view_func=views.index)\napp.add_url_rule('/user/<username>', view_func=views.user)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I loading late in flask-stable?\n\nAssistant: To loading late in flask-stable, here's what you do:\nSo far we only split up the views and the routing, but the module is still loaded upfront. The trick is to actually load the view function as needed. This can be accomplished with a helper class that behaves just like a function but internally imports the real function on first use:\n\n```\nfrom werkzeug.utils import import_string, cached_property\n\nclass LazyView(object):\n\n    def __init__(self, import_name):\n        self.__module__, self.__name__ = import_name.rsplit('.', 1)\n        self.import_name = import_name\n\n    @cached_property\n    def view(self):\n        return import_string(self.import_name)\n\n    def __call__(self, *args, **kwargs):\n        return self.view(*args, **kwargs)\n```\n\nWhat’s important here is is that `__module__` and `__name__` are properly set. This is used by Flask internally to figure out how to name the URL rules in case you don’t provide a name for the rule yourself.\n\nThen you can define your central place to combine the views like this:\n\n```\nfrom flask import Flask\nfrom yourapplication.helpers import LazyView\napp = Flask(__name__)\napp.add_url_rule('/',\n                 view_func=LazyView('yourapplication.views.index'))\napp.add_url_rule('/user/<username>',\n                 view_func=LazyView('yourapplication.views.user'))\n```\n\nYou can further optimize this in terms of amount of keystrokes needed to write this by having a function that calls into `add_url_rule()` by prefixing a string with the project name and a dot, and by wrapping `view_func` in a `LazyView` as needed.\n\n```\ndef url(import_name, url_rules=[], **options):\n    view = LazyView(f\"yourapplication.{import_name}\")\n    for url_rule in url_rules:\n        app.add_url_rule(url_rule, view_func=view, **options)\n\n# add a single route to the index view\nurl('views.index', ['/'])\n\n# add two routes to a single function endpoint\nurl_rules = ['/user/','/user/<username>']\nurl('views.user', url_rules)\n```\n\nOne thing to keep in mind is that before and after request handlers have to be in a file that is imported upfront to work properly on the first request. The same goes for any kind of remaining decorator..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Lazily Loading Views in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Flask Application with Decorators**:\n\n```yaml\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    pass\n\n@app.route('/user/<username>')\ndef user(username):\n    pass\n\n```\n\nThis snippet shows you how to basic flask application with decorators, which is an important aspect of lazily loading views.\n\n**Centralized URL Mapping**:\n\n```yaml\nfrom flask import Flask\nfrom yourapplication import views\napp = Flask(__name__)\napp.add_url_rule('/', view_func=views.index)\napp.add_url_rule('/user/<username>', view_func=views.user)\n\n```\n\nThis snippet shows you how to centralized url mapping, which is an important aspect of lazily loading views.\n\n**LazyView Class Implementation**:\n\n```yaml\nfrom werkzeug.utils import import_string, cached_property\n\nclass LazyView(object):\n\n    def __init__(self, import_name):\n        self.__module__, self.__name__ = import_name.rsplit('.', 1)\n        self.import_name = import_name\n\n    @cached_property\n    def view(self):\n        return import_string(self.import_name)\n\n    def __call__(self, *args, **kwargs):\n        return self.view(*args, **kwargs)\n\n```\n\nThis snippet shows you how to lazyview class implementation, which is an important aspect of lazily loading views.\n\n**Using LazyView in URL Mapping**:\n\n```yaml\nfrom flask import Flask\nfrom yourapplication.helpers import LazyView\napp = Flask(__name__)\napp.add_url_rule('/',\n                 view_func=LazyView('yourapplication.views.index'))\napp.add_url_rule('/user/<username>',\n                 view_func=LazyView('yourapplication.views.user'))\n\n```\n\nThis snippet shows you how to using lazyview in url mapping, which is an important aspect of lazily loading views.\n\n**URL Function for Lazy Loading**:\n\n```yaml\ndef url(import_name, url_rules=[], **options):\n    view = LazyView(f\"yourapplication.{import_name}\")\n    for url_rule in url_rules:\n        app.add_url_rule(url_rule, view_func=view, **options)\n\n# add a single route to the index view\nurl('views.index', ['/'])\n\n# add two routes to a single function endpoint\nurl_rules = ['/user/','/user/<username>']\nurl('views.user', url_rules)\n```\n\nThis snippet shows you how to url function for lazy loading, which is an important aspect of lazily loading views.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Lazily Loading Views in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBefore and after request handlers must be in a file that is imported upfront to work properly on the first request.\n\nEnsure that `__module__` and `__name__` are properly set in the LazyView class for Flask to correctly name the URL rules.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "title": "Lazily Loading Views", "description": "This section discusses how to lazily load views in Flask applications, enabling a centralized URL mapping approach to improve application performance and organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:53:10", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/lazyloading/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "language": "en", "readthedocs-version-slug": "stable", "title": "Lazily Loading Views — Flask Documentation (3.1.x)", "scrapeId": "2046c813-aab6-4ff1-9857-71a848c2073d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading", "url": "https://flask.palletsprojects.com/en/stable/patterns/lazyloading/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Static Files is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Static Files in flask-stable.\n\n# Static Files\n\nThis section covers how to add static files like CSS to enhance the appearance of authentication views and templates in Flask.Here's a quick rundown of what this is about:\n\n## Static Files\n\nThe authentication views and templates work, but they look very plain right now. Some [CSS](https://developer.mozilla.org/docs/Web/CSS) can be added to add style to the HTML layout you constructed. The style won’t change, so it’s a _static_ file rather than a template.\n\nFlask automatically adds a `static` view that takes a path relative to the `flaskr/static` directory and serves it. The `base.html` template already has a link to the `style.css` file:\n\n```\n{{ url_for('static', filename='style.css') }}\n```\n\nBesides CSS, other types of static files might be files with JavaScript functions, or a logo image. They are all placed under the `flaskr/static` directory and referenced with `url_for('static', filename='...')`.\n\nThis tutorial isn’t focused on how to write CSS, so you can just copy the following into the `flaskr/static/style.css` file:\n\n`flaskr/static/style.css`\n\n```\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nrh { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post > header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post > header > div:first-of-type { flex: auto; }\n.post > header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n```\n\nYou can find a less compact version of `style.css` in the [example code](https://github.com/pallets/flask/tree/main/examples/tutorial/flaskr/static/style.css).\n\nGo to [http://127.0.0.1:5000/auth/login](http://127.0.0.1:5000/auth/login) and the page should look like the screenshot below.\n\n![screenshot of login page](https://flask.palletsprojects.com/en/stable/_images/flaskr_login.png)\n\nYou can read more about CSS from [Mozilla’s documentation](https://developer.mozilla.org/docs/Web/CSS). If you change a static file, refresh the browser page. If the change doesn’t show up, try clearing your browser’s cache.\n\nContinue to [Blog Blueprint](https://flask.palletsprojects.com/en/stable/tutorial/blog/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/static", "title": "Static Files", "description": "This section covers how to add static files like CSS to enhance the appearance of authentication views and templates in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:54:40", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/static/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Static Files — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "0bfe4754-df65-4724-a6f8-c4a5d09d0037", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/static", "url": "https://flask.palletsprojects.com/en/stable/tutorial/static/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I static files in flask-stable?\n\nAssistant: To static files in flask-stable, here's what you do:\nThe authentication views and templates work, but they look very plain right now. Some [CSS](https://developer.mozilla.org/docs/Web/CSS) can be added to add style to the HTML layout you constructed. The style won’t change, so it’s a _static_ file rather than a template.\n\nFlask automatically adds a `static` view that takes a path relative to the `flaskr/static` directory and serves it. The `base.html` template already has a link to the `style.css` file:\n\n```\n{{ url_for('static', filename='style.css') }}\n```\n\nBesides CSS, other types of static files might be files with JavaScript functions, or a logo image. They are all placed under the `flaskr/static` directory and referenced with `url_for('static', filename='...')`.\n\nThis tutorial isn’t focused on how to write CSS, so you can just copy the following into the `flaskr/static/style.css` file:\n\n`flaskr/static/style.css`\n\n```\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nrh { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post > header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post > header > div:first-of-type { flex: auto; }\n.post > header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n```\n\nYou can find a less compact version of `style.css` in the [example code](https://github.com/pallets/flask/tree/main/examples/tutorial/flaskr/static/style.css).\n\nGo to [http://127.0.0.1:5000/auth/login](http://127.0.0.1:5000/auth/login) and the page should look like the screenshot below.\n\n![screenshot of login page](https://flask.palletsprojects.com/en/stable/_images/flaskr_login.png)\n\nYou can read more about CSS from [Mozilla’s documentation](https://developer.mozilla.org/docs/Web/CSS). If you change a static file, refresh the browser page. If the change doesn’t show up, try clearing your browser’s cache.\n\nContinue to [Blog Blueprint](https://flask.palletsprojects.com/en/stable/tutorial/blog/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/static", "title": "Static Files", "description": "This section covers how to add static files like CSS to enhance the appearance of authentication views and templates in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:54:40", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/static/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Static Files — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "0bfe4754-df65-4724-a6f8-c4a5d09d0037", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/static", "url": "https://flask.palletsprojects.com/en/stable/tutorial/static/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Static Files in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CSS for Static Files**:\n\n```yaml\nhtml { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nrh { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post > header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post > header > div:first-of-type { flex: auto; }\n.post > header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n```\n\nThis snippet shows you how to css for static files, which is an important aspect of static files.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/static", "title": "Static Files", "description": "This section covers how to add static files like CSS to enhance the appearance of authentication views and templates in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:54:40", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/static/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Static Files — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "0bfe4754-df65-4724-a6f8-c4a5d09d0037", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/static", "url": "https://flask.palletsprojects.com/en/stable/tutorial/static/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Static Files in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you change a static file, refresh the browser page. If the change doesn’t show up, try clearing your browser’s cache.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/static", "title": "Static Files", "description": "This section covers how to add static files like CSS to enhance the appearance of authentication views and templates in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:54:40", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/static/", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Static Files — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "0bfe4754-df65-4724-a6f8-c4a5d09d0037", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/static", "url": "https://flask.palletsprojects.com/en/stable/tutorial/static/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Gunicorn is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Gunicorn in flask-stable.\n\n# Gunicorn\n\nGunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.Here's a quick rundown of what this is about:\n\n## Installing\n\nGunicorn is easy to install, as it does not require external dependencies or compilation. It runs on Windows only under WSL.\n\nCreate a virtualenv, install your application, then install `gunicorn`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gunicorn\n```\n\n\n## Running\n\nThe only required argument to Gunicorn tells it how to load your Flask application. The syntax is `{module_import}:{app_variable}`.\n`module_import` is the dotted import name to the module with your application. `app_variable` is the variable with the application. It can also be a function call (with any arguments) if you’re using the app factory pattern.\n\n```\n# equivalent to 'from hello import app'\n$ gunicorn -w 4 'hello:app'\n\n# equivalent to 'from hello import create_app; create_app()'\n$ gunicorn -w 4 'hello:create_app()'\n\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: sync\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\n```\n\nThe `-w` option specifies the number of processes to run; a starting value could be `CPU * 2`. The default is only 1 worker, which is probably not what you want for the default worker type.\n\nLogs for each request aren’t shown by default, only worker info and errors are shown. To show access logs on stdout, use the `--access-logfile=-` option.\n\n## Binding Externally\n\nGunicorn should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of Gunicorn.\n\nYou can bind to all external IPs on a non-privileged port using the `-b 0.0.0.0` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n```\n$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'\nListening at: http://0.0.0.0:8000 (x)\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n## Async with gevent or eventlet\n\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, Gunicorn provides workers using either [gevent](https://www.gevent.org/) or [eventlet](https://eventlet.net/). This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent/eventlet in your own code to see any benefit to using the workers.\n\nWhen using either gevent or eventlet, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nTo use gevent:\n\n```\n$ gunicorn -k gevent 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: gevent\nBooting worker with pid: x\n```\n\nTo use eventlet:\n\n```\n$ gunicorn -k eventlet 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: eventlet\nBooting worker with pid: x\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "overview", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nGunicorn is easy to install, as it does not require external dependencies or compilation. It runs on Windows only under WSL.\n\nCreate a virtualenv, install your application, then install `gunicorn`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gunicorn\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "section_detail", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nThe only required argument to Gunicorn tells it how to load your Flask application. The syntax is `{module_import}:{app_variable}`.\n`module_import` is the dotted import name to the module with your application. `app_variable` is the variable with the application. It can also be a function call (with any arguments) if you’re using the app factory pattern.\n\n```\n# equivalent to 'from hello import app'\n$ gunicorn -w 4 'hello:app'\n\n# equivalent to 'from hello import create_app; create_app()'\n$ gunicorn -w 4 'hello:create_app()'\n\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: sync\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\n```\n\nThe `-w` option specifies the number of processes to run; a starting value could be `CPU * 2`. The default is only 1 worker, which is probably not what you want for the default worker type.\n\nLogs for each request aren’t shown by default, only worker info and errors are shown. To show access logs on stdout, use the `--access-logfile=-` option..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "section_detail", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\nGunicorn should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](https://flask.palletsprojects.com/en/stable/deploying/nginx/) or [Apache httpd](https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/) should be used in front of Gunicorn.\n\nYou can bind to all external IPs on a non-privileged port using the `-b 0.0.0.0` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n```\n$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'\nListening at: http://0.0.0.0:8000 (x)\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "section_detail", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I async with gevent or eventlet in flask-stable?\n\nAssistant: To async with gevent or eventlet in flask-stable, here's what you do:\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, Gunicorn provides workers using either [gevent](https://www.gevent.org/) or [eventlet](https://eventlet.net/). This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent/eventlet in your own code to see any benefit to using the workers.\n\nWhen using either gevent or eventlet, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nTo use gevent:\n\n```\n$ gunicorn -k gevent 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: gevent\nBooting worker with pid: x\n```\n\nTo use eventlet:\n\n```\n$ gunicorn -k eventlet 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: eventlet\nBooting worker with pid: x\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "section_detail", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Gunicorn in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing Gunicorn**:\n\n```yaml\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gunicorn\n```\n\nThis snippet shows you how to installing gunicorn, which is an important aspect of gunicorn.\n\n**Running Gunicorn**:\n\n```yaml\n$ gunicorn -w 4 'hello:app'\n$ gunicorn -w 4 'hello:create_app()' \nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: sync\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\n```\n\nThis snippet shows you how to running gunicorn, which is an important aspect of gunicorn.\n\n**Binding Externally**:\n\n```yaml\n$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'\nListening at: http://0.0.0.0:8000 (x) \n\n```\n\nThis snippet shows you how to binding externally, which is an important aspect of gunicorn.\n\n**Using gevent with Gunicorn**:\n\n```yaml\n$ gunicorn -k gevent 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: gevent\nBooting worker with pid: x\n```\n\nThis snippet shows you how to using gevent with gunicorn, which is an important aspect of gunicorn.\n\n**Using eventlet with Gunicorn**:\n\n```yaml\n$ gunicorn -k eventlet 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: eventlet\nBooting worker with pid: x\n```\n\nThis snippet shows you how to using eventlet with gunicorn, which is an important aspect of gunicorn.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "code_examples", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Gunicorn in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGunicorn should not be run as root to avoid security risks.\n\nUse a reverse proxy like nginx or Apache httpd in front of Gunicorn for production deployments.\n\nThe `-w` option should be set to a value like `CPU * 2` for better performance.\n\nTo show access logs on stdout, use the `--access-logfile=-` option.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "title": "Gunicorn", "description": "Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:56:39", "type": "best_practices", "page_metadata": {"title": "Gunicorn — Flask Documentation (3.1.x)", "language": "en", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/deploying/gunicorn/", "scrapeId": "ae97a523-b56c-4315-8d82-121273dd187b", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn", "url": "https://flask.palletsprojects.com/en/stable/deploying/gunicorn/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Make the Project Installable is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Make the Project Installable in flask-stable.\n\n# Make the Project Installable\n\nMaking your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.Here's a quick rundown of what this is about:\n\n## Describe the Project\n\nThe `pyproject.toml` file describes your project and how to build it.\n\n`pyproject.toml` [¶](https://flask.palletsprojects.com/en/stable/tutorial/install/#id1 \"Link to this code\")\n\n```\n[project]\nname = \"flaskr\"\nversion = \"1.0.0\"\ndescription = \"The basic blog app built in the Flask tutorial.\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nSee the official [Packaging tutorial](https://packaging.python.org/tutorials/packaging-projects/) for more explanation of the files and options used.\n\n## Install the Project\n\nUse `pip` to install your project in the virtual environment.\n\n```\n$ pip install -e .\n```\n\nThis tells pip to find `pyproject.toml` in the current directory and install the project in _editable_ or _development_ mode. Editable mode means that as you make changes to your local code, you’ll only need to re-install if you change the metadata about the project, such as its dependencies.\n\nYou can observe that the project is now installed with `pip list`.\n\n```\n$ pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nWerkzeug       0.14.1\n```\n\nNothing changes from how you’ve been running your project so far. `--app` is still set to `flaskr` and `flask run` still runs the application, but you can call it from anywhere, not just the `flask-tutorial` directory.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/install", "title": "Make the Project Installable", "description": "Making your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:10", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/install/", "readthedocs-project-slug": "flask", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Make the Project Installable — Flask Documentation (3.1.x)", "scrapeId": "b10f01a1-ea36-400d-8639-f152b1ec950d", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/install", "url": "https://flask.palletsprojects.com/en/stable/tutorial/install/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I describe the project in flask-stable?\n\nAssistant: To describe the project in flask-stable, here's what you do:\nThe `pyproject.toml` file describes your project and how to build it.\n\n`pyproject.toml` [¶](https://flask.palletsprojects.com/en/stable/tutorial/install/#id1 \"Link to this code\")\n\n```\n[project]\nname = \"flaskr\"\nversion = \"1.0.0\"\ndescription = \"The basic blog app built in the Flask tutorial.\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nSee the official [Packaging tutorial](https://packaging.python.org/tutorials/packaging-projects/) for more explanation of the files and options used..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/install", "title": "Make the Project Installable", "description": "Making your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:10", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/install/", "readthedocs-project-slug": "flask", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Make the Project Installable — Flask Documentation (3.1.x)", "scrapeId": "b10f01a1-ea36-400d-8639-f152b1ec950d", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/install", "url": "https://flask.palletsprojects.com/en/stable/tutorial/install/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I install the project in flask-stable?\n\nAssistant: To install the project in flask-stable, here's what you do:\nUse `pip` to install your project in the virtual environment.\n\n```\n$ pip install -e .\n```\n\nThis tells pip to find `pyproject.toml` in the current directory and install the project in _editable_ or _development_ mode. Editable mode means that as you make changes to your local code, you’ll only need to re-install if you change the metadata about the project, such as its dependencies.\n\nYou can observe that the project is now installed with `pip list`.\n\n```\n$ pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nWerkzeug       0.14.1\n```\n\nNothing changes from how you’ve been running your project so far. `--app` is still set to `flaskr` and `flask run` still runs the application, but you can call it from anywhere, not just the `flask-tutorial` directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/install", "title": "Make the Project Installable", "description": "Making your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:10", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/install/", "readthedocs-project-slug": "flask", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Make the Project Installable — Flask Documentation (3.1.x)", "scrapeId": "b10f01a1-ea36-400d-8639-f152b1ec950d", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/install", "url": "https://flask.palletsprojects.com/en/stable/tutorial/install/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Make the Project Installable in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**pyproject.toml**:\n\n```yaml\n[project]\nname = \"flaskr\"\nversion = \"1.0.0\"\ndescription = \"The basic blog app built in the Flask tutorial.\"\ndependencies = [\\\n    \"flask\",\\\n]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\nThis snippet shows you how to pyproject.toml, which is an important aspect of make the project installable.\n\n**Install the Project Command**:\n\n```yaml\n$ pip install -e .\n```\n\nThis snippet shows you how to install the project command, which is an important aspect of make the project installable.\n\n**List Installed Packages**:\n\n```yaml\n$ pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nWerkzeug       0.14.1\n```\n\nThis snippet shows you how to list installed packages, which is an important aspect of make the project installable.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/install", "title": "Make the Project Installable", "description": "Making your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:10", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/install/", "readthedocs-project-slug": "flask", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Make the Project Installable — Flask Documentation (3.1.x)", "scrapeId": "b10f01a1-ea36-400d-8639-f152b1ec950d", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/install", "url": "https://flask.palletsprojects.com/en/stable/tutorial/install/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Make the Project Installable in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways start with making your project installable in your future projects.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/install", "title": "Make the Project Installable", "description": "Making your project installable means that you can build a wheel file and install that in another environment, just like you installed Flask in your project’s environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:10", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/tutorial/install/", "readthedocs-project-slug": "flask", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Make the Project Installable — Flask Documentation (3.1.x)", "scrapeId": "b10f01a1-ea36-400d-8639-f152b1ec950d", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/install", "url": "https://flask.palletsprojects.com/en/stable/tutorial/install/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Adding a favicon is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Adding a favicon in flask-stable.\n\n# Adding a favicon\n\nA guide on how to add a favicon to a Flask application, including code examples and best practices.Here's a quick rundown of what this is about:\n\n## Introduction\n\nA “favicon” is an icon used by browsers for tabs and bookmarks. This helps to distinguish your website and to give it a unique brand.\n\n## Adding a Favicon to Flask\n\nA common question is how to add a favicon to a Flask application. First, of course, you need an icon. It should be 16 × 16 pixels and in the ICO file format. This is not a requirement but a de-facto standard supported by all relevant browsers. Put the icon in your static directory as `favicon.ico`.\n\n## Link Tag in HTML\n\nNow, to get browsers to find your icon, the correct way is to add a link tag in your HTML. So, for example:\n\n```\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n```\n\nThat’s all you need for most browsers, however some really old ones do not support this standard.\n\n## Serving the Favicon at Root\n\nThe old de-facto standard is to serve this file, with this name, at the website root. If your application is not mounted at the root path of the domain you either need to configure the web server to serve the icon at the root or if you can’t do that you’re out of luck. If however your application is the root you can simply route a redirect:\n\n```\napp.add_url_rule('/favicon.ico',\n                 redirect_to=url_for('static', filename='favicon.ico'))\n```\n\nIf you want to save the extra redirect request you can also write a view using [`send_from_directory()`](https://flask.palletsprojects.com/en/stable/api/#flask.send_from_directory \"flask.send_from_directory\"): \n\n```\nimport os\nfrom flask import send_from_directory\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                               'favicon.ico', mimetype='image/vnd.microsoft.icon')\n```\n\nWe can leave out the explicit mimetype and it will be guessed, but we may as well specify it to avoid the extra guessing, as it will always be the same.\n\n## Best Practices\n\nThe above will serve the icon via your application and if possible it’s better to configure your dedicated web server to serve it; refer to the web server’s documentation.\n\n## See also\n\n- The [Favicon](https://en.wikipedia.org/wiki/Favicon) article on Wikipedia\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I introduction in flask-stable?\n\nAssistant: To introduction in flask-stable, here's what you do:\nA “favicon” is an icon used by browsers for tabs and bookmarks. This helps to distinguish your website and to give it a unique brand..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I adding a favicon to flask in flask-stable?\n\nAssistant: To adding a favicon to flask in flask-stable, here's what you do:\nA common question is how to add a favicon to a Flask application. First, of course, you need an icon. It should be 16 × 16 pixels and in the ICO file format. This is not a requirement but a de-facto standard supported by all relevant browsers. Put the icon in your static directory as `favicon.ico`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I link tag in html in flask-stable?\n\nAssistant: To link tag in html in flask-stable, here's what you do:\nNow, to get browsers to find your icon, the correct way is to add a link tag in your HTML. So, for example:\n\n```\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n```\n\nThat’s all you need for most browsers, however some really old ones do not support this standard..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I serving the favicon at root in flask-stable?\n\nAssistant: To serving the favicon at root in flask-stable, here's what you do:\nThe old de-facto standard is to serve this file, with this name, at the website root. If your application is not mounted at the root path of the domain you either need to configure the web server to serve the icon at the root or if you can’t do that you’re out of luck. If however your application is the root you can simply route a redirect:\n\n```\napp.add_url_rule('/favicon.ico',\n                 redirect_to=url_for('static', filename='favicon.ico'))\n```\n\nIf you want to save the extra redirect request you can also write a view using [`send_from_directory()`](https://flask.palletsprojects.com/en/stable/api/#flask.send_from_directory \"flask.send_from_directory\"): \n\n```\nimport os\nfrom flask import send_from_directory\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                               'favicon.ico', mimetype='image/vnd.microsoft.icon')\n```\n\nWe can leave out the explicit mimetype and it will be guessed, but we may as well specify it to avoid the extra guessing, as it will always be the same..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I best practices in flask-stable?\n\nAssistant: To best practices in flask-stable, here's what you do:\nThe above will serve the icon via your application and if possible it’s better to configure your dedicated web server to serve it; refer to the web server’s documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I see also in flask-stable?\n\nAssistant: To see also in flask-stable, here's what you do:\n- The [Favicon](https://en.wikipedia.org/wiki/Favicon) article on Wikipedia.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Adding a favicon in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTML Link Tag for Favicon**:\n\n```yaml\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n```\n\nThis snippet shows you how to html link tag for favicon, which is an important aspect of adding a favicon.\n\n**Redirecting to Favicon**:\n\n```yaml\napp.add_url_rule('/favicon.ico',\n                 redirect_to=url_for('static', filename='favicon.ico'))\n```\n\nThis snippet shows you how to redirecting to favicon, which is an important aspect of adding a favicon.\n\n**Serving Favicon with send_from_directory**:\n\n```yaml\nimport os\nfrom flask import send_from_directory\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                               'favicon.ico', mimetype='image/vnd.microsoft.icon')\n```\n\nThis snippet shows you how to serving favicon with send_from_directory, which is an important aspect of adding a favicon.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Adding a favicon in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a 16 × 16 pixels icon in ICO file format for best compatibility.\n\nPlace the favicon in the static directory as 'favicon.ico'.\n\nAdd a link tag in your HTML to reference the favicon.\n\nConsider configuring your web server to serve the favicon directly for better performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "title": "Adding a favicon", "description": "A guide on how to add a favicon to a Flask application, including code examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:58:32", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Adding a favicon — Flask Documentation (3.1.x)", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/patterns/favicon/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "scrapeId": "96b8c8ba-4830-4a32-838a-aa383dbf389b", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/favicon", "url": "https://flask.palletsprojects.com/en/stable/patterns/favicon/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Project Layout is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Project Layout in flask-stable.\n\n# Project Layout\n\nThis section covers the structure and organization of a Flask project, including directory layout and file organization.Here's a quick rundown of what this is about:\n\n## Creating a Project Directory\n\nCreate a project directory and enter it:\n\n```\n$ mkdir flask-tutorial\n$ cd flask-tutorial\n```\n\nThen follow the installation instructions to set up a Python virtual environment and install Flask for your project. The tutorial will assume you’re working from the `flask-tutorial` directory from now on. The file names at the top of each code block are relative to this directory.\n\n## Simple Flask Application\n\nA Flask application can be as simple as a single file.\n\n`hello.py`\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n```\n\nHowever, as a project gets bigger, it becomes overwhelming to keep all the code in one file. Python projects use _packages_ to organize code into multiple modules that can be imported where needed, and the tutorial will do this as well.\n\n## Project Directory Structure\n\nThe project directory will contain:\n\n- `flaskr/`, a Python package containing your application code and files.\n- `tests/`, a directory containing test modules.\n- `.venv/`, a Python virtual environment where Flask and other dependencies are installed.\n- Installation files telling Python how to install your project.\n- Version control config, such as git. You should make a habit of using some type of version control for all your projects, no matter the size.\n- Any other project files you might add in the future.\n\nBy the end, your project layout will look like this:\n\n```\n/home/user/Projects/flask-tutorial\n├── flaskr/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── schema.sql\n│   ├── auth.py\n│   ├── blog.py\n│   ├── templates/\n│   │   ├── base.html\n│   │   ├── auth/\n│   │   │   ├── login.html\n│   │   │   └── register.html\n│   │   └── blog/\n│   │       ├── create.html\n│   │       ├── index.html\n│   │       └── update.html\n│   └── static/\n│       └── style.css\n├── tests/\n│   ├── conftest.py\n│   ├── data.sql\n│   ├── test_factory.py\n│   ├── test_db.py\n│   ├── test_auth.py\n│   └── test_blog.py\n├── .venv/\n├── pyproject.toml\n└── MANIFEST.in\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I creating a project directory in flask-stable?\n\nAssistant: To creating a project directory in flask-stable, here's what you do:\nCreate a project directory and enter it:\n\n```\n$ mkdir flask-tutorial\n$ cd flask-tutorial\n```\n\nThen follow the installation instructions to set up a Python virtual environment and install Flask for your project. The tutorial will assume you’re working from the `flask-tutorial` directory from now on. The file names at the top of each code block are relative to this directory..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I simple flask application in flask-stable?\n\nAssistant: To simple flask application in flask-stable, here's what you do:\nA Flask application can be as simple as a single file.\n\n`hello.py`\n\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n```\n\nHowever, as a project gets bigger, it becomes overwhelming to keep all the code in one file. Python projects use _packages_ to organize code into multiple modules that can be imported where needed, and the tutorial will do this as well..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I project directory structure in flask-stable?\n\nAssistant: To project directory structure in flask-stable, here's what you do:\nThe project directory will contain:\n\n- `flaskr/`, a Python package containing your application code and files.\n- `tests/`, a directory containing test modules.\n- `.venv/`, a Python virtual environment where Flask and other dependencies are installed.\n- Installation files telling Python how to install your project.\n- Version control config, such as git. You should make a habit of using some type of version control for all your projects, no matter the size.\n- Any other project files you might add in the future.\n\nBy the end, your project layout will look like this:\n\n```\n/home/user/Projects/flask-tutorial\n├── flaskr/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── schema.sql\n│   ├── auth.py\n│   ├── blog.py\n│   ├── templates/\n│   │   ├── base.html\n│   │   ├── auth/\n│   │   │   ├── login.html\n│   │   │   └── register.html\n│   │   └── blog/\n│   │       ├── create.html\n│   │       ├── index.html\n│   │       └── update.html\n│   └── static/\n│       └── style.css\n├── tests/\n│   ├── conftest.py\n│   ├── data.sql\n│   ├── test_factory.py\n│   ├── test_db.py\n│   ├── test_auth.py\n│   └── test_blog.py\n├── .venv/\n├── pyproject.toml\n└── MANIFEST.in\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Project Layout in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Flask Application**:\n\n```yaml\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n```\n```\n\nThis snippet shows you how to basic flask application, which is an important aspect of project layout.\n\n**.gitignore Example**:\n\n```yaml\n.venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n\n```\n\nThis snippet shows you how to .gitignore example, which is an important aspect of project layout.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Project Layout in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake a habit of using some type of version control for all your projects, no matter the size.\n\nIgnore files that you didn’t write when using version control.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "title": "Project Layout", "description": "This section covers the structure and organization of a Flask project, including directory layout and file organization.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:58:56", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "title": "Project Layout — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/tutorial/layout/", "scrapeId": "1fc44115-f12e-4656-bbb9-84eef5174943", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/layout", "url": "https://flask.palletsprojects.com/en/stable/tutorial/layout/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what MongoDB with MongoEngine is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain MongoDB with MongoEngine in flask-stable.\n\n# MongoDB with MongoEngine\n\nUsing a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.Here's a quick rundown of what this is about:\n\n## Configuration\n\nBasic setup can be done by defining `MONGODB_SETTINGS` on `app.config` and creating a `MongoEngine` instance.\n\n```\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    \"db\": \"myapp\",\n}\ndb = MongoEngine(app)\n```\n\n\n## Mapping Documents\n\nTo declare a model that represents a Mongo document, create a class that inherits from `Document` and declare each of the fields.\n\n```\nimport mongoengine as me\n\nclass Movie(me.Document):\n    title = me.StringField(required=True)\n    year = me.IntField()\n    rated = me.StringField()\n    director = me.StringField()\n    actors = me.ListField()\n```\n\nIf the document has nested fields, use `EmbeddedDocument` to defined the fields of the embedded document and `EmbeddedDocumentField` to declare it on the parent document.\n\n```\nclass Imdb(me.EmbeddedDocument):\n    imdb_id = me.StringField()\n    rating = me.DecimalField()\n    votes = me.IntField()\n\nclass Movie(me.Document):\n    ...\n    imdb = me.EmbeddedDocumentField(Imdb)\n```\n\n\n## Creating Data\n\nInstantiate your document class with keyword arguments for the fields. You can also assign values to the field attributes after instantiation. Then call `doc.save()`.\n\n```\nbttf = Movie(title=\"Back To The Future\", year=1985)\nbttf.actors = [\\\n    \"Michael J. Fox\",\\\n    \"Christopher Lloyd\"\\\n]\nbttf.imdb = Imdb(imdb_id=\"tt0088763\", rating=8.5)\nbttf.save()\n```\n\n\n## Queries\n\nUse the class `objects` attribute to make queries. A keyword argument looks for an equal value on the field.\n\n```\nbttf = Movies.objects(title=\"Back To The Future\").get_or_404()\n```\n\nQuery operators may be used by concatenating them with the field name using a double-underscore. `objects`, and queries returned by calling it, are iterable.\n\n```\nsome_theron_movie = Movie.objects(actors__in=[\"Charlize Theron\"]).first()\n\nfor recents in Movie.objects(year__gte=2017):\n    print(recents.title)\n```\n\n\n## Documentation\n\nThere are many more ways to define and query documents with MongoEngine. For more information, check out the official documentation.\n\nFlask-MongoEngine adds helpful utilities on top of MongoEngine. Check out their documentation as well.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "overview", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configuration in flask-stable?\n\nAssistant: To configuration in flask-stable, here's what you do:\nBasic setup can be done by defining `MONGODB_SETTINGS` on `app.config` and creating a `MongoEngine` instance.\n\n```\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    \"db\": \"myapp\",\n}\ndb = MongoEngine(app)\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "section_detail", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I mapping documents in flask-stable?\n\nAssistant: To mapping documents in flask-stable, here's what you do:\nTo declare a model that represents a Mongo document, create a class that inherits from `Document` and declare each of the fields.\n\n```\nimport mongoengine as me\n\nclass Movie(me.Document):\n    title = me.StringField(required=True)\n    year = me.IntField()\n    rated = me.StringField()\n    director = me.StringField()\n    actors = me.ListField()\n```\n\nIf the document has nested fields, use `EmbeddedDocument` to defined the fields of the embedded document and `EmbeddedDocumentField` to declare it on the parent document.\n\n```\nclass Imdb(me.EmbeddedDocument):\n    imdb_id = me.StringField()\n    rating = me.DecimalField()\n    votes = me.IntField()\n\nclass Movie(me.Document):\n    ...\n    imdb = me.EmbeddedDocumentField(Imdb)\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "section_detail", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I creating data in flask-stable?\n\nAssistant: To creating data in flask-stable, here's what you do:\nInstantiate your document class with keyword arguments for the fields. You can also assign values to the field attributes after instantiation. Then call `doc.save()`.\n\n```\nbttf = Movie(title=\"Back To The Future\", year=1985)\nbttf.actors = [\\\n    \"Michael J. Fox\",\\\n    \"Christopher Lloyd\"\\\n]\nbttf.imdb = Imdb(imdb_id=\"tt0088763\", rating=8.5)\nbttf.save()\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "section_detail", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I queries in flask-stable?\n\nAssistant: To queries in flask-stable, here's what you do:\nUse the class `objects` attribute to make queries. A keyword argument looks for an equal value on the field.\n\n```\nbttf = Movies.objects(title=\"Back To The Future\").get_or_404()\n```\n\nQuery operators may be used by concatenating them with the field name using a double-underscore. `objects`, and queries returned by calling it, are iterable.\n\n```\nsome_theron_movie = Movie.objects(actors__in=[\"Charlize Theron\"]).first()\n\nfor recents in Movie.objects(year__gte=2017):\n    print(recents.title)\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "section_detail", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I documentation in flask-stable?\n\nAssistant: To documentation in flask-stable, here's what you do:\nThere are many more ways to define and query documents with MongoEngine. For more information, check out the official documentation.\n\nFlask-MongoEngine adds helpful utilities on top of MongoEngine. Check out their documentation as well..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "section_detail", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for MongoDB with MongoEngine in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Flask-MongoEngine**:\n\n```yaml\npip install flask-mongoengine\n```\n\nThis snippet shows you how to install flask-mongoengine, which is an important aspect of mongodb with mongoengine.\n\n**Basic Configuration**:\n\n```yaml\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    \"db\": \"myapp\",\n}\ndb = MongoEngine(app)\n```\n\nThis snippet shows you how to basic configuration, which is an important aspect of mongodb with mongoengine.\n\n**Mapping Documents Example**:\n\n```yaml\nimport mongoengine as me\n\nclass Movie(me.Document):\n    title = me.StringField(required=True)\n    year = me.IntField()\n    rated = me.StringField()\n    director = me.StringField()\n    actors = me.ListField()\n```\n\nThis snippet shows you how to mapping documents example, which is an important aspect of mongodb with mongoengine.\n\n**Creating Data Example**:\n\n```yaml\nbttf = Movie(title=\"Back To The Future\", year=1985)\nbttf.actors = [\\\n    \"Michael J. Fox\",\\\n    \"Christopher Lloyd\"\\\n]\nbttf.imdb = Imdb(imdb_id=\"tt0088763\", rating=8.5)\nbttf.save()\n```\n\nThis snippet shows you how to creating data example, which is an important aspect of mongodb with mongoengine.\n\n**Querying Example**:\n\n```yaml\nbttf = Movies.objects(title=\"Back To The Future\").get_or_404()\n\nsome_theron_movie = Movie.objects(actors__in=[\"Charlize Theron\"]).first()\n\nfor recents in Movie.objects(year__gte=2017):\n    print(recents.title)\n```\n\nThis snippet shows you how to querying example, which is an important aspect of mongodb with mongoengine.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "code_examples", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using MongoDB with MongoEngine in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have a running MongoDB server and Flask-MongoEngine installed before starting.\n\nUse `EmbeddedDocument` for nested fields in your MongoDB documents.\n\nUtilize query operators for more complex queries.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "title": "MongoDB with MongoEngine", "description": "Using a document database like MongoDB is a common alternative to relational SQL databases. This pattern shows how to use MongoEngine, a document mapper library, to integrate with MongoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:59:23", "type": "best_practices", "page_metadata": {"title": "MongoDB with MongoEngine — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/mongoengine/", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "81a04c2b-952f-40d5-9f5d-6a0d34b27325", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine", "url": "https://flask.palletsprojects.com/en/stable/patterns/mongoengine/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what nginx is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain nginx in flask-stable.\n\n# nginx\n\nThis page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.Here's a quick rundown of what this is about:\n\n## Domain Name\n\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file.\n\n## Configuration\n\nThe nginx configuration is located at `/etc/nginx/nginx.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `nginx.conf`.\n\nRemove or comment out any existing `server` section. Add a `server` section and use the `proxy_pass` directive to point to the address the WSGI server is listening on. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "title": "nginx", "description": "This page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:59:54", "type": "overview", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/deploying/nginx/", "title": "nginx — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "e4c00cfd-8fbf-4c07-9771-95819e859d4c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "url": "https://flask.palletsprojects.com/en/stable/deploying/nginx/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I domain name in flask-stable?\n\nAssistant: To domain name in flask-stable, here's what you do:\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "title": "nginx", "description": "This page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:59:54", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/deploying/nginx/", "title": "nginx — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "e4c00cfd-8fbf-4c07-9771-95819e859d4c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "url": "https://flask.palletsprojects.com/en/stable/deploying/nginx/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configuration in flask-stable?\n\nAssistant: To configuration in flask-stable, here's what you do:\nThe nginx configuration is located at `/etc/nginx/nginx.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `nginx.conf`.\n\nRemove or comment out any existing `server` section. Add a `server` section and use the `proxy_pass` directive to point to the address the WSGI server is listening on. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "title": "nginx", "description": "This page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:59:54", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/deploying/nginx/", "title": "nginx — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "e4c00cfd-8fbf-4c07-9771-95819e859d4c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "url": "https://flask.palletsprojects.com/en/stable/deploying/nginx/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for nginx in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**/etc/hosts**:\n\n```yaml\n127.0.0.1 hello.localhost\n```\n\nThis snippet shows you how to /etc/hosts, which is an important aspect of nginx.\n\n**/etc/nginx.conf**:\n\n```yaml\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Prefix /;\n    }\n}\n```\n\nThis snippet shows you how to /etc/nginx.conf, which is an important aspect of nginx.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "title": "nginx", "description": "This page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:59:54", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/deploying/nginx/", "title": "nginx — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "e4c00cfd-8fbf-4c07-9771-95819e859d4c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "url": "https://flask.palletsprojects.com/en/stable/deploying/nginx/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using nginx in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe sure to read Nginx documentation to understand what features are available.\n\nTell Flask it is Behind a Proxy so that your application uses the correct headers.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "title": "nginx", "description": "This page outlines the basics of configuring Nginx to proxy your application when deploying with Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:59:54", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/deploying/nginx/", "title": "nginx — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "e4c00cfd-8fbf-4c07-9771-95819e859d4c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/nginx", "url": "https://flask.palletsprojects.com/en/stable/deploying/nginx/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what mod_wsgi is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain mod_wsgi in flask-stable.\n\n# mod_wsgi\n\nmod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.Here's a quick rundown of what this is about:\n\n## Installing\n\nInstalling mod_wsgi requires a compiler and the Apache server and development headers installed. You will get an error if they are not. How to install them depends on the OS and package manager that you use.\n\nCreate a virtualenv, install your application, then install `mod_wsgi`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install mod_wsgi\n``\n\n## Running\n\nThe only argument to `mod_wsgi-express` specifies a script containing your Flask application, which must be called `application`. You can write a small script to import your app with this name, or to create it if using the app factory pattern.\n\n`wsgi.py`\n\n```\nfrom hello import app\n\napplication = app\n```\n\n`wsgi.py`\n\n```\nfrom hello import create_app\n\napplication = create_app()\n```\n\nNow run the `mod_wsgi-express start-server` command.\n\n```\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```\n\nThe `--processes` option specifies the number of worker processes to run; a starting value could be `CPU * 2`.\n\nLogs for each request aren’t show in the terminal. If an error occurs, its information is written to the error log file shown when starting the server.\n\n## Binding Externally\n\nUnlike the other WSGI servers in these docs, mod_wsgi can be run as root to bind to privileged ports like 80 and 443. However, it must be configured to drop permissions to a different user and group for the worker processes.\n\nFor example, if you created a `hello` user and group, you should install your virtualenv and application as that user, then tell mod_wsgi to drop to that user after starting.\n\n```\n$ sudo /home/hello/.venv/bin/mod_wsgi-express start-server \\\n    /home/hello/wsgi.py \\\n    --user hello --group hello --port 80 --processes 4\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nInstalling mod_wsgi requires a compiler and the Apache server and development headers installed. You will get an error if they are not. How to install them depends on the OS and package manager that you use.\n\nCreate a virtualenv, install your application, then install `mod_wsgi`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install mod_wsgi\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nThe only argument to `mod_wsgi-express` specifies a script containing your Flask application, which must be called `application`. You can write a small script to import your app with this name, or to create it if using the app factory pattern.\n\n`wsgi.py`\n\n```\nfrom hello import app\n\napplication = app\n```\n\n`wsgi.py`\n\n```\nfrom hello import create_app\n\napplication = create_app()\n```\n\nNow run the `mod_wsgi-express start-server` command.\n\n```\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```\n\nThe `--processes` option specifies the number of worker processes to run; a starting value could be `CPU * 2`.\n\nLogs for each request aren’t show in the terminal. If an error occurs, its information is written to the error log file shown when starting the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\nUnlike the other WSGI servers in these docs, mod_wsgi can be run as root to bind to privileged ports like 80 and 443. However, it must be configured to drop permissions to a different user and group for the worker processes.\n\nFor example, if you created a `hello` user and group, you should install your virtualenv and application as that user, then tell mod_wsgi to drop to that user after starting.\n\n```\n$ sudo /home/hello/.venv/bin/mod_wsgi-express start-server \\\n    /home/hello/wsgi.py \\\n    --user hello --group hello --port 80 --processes 4\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for mod_wsgi in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing mod_wsgi**:\n\n```yaml\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install mod_wsgi\n```\n\nThis snippet shows you how to installing mod_wsgi, which is an important aspect of mod_wsgi.\n\n**Running mod_wsgi-express**:\n\n```yaml\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```\n\nThis snippet shows you how to running mod_wsgi-express, which is an important aspect of mod_wsgi.\n\n**Binding Externally with mod_wsgi**:\n\n```yaml\n$ sudo /home/hello/.venv/bin/mod_wsgi-express start-server \\\n    /home/hello/wsgi.py \\\n    --user hello --group hello --port 80 --processes 4\n```\n\nThis snippet shows you how to binding externally with mod_wsgi, which is an important aspect of mod_wsgi.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using mod_wsgi in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe sure to read the mod_wsgi-express, mod_wsgi, and Apache httpd documentation to understand what features are available.\n\nThe `--processes` option specifies the number of worker processes to run; a starting value could be `CPU * 2`.\n\nLogs for each request aren’t shown in the terminal. If an error occurs, its information is written to the error log file shown when starting the server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "title": "mod_wsgi", "description": "mod_wsgi is a WSGI server integrated with the Apache httpd server. The modern mod_wsgi-express command makes it easy to configure and start the server without needing to write Apache httpd configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:09", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/deploying/mod_wsgi/", "language": "en", "title": "mod_wsgi — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "136a63d1-f3b7-4391-91d9-724153774f51", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/mod_wsgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what gevent is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain gevent in flask-stable.\n\n# gevent\n\nThis section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.Here's a quick rundown of what this is about:\n\n## gevent\n\nPrefer using Gunicorn or uWSGI with gevent workers rather than using gevent directly. Gunicorn and uWSGI provide much more configurable and production-tested servers.\n\ngevent allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses greenlet to enable task switching without writing `async/await` or using `asyncio`.\n\neventlet is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\ngevent provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use gevent in your own code to see any benefit to using the server.\n\n## Installing\n\nWhen using gevent, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `gevent`.\n\n## Running\n\nTo use gevent to serve your application, write a script that imports its `WSGIServer`, as well as your app or app factory.\n\n## Binding Externally\n\ngevent should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as nginx or Apache httpd should be used in front of gevent.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "overview", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I gevent in flask-stable?\n\nAssistant: To gevent in flask-stable, here's what you do:\nPrefer using Gunicorn or uWSGI with gevent workers rather than using gevent directly. Gunicorn and uWSGI provide much more configurable and production-tested servers.\n\ngevent allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses greenlet to enable task switching without writing `async/await` or using `asyncio`.\n\neventlet is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\ngevent provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use gevent in your own code to see any benefit to using the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nWhen using gevent, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `gevent`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nTo use gevent to serve your application, write a script that imports its `WSGIServer`, as well as your app or app factory..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\ngevent should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as nginx or Apache httpd should be used in front of gevent.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for gevent in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing gevent**:\n\n```yaml\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install gevent\n\n```\n\nThis snippet shows you how to installing gevent, which is an important aspect of gevent.\n\n**Running the application with gevent**:\n\n```yaml\nfrom gevent.pywsgi import WSGIServer\nfrom hello import create_app\n\napp = create_app()\nhttp_server = WSGIServer((\"127.0.0.1\", 8000), app)\nhttp_server.serve_forever()\n\n$ python wsgi.py\n```\n\nThis snippet shows you how to running the application with gevent, which is an important aspect of gevent.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "code_examples", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using gevent in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Gunicorn or uWSGI with gevent workers for better configuration and production testing.\n\nEnsure greenlet>=1.0 is installed when using gevent.\n\nDo not run gevent as root to avoid security issues.\n\nUse a reverse proxy like nginx or Apache httpd in front of gevent for binding to privileged ports.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "title": "gevent", "description": "This section covers the use of gevent for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:00:30", "type": "best_practices", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/gevent/", "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "title": "gevent — Flask Documentation (3.1.x)", "scrapeId": "e73e9d22-5595-4860-a4eb-dfbb3bdea4ae", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/gevent", "url": "https://flask.palletsprojects.com/en/stable/deploying/gevent/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Request Content Checksums is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Request Content Checksums in flask-stable.\n\n# Request Content Checksums\n\nThis page covers how to calculate checksums for incoming request data in Flask applications.Here's a quick rundown of what this is about:\n\n## Request Content Checksums\n\nVarious pieces of code can consume the request data and preprocess it. For instance JSON data ends up on the request object already read and processed, form data ends up there as well but goes through a different code path. This seems inconvenient when you want to calculate the checksum of the incoming request data. This is necessary sometimes for some APIs.\n\nFortunately this is however very simple to change by wrapping the input stream.\n\n## Code Example\n\nThe following example calculates the SHA1 checksum of the incoming data as it gets read and stores it in the WSGI environment:\n\n```python\nimport hashlib\n\nclass ChecksumCalcStream(object):\n\n    def __init__(self, stream):\n        self._stream = stream\n        self._hash = hashlib.sha1()\n\n    def read(self, bytes):\n        rv = self._stream.read(bytes)\n        self._hash.update(rv)\n        return rv\n\n    def readline(self, size_hint):\n        rv = self._stream.readline(size_hint)\n        self._hash.update(rv)\n        return rv\n\ndef generate_checksum(request):\n    env = request.environ\n    stream = ChecksumCalcStream(env['wsgi.input'])\n    env['wsgi.input'] = stream\n    return stream._hash\n```\n\nTo use this, all you need to do is to hook the calculating stream in before the request starts consuming data. (Eg: be careful accessing `request.form` or anything of that nature. `before_request_handlers` for instance should be careful not to access it).\n\n## Example Usage\n\n```python\n@app.route('/special-api', methods=['POST'])\ndef special_api():\n    hash = generate_checksum(request)\n    # Accessing this parses the input stream\n    files = request.files\n    # At this point the hash is fully constructed.\n    checksum = hash.hexdigest()\n    return f\"Hash was: {checksum}\"\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I request content checksums in flask-stable?\n\nAssistant: To request content checksums in flask-stable, here's what you do:\nVarious pieces of code can consume the request data and preprocess it. For instance JSON data ends up on the request object already read and processed, form data ends up there as well but goes through a different code path. This seems inconvenient when you want to calculate the checksum of the incoming request data. This is necessary sometimes for some APIs.\n\nFortunately this is however very simple to change by wrapping the input stream..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I code example in flask-stable?\n\nAssistant: To code example in flask-stable, here's what you do:\nThe following example calculates the SHA1 checksum of the incoming data as it gets read and stores it in the WSGI environment:\n\n```python\nimport hashlib\n\nclass ChecksumCalcStream(object):\n\n    def __init__(self, stream):\n        self._stream = stream\n        self._hash = hashlib.sha1()\n\n    def read(self, bytes):\n        rv = self._stream.read(bytes)\n        self._hash.update(rv)\n        return rv\n\n    def readline(self, size_hint):\n        rv = self._stream.readline(size_hint)\n        self._hash.update(rv)\n        return rv\n\ndef generate_checksum(request):\n    env = request.environ\n    stream = ChecksumCalcStream(env['wsgi.input'])\n    env['wsgi.input'] = stream\n    return stream._hash\n```\n\nTo use this, all you need to do is to hook the calculating stream in before the request starts consuming data. (Eg: be careful accessing `request.form` or anything of that nature. `before_request_handlers` for instance should be careful not to access it)..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I example usage in flask-stable?\n\nAssistant: To example usage in flask-stable, here's what you do:\n```python\n@app.route('/special-api', methods=['POST'])\ndef special_api():\n    hash = generate_checksum(request)\n    # Accessing this parses the input stream\n    files = request.files\n    # At this point the hash is fully constructed.\n    checksum = hash.hexdigest()\n    return f\"Hash was: {checksum}\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Request Content Checksums in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Checksum Calculation Example**:\n\n```yaml\nimport hashlib\n\nclass ChecksumCalcStream(object):\n\n    def __init__(self, stream):\n        self._stream = stream\n        self._hash = hashlib.sha1()\n\n    def read(self, bytes):\n        rv = self._stream.read(bytes)\n        self._hash.update(rv)\n        return rv\n\n    def readline(self, size_hint):\n        rv = self._stream.readline(size_hint)\n        self._hash.update(rv)\n        return rv\n\ndef generate_checksum(request):\n    env = request.environ\n    stream = ChecksumCalcStream(env['wsgi.input'])\n    env['wsgi.input'] = stream\n    return stream._hash\n```\n\nThis snippet shows you how to checksum calculation example, which is an important aspect of request content checksums.\n\n**Special API Example Usage**:\n\n```yaml\n@app.route('/special-api', methods=['POST'])\ndef special_api():\n    hash = generate_checksum(request)\n    # Accessing this parses the input stream\n    files = request.files\n    # At this point the hash is fully constructed.\n    checksum = hash.hexdigest()\n    return f\"Hash was: {checksum}\"\n```\n\nThis snippet shows you how to special api example usage, which is an important aspect of request content checksums.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Request Content Checksums in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe careful accessing request.form or similar attributes before hooking the calculating stream.\n\nEnsure that the checksum calculation is done before the request starts consuming data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "title": "Request Content Checksums", "description": "This page covers how to calculate checksums for incoming request data in Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:00:48", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/requestchecksum/", "readthedocs-project-slug": "flask", "title": "Request Content Checksums — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "7038bce1-350c-4014-96ef-f05b46e2e25f", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum", "url": "https://flask.palletsprojects.com/en/stable/patterns/requestchecksum/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Streaming Contents is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Streaming Contents in flask-stable.\n\n# Streaming Contents\n\nThis page covers how to send large amounts of data to the client using generators and direct responses in Flask.Here's a quick rundown of what this is about:\n\n## Basic Usage\n\nThis is a basic view function that generates a lot of CSV data on the fly. The trick is to have an inner function that uses a generator to generate data and to then invoke that function and pass it to a response object:\n\n```\n@app.route('/large.csv')\ndef generate_large_csv():\n    def generate():\n        for row in iter_all_rows():\n            yield f\"{','.join(row)}\\n\"\n    return generate(), {\"Content-Type\": \"text/csv\"}\n```\n\nEach `yield` expression is directly sent to the browser. Note though that some WSGI middlewares might break streaming, so be careful there in debug environments with profilers and other things you might have enabled.\n\n## Streaming from Templates\n\nThe Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions to make this easier to use.\n\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\nThe parts yielded by the render stream tend to match statement blocks in the template.\n\n## Streaming with Context\n\nThe [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") will not be active while the generator is running, because the view has already returned at that point. If you try to access `request`, you’ll get a `RuntimeError`.\n\nIf your generator function relies on data in `request`, use the [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") wrapper. This will keep the request context active during the generator.\n\n```\nfrom flask import stream_with_context, request\nfrom markupsafe import escape\n\n@app.route('/stream')\ndef streamed_response():\n    def generate():\n        yield '<p>Hello '\n        yield escape(request.args['name'])\n        yield '!</p>'\n    return stream_with_context(generate())\n```\n\nIt can also be used as a decorator.\n\n```\n@stream_with_context\ndef generate():\n    ...\n\nreturn generate()\n```\n\nThe [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions automatically use [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") if a request is active.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I basic usage in flask-stable?\n\nAssistant: To basic usage in flask-stable, here's what you do:\nThis is a basic view function that generates a lot of CSV data on the fly. The trick is to have an inner function that uses a generator to generate data and to then invoke that function and pass it to a response object:\n\n```\n@app.route('/large.csv')\ndef generate_large_csv():\n    def generate():\n        for row in iter_all_rows():\n            yield f\"{','.join(row)}\\n\"\n    return generate(), {\"Content-Type\": \"text/csv\"}\n```\n\nEach `yield` expression is directly sent to the browser. Note though that some WSGI middlewares might break streaming, so be careful there in debug environments with profilers and other things you might have enabled..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I streaming from templates in flask-stable?\n\nAssistant: To streaming from templates in flask-stable, here's what you do:\nThe Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions to make this easier to use.\n\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n\nThe parts yielded by the render stream tend to match statement blocks in the template..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I streaming with context in flask-stable?\n\nAssistant: To streaming with context in flask-stable, here's what you do:\nThe [`request`](https://flask.palletsprojects.com/en/stable/api/#flask.request \"flask.request\") will not be active while the generator is running, because the view has already returned at that point. If you try to access `request`, you’ll get a `RuntimeError`.\n\nIf your generator function relies on data in `request`, use the [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") wrapper. This will keep the request context active during the generator.\n\n```\nfrom flask import stream_with_context, request\nfrom markupsafe import escape\n\n@app.route('/stream')\ndef streamed_response():\n    def generate():\n        yield '<p>Hello '\n        yield escape(request.args['name'])\n        yield '!</p>'\n    return stream_with_context(generate())\n```\n\nIt can also be used as a decorator.\n\n```\n@stream_with_context\ndef generate():\n    ...\n\nreturn generate()\n```\n\nThe [`stream_template()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template \"flask.stream_template\") and [`stream_template_string()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_template_string \"flask.stream_template_string\") functions automatically use [`stream_with_context()`](https://flask.palletsprojects.com/en/stable/api/#flask.stream_with_context \"flask.stream_with_context\") if a request is active..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Streaming Contents in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage Example**:\n\n```yaml\n```\n@app.route('/large.csv')\ndef generate_large_csv():\n    def generate():\n        for row in iter_all_rows():\n            yield f\"{','.join(row)}\\n\"\n    return generate(), {\"Content-Type\": \"text/csv\"}\n```\n```\n\nThis snippet shows you how to basic usage example, which is an important aspect of streaming contents.\n\n**Streaming from Templates Example**:\n\n```yaml\n```\nfrom flask import stream_template\n\n@app.get(\"/timeline\")\ndef timeline():\n    return stream_template(\"timeline.html\")\n```\n```\n\nThis snippet shows you how to streaming from templates example, which is an important aspect of streaming contents.\n\n**Streaming with Context Example**:\n\n```yaml\n```\nfrom flask import stream_with_context, request\nfrom markupsafe import escape\n\n@app.route('/stream')\ndef streamed_response():\n    def generate():\n        yield '<p>Hello '\n        yield escape(request.args['name'])\n        yield '!</p>'\n    return stream_with_context(generate())\n```\n```\n\nThis snippet shows you how to streaming with context example, which is an important aspect of streaming contents.\n\n**Decorator Usage Example**:\n\n```yaml\n```\n@stream_with_context\ndef generate():\n    ...\n\nreturn generate()\n```\n```\n\nThis snippet shows you how to decorator usage example, which is an important aspect of streaming contents.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Streaming Contents in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe cautious with WSGI middlewares as they might break streaming, especially in debug environments with profilers enabled.\n\nUse `stream_with_context()` to keep the request context active during the generator execution.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "title": "Streaming Contents", "description": "This page covers how to send large amounts of data to the client using generators and direct responses in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:01:10", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Streaming Contents — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/patterns/streaming/", "scrapeId": "c1b0f5a4-a9fa-4b4e-a83b-c30e76e81259", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/streaming", "url": "https://flask.palletsprojects.com/en/stable/patterns/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Deferred Request Callbacks is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Deferred Request Callbacks in flask-stable.\n\n# Deferred Request Callbacks\n\nThis section explains how to handle response objects in Flask when they do not exist yet, and how to use deferred request callbacks to modify responses.Here's a quick rundown of what this is about:\n\n## Deferred Request Callbacks\n\nOne of the design principles of Flask is that response objects are created and passed down a chain of potential callbacks that can modify them or replace them. When the request handling starts, there is no response object yet. It is created as necessary either by a view function or by some other component in the system.\n\nWhat happens if you want to modify the response at a point where the response does not exist yet? A common example for that would be a [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") callback that wants to set a cookie on the response object.\n\nOne way is to avoid the situation. Very often that is possible. For instance you can try to move that logic into a [`after_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.after_request \"flask.Flask.after_request\") callback instead. However, sometimes moving code there makes it more complicated or awkward to reason about.\n\nAs an alternative, you can use [`after_this_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.after_this_request \"flask.after_this_request\") to register callbacks that will execute after only the current request. This way you can defer code execution from anywhere in the application, based on the current request.\n\nAt any time during a request, we can register a function to be called at the end of the request. For example you can remember the current language of the user in a cookie in a [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") callback:\n\n```python\nfrom flask import request, after_this_request\n\n@app.before_request\ndef detect_user_language():\n    language = request.cookies.get('user_lang')\n\n    if language is None:\n        language = guess_language_from_request()\n\n        # when the response exists, set a cookie with the language\n        @after_this_request\n        def remember_language(response):\n            response.set_cookie('user_lang', language)\n            return response\n\n    g.language = language\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "title": "Deferred Request Callbacks", "description": "This section explains how to handle response objects in Flask when they do not exist yet, and how to use deferred request callbacks to modify responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:35", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/deferredcallbacks/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Deferred Request Callbacks — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "383f047d-4ff9-48cc-9392-427d1bdac81e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I deferred request callbacks in flask-stable?\n\nAssistant: To deferred request callbacks in flask-stable, here's what you do:\nOne of the design principles of Flask is that response objects are created and passed down a chain of potential callbacks that can modify them or replace them. When the request handling starts, there is no response object yet. It is created as necessary either by a view function or by some other component in the system.\n\nWhat happens if you want to modify the response at a point where the response does not exist yet? A common example for that would be a [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") callback that wants to set a cookie on the response object.\n\nOne way is to avoid the situation. Very often that is possible. For instance you can try to move that logic into a [`after_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.after_request \"flask.Flask.after_request\") callback instead. However, sometimes moving code there makes it more complicated or awkward to reason about.\n\nAs an alternative, you can use [`after_this_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.after_this_request \"flask.after_this_request\") to register callbacks that will execute after only the current request. This way you can defer code execution from anywhere in the application, based on the current request.\n\nAt any time during a request, we can register a function to be called at the end of the request. For example you can remember the current language of the user in a cookie in a [`before_request()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.before_request \"flask.Flask.before_request\") callback:\n\n```python\nfrom flask import request, after_this_request\n\n@app.before_request\ndef detect_user_language():\n    language = request.cookies.get('user_lang')\n\n    if language is None:\n        language = guess_language_from_request()\n\n        # when the response exists, set a cookie with the language\n        @after_this_request\n        def remember_language(response):\n            response.set_cookie('user_lang', language)\n            return response\n\n    g.language = language\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "title": "Deferred Request Callbacks", "description": "This section explains how to handle response objects in Flask when they do not exist yet, and how to use deferred request callbacks to modify responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:35", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/deferredcallbacks/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Deferred Request Callbacks — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "383f047d-4ff9-48cc-9392-427d1bdac81e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Deferred Request Callbacks in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Detect User Language Example**:\n\n```yaml\nfrom flask import request, after_this_request\n\n@app.before_request\ndef detect_user_language():\n    language = request.cookies.get('user_lang')\n\n    if language is None:\n        language = guess_language_from_request()\n\n        # when the response exists, set a cookie with the language\n        @after_this_request\n        def remember_language(response):\n            response.set_cookie('user_lang', language)\n            return response\n\n    g.language = language\n\n```\n\nThis snippet shows you how to detect user language example, which is an important aspect of deferred request callbacks.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "title": "Deferred Request Callbacks", "description": "This section explains how to handle response objects in Flask when they do not exist yet, and how to use deferred request callbacks to modify responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:35", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/deferredcallbacks/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Deferred Request Callbacks — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "383f047d-4ff9-48cc-9392-427d1bdac81e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Deferred Request Callbacks in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `after_this_request()` to register callbacks that will execute after only the current request to modify the response.\n\nConsider moving logic to `after_request()` if it simplifies the code and reasoning about it.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "title": "Deferred Request Callbacks", "description": "This section explains how to handle response objects in Flask when they do not exist yet, and how to use deferred request callbacks to modify responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:35", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/patterns/deferredcallbacks/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Deferred Request Callbacks — Flask Documentation (3.1.x)", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "383f047d-4ff9-48cc-9392-427d1bdac81e", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks", "url": "https://flask.palletsprojects.com/en/stable/patterns/deferredcallbacks/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Keep Developing! is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Keep Developing! in flask-stable.\n\n# Keep Developing!\n\nGuidance on continuing development with Flask after completing the tutorial.Here's a quick rundown of what this is about:\n\n## Keep Developing!\n\nYou’ve learned about quite a few Flask and Python concepts throughout the tutorial. Go back and review the tutorial and compare your code with the steps you took to get there. Compare your project to the example project, which might look a bit different due to the step-by-step nature of the tutorial.\n\nThere’s a lot more to Flask than what you’ve seen so far. Even so, you’re now equipped to start developing your own web applications. Check out the Quickstart for an overview of what Flask can do, then dive into the docs to keep learning. Flask uses Jinja, Click, Werkzeug, and ItsDangerous behind the scenes, and they all have their own documentation too. You’ll also be interested in Extensions which make tasks like working with the database or validating form data easier and more powerful.\n\nIf you want to keep developing your Flaskr project, here are some ideas for what to try next:\n\n- A detail view to show a single post. Click a post’s title to go to its page.\n- Like / unlike a post.\n- Comments.\n- Tags. Clicking a tag shows all the posts with that tag.\n- A search box that filters the index page by name.\n- Paged display. Only show 5 posts per page.\n- Upload an image to go along with a post.\n- Format posts using Markdown.\n- An RSS feed of new posts.\n\nHave fun and make awesome applications!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/next", "title": "Keep Developing!", "description": "Guidance on continuing development with Flask after completing the tutorial.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:47", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "title": "Keep Developing! — Flask Documentation (3.1.x)", "language": "en", "readthedocs-resolver-filename": "/tutorial/next/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "1ab8149d-6948-42d9-9b36-440d3e17631f", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/next", "url": "https://flask.palletsprojects.com/en/stable/tutorial/next/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I keep developing! in flask-stable?\n\nAssistant: To keep developing! in flask-stable, here's what you do:\nYou’ve learned about quite a few Flask and Python concepts throughout the tutorial. Go back and review the tutorial and compare your code with the steps you took to get there. Compare your project to the example project, which might look a bit different due to the step-by-step nature of the tutorial.\n\nThere’s a lot more to Flask than what you’ve seen so far. Even so, you’re now equipped to start developing your own web applications. Check out the Quickstart for an overview of what Flask can do, then dive into the docs to keep learning. Flask uses Jinja, Click, Werkzeug, and ItsDangerous behind the scenes, and they all have their own documentation too. You’ll also be interested in Extensions which make tasks like working with the database or validating form data easier and more powerful.\n\nIf you want to keep developing your Flaskr project, here are some ideas for what to try next:\n\n- A detail view to show a single post. Click a post’s title to go to its page.\n- Like / unlike a post.\n- Comments.\n- Tags. Clicking a tag shows all the posts with that tag.\n- A search box that filters the index page by name.\n- Paged display. Only show 5 posts per page.\n- Upload an image to go along with a post.\n- Format posts using Markdown.\n- An RSS feed of new posts.\n\nHave fun and make awesome applications!.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/next", "title": "Keep Developing!", "description": "Guidance on continuing development with Flask after completing the tutorial.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:47", "type": "section_detail", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "title": "Keep Developing! — Flask Documentation (3.1.x)", "language": "en", "readthedocs-resolver-filename": "/tutorial/next/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "1ab8149d-6948-42d9-9b36-440d3e17631f", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/next", "url": "https://flask.palletsprojects.com/en/stable/tutorial/next/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Keep Developing! in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReview the tutorial and compare your code with the steps taken.\n\nCheck out the Quickstart for an overview of Flask's capabilities.\n\nExplore the documentation for Jinja, Click, Werkzeug, and ItsDangerous.\n\nConsider using Extensions for easier database work and form validation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/tutorial/next", "title": "Keep Developing!", "description": "Guidance on continuing development with Flask after completing the tutorial.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:01:47", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "title": "Keep Developing! — Flask Documentation (3.1.x)", "language": "en", "readthedocs-resolver-filename": "/tutorial/next/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "1ab8149d-6948-42d9-9b36-440d3e17631f", "sourceURL": "https://flask.palletsprojects.com/en/stable/tutorial/next", "url": "https://flask.palletsprojects.com/en/stable/tutorial/next/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what eventlet is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain eventlet in flask-stable.\n\n# eventlet\n\nThis section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.Here's a quick rundown of what this is about:\n\n## eventlet\n\nPrefer using Gunicorn with eventlet workers rather than using eventlet directly. Gunicorn provides a much more configurable and production-tested server.\n\nEventlet allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses greenlet to enable task switching without writing `async/await` or using `asyncio`.\n\nGevent is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\nEventlet provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use eventlet in your own code to see any benefit to using the server.\n\n## Installing\n\nWhen using eventlet, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `eventlet`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install eventlet\n``\n\n## Running\n\nTo use eventlet to serve your application, write a script that imports its `wsgi.server`, as well as your app or app factory.\n\n`wsgi.py`\n\n```\nimport eventlet\nfrom eventlet import wsgi\nfrom hello import create_app\n\napp = create_app()\nwsgi.server(eventlet.listen((\"127.0.0.1\", 8000)), app)\n```\n\n```\n$ python wsgi.py\n(x) wsgi starting up on http://127.0.0.1:8000\n``\n\n## Binding Externally\n\nEventlet should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as nginx or Apache httpd should be used in front of eventlet.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "overview", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I eventlet in flask-stable?\n\nAssistant: To eventlet in flask-stable, here's what you do:\nPrefer using Gunicorn with eventlet workers rather than using eventlet directly. Gunicorn provides a much more configurable and production-tested server.\n\nEventlet allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses greenlet to enable task switching without writing `async/await` or using `asyncio`.\n\nGevent is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\nEventlet provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use eventlet in your own code to see any benefit to using the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "section_detail", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I installing in flask-stable?\n\nAssistant: To installing in flask-stable, here's what you do:\nWhen using eventlet, greenlet>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `eventlet`.\n\n```\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install eventlet\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "section_detail", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running in flask-stable?\n\nAssistant: To running in flask-stable, here's what you do:\nTo use eventlet to serve your application, write a script that imports its `wsgi.server`, as well as your app or app factory.\n\n`wsgi.py`\n\n```\nimport eventlet\nfrom eventlet import wsgi\nfrom hello import create_app\n\napp = create_app()\nwsgi.server(eventlet.listen((\"127.0.0.1\", 8000)), app)\n```\n\n```\n$ python wsgi.py\n(x) wsgi starting up on http://127.0.0.1:8000\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "section_detail", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I binding externally in flask-stable?\n\nAssistant: To binding externally in flask-stable, here's what you do:\nEventlet should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as nginx or Apache httpd should be used in front of eventlet.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "section_detail", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for eventlet in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing eventlet**:\n\n```yaml\n$ cd hello-app\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install .  # install your application\n$ pip install eventlet\n\n```\n\nThis snippet shows you how to installing eventlet, which is an important aspect of eventlet.\n\n**Running the application with eventlet**:\n\n```yaml\nimport eventlet\nfrom eventlet import wsgi\nfrom hello import create_app\n\napp = create_app()\nwsgi.server(eventlet.listen((\"127.0.0.1\", 8000)), app)\n\n```\n\nThis snippet shows you how to running the application with eventlet, which is an important aspect of eventlet.\n\n**Starting the WSGI server**:\n\n```yaml\n$ python wsgi.py\n(x) wsgi starting up on http://127.0.0.1:8000\n\n```\n\nThis snippet shows you how to starting the wsgi server, which is an important aspect of eventlet.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "code_examples", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using eventlet in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPrefer using Gunicorn with eventlet workers for better configuration and production testing.\n\nEnsure greenlet>=1.0 is installed when using eventlet to avoid issues with context locals.\n\nDo not run eventlet as root to maintain security; use a reverse proxy for binding to privileged ports.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "title": "eventlet", "description": "This section covers the use of eventlet for deploying Flask applications, including installation, running the server, and binding externally.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:02:04", "type": "best_practices", "page_metadata": {"title": "eventlet — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "readthedocs-resolver-filename": "/deploying/eventlet/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "scrapeId": "d985b867-b9fd-4cfa-ace0-0d900cdd3366", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/eventlet", "url": "https://flask.palletsprojects.com/en/stable/deploying/eventlet/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Template Inheritance is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Template Inheritance in flask-stable.\n\n# Template Inheritance\n\nThe most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base 'skeleton' template that contains all the common elements of your site and defines blocks that child templates can override.Here's a quick rundown of what this is about:\n\n## Base Template\n\nThis template, which we’ll call `layout.html`, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:\n\n```\n<!doctype html>\n<html>\n  <head>\n    {% block head %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>{% block title %}{% endblock %} - My Webpage</title>\n    {% endblock %}\n  </head>\n  <body>\n    <div id=\"content\">{% block content %}{% endblock %}</div>\n    <div id=\"footer\">\n      {% block footer %}\n      &copy; Copyright 2010 by <a href=\"http://domain.invalid/\">you</a>.\n      {% endblock %}\n    </div>\n  </body>\n</html>\n```\n\nIn this example, the `{% block %}` tags define four blocks that child templates can fill in. All the `block` tag does is tell the template engine that a child template may override those portions of the template.\n\n## Child Template\n\nA child template might look like this:\n\n```\n{% extends \"layout.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n  {{ super() }}\n  <style type=\"text/css\">\n    .important { color: #336699; }\n  </style>\n{% endblock %}\n{% block content %}\n  <h1>Index</h1>\n  <p class=\"important\">\n    Welcome on my awesome homepage.\n{% endblock %}\n```\n\nThe `{% extends %}` tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, first it locates the parent. The extends tag must be the first tag in the template. To render the contents of a block defined in the parent template, use `{{ super() }}`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "title": "Template Inheritance", "description": "The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base 'skeleton' template that contains all the common elements of your site and defines blocks that child templates can override.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:02:22", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Template Inheritance — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/templateinheritance/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "d9006e0e-f8b4-4c2d-83d3-e6eda3c3dd57", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I base template in flask-stable?\n\nAssistant: To base template in flask-stable, here's what you do:\nThis template, which we’ll call `layout.html`, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:\n\n```\n<!doctype html>\n<html>\n  <head>\n    {% block head %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>{% block title %}{% endblock %} - My Webpage</title>\n    {% endblock %}\n  </head>\n  <body>\n    <div id=\"content\">{% block content %}{% endblock %}</div>\n    <div id=\"footer\">\n      {% block footer %}\n      &copy; Copyright 2010 by <a href=\"http://domain.invalid/\">you</a>.\n      {% endblock %}\n    </div>\n  </body>\n</html>\n```\n\nIn this example, the `{% block %}` tags define four blocks that child templates can fill in. All the `block` tag does is tell the template engine that a child template may override those portions of the template..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "title": "Template Inheritance", "description": "The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base 'skeleton' template that contains all the common elements of your site and defines blocks that child templates can override.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:02:22", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Template Inheritance — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/templateinheritance/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "d9006e0e-f8b4-4c2d-83d3-e6eda3c3dd57", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I child template in flask-stable?\n\nAssistant: To child template in flask-stable, here's what you do:\nA child template might look like this:\n\n```\n{% extends \"layout.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n  {{ super() }}\n  <style type=\"text/css\">\n    .important { color: #336699; }\n  </style>\n{% endblock %}\n{% block content %}\n  <h1>Index</h1>\n  <p class=\"important\">\n    Welcome on my awesome homepage.\n{% endblock %}\n```\n\nThe `{% extends %}` tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, first it locates the parent. The extends tag must be the first tag in the template. To render the contents of a block defined in the parent template, use `{{ super() }}`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "title": "Template Inheritance", "description": "The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base 'skeleton' template that contains all the common elements of your site and defines blocks that child templates can override.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:02:22", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Template Inheritance — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/templateinheritance/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "d9006e0e-f8b4-4c2d-83d3-e6eda3c3dd57", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Template Inheritance in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Base Template Example**:\n\n```yaml\n<!doctype html>\n<html>\n  <head>\n    {% block head %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>{% block title %}{% endblock %} - My Webpage</title>\n    {% endblock %}\n  </head>\n  <body>\n    <div id=\"content\">{% block content %}{% endblock %}</div>\n    <div id=\"footer\">\n      {% block footer %}\n      &copy; Copyright 2010 by <a href=\"http://domain.invalid/\">you</a>.\n      {% endblock %}\n    </div>\n  </body>\n</html>\n```\n\nThis snippet shows you how to base template example, which is an important aspect of template inheritance.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "title": "Template Inheritance", "description": "The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base 'skeleton' template that contains all the common elements of your site and defines blocks that child templates can override.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 04:02:22", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Template Inheritance — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/patterns/templateinheritance/", "readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "d9006e0e-f8b4-4c2d-83d3-e6eda3c3dd57", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance", "url": "https://flask.palletsprojects.com/en/stable/patterns/templateinheritance/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Tell Flask it is Behind a Proxy is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Tell Flask it is Behind a Proxy in flask-stable.\n\n# Tell Flask it is Behind a Proxy\n\nInstructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.Here's a quick rundown of what this is about:\n\n## Overview\n\nWhen using a reverse proxy, or many Python hosting platforms, the proxy will intercept and forward all external requests to the local WSGI server.\n\nFrom the WSGI server and Flask application’s perspectives, requests are now coming from the HTTP server to the local address, rather than from the remote address to the external server address.\n\nHTTP servers should set `X-Forwarded-` headers to pass on the real values to the application. The application can then be told to trust and use those values by wrapping it with the [X-Forwarded-For Proxy Fix](https://werkzeug.palletsprojects.com/en/stable/middleware/proxy_fix/ \"(in Werkzeug v3.1.x)\") middleware provided by Werkzeug.\n\nThis middleware should only be used if the application is actually behind a proxy, and should be configured with the number of proxies that are chained in front of it. Not all proxies set all the headers. Since incoming headers can be faked, you must set how many proxies are setting each header so the middleware knows what to trust.\n\n## Code Example\n\n```python\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp.wsgi_app = ProxyFix(\n    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1\n)\n```\n\n## Security Note\n\nRemember, only apply this middleware if you are behind a proxy, and set the correct number of proxies that set each header. It can be a security issue if you get this configuration wrong.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I overview in flask-stable?\n\nAssistant: To overview in flask-stable, here's what you do:\nWhen using a reverse proxy, or many Python hosting platforms, the proxy will intercept and forward all external requests to the local WSGI server.\n\nFrom the WSGI server and Flask application’s perspectives, requests are now coming from the HTTP server to the local address, rather than from the remote address to the external server address.\n\nHTTP servers should set `X-Forwarded-` headers to pass on the real values to the application. The application can then be told to trust and use those values by wrapping it with the [X-Forwarded-For Proxy Fix](https://werkzeug.palletsprojects.com/en/stable/middleware/proxy_fix/ \"(in Werkzeug v3.1.x)\") middleware provided by Werkzeug.\n\nThis middleware should only be used if the application is actually behind a proxy, and should be configured with the number of proxies that are chained in front of it. Not all proxies set all the headers. Since incoming headers can be faked, you must set how many proxies are setting each header so the middleware knows what to trust..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I code example in flask-stable?\n\nAssistant: To code example in flask-stable, here's what you do:\n```python\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp.wsgi_app = ProxyFix(\n    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I security note in flask-stable?\n\nAssistant: To security note in flask-stable, here's what you do:\nRemember, only apply this middleware if you are behind a proxy, and set the correct number of proxies that set each header. It can be a security issue if you get this configuration wrong..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Tell Flask it is Behind a Proxy in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using ProxyFix Middleware**:\n\n```yaml\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp.wsgi_app = ProxyFix(\n    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1\n)\n```\n\nThis snippet shows you how to using proxyfix middleware, which is an important aspect of tell flask it is behind a proxy.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Tell Flask it is Behind a Proxy in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOnly apply the ProxyFix middleware if you are behind a proxy.\n\nSet the correct number of proxies that set each header to avoid security issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "title": "Tell Flask it is Behind a Proxy", "description": "Instructions on how to configure Flask to work behind a reverse proxy using the ProxyFix middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:02:33", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/deploying/proxy_fix/", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Tell Flask it is Behind a Proxy — Flask Documentation (3.1.x)", "readthedocs-version-slug": "stable", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "scrapeId": "6583ccac-7dd1-4926-a4d5-1e6d09023992", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix", "url": "https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Adding HTTP Method Overrides is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Adding HTTP Method Overrides in flask-stable.\n\n# Adding HTTP Method Overrides\n\nThis section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.Here's a quick rundown of what this is about:\n\n## Overview\n\nSome HTTP proxies do not support arbitrary HTTP methods or newer HTTP methods (such as PATCH). In that case it’s possible to “proxy” HTTP methods through another HTTP method in total violation of the protocol.\n\nThe way this works is by letting the client do an HTTP POST request and set the `X-HTTP-Method-Override` header. Then the method is replaced with the header value before being passed to Flask.\n\n## HTTP Method Override Middleware\n\nThis can be accomplished with an HTTP middleware:\n\n```python\nclass HTTPMethodOverrideMiddleware(object):\n    allowed_methods = frozenset([\\\n        'GET',\\\n        'HEAD',\\\n        'POST',\\\n        'DELETE',\\\n        'PUT',\\\n        'PATCH',\\\n        'OPTIONS'\\\n    ])\n    bodyless_methods = frozenset(['GET', 'HEAD', 'OPTIONS', 'DELETE'])\n\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()\n        if method in self.allowed_methods:\n            environ['REQUEST_METHOD'] = method\n        if method in self.bodyless_methods:\n            environ['CONTENT_LENGTH'] = '0'\n        return self.app(environ, start_response)\n```\n\nTo use this with Flask, wrap the app object with the middleware:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\napp.wsgi_app = HTTPMethodOverrideMiddleware(app.wsgi_app)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "title": "Adding HTTP Method Overrides", "description": "This section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:02:52", "type": "overview", "page_metadata": {"readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/methodoverrides/", "title": "Adding HTTP Method Overrides — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "250af426-eefd-4349-aeff-35ffe66cb3fb", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I overview in flask-stable?\n\nAssistant: To overview in flask-stable, here's what you do:\nSome HTTP proxies do not support arbitrary HTTP methods or newer HTTP methods (such as PATCH). In that case it’s possible to “proxy” HTTP methods through another HTTP method in total violation of the protocol.\n\nThe way this works is by letting the client do an HTTP POST request and set the `X-HTTP-Method-Override` header. Then the method is replaced with the header value before being passed to Flask..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "title": "Adding HTTP Method Overrides", "description": "This section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:02:52", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/methodoverrides/", "title": "Adding HTTP Method Overrides — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "250af426-eefd-4349-aeff-35ffe66cb3fb", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I http method override middleware in flask-stable?\n\nAssistant: To http method override middleware in flask-stable, here's what you do:\nThis can be accomplished with an HTTP middleware:\n\n```python\nclass HTTPMethodOverrideMiddleware(object):\n    allowed_methods = frozenset([\\\n        'GET',\\\n        'HEAD',\\\n        'POST',\\\n        'DELETE',\\\n        'PUT',\\\n        'PATCH',\\\n        'OPTIONS'\\\n    ])\n    bodyless_methods = frozenset(['GET', 'HEAD', 'OPTIONS', 'DELETE'])\n\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()\n        if method in self.allowed_methods:\n            environ['REQUEST_METHOD'] = method\n        if method in self.bodyless_methods:\n            environ['CONTENT_LENGTH'] = '0'\n        return self.app(environ, start_response)\n```\n\nTo use this with Flask, wrap the app object with the middleware:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\napp.wsgi_app = HTTPMethodOverrideMiddleware(app.wsgi_app)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "title": "Adding HTTP Method Overrides", "description": "This section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:02:52", "type": "section_detail", "page_metadata": {"readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/methodoverrides/", "title": "Adding HTTP Method Overrides — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "250af426-eefd-4349-aeff-35ffe66cb3fb", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Adding HTTP Method Overrides in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTTP Method Override Middleware Example**:\n\n```yaml\nclass HTTPMethodOverrideMiddleware(object):\n    allowed_methods = frozenset([\\\n        'GET',\\\n        'HEAD',\\\n        'POST',\\\n        'DELETE',\\\n        'PUT',\\\n        'PATCH',\\\n        'OPTIONS'\\\n    ])\n    bodyless_methods = frozenset(['GET', 'HEAD', 'OPTIONS', 'DELETE'])\n\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()\n        if method in self.allowed_methods:\n            environ['REQUEST_METHOD'] = method\n        if method in self.bodyless_methods:\n            environ['CONTENT_LENGTH'] = '0'\n        return self.app(environ, start_response)\n```\n\nThis snippet shows you how to http method override middleware example, which is an important aspect of adding http method overrides.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "title": "Adding HTTP Method Overrides", "description": "This section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:02:52", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/methodoverrides/", "title": "Adding HTTP Method Overrides — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "250af426-eefd-4349-aeff-35ffe66cb3fb", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Adding HTTP Method Overrides in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that the HTTP methods you want to override are included in the allowed_methods set.\n\nBe cautious when using method overrides as it can lead to violations of the HTTP protocol.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "title": "Adding HTTP Method Overrides", "description": "This section explains how to proxy HTTP methods through another HTTP method using the X-HTTP-Method-Override header in Flask.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:02:52", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "flask", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/methodoverrides/", "title": "Adding HTTP Method Overrides — Flask Documentation (3.1.x)", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "250af426-eefd-4349-aeff-35ffe66cb3fb", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides", "url": "https://flask.palletsprojects.com/en/stable/patterns/methodoverrides/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Single-Page Applications is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Single-Page Applications in flask-stable.\n\n# Single-Page Applications\n\nFlask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.Here's a quick rundown of what this is about:\n\n## Single-Page Applications\n\nFlask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "title": "Single-Page Applications", "description": "Flask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:03", "type": "overview", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/patterns/singlepageapplications/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Single-Page Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "0bf031e2-0f56-4f4c-aec4-1e9a301ed7cf", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I single-page applications in flask-stable?\n\nAssistant: To single-page applications in flask-stable, here's what you do:\nFlask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "title": "Single-Page Applications", "description": "Flask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:03", "type": "section_detail", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/patterns/singlepageapplications/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Single-Page Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "0bf031e2-0f56-4f4c-aec4-1e9a301ed7cf", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Single-Page Applications in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Serving an SPA with Flask**:\n\n```yaml\nfrom flask import Flask, jsonify\n\napp = Flask(__name__, static_folder='app', static_url_path=\"/app\")\n\n@app.route(\"/heartbeat\")\ndef heartbeat():\n    return jsonify({\"status\": \"healthy\"})\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef catch_all(path):\n    return app.send_static_file(\"index.html\")\n\n```\n\nThis snippet shows you how to serving an spa with flask, which is an important aspect of single-page applications.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "title": "Single-Page Applications", "description": "Flask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:03", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/patterns/singlepageapplications/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Single-Page Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "0bf031e2-0f56-4f4c-aec4-1e9a301ed7cf", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Single-Page Applications in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPlace static files in a subfolder inside your project.\n\nCreate a catch-all endpoint to route all requests to your SPA.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "title": "Single-Page Applications", "description": "Flask can be used to serve Single-Page Applications (SPA) by placing static files produced by your frontend framework in a subfolder inside of your project. You will also need to create a catch-all endpoint that routes all requests to your SPA.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:03", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/patterns/singlepageapplications/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "Single-Page Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "0bf031e2-0f56-4f4c-aec4-1e9a301ed7cf", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications", "url": "https://flask.palletsprojects.com/en/stable/patterns/singlepageapplications/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what ASGI is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain ASGI in flask-stable.\n\n# ASGI\n\nUsing ASGI with Flask applications.Here's a quick rundown of what this is about:\n\n## ASGI\n\nIf you’d like to use an ASGI server you will need to utilise WSGI to ASGI middleware. The asgiref [WsgiToAsgi](https://github.com/django/asgiref#wsgi-to-asgi-adapter) adapter is recommended as it integrates with the event loop used for Flask’s [Using async and await](https://flask.palletsprojects.com/en/stable/async-await/#async-await) support. You can use the adapter by wrapping the Flask app,\n\n```\nfrom asgiref.wsgi import WsgiToAsgi\nfrom flask import Flask\n\napp = Flask(__name__)\n\n...\n\nasgi_app = WsgiToAsgi(app)\n```\n\nand then serving the `asgi_app` with the ASGI server, e.g. using [Hypercorn](https://github.com/pgjones/hypercorn),\n\n```\n$ hypercorn module:asgi_app\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "title": "ASGI", "description": "Using ASGI with Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:10", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/deploying/asgi/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "ASGI — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "6fb6eab8-ddb6-49f0-9ff2-0f26434ff96c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/asgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I asgi in flask-stable?\n\nAssistant: To asgi in flask-stable, here's what you do:\nIf you’d like to use an ASGI server you will need to utilise WSGI to ASGI middleware. The asgiref [WsgiToAsgi](https://github.com/django/asgiref#wsgi-to-asgi-adapter) adapter is recommended as it integrates with the event loop used for Flask’s [Using async and await](https://flask.palletsprojects.com/en/stable/async-await/#async-await) support. You can use the adapter by wrapping the Flask app,\n\n```\nfrom asgiref.wsgi import WsgiToAsgi\nfrom flask import Flask\n\napp = Flask(__name__)\n\n...\n\nasgi_app = WsgiToAsgi(app)\n```\n\nand then serving the `asgi_app` with the ASGI server, e.g. using [Hypercorn](https://github.com/pgjones/hypercorn),\n\n```\n$ hypercorn module:asgi_app\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "title": "ASGI", "description": "Using ASGI with Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:10", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/deploying/asgi/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "ASGI — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "6fb6eab8-ddb6-49f0-9ff2-0f26434ff96c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/asgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for ASGI in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using WsgiToAsgi with Flask**:\n\n```yaml\nfrom asgiref.wsgi import WsgiToAsgi\nfrom flask import Flask\n\napp = Flask(__name__)\n\n...\n\nasgi_app = WsgiToAsgi(app)\n```\n\nThis snippet shows you how to using wsgitoasgi with flask, which is an important aspect of asgi.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "title": "ASGI", "description": "Using ASGI with Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:10", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/deploying/asgi/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "ASGI — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "6fb6eab8-ddb6-49f0-9ff2-0f26434ff96c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/asgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using ASGI in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the asgiref WsgiToAsgi adapter for integrating with the event loop used for Flask's async and await support.\n\nServe the asgi_app with an ASGI server like Hypercorn.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "title": "ASGI", "description": "Using ASGI with Flask applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:03:10", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/deploying/asgi/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "title": "ASGI — Flask Documentation (3.1.x)", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "scrapeId": "6fb6eab8-ddb6-49f0-9ff2-0f26434ff96c", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/asgi", "url": "https://flask.palletsprojects.com/en/stable/deploying/asgi/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Caching is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Caching in flask-stable.\n\n# Caching\n\nThis section covers how to implement caching in Flask applications using the Flask-Caching extension.Here's a quick rundown of what this is about:\n\n## Introduction to Caching\n\nWhen your application runs slow, throw some caches in. Well, at least it’s the easiest way to speed up things. What does a cache do? Say you have a function that takes some time to complete but the results would still be good enough if they were 5 minutes old. So then the idea is that you actually put the result of that calculation into a cache for some time.\n\n## Flask-Caching\n\nFlask itself does not provide caching for you, but Flask-Caching, an extension for Flask does. Flask-Caching supports various backends, and it is even possible to develop your own caching backend.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/caching", "title": "Caching", "description": "This section covers how to implement caching in Flask applications using the Flask-Caching extension.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:03:34", "type": "overview", "page_metadata": {"title": "Caching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/patterns/caching/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "80403de9-a93c-4e59-897c-da6401dc1fed", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/caching", "url": "https://flask.palletsprojects.com/en/stable/patterns/caching/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I introduction to caching in flask-stable?\n\nAssistant: To introduction to caching in flask-stable, here's what you do:\nWhen your application runs slow, throw some caches in. Well, at least it’s the easiest way to speed up things. What does a cache do? Say you have a function that takes some time to complete but the results would still be good enough if they were 5 minutes old. So then the idea is that you actually put the result of that calculation into a cache for some time..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/caching", "title": "Caching", "description": "This section covers how to implement caching in Flask applications using the Flask-Caching extension.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:03:34", "type": "section_detail", "page_metadata": {"title": "Caching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/patterns/caching/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "80403de9-a93c-4e59-897c-da6401dc1fed", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/caching", "url": "https://flask.palletsprojects.com/en/stable/patterns/caching/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I flask-caching in flask-stable?\n\nAssistant: To flask-caching in flask-stable, here's what you do:\nFlask itself does not provide caching for you, but Flask-Caching, an extension for Flask does. Flask-Caching supports various backends, and it is even possible to develop your own caching backend..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/caching", "title": "Caching", "description": "This section covers how to implement caching in Flask applications using the Flask-Caching extension.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:03:34", "type": "section_detail", "page_metadata": {"title": "Caching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/patterns/caching/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "80403de9-a93c-4e59-897c-da6401dc1fed", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/caching", "url": "https://flask.palletsprojects.com/en/stable/patterns/caching/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Caching in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse caching to speed up slow applications.\n\nConsider the freshness of data when caching results.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/caching", "title": "Caching", "description": "This section covers how to implement caching in Flask applications using the Flask-Caching extension.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:03:34", "type": "best_practices", "page_metadata": {"title": "Caching — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/patterns/caching/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "flask", "scrapeId": "80403de9-a93c-4e59-897c-da6401dc1fed", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/caching", "url": "https://flask.palletsprojects.com/en/stable/patterns/caching/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Subclassing Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Subclassing Flask in flask-stable.\n\n# Subclassing Flask\n\nThe Flask class is designed for subclassing.Here's a quick rundown of what this is about:\n\n## Subclassing Flask\n\nThe `Flask` class is designed for subclassing.\n\nFor example, you may want to override how request parameters are handled to preserve their order:\n\n```\nfrom flask import Flask, Request\nfrom werkzeug.datastructures import ImmutableOrderedMultiDict\nclass MyRequest(Request):\n    \"\"\"Request subclass to override request parameter storage\"\"\"\n    parameter_storage_class = ImmutableOrderedMultiDict\nclass MyFlask(Flask):\n    \"\"\"Flask subclass using the custom request class\"\"\"\n    request_class = MyRequest\n```\n\nThis is the recommended approach for overriding or augmenting Flask’s internal functionality.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "title": "Subclassing Flask", "description": "The Flask class is designed for subclassing.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:04:17", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/patterns/subclassing/", "title": "Subclassing Flask — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "scrapeId": "151313ed-80bd-49b6-80f7-5f96ef6efd56", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I subclassing flask in flask-stable?\n\nAssistant: To subclassing flask in flask-stable, here's what you do:\nThe `Flask` class is designed for subclassing.\n\nFor example, you may want to override how request parameters are handled to preserve their order:\n\n```\nfrom flask import Flask, Request\nfrom werkzeug.datastructures import ImmutableOrderedMultiDict\nclass MyRequest(Request):\n    \"\"\"Request subclass to override request parameter storage\"\"\"\n    parameter_storage_class = ImmutableOrderedMultiDict\nclass MyFlask(Flask):\n    \"\"\"Flask subclass using the custom request class\"\"\"\n    request_class = MyRequest\n```\n\nThis is the recommended approach for overriding or augmenting Flask’s internal functionality..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "title": "Subclassing Flask", "description": "The Flask class is designed for subclassing.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:04:17", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/patterns/subclassing/", "title": "Subclassing Flask — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "scrapeId": "151313ed-80bd-49b6-80f7-5f96ef6efd56", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Subclassing Flask in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Subclassing Flask Example**:\n\n```yaml\nfrom flask import Flask, Request\nfrom werkzeug.datastructures import ImmutableOrderedMultiDict\nclass MyRequest(Request):\n    \"\"\"Request subclass to override request parameter storage\"\"\"\n    parameter_storage_class = ImmutableOrderedMultiDict\nclass MyFlask(Flask):\n    \"\"\"Flask subclass using the custom request class\"\"\"\n    request_class = MyRequest\n```\n\nThis snippet shows you how to subclassing flask example, which is an important aspect of subclassing flask.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "title": "Subclassing Flask", "description": "The Flask class is designed for subclassing.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:04:17", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/patterns/subclassing/", "title": "Subclassing Flask — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "scrapeId": "151313ed-80bd-49b6-80f7-5f96ef6efd56", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Subclassing Flask in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis is the recommended approach for overriding or augmenting Flask’s internal functionality.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "title": "Subclassing Flask", "description": "The Flask class is designed for subclassing.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:04:17", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/patterns/subclassing/", "title": "Subclassing Flask — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "flask", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-version-slug": "stable", "scrapeId": "151313ed-80bd-49b6-80f7-5f96ef6efd56", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/subclassing", "url": "https://flask.palletsprojects.com/en/stable/patterns/subclassing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Python Module Index is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Python Module Index in flask-stable.\n\n# Python Module Index\n\nA comprehensive index of Python modules available in Flask.Here's a quick rundown of what this is about:\n\n## Navigation\n\n- [index](https://flask.palletsprojects.com/en/stable/genindex/ \"General Index\")\n- [modules](https://flask.palletsprojects.com/en/stable/py-modindex/# \"Python Module Index\") |\n- [Flask Documentation (3.1.x)](https://flask.palletsprojects.com/en/stable/) »\n- [Python Module Index](https://flask.palletsprojects.com/en/stable/py-modindex/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/py-modindex", "title": "Python Module Index", "description": "A comprehensive index of Python modules available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 04:05:59", "type": "overview", "page_metadata": {"language": "en", "title": "Python Module Index — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/py-modindex/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "38618f04-6b2d-4f24-a8b5-25438958005d", "sourceURL": "https://flask.palletsprojects.com/en/stable/py-modindex", "url": "https://flask.palletsprojects.com/en/stable/py-modindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I navigation in flask-stable?\n\nAssistant: To navigation in flask-stable, here's what you do:\n- [index](https://flask.palletsprojects.com/en/stable/genindex/ \"General Index\")\n- [modules](https://flask.palletsprojects.com/en/stable/py-modindex/# \"Python Module Index\") |\n- [Flask Documentation (3.1.x)](https://flask.palletsprojects.com/en/stable/) »\n- [Python Module Index](https://flask.palletsprojects.com/en/stable/py-modindex/).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/py-modindex", "title": "Python Module Index", "description": "A comprehensive index of Python modules available in Flask.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 04:05:59", "type": "section_detail", "page_metadata": {"language": "en", "title": "Python Module Index — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/py-modindex/", "readthedocs-project-slug": "flask", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "scrapeId": "38618f04-6b2d-4f24-a8b5-25438958005d", "sourceURL": "https://flask.palletsprojects.com/en/stable/py-modindex", "url": "https://flask.palletsprojects.com/en/stable/py-modindex/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what AJAX with jQuery is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain AJAX with jQuery in flask-stable.\n\n# AJAX with jQuery\n\nObsolete, see JavaScript, fetch, and JSON instead.Here's a quick rundown of what this is about:\n\n## Navigation\n\n- [index](https://flask.palletsprojects.com/en/stable/genindex/ \"General Index\")\n- [modules](https://flask.palletsprojects.com/en/stable/py-modindex/ \"Python Module Index\") |\n- [Flask Documentation (3.1.x)](https://flask.palletsprojects.com/en/stable/) »\n- [AJAX with jQuery](https://flask.palletsprojects.com/en/stable/patterns/jquery/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "title": "AJAX with jQuery", "description": "Obsolete, see JavaScript, fetch, and JSON instead.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:06:32", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "AJAX with jQuery — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/jquery/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "4af520d9-213f-417c-a1f4-2fb99306677d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "url": "https://flask.palletsprojects.com/en/stable/patterns/jquery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I navigation in flask-stable?\n\nAssistant: To navigation in flask-stable, here's what you do:\n- [index](https://flask.palletsprojects.com/en/stable/genindex/ \"General Index\")\n- [modules](https://flask.palletsprojects.com/en/stable/py-modindex/ \"Python Module Index\") |\n- [Flask Documentation (3.1.x)](https://flask.palletsprojects.com/en/stable/) »\n- [AJAX with jQuery](https://flask.palletsprojects.com/en/stable/patterns/jquery/).\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "title": "AJAX with jQuery", "description": "Obsolete, see JavaScript, fetch, and JSON instead.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:06:32", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "AJAX with jQuery — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/jquery/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "4af520d9-213f-417c-a1f4-2fb99306677d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "url": "https://flask.palletsprojects.com/en/stable/patterns/jquery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using AJAX with jQuery in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSee JavaScript, fetch, and JSON instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "title": "AJAX with jQuery", "description": "Obsolete, see JavaScript, fetch, and JSON instead.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:06:32", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "AJAX with jQuery — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "language": "en", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-resolver-filename": "/patterns/jquery/", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "scrapeId": "4af520d9-213f-417c-a1f4-2fb99306677d", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/jquery", "url": "https://flask.palletsprojects.com/en/stable/patterns/jquery/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Apache httpd is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Apache httpd in flask-stable.\n\n# Apache httpd\n\nApache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.Here's a quick rundown of what this is about:\n\n## Domain Name\n\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file.\n\n## Configuration\n\nThe httpd configuration is located at `/etc/httpd/conf/httpd.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `httpd.conf`.\n\nRemove or comment out any existing `DocumentRoot` directive. Add the config lines below. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`.\n\nThe `LoadModule` lines might already exist. If so, make sure they are uncommented instead of adding them manually.\n\nThen [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/) so that your application uses the `X-Forwarded` headers. `X-Forwarded-For` and `X-Forwarded-Host` are automatically set by `ProxyPass`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "title": "Apache httpd", "description": "Apache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:09:08", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Apache httpd — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/apache-httpd/", "scrapeId": "3732567d-b55c-4c14-bb3b-95d529c6d1cc", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I domain name in flask-stable?\n\nAssistant: To domain name in flask-stable, here's what you do:\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "title": "Apache httpd", "description": "Apache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:09:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Apache httpd — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/apache-httpd/", "scrapeId": "3732567d-b55c-4c14-bb3b-95d529c6d1cc", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I configuration in flask-stable?\n\nAssistant: To configuration in flask-stable, here's what you do:\nThe httpd configuration is located at `/etc/httpd/conf/httpd.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `httpd.conf`.\n\nRemove or comment out any existing `DocumentRoot` directive. Add the config lines below. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`.\n\nThe `LoadModule` lines might already exist. If so, make sure they are uncommented instead of adding them manually.\n\nThen [Tell Flask it is Behind a Proxy](https://flask.palletsprojects.com/en/stable/deploying/proxy_fix/) so that your application uses the `X-Forwarded` headers. `X-Forwarded-For` and `X-Forwarded-Host` are automatically set by `ProxyPass`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "title": "Apache httpd", "description": "Apache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:09:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Apache httpd — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/apache-httpd/", "scrapeId": "3732567d-b55c-4c14-bb3b-95d529c6d1cc", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Apache httpd in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Editing the hosts file**:\n\n```yaml\n127.0.0.1 hello.localhost\n```\n\nThis snippet shows you how to editing the hosts file, which is an important aspect of apache httpd.\n\n**httpd configuration**:\n\n```yaml\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nProxyPass / http://127.0.0.1:8000/\nRequestHeader set X-Forwarded-Proto http\nRequestHeader set X-Forwarded-Prefix /\n```\n\nThis snippet shows you how to httpd configuration, which is an important aspect of apache httpd.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "title": "Apache httpd", "description": "Apache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:09:08", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Apache httpd — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/apache-httpd/", "scrapeId": "3732567d-b55c-4c14-bb3b-95d529c6d1cc", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Apache httpd in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBe sure to read the httpd documentation to understand what features are available.\n\nMake sure existing `LoadModule` lines are uncommented instead of adding them manually.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "title": "Apache httpd", "description": "Apache httpd is a fast, production level HTTP server. This page outlines the basics of configuring httpd to proxy your application.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:09:08", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-project-slug": "flask", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Apache httpd — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/deploying/apache-httpd/", "scrapeId": "3732567d-b55c-4c14-bb3b-95d529c6d1cc", "sourceURL": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd", "url": "https://flask.palletsprojects.com/en/stable/deploying/apache-httpd/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Handling Application Errors is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Handling Application Errors in flask-stable.\n\n# Handling Application Errors\n\nThis section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.Here's a quick rundown of what this is about:\n\n## Handling Application Errors\n\nApplications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved will fail. Here are some situations where perfectly fine code can lead to server errors:\n\n- the client terminated the request early and the application was still reading from the incoming data\n- the database server was overloaded and could not handle the query\n- a filesystem is full\n- a harddrive crashed\n- a backend server overloaded\n- a programming error in a library you are using\n- network connection of the server to another system failed\n\nAnd that’s just a small sample of issues you could be facing. So how do we deal with that sort of problem? By default if your application runs in production mode, and an exception is raised Flask will display a very simple page for you and log the exception to the `logger`. But there is more you can do, and we will cover some better setups to deal with errors including custom exceptions and 3rd party tools.\n\n## Error Logging Tools\n\nSending error mails, even if just for critical ones, can become overwhelming if enough users are hitting the error and log files are typically never looked at. This is why we recommend using Sentry for dealing with application errors. It’s available as a source-available project on GitHub and is also available as a hosted version which you can try for free. Sentry aggregates duplicate errors, captures the full stack trace and local variables for debugging, and sends you mails based on new errors or frequency thresholds.\n\nTo use Sentry you need to install the `sentry-sdk` client with extra `flask` dependencies.\n\n```\n$ pip install sentry-sdk[flask]\n```\n\nAnd then add this to your Flask app:\n\n```\nimport sentry_sdk\nfrom sentry_sdk.integrations.flask import FlaskIntegration\n\nsentry_sdk.init('YOUR_DSN_HERE', integrations=[FlaskIntegration()])\n```\n\nThe `YOUR_DSN_HERE` value needs to be replaced with the DSN value you get from your Sentry installation.\n\nAfter installation, failures leading to an Internal Server Error are automatically reported to Sentry and from there you can receive error notifications.\n\n## Error Handlers\n\nWhen an error occurs in Flask, an appropriate HTTP status code will be returned. 400-499 indicate errors with the client’s request data, or about the data requested. 500-599 indicate errors with the server or application itself.\n\nYou might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers.\n\nAn error handler is a function that returns a response when a type of error is raised, similar to how a view is a function that returns a response when a request URL is matched. It is passed the instance of the error being handled, which is most likely a `HTTPException`.\n\nThe status code of the response will not be set to the handler’s code. Make sure to provide the appropriate HTTP status code when returning a response from a handler.\n\n## Registering\n\nRegister handlers by decorating a function with `errorhandler()`. Or use `register_error_handler()` to register the function later. Remember to set the error code when returning the response.\n\n```\n@app.errorhandler(werkzeug.exceptions.BadRequest)\ndef handle_bad_request(e):\n    return 'bad request!', 400\n\n# or, without the decorator\napp.register_error_handler(400, handle_bad_request)\n```\n\n`werkzeug.exceptions.HTTPException` subclasses like `BadRequest` and their HTTP codes are interchangeable when registering handlers. ( `BadRequest.code == 400`)\n\nNon-standard HTTP codes cannot be registered by code because they are not known by Werkzeug. Instead, define a subclass of `HTTPException` with the appropriate code and register and raise that exception class.\n\n```\nclass InsufficientStorage(werkzeug.exceptions.HTTPException):\n    code = 507\n    description = 'Not enough storage space.'\n\napp.register_error_handler(InsufficientStorage, handle_507)\n\nraise InsufficientStorage()\n```\n\n## Handling\n\nWhen building a Flask application you _will_ run into exceptions. If some part of your code breaks while handling a request (and you have no error handlers registered), a “500 Internal Server Error” will be returned by default. Similarly, “404 Not Found” error will occur if a request is sent to an unregistered route. If a route receives an unallowed request method, a “405 Method Not Allowed” will be raised. These are all subclasses of `HTTPException` and are provided by default in Flask.\n\nFlask gives you the ability to raise any HTTP exception registered by Werkzeug. However, the default HTTP exceptions return simple exception pages. You might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers.\n\n## Generic Exception Handlers\n\nIt is possible to register error handlers for very generic base classes such as `HTTPException` or even `Exception`. However, be aware that these will catch more than you might expect.\n\nFor example, an error handler for `HTTPException` might be useful for turning the default HTML errors pages into JSON. However, this handler will trigger for things you don’t cause directly, such as 404 and 405 errors during routing. Be sure to craft your handler carefully so you don’t lose information about the HTTP error.\n\n```\nfrom flask import json\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    \"\"\"Return JSON instead of HTML for HTTP errors.\"\"\"\n    # start with the correct headers and status code from the error\n    response = e.get_response()\n    # replace the body with JSON\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n```\n\nAn error handler for `Exception` might seem useful for changing how all errors, even unhandled ones, are presented to the user. However, this is similar to doing `except Exception:` in Python, it will capture _all_ otherwise unhandled errors, including all HTTP status codes.\n\n## Unhandled Exceptions\n\nWhen there is no error handler registered for an exception, a 500 Internal Server Error will be returned instead. If there is an error handler registered for `InternalServerError`, this will be invoked. As of Flask 1.1.0, this error handler will always be passed an instance of `InternalServerError`, not the original unhandled error.\n\nThe original error is available as `e.original_exception`.\n\n## Custom Error Pages\n\nSometimes when building a Flask application, you might want to raise a `HTTPException` to signal to the user that something is wrong with the request. Fortunately, Flask comes with a handy `abort()` function that aborts a request with a HTTP error from werkzeug as desired. It will also provide a plain black and white error page for you with a basic description, but nothing fancy.\n\nDepending on the error code it is less or more likely for the user to actually see such an error.\n\n## Further Examples\n\nThe above examples wouldn’t actually be an improvement on the default exception pages. We can create a custom 500.html template.\n\n## Blueprint Error Handlers\n\nIn Modular Applications with Blueprints, most error handlers will work as expected. However, there is a caveat concerning handlers for 404 and 405 exceptions. These error handlers are only invoked from an appropriate raise statement or a call to abort in another of the blueprint’s view functions; they are not invoked by, e.g., an invalid URL access.\n\n## Returning API Errors as JSON\n\nWhen building APIs in Flask, some developers realise that the built-in exceptions are not expressive enough for APIs and that the content type of text/html they are emitting is not very useful for API consumers.\n\n## Logging\n\nSee Logging for information about how to log exceptions, such as by emailing them to admins.\n\n## Debugging\n\nSee Debugging Application Errors for information about how to debug errors in development and production.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I handling application errors in flask-stable?\n\nAssistant: To handling application errors in flask-stable, here's what you do:\nApplications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved will fail. Here are some situations where perfectly fine code can lead to server errors:\n\n- the client terminated the request early and the application was still reading from the incoming data\n- the database server was overloaded and could not handle the query\n- a filesystem is full\n- a harddrive crashed\n- a backend server overloaded\n- a programming error in a library you are using\n- network connection of the server to another system failed\n\nAnd that’s just a small sample of issues you could be facing. So how do we deal with that sort of problem? By default if your application runs in production mode, and an exception is raised Flask will display a very simple page for you and log the exception to the `logger`. But there is more you can do, and we will cover some better setups to deal with errors including custom exceptions and 3rd party tools..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I error logging tools in flask-stable?\n\nAssistant: To error logging tools in flask-stable, here's what you do:\nSending error mails, even if just for critical ones, can become overwhelming if enough users are hitting the error and log files are typically never looked at. This is why we recommend using Sentry for dealing with application errors. It’s available as a source-available project on GitHub and is also available as a hosted version which you can try for free. Sentry aggregates duplicate errors, captures the full stack trace and local variables for debugging, and sends you mails based on new errors or frequency thresholds.\n\nTo use Sentry you need to install the `sentry-sdk` client with extra `flask` dependencies.\n\n```\n$ pip install sentry-sdk[flask]\n```\n\nAnd then add this to your Flask app:\n\n```\nimport sentry_sdk\nfrom sentry_sdk.integrations.flask import FlaskIntegration\n\nsentry_sdk.init('YOUR_DSN_HERE', integrations=[FlaskIntegration()])\n```\n\nThe `YOUR_DSN_HERE` value needs to be replaced with the DSN value you get from your Sentry installation.\n\nAfter installation, failures leading to an Internal Server Error are automatically reported to Sentry and from there you can receive error notifications..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I error handlers in flask-stable?\n\nAssistant: To error handlers in flask-stable, here's what you do:\nWhen an error occurs in Flask, an appropriate HTTP status code will be returned. 400-499 indicate errors with the client’s request data, or about the data requested. 500-599 indicate errors with the server or application itself.\n\nYou might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers.\n\nAn error handler is a function that returns a response when a type of error is raised, similar to how a view is a function that returns a response when a request URL is matched. It is passed the instance of the error being handled, which is most likely a `HTTPException`.\n\nThe status code of the response will not be set to the handler’s code. Make sure to provide the appropriate HTTP status code when returning a response from a handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I registering in flask-stable?\n\nAssistant: To registering in flask-stable, here's what you do:\nRegister handlers by decorating a function with `errorhandler()`. Or use `register_error_handler()` to register the function later. Remember to set the error code when returning the response.\n\n```\n@app.errorhandler(werkzeug.exceptions.BadRequest)\ndef handle_bad_request(e):\n    return 'bad request!', 400\n\n# or, without the decorator\napp.register_error_handler(400, handle_bad_request)\n```\n\n`werkzeug.exceptions.HTTPException` subclasses like `BadRequest` and their HTTP codes are interchangeable when registering handlers. ( `BadRequest.code == 400`)\n\nNon-standard HTTP codes cannot be registered by code because they are not known by Werkzeug. Instead, define a subclass of `HTTPException` with the appropriate code and register and raise that exception class.\n\n```\nclass InsufficientStorage(werkzeug.exceptions.HTTPException):\n    code = 507\n    description = 'Not enough storage space.'\n\napp.register_error_handler(InsufficientStorage, handle_507)\n\nraise InsufficientStorage()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I handling in flask-stable?\n\nAssistant: To handling in flask-stable, here's what you do:\nWhen building a Flask application you _will_ run into exceptions. If some part of your code breaks while handling a request (and you have no error handlers registered), a “500 Internal Server Error” will be returned by default. Similarly, “404 Not Found” error will occur if a request is sent to an unregistered route. If a route receives an unallowed request method, a “405 Method Not Allowed” will be raised. These are all subclasses of `HTTPException` and are provided by default in Flask.\n\nFlask gives you the ability to raise any HTTP exception registered by Werkzeug. However, the default HTTP exceptions return simple exception pages. You might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I generic exception handlers in flask-stable?\n\nAssistant: To generic exception handlers in flask-stable, here's what you do:\nIt is possible to register error handlers for very generic base classes such as `HTTPException` or even `Exception`. However, be aware that these will catch more than you might expect.\n\nFor example, an error handler for `HTTPException` might be useful for turning the default HTML errors pages into JSON. However, this handler will trigger for things you don’t cause directly, such as 404 and 405 errors during routing. Be sure to craft your handler carefully so you don’t lose information about the HTTP error.\n\n```\nfrom flask import json\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    \"\"\"Return JSON instead of HTML for HTTP errors.\"\"\"\n    # start with the correct headers and status code from the error\n    response = e.get_response()\n    # replace the body with JSON\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n```\n\nAn error handler for `Exception` might seem useful for changing how all errors, even unhandled ones, are presented to the user. However, this is similar to doing `except Exception:` in Python, it will capture _all_ otherwise unhandled errors, including all HTTP status codes..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I unhandled exceptions in flask-stable?\n\nAssistant: To unhandled exceptions in flask-stable, here's what you do:\nWhen there is no error handler registered for an exception, a 500 Internal Server Error will be returned instead. If there is an error handler registered for `InternalServerError`, this will be invoked. As of Flask 1.1.0, this error handler will always be passed an instance of `InternalServerError`, not the original unhandled error.\n\nThe original error is available as `e.original_exception`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I custom error pages in flask-stable?\n\nAssistant: To custom error pages in flask-stable, here's what you do:\nSometimes when building a Flask application, you might want to raise a `HTTPException` to signal to the user that something is wrong with the request. Fortunately, Flask comes with a handy `abort()` function that aborts a request with a HTTP error from werkzeug as desired. It will also provide a plain black and white error page for you with a basic description, but nothing fancy.\n\nDepending on the error code it is less or more likely for the user to actually see such an error..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I further examples in flask-stable?\n\nAssistant: To further examples in flask-stable, here's what you do:\nThe above examples wouldn’t actually be an improvement on the default exception pages. We can create a custom 500.html template..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I blueprint error handlers in flask-stable?\n\nAssistant: To blueprint error handlers in flask-stable, here's what you do:\nIn Modular Applications with Blueprints, most error handlers will work as expected. However, there is a caveat concerning handlers for 404 and 405 exceptions. These error handlers are only invoked from an appropriate raise statement or a call to abort in another of the blueprint’s view functions; they are not invoked by, e.g., an invalid URL access..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I returning api errors as json in flask-stable?\n\nAssistant: To returning api errors as json in flask-stable, here's what you do:\nWhen building APIs in Flask, some developers realise that the built-in exceptions are not expressive enough for APIs and that the content type of text/html they are emitting is not very useful for API consumers..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I logging in flask-stable?\n\nAssistant: To logging in flask-stable, here's what you do:\nSee Logging for information about how to log exceptions, such as by emailing them to admins..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I debugging in flask-stable?\n\nAssistant: To debugging in flask-stable, here's what you do:\nSee Debugging Application Errors for information about how to debug errors in development and production..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "section_detail", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Handling Application Errors in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing Sentry SDK**:\n\n```yaml\n$ pip install sentry-sdk[flask]\n```\n\nThis snippet shows you how to installing sentry sdk, which is an important aspect of handling application errors.\n\n**Initializing Sentry in Flask App**:\n\n```yaml\nimport sentry_sdk\nfrom sentry_sdk.integrations.flask import FlaskIntegration\n\nsentry_sdk.init('YOUR_DSN_HERE', integrations=[FlaskIntegration()])\n```\n\nThis snippet shows you how to initializing sentry in flask app, which is an important aspect of handling application errors.\n\n**Registering Error Handler for Bad Request**:\n\n```yaml\n@app.errorhandler(werkzeug.exceptions.BadRequest)\ndef handle_bad_request(e):\n    return 'bad request!', 400\n```\n\nThis snippet shows you how to registering error handler for bad request, which is an important aspect of handling application errors.\n\n**Raising Custom HTTP Exception**:\n\n```yaml\nclass InsufficientStorage(werkzeug.exceptions.HTTPException):\n    code = 507\n    description = 'Not enough storage space.'\n\napp.register_error_handler(InsufficientStorage, handle_507)\n\nraise InsufficientStorage()\n```\n\nThis snippet shows you how to raising custom http exception, which is an important aspect of handling application errors.\n\n**Handling HTTP Exceptions**:\n\n```yaml\nfrom flask import json\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    response = e.get_response()\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n```\n\nThis snippet shows you how to handling http exceptions, which is an important aspect of handling application errors.\n\n**Raising Invalid API Usage Exception**:\n\n```yaml\nclass InvalidAPIUsage(Exception):\n    status_code = 400\n\n    def __init__(self, message, status_code=None, payload=None):\n        super().__init__()\n        self.message = message\n        if status_code is not None:\n            self.status_code = status_code\n        self.payload = payload\n\n    def to_dict(self):\n        rv = dict(self.payload or ())\n        rv['message'] = self.message\n        return rv\n\n@app.errorhandler(InvalidAPIUsage)\ndef invalid_api_usage(e):\n    return jsonify(e.to_dict()), e.status_code\n```\n\nThis snippet shows you how to raising invalid api usage exception, which is an important aspect of handling application errors.\n\n**Returning JSON for Resource Not Found**:\n\n```yaml\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return jsonify(error=str(e)), 404\n```\n\nThis snippet shows you how to returning json for resource not found, which is an important aspect of handling application errors.\n\n**Custom 404 Error Page**:\n\n```yaml\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n```\n\nThis snippet shows you how to custom 404 error page, which is an important aspect of handling application errors.\n\n**Custom 500 Error Page**:\n\n```yaml\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n```\n\nThis snippet shows you how to custom 500 error page, which is an important aspect of handling application errors.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Handling Application Errors in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Sentry for error logging and monitoring.\n\nRegister custom error handlers to provide user-friendly error pages.\n\nUse specific exception classes for better error handling.\n\nConsider returning JSON responses for API errors.\n\nLog exceptions for further analysis.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/errorhandling", "title": "Handling Application Errors", "description": "This section covers how to handle application errors in Flask, including logging, custom error pages, and error handlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 04:14:04", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/errorhandling/", "title": "Handling Application Errors — Flask Documentation (3.1.x)", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-project-slug": "flask", "scrapeId": "047c9ed6-a57a-4a5b-b385-6267337bc184", "sourceURL": "https://flask.palletsprojects.com/en/stable/errorhandling", "url": "https://flask.palletsprojects.com/en/stable/errorhandling/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what API is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain API in flask-stable.\n\n# API\n\nThis part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.Here's a quick rundown of what this is about:\n\n## Application Object\n\nclass flask.Flask( import_name, static_url_path=None, static_folder='static', static_host=None, host_matching=False, subdomain_matching=False, template_folder='templates', instance_path=None, instance_relative_config=False, root_path=None)\n\nThe flask object implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more.\n\nThe name of the package is used to resolve resources from inside the package or the folder the module is contained in depending on if the package parameter resolves to an actual python package (a folder with an __init__.py file inside) or a standard module (just a .py file).\n\nFor more information about resource loading, see open_resource().\n\nUsually you create a Flask instance in your main module or in the __init__.py file of your package like this:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n```\n\nAbout the First Parameter\n\nThe idea of the first parameter is to give Flask an idea of what belongs to your application. This name is used to find resources on the filesystem, can be used by extensions to improve debugging information and a lot more.\n\nSo it’s important what you provide there. If you are using a single module, __name__ is always the correct value. If you however are using a package, it’s usually recommended to hardcode the name of your package there.\n\nFor example if your application is defined in yourapplication/app.py you should create it with one of the two versions below:\n\n```\napp = Flask('yourapplication')\napp = Flask(__name__.split('.')[0])\n```\n\nWhy is that? The application will work even with __name__, thanks to how resources are looked up. However it will make debugging more painful. Certain extensions can make assumptions based on the import name of your application. For example the Flask-SQLAlchemy extension will look for the code in your application that triggered an SQL query in debug mode. If the import name is not properly set up, that debugging information is lost. (For example it would only pick up SQL queries in yourapplication.app and not yourapplication.views.frontend)\n\nChangelog\n\nAdded in version 1.0: The host_matching and static_host parameters were added.\n\nAdded in version 1.0: The subdomain_matching parameter was added. Subdomain matching needs to be enabled manually now. Setting SERVER_NAME does not implicitly enable it.\n\nAdded in version 0.11: The root_path parameter was added.\n\nAdded in version 0.8: The instance_path and instance_relative_config parameters were added.\n\nAdded in version 0.7: The static_url_path, static_folder, and template_folder parameters were added.\n\nParameters:\n\n- import_name (str) – the name of the application package\n\n- static_url_path (str | None) – can be used to specify a different path for the static files on the web. Defaults to the name of the static_folder folder.\n\n- static_folder (str | os.PathLike | [str] | None) – The folder with static files that is served at static_url_path. Relative to the application root_path or an absolute path. Defaults to 'static'.\n\n- static_host (str | None) – the host to use when adding the static route. Defaults to None. Required when using host_matching=True with a static_folder configured.\n\n- host_matching (bool) – set url_map.host_matching attribute. Defaults to False.\n\n- subdomain_matching (bool) – consider the subdomain relative to SERVER_NAME when matching routes. Defaults to False.\n\n- template_folder (str | os.PathLike | [str] | None) – the folder that contains the templates that should be used by the application. Defaults to 'templates' folder in the root path of the application.\n\n- instance_path (str | None) – An alternative instance path for the application. By default the folder 'instance' next to the package or module is assumed to be the instance path.\n\n- instance_relative_config (bool) – if set to True relative filenames for loading the config are assumed to be relative to the instance path instead of the application root.\n\n- root_path (str | None) – The path to the root of the application files. This should only be set manually when it can’t be detected automatically, such as for namespace packages.\n\n## request_class\n\nalias of Request\n\n## response_class\n\nalias of Response\n\n## session_interface\n\nthe session interface to use. By default an instance of SecureCookieSessionInterface is used here.\n\n## cli\n\nThe Click command group for registering CLI commands for this object. The commands are available from the flask command once the application has been discovered and blueprints have been registered.\n\n## get_send_file_max_age\n\nUsed by send_file() to determine the max_age cache value for a given file path if it wasn’t passed.\n\nBy default, this returns SEND_FILE_MAX_AGE_DEFAULT from the configuration of current_app. This defaults to None, which tells the browser to use conditional requests instead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask class.\n\n## send_static_file\n\nThe view function used to serve files from static_folder. A route is automatically registered for this view at static_url_path if static_folder is set.\n\nNote this is a duplicate of the same method in the Flask class.\n\n## open_resource\n\nOpen a resource file relative to root_path for reading.\n\nFor example, if the file schema.sql is next to the file app.py where the Flask app is defined, it can be opened with:\n\n```\nwith app.open_resource(\"schema.sql\") as f:\n    conn.executescript(f.read())\n```\n\nParameters:\n\n- resource (str) – Path to the resource relative to root_path.\n\n- mode (str) – Open the file in this mode. Only reading is supported, valid values are \"r\" (or \"rt\") and \"rb\".\n\n- encoding (str | None) – Open the file with this encoding when opening in text mode. This is ignored when opening in binary mode.\n\nReturn type:\n\n_IO_.\n\n## open_instance_resource\n\nOpen a resource file relative to the application’s instance folder instance_path. Unlike open_resource(), files in the instance folder can be opened for writing.\n\n## create_jinja_environment\n\nCreate the Jinja environment based on jinja_options and the various Jinja-related methods of the app. Changing jinja_options after this will have no effect. Also adds Flask-related globals and filters to the environment.\n\n## create_url_adapter\n\nCreates a URL adapter for the given request. The URL adapter is created at a point where the request context is not yet set up so the request is passed explicitly.\n\n## update_template_context\n\nUpdate the template context with some commonly used variables. This injects request, session, config and g into the template context as well as everything template context processors want to inject. Note that the as of Flask 0.6, the original values in the context will not be overridden if a context processor decides to return a value with the same key.\n\n## make_shell_context\n\nReturns the shell context for an interactive shell for this application. This runs all the registered shell context processors.\n\n## run\n\nRuns the application on a local development server.\n\nDo not use run() in a production setting. It is not intended to meet security and performance requirements for a production server. Instead, see Deploying to Production for WSGI server recommendations.\n\nIf the debug flag is set the server will automatically reload for code changes and show a debugger in case an exception happened.\n\nIf you want to run the application in debug mode, but disable the code execution on the interactive debugger, you can pass use_evalex=False as parameter. This will keep the debugger’s traceback screen active, but disable code execution.\n\nIt is not recommended to use this function for development with automatic reloading as this is badly supported. Instead you should be using the flask command line script’s run support.\n\n## test_client\n\nCreates a test client for this application. For information about unit testing head over to Testing Flask Applications.\n\n## test_cli_runner\n\nCreate a CLI runner for testing CLI commands. See Running Commands with the CLI Runner.\n\n## handle_http_exception\n\nHandles an HTTP exception. By default this will invoke the registered error handlers and fall back to returning the exception as response.\n\n## handle_user_exception\n\nThis method is called whenever an exception occurs that should be handled. A special case is HTTPException which is forwarded to the handle_http_exception() method. This function will either return a response value or reraise the exception with the same traceback.\n\n## handle_exception\n\nHandle an exception that did not have an error handler associated with it, or that was raised from an error handler. This always causes a 500 InternalServerError.\n\n## log_exception\n\nLogs an exception. This is called by handle_exception() if debugging is disabled and right before the handler is called. The default implementation logs the exception as error on the logger.\n\n## dispatch_request\n\nDoes the request dispatching. Matches the URL and returns the return value of the view or error handler. This does not have to be a response object. In order to convert the return value to a proper response object, call make_response().\n\n## full_dispatch_request\n\nDispatches the request and on top of that performs request pre and postprocessing as well as HTTP exception catching and error handling.\n\n## make_default_options_response\n\nThis method is called to create the default OPTIONS response. This can be changed through subclassing to change the default behavior of OPTIONS responses.\n\n## ensure_sync\n\nEnsure that the function is synchronous for WSGI workers. Plain def functions are returned as-is. async def functions are wrapped to run and wait for the response.\n\n## async_to_sync\n\nReturn a sync function that will run the coroutine function.\n\n## url_for\n\nGenerate a URL to the given endpoint with the given values.\n\n## make_response\n\nConvert the return value from a view function to an instance of response_class.\n\n## preprocess_request\n\nCalled before the request is dispatched. Calls url_value_preprocessors registered with the app and the current blueprint (if any). Then calls before_request_funcs registered with the app and the blueprint.\n\n## process_response\n\nCan be overridden in order to modify the response object before it’s sent to the WSGI server. By default this will call all the after_request() decorated functions.\n\n## do_teardown_request\n\nCalled after the request is dispatched and the response is returned, right before the request context is popped.\n\n## do_teardown_appcontext\n\nCalled right before the application context is popped.\n\n## app_context\n\nCreate an AppContext. Use as a with block to push the context, which will make current_app point at this application.\n\n## request_context\n\nCreate a RequestContext representing a WSGI environment. Use a with block to push the context, which will make request point at this request.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I application object in flask-stable?\n\nAssistant: To application object in flask-stable, here's what you do:\nclass flask.Flask( import_name, static_url_path=None, static_folder='static', static_host=None, host_matching=False, subdomain_matching=False, template_folder='templates', instance_path=None, instance_relative_config=False, root_path=None)\n\nThe flask object implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more.\n\nThe name of the package is used to resolve resources from inside the package or the folder the module is contained in depending on if the package parameter resolves to an actual python package (a folder with an __init__.py file inside) or a standard module (just a .py file).\n\nFor more information about resource loading, see open_resource().\n\nUsually you create a Flask instance in your main module or in the __init__.py file of your package like this:\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n```\n\nAbout the First Parameter\n\nThe idea of the first parameter is to give Flask an idea of what belongs to your application. This name is used to find resources on the filesystem, can be used by extensions to improve debugging information and a lot more.\n\nSo it’s important what you provide there. If you are using a single module, __name__ is always the correct value. If you however are using a package, it’s usually recommended to hardcode the name of your package there.\n\nFor example if your application is defined in yourapplication/app.py you should create it with one of the two versions below:\n\n```\napp = Flask('yourapplication')\napp = Flask(__name__.split('.')[0])\n```\n\nWhy is that? The application will work even with __name__, thanks to how resources are looked up. However it will make debugging more painful. Certain extensions can make assumptions based on the import name of your application. For example the Flask-SQLAlchemy extension will look for the code in your application that triggered an SQL query in debug mode. If the import name is not properly set up, that debugging information is lost. (For example it would only pick up SQL queries in yourapplication.app and not yourapplication.views.frontend)\n\nChangelog\n\nAdded in version 1.0: The host_matching and static_host parameters were added.\n\nAdded in version 1.0: The subdomain_matching parameter was added. Subdomain matching needs to be enabled manually now. Setting SERVER_NAME does not implicitly enable it.\n\nAdded in version 0.11: The root_path parameter was added.\n\nAdded in version 0.8: The instance_path and instance_relative_config parameters were added.\n\nAdded in version 0.7: The static_url_path, static_folder, and template_folder parameters were added.\n\nParameters:\n\n- import_name (str) – the name of the application package\n\n- static_url_path (str | None) – can be used to specify a different path for the static files on the web. Defaults to the name of the static_folder folder.\n\n- static_folder (str | os.PathLike | [str] | None) – The folder with static files that is served at static_url_path. Relative to the application root_path or an absolute path. Defaults to 'static'.\n\n- static_host (str | None) – the host to use when adding the static route. Defaults to None. Required when using host_matching=True with a static_folder configured.\n\n- host_matching (bool) – set url_map.host_matching attribute. Defaults to False.\n\n- subdomain_matching (bool) – consider the subdomain relative to SERVER_NAME when matching routes. Defaults to False.\n\n- template_folder (str | os.PathLike | [str] | None) – the folder that contains the templates that should be used by the application. Defaults to 'templates' folder in the root path of the application.\n\n- instance_path (str | None) – An alternative instance path for the application. By default the folder 'instance' next to the package or module is assumed to be the instance path.\n\n- instance_relative_config (bool) – if set to True relative filenames for loading the config are assumed to be relative to the instance path instead of the application root.\n\n- root_path (str | None) – The path to the root of the application files. This should only be set manually when it can’t be detected automatically, such as for namespace packages..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I request_class in flask-stable?\n\nAssistant: To request_class in flask-stable, here's what you do:\nalias of Request.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I response_class in flask-stable?\n\nAssistant: To response_class in flask-stable, here's what you do:\nalias of Response.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I session_interface in flask-stable?\n\nAssistant: To session_interface in flask-stable, here's what you do:\nthe session interface to use. By default an instance of SecureCookieSessionInterface is used here..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I cli in flask-stable?\n\nAssistant: To cli in flask-stable, here's what you do:\nThe Click command group for registering CLI commands for this object. The commands are available from the flask command once the application has been discovered and blueprints have been registered..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I get_send_file_max_age in flask-stable?\n\nAssistant: To get_send_file_max_age in flask-stable, here's what you do:\nUsed by send_file() to determine the max_age cache value for a given file path if it wasn’t passed.\n\nBy default, this returns SEND_FILE_MAX_AGE_DEFAULT from the configuration of current_app. This defaults to None, which tells the browser to use conditional requests instead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask class..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I send_static_file in flask-stable?\n\nAssistant: To send_static_file in flask-stable, here's what you do:\nThe view function used to serve files from static_folder. A route is automatically registered for this view at static_url_path if static_folder is set.\n\nNote this is a duplicate of the same method in the Flask class..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I open_resource in flask-stable?\n\nAssistant: To open_resource in flask-stable, here's what you do:\nOpen a resource file relative to root_path for reading.\n\nFor example, if the file schema.sql is next to the file app.py where the Flask app is defined, it can be opened with:\n\n```\nwith app.open_resource(\"schema.sql\") as f:\n    conn.executescript(f.read())\n```\n\nParameters:\n\n- resource (str) – Path to the resource relative to root_path.\n\n- mode (str) – Open the file in this mode. Only reading is supported, valid values are \"r\" (or \"rt\") and \"rb\".\n\n- encoding (str | None) – Open the file with this encoding when opening in text mode. This is ignored when opening in binary mode.\n\nReturn type:\n\n_IO_..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I open_instance_resource in flask-stable?\n\nAssistant: To open_instance_resource in flask-stable, here's what you do:\nOpen a resource file relative to the application’s instance folder instance_path. Unlike open_resource(), files in the instance folder can be opened for writing..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create_jinja_environment in flask-stable?\n\nAssistant: To create_jinja_environment in flask-stable, here's what you do:\nCreate the Jinja environment based on jinja_options and the various Jinja-related methods of the app. Changing jinja_options after this will have no effect. Also adds Flask-related globals and filters to the environment..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I create_url_adapter in flask-stable?\n\nAssistant: To create_url_adapter in flask-stable, here's what you do:\nCreates a URL adapter for the given request. The URL adapter is created at a point where the request context is not yet set up so the request is passed explicitly..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I update_template_context in flask-stable?\n\nAssistant: To update_template_context in flask-stable, here's what you do:\nUpdate the template context with some commonly used variables. This injects request, session, config and g into the template context as well as everything template context processors want to inject. Note that the as of Flask 0.6, the original values in the context will not be overridden if a context processor decides to return a value with the same key..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I make_shell_context in flask-stable?\n\nAssistant: To make_shell_context in flask-stable, here's what you do:\nReturns the shell context for an interactive shell for this application. This runs all the registered shell context processors..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I run in flask-stable?\n\nAssistant: To run in flask-stable, here's what you do:\nRuns the application on a local development server.\n\nDo not use run() in a production setting. It is not intended to meet security and performance requirements for a production server. Instead, see Deploying to Production for WSGI server recommendations.\n\nIf the debug flag is set the server will automatically reload for code changes and show a debugger in case an exception happened.\n\nIf you want to run the application in debug mode, but disable the code execution on the interactive debugger, you can pass use_evalex=False as parameter. This will keep the debugger’s traceback screen active, but disable code execution.\n\nIt is not recommended to use this function for development with automatic reloading as this is badly supported. Instead you should be using the flask command line script’s run support..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I test_client in flask-stable?\n\nAssistant: To test_client in flask-stable, here's what you do:\nCreates a test client for this application. For information about unit testing head over to Testing Flask Applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I test_cli_runner in flask-stable?\n\nAssistant: To test_cli_runner in flask-stable, here's what you do:\nCreate a CLI runner for testing CLI commands. See Running Commands with the CLI Runner..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I handle_http_exception in flask-stable?\n\nAssistant: To handle_http_exception in flask-stable, here's what you do:\nHandles an HTTP exception. By default this will invoke the registered error handlers and fall back to returning the exception as response..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I handle_user_exception in flask-stable?\n\nAssistant: To handle_user_exception in flask-stable, here's what you do:\nThis method is called whenever an exception occurs that should be handled. A special case is HTTPException which is forwarded to the handle_http_exception() method. This function will either return a response value or reraise the exception with the same traceback..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I handle_exception in flask-stable?\n\nAssistant: To handle_exception in flask-stable, here's what you do:\nHandle an exception that did not have an error handler associated with it, or that was raised from an error handler. This always causes a 500 InternalServerError..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I log_exception in flask-stable?\n\nAssistant: To log_exception in flask-stable, here's what you do:\nLogs an exception. This is called by handle_exception() if debugging is disabled and right before the handler is called. The default implementation logs the exception as error on the logger..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I dispatch_request in flask-stable?\n\nAssistant: To dispatch_request in flask-stable, here's what you do:\nDoes the request dispatching. Matches the URL and returns the return value of the view or error handler. This does not have to be a response object. In order to convert the return value to a proper response object, call make_response()..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I full_dispatch_request in flask-stable?\n\nAssistant: To full_dispatch_request in flask-stable, here's what you do:\nDispatches the request and on top of that performs request pre and postprocessing as well as HTTP exception catching and error handling..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I make_default_options_response in flask-stable?\n\nAssistant: To make_default_options_response in flask-stable, here's what you do:\nThis method is called to create the default OPTIONS response. This can be changed through subclassing to change the default behavior of OPTIONS responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I ensure_sync in flask-stable?\n\nAssistant: To ensure_sync in flask-stable, here's what you do:\nEnsure that the function is synchronous for WSGI workers. Plain def functions are returned as-is. async def functions are wrapped to run and wait for the response..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I async_to_sync in flask-stable?\n\nAssistant: To async_to_sync in flask-stable, here's what you do:\nReturn a sync function that will run the coroutine function..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I url_for in flask-stable?\n\nAssistant: To url_for in flask-stable, here's what you do:\nGenerate a URL to the given endpoint with the given values..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I make_response in flask-stable?\n\nAssistant: To make_response in flask-stable, here's what you do:\nConvert the return value from a view function to an instance of response_class..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I preprocess_request in flask-stable?\n\nAssistant: To preprocess_request in flask-stable, here's what you do:\nCalled before the request is dispatched. Calls url_value_preprocessors registered with the app and the current blueprint (if any). Then calls before_request_funcs registered with the app and the blueprint..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I process_response in flask-stable?\n\nAssistant: To process_response in flask-stable, here's what you do:\nCan be overridden in order to modify the response object before it’s sent to the WSGI server. By default this will call all the after_request() decorated functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I do_teardown_request in flask-stable?\n\nAssistant: To do_teardown_request in flask-stable, here's what you do:\nCalled after the request is dispatched and the response is returned, right before the request context is popped..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I do_teardown_appcontext in flask-stable?\n\nAssistant: To do_teardown_appcontext in flask-stable, here's what you do:\nCalled right before the application context is popped..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I app_context in flask-stable?\n\nAssistant: To app_context in flask-stable, here's what you do:\nCreate an AppContext. Use as a with block to push the context, which will make current_app point at this application..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I request_context in flask-stable?\n\nAssistant: To request_context in flask-stable, here's what you do:\nCreate a RequestContext representing a WSGI environment. Use a with block to push the context, which will make request point at this request..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for API in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Flask instance**:\n\n```yaml\nfrom flask import Flask\napp = Flask(__name__)\n\n```\n\nThis snippet shows you how to creating a flask instance, which is an important aspect of api.\n\n**Opening a resource file**:\n\n```yaml\nwith app.open_resource(\"schema.sql\") as f:\n    conn.executescript(f.read())\n\n```\n\nThis snippet shows you how to opening a resource file, which is an important aspect of api.\n\n**Using test client**:\n\n```yaml\napp.testing = True\nclient = app.test_client()\n\n```\n\nThis snippet shows you how to using test client, which is an important aspect of api.\n\n**Using session transaction**:\n\n```yaml\nwith client.session_transaction() as session:\n    session['value'] = 42\n\n```\n\nThis snippet shows you how to using session transaction, which is an important aspect of api.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "code_examples", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using API in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not use run() in a production setting. It is not intended to meet security and performance requirements for a production server.\n\nIf you want to run the application in debug mode, but disable the code execution on the interactive debugger, you can pass use_evalex=False as parameter.\n\nFlask will suppress any server error with a generic error page unless it is in debug mode.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/api", "title": "API", "description": "This part of the documentation covers all the interfaces of Flask. For parts where Flask depends on external libraries, we document the most important right here and provide links to the canonical documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 33, "timestamp": "2025-03-01 04:16:04", "type": "best_practices", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/api/", "language": "en", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "title": "API — Flask Documentation (3.1.x)", "scrapeId": "2db406b9-ea52-4d12-aefe-9ade6eabb6e4", "sourceURL": "https://flask.palletsprojects.com/en/stable/api", "url": "https://flask.palletsprojects.com/en/stable/api/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Testing Flask Applications is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Testing Flask Applications in flask-stable.\n\n# Testing Flask Applications\n\nFlask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.Here's a quick rundown of what this is about:\n\n## Identifying Tests\n\nTests are typically located in the `tests` folder. Tests are functions that start with `test_`, in Python modules that start with `test_`. Tests can also be further grouped in classes that start with `Test`.\n\nIt can be difficult to know what to test. Generally, try to test the code that you write, not the code of libraries that you use, since they are already tested. Try to extract complex behaviors as separate functions to test individually.\n\n## Fixtures\n\nPytest _fixtures_ allow writing pieces of code that are reusable across tests. A simple fixture returns a value, but a fixture can also do setup, yield a value, then do teardown. Fixtures for the application, test client, and CLI runner are shown below, they can be placed in `tests/conftest.py`.\n\nIf you’re using an [application factory](https://flask.palletsprojects.com/en/stable/patterns/appfactories/), define an `app` fixture to create and configure an app instance. You can add code before and after the `yield` to set up and tear down other resources, such as creating and clearing a database.\n\nIf you’re not using a factory, you already have an app object you can import and configure directly. You can still use an `app` fixture to set up and tear down resources.\n\n## Sending Requests with the Test Client\n\nThe test client makes requests to the application without running a live server. Flask’s client extends [Werkzeug’s client](https://werkzeug.palletsprojects.com/en/stable/test/ \"(in Werkzeug v3.1.x)\"), see those docs for additional information.\n\nThe `client` has methods that match the common HTTP request methods, such as `client.get()` and `client.post()`. They take many arguments for building the request; you can find the full documentation in [`EnvironBuilder`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.EnvironBuilder \"(in Werkzeug v3.1.x)\"). Typically you’ll use `path`, `query_string`, `headers`, and `data` or `json`.\n\nTo make a request, call the method the request should use with the path to the route to test. A [`TestResponse`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse \"(in Werkzeug v3.1.x)\") is returned to examine the response data. It has all the usual properties of a response object. You’ll usually look at `response.data`, which is the bytes returned by the view. If you want to use text, Werkzeug 2.1 provides `response.text`, or use `response.get_data(as_text=True)`.\n\n## Form Data\n\nTo send form data, pass a dict to `data`. The `Content-Type` header will be set to `multipart/form-data` or `application/x-www-form-urlencoded` automatically.\n\nIf a value is a file object opened for reading bytes ( \"rb\" mode), it will be treated as an uploaded file. To change the detected filename and content type, pass a `(file, filename, content_type)` tuple. File objects will be closed after making the request, so they do not need to use the usual `with open() as f:` pattern.\n\nIt can be useful to store files in a `tests/resources` folder, then use `pathlib.Path` to get files relative to the current test file.\n\n## JSON Data\n\nTo send JSON data, pass an object to `json`. The `Content-Type` header will be set to `application/json` automatically.\n\nSimilarly, if the response contains JSON data, the `response.json` attribute will contain the deserialized object.\n\n## Following Redirects\n\nBy default, the client does not make additional requests if the response is a redirect. By passing `follow_redirects=True` to a request method, the client will continue to make requests until a non-redirect response is returned.\n\n[`TestResponse.history`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse.history \"(in Werkzeug v3.1.x)\") is a tuple of the responses that led up to the final response. Each response has a [`request`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse.request \"(in Werkzeug v3.1.x)\") attribute which records the request that produced that response.\n\n## Accessing and Modifying the Session\n\nTo access Flask’s context variables, mainly [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\"), use the client in a `with` statement. The app and request context will remain active _after_ making a request, until the `with` block ends.\n\n## Running Commands with the CLI Runner\n\nFlask provides [`test_cli_runner()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.test_cli_runner \"flask.Flask.test_cli_runner\") to create a [`FlaskCliRunner`](https://flask.palletsprojects.com/en/stable/api/#flask.testing.FlaskCliRunner \"flask.testing.FlaskCliRunner\"), which runs CLI commands in isolation and captures the output in a [`Result`](https://click.palletsprojects.com/en/stable/api/#click.testing.Result \"(in Click v8.1.x)\") object. Flask’s runner extends [Click’s runner](https://click.palletsprojects.com/en/stable/testing/ \"(in Click v8.1.x)\"), see those docs for additional information.\n\n## Tests that depend on an Active Context\n\nYou may have functions that are called from views or commands, that expect an active [application context](https://flask.palletsprojects.com/en/stable/appcontext/) or [request context](https://flask.palletsprojects.com/en/stable/reqcontext/) because they access `request`, `session`, or `current_app`. Rather than testing them by making a request or invoking the command, you can create and activate a context directly.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I identifying tests in flask-stable?\n\nAssistant: To identifying tests in flask-stable, here's what you do:\nTests are typically located in the `tests` folder. Tests are functions that start with `test_`, in Python modules that start with `test_`. Tests can also be further grouped in classes that start with `Test`.\n\nIt can be difficult to know what to test. Generally, try to test the code that you write, not the code of libraries that you use, since they are already tested. Try to extract complex behaviors as separate functions to test individually..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I fixtures in flask-stable?\n\nAssistant: To fixtures in flask-stable, here's what you do:\nPytest _fixtures_ allow writing pieces of code that are reusable across tests. A simple fixture returns a value, but a fixture can also do setup, yield a value, then do teardown. Fixtures for the application, test client, and CLI runner are shown below, they can be placed in `tests/conftest.py`.\n\nIf you’re using an [application factory](https://flask.palletsprojects.com/en/stable/patterns/appfactories/), define an `app` fixture to create and configure an app instance. You can add code before and after the `yield` to set up and tear down other resources, such as creating and clearing a database.\n\nIf you’re not using a factory, you already have an app object you can import and configure directly. You can still use an `app` fixture to set up and tear down resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I sending requests with the test client in flask-stable?\n\nAssistant: To sending requests with the test client in flask-stable, here's what you do:\nThe test client makes requests to the application without running a live server. Flask’s client extends [Werkzeug’s client](https://werkzeug.palletsprojects.com/en/stable/test/ \"(in Werkzeug v3.1.x)\"), see those docs for additional information.\n\nThe `client` has methods that match the common HTTP request methods, such as `client.get()` and `client.post()`. They take many arguments for building the request; you can find the full documentation in [`EnvironBuilder`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.EnvironBuilder \"(in Werkzeug v3.1.x)\"). Typically you’ll use `path`, `query_string`, `headers`, and `data` or `json`.\n\nTo make a request, call the method the request should use with the path to the route to test. A [`TestResponse`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse \"(in Werkzeug v3.1.x)\") is returned to examine the response data. It has all the usual properties of a response object. You’ll usually look at `response.data`, which is the bytes returned by the view. If you want to use text, Werkzeug 2.1 provides `response.text`, or use `response.get_data(as_text=True)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I form data in flask-stable?\n\nAssistant: To form data in flask-stable, here's what you do:\nTo send form data, pass a dict to `data`. The `Content-Type` header will be set to `multipart/form-data` or `application/x-www-form-urlencoded` automatically.\n\nIf a value is a file object opened for reading bytes ( \"rb\" mode), it will be treated as an uploaded file. To change the detected filename and content type, pass a `(file, filename, content_type)` tuple. File objects will be closed after making the request, so they do not need to use the usual `with open() as f:` pattern.\n\nIt can be useful to store files in a `tests/resources` folder, then use `pathlib.Path` to get files relative to the current test file..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I json data in flask-stable?\n\nAssistant: To json data in flask-stable, here's what you do:\nTo send JSON data, pass an object to `json`. The `Content-Type` header will be set to `application/json` automatically.\n\nSimilarly, if the response contains JSON data, the `response.json` attribute will contain the deserialized object..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I following redirects in flask-stable?\n\nAssistant: To following redirects in flask-stable, here's what you do:\nBy default, the client does not make additional requests if the response is a redirect. By passing `follow_redirects=True` to a request method, the client will continue to make requests until a non-redirect response is returned.\n\n[`TestResponse.history`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse.history \"(in Werkzeug v3.1.x)\") is a tuple of the responses that led up to the final response. Each response has a [`request`](https://werkzeug.palletsprojects.com/en/stable/test/#werkzeug.test.TestResponse.request \"(in Werkzeug v3.1.x)\") attribute which records the request that produced that response..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I accessing and modifying the session in flask-stable?\n\nAssistant: To accessing and modifying the session in flask-stable, here's what you do:\nTo access Flask’s context variables, mainly [`session`](https://flask.palletsprojects.com/en/stable/api/#flask.session \"flask.session\"), use the client in a `with` statement. The app and request context will remain active _after_ making a request, until the `with` block ends..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I running commands with the cli runner in flask-stable?\n\nAssistant: To running commands with the cli runner in flask-stable, here's what you do:\nFlask provides [`test_cli_runner()`](https://flask.palletsprojects.com/en/stable/api/#flask.Flask.test_cli_runner \"flask.Flask.test_cli_runner\") to create a [`FlaskCliRunner`](https://flask.palletsprojects.com/en/stable/api/#flask.testing.FlaskCliRunner \"flask.testing.FlaskCliRunner\"), which runs CLI commands in isolation and captures the output in a [`Result`](https://click.palletsprojects.com/en/stable/api/#click.testing.Result \"(in Click v8.1.x)\") object. Flask’s runner extends [Click’s runner](https://click.palletsprojects.com/en/stable/testing/ \"(in Click v8.1.x)\"), see those docs for additional information..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I tests that depend on an active context in flask-stable?\n\nAssistant: To tests that depend on an active context in flask-stable, here's what you do:\nYou may have functions that are called from views or commands, that expect an active [application context](https://flask.palletsprojects.com/en/stable/appcontext/) or [request context](https://flask.palletsprojects.com/en/stable/reqcontext/) because they access `request`, `session`, or `current_app`. Rather than testing them by making a request or invoking the command, you can create and activate a context directly..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for Testing Flask Applications in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install pytest**:\n\n```yaml\n$ pip install pytest\n```\n\nThis snippet shows you how to install pytest, which is an important aspect of testing flask applications.\n\n**Example Test Request**:\n\n```yaml\ndef test_request_example(client):\n    response = client.get(\"/posts\")\n    assert b\"<h2>Hello, World!</h2>\" in response.data\n```\n\nThis snippet shows you how to example test request, which is an important aspect of testing flask applications.\n\n**Example Form Data Test**:\n\n```yaml\nfrom pathlib import Path\n\n# get the resources folder in the tests folder\nresources = Path(__file__).parent / \"resources\"\n\ndef test_edit_user(client):\n    response = client.post(\"/user/2/edit\", data={\n        \"name\": \"Flask\",\n        \"theme\": \"dark\",\n        \"picture\": (resources / \"picture.png\").open(\"rb\"),\n    })\n    assert response.status_code == 200\n```\n\nThis snippet shows you how to example form data test, which is an important aspect of testing flask applications.\n\n**Example JSON Data Test**:\n\n```yaml\ndef test_json_data(client):\n    response = client.post(\"/graphql\", json={\n        \"query\": \"\"\"\n            query User($id: String!) {\n                user(id: $id) {\n                    name\n                    theme\n                    picture_url\n                }\n            }\n        \"\"\",\n        variables={\"id\": 2},\n    })\n    assert response.json[\"data\"][\"user\"][\"name\"] == \"Flask\"\n```\n\nThis snippet shows you how to example json data test, which is an important aspect of testing flask applications.\n\n**Example Logout Redirect Test**:\n\n```yaml\ndef test_logout_redirect(client):\n    response = client.get(\"/logout\", follow_redirects=True)\n    # Check that there was one redirect response.\n    assert len(response.history) == 1\n    # Check that the second request was to the index page.\n    assert response.request.path == \"/index\"\n```\n\nThis snippet shows you how to example logout redirect test, which is an important aspect of testing flask applications.\n\n**Example Access Session Test**:\n\n```yaml\nfrom flask import session\n\ndef test_access_session(client):\n    with client:\n        client.post(\"/auth/login\", data={\"username\": \"flask\"})\n        # session is still accessible\n        assert session[\"user_id\"] == 1\n\n    # session is no longer accessible\n```\n\nThis snippet shows you how to example access session test, which is an important aspect of testing flask applications.\n\n**Example CLI Command Test**:\n\n```yaml\nimport click\n\n@app.cli.command(\"hello\")\n@click.option(\"--name\", default=\"World\")\ndef hello_command(name):\n    click.echo(f\"Hello, {name}!\")\n\ndef test_hello_command(runner):\n    result = runner.invoke(args=\"hello\")\n    assert \"World\" in result.output\n\n    result = runner.invoke(args=[\"hello\", \"--name\", \"Flask\"])\n    assert \"Flask\" in result.output\n```\n\nThis snippet shows you how to example cli command test, which is an important aspect of testing flask applications.\n\n**Example Database Post Model Test**:\n\n```yaml\ndef test_db_post_model(app):\n    with app.app_context():\n        post = db.session.query(Post).get(1)\n```\n\nThis snippet shows you how to example database post model test, which is an important aspect of testing flask applications.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Testing Flask Applications in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTry to test the code that you write, not the code of libraries that you use, since they are already tested.\n\nTry to extract complex behaviors as separate functions to test individually.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/testing", "title": "Testing Flask Applications", "description": "Flask provides utilities for testing an application. This documentation goes over techniques for working with different parts of the application in tests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 04:23:32", "type": "best_practices", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Testing Flask Applications — Flask Documentation (3.1.x)", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "language": "en", "readthedocs-resolver-filename": "/testing/", "readthedocs-project-slug": "flask", "scrapeId": "1a217a9b-01c5-4b08-a961-6cd02c59275e", "sourceURL": "https://flask.palletsprojects.com/en/stable/testing", "url": "https://flask.palletsprojects.com/en/stable/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what SQLAlchemy in Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain SQLAlchemy in Flask in flask-stable.\n\n# SQLAlchemy in Flask\n\nMany people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.Here's a quick rundown of what this is about:\n\n## Flask-SQLAlchemy Extension\n\nBecause SQLAlchemy is a common database abstraction layer and object relational mapper that requires a little bit of configuration effort, there is a Flask extension that handles that for you. This is recommended if you want to get started quickly.\n\nYou can download Flask-SQLAlchemy from PyPI.\n\n## Declarative\n\nThe declarative extension in SQLAlchemy is the most recent method of using SQLAlchemy. It allows you to define tables and models in one go, similar to how Django works. In addition to the following text I recommend the official documentation on the declarative extension.\n\nHere’s the example `database.py` module for your application:\n\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker, declarative_base\n\nengine = create_engine('sqlite:////tmp/test.db')\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\ndef init_db():\n    # import all modules here that might define models so that\n    # they will be registered properly on the metadata.  Otherwise\n    # you will have to import them first before calling init_db()\n    import yourapplication.models\n    Base.metadata.create_all(bind=engine)\n```\n\nTo define your models, just subclass the `Base` class that was created by the code above. If you are wondering why we don’t have to care about threads here (like we did in the SQLite3 example above with the `g` object): that’s because SQLAlchemy does that for us already with the `scoped_session`.\n\nTo use SQLAlchemy in a declarative way with your application, you just have to put the following code into your application module. Flask will automatically remove database sessions at the end of the request or when the application shuts down:\n\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\nHere is an example model (put this into `models.py`, e.g.):\n\n```\nfrom sqlalchemy import Column, Integer, String\nfrom yourapplication.database import Base\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True)\n    email = Column(String(120), unique=True)\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n```\n\nTo create the database you can use the `init_db` function:\n\n```\n>>> from yourapplication.database import init_db\n>>> init_db()\n```\n\nYou can insert entries into the database like this:\n\n```\n>>> from yourapplication.database import db_session\n>>> from yourapplication.models import User\n>>> u = User('admin', 'admin@localhost')\n>>> db_session.add(u)\n>>> db_session.commit()\n```\n\nQuerying is simple as well:\n\n```\n>>> User.query.all()\n[<User 'admin'>]\n>>> User.query.filter(User.name == 'admin').first()\n<User 'admin'>\n```\n\n## Manual Object Relational Mapping\n\nManual object relational mapping has a few upsides and a few downsides versus the declarative approach from above. The main difference is that you define tables and classes separately and map them together. It’s more flexible but a little more to type. In general it works like the declarative approach, so make sure to also split up your application into multiple modules in a package.\n\nHere is an example `database.py` module for your application:\n\n```\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData()\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\ndef init_db():\n    metadata.create_all(bind=engine)\n```\n\nAs in the declarative approach, you need to close the session after each request or application context shutdown. Put this into your application module:\n\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\nHere is an example table and model (put this into `models.py`):\n\n```\nfrom sqlalchemy import Table, Column, Integer, String\nfrom sqlalchemy.orm import mapper\nfrom yourapplication.database import metadata, db_session\n\nclass User(object):\n    query = db_session.query_property()\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n\nusers = Table('users', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('name', String(50), unique=True),\n    Column('email', String(120), unique=True)\n)\nmapper(User, users)\n```\n\nQuerying and inserting works exactly the same as in the example above.\n\n## SQL Abstraction Layer\n\nIf you just want to use the database system (and SQL) abstraction layer you basically only need the engine:\n\n```\nfrom sqlalchemy import create_engine, MetaData, Table\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData(bind=engine)\n```\n\nThen you can either declare the tables in your code like in the examples above, or automatically load them:\n\n```\nfrom sqlalchemy import Table\n\nusers = Table('users', metadata, autoload=True)\n```\n\nTo insert data you can use the `insert` method. We have to get a connection first so that we can use a transaction:\n\n```\n>>> con = engine.connect()\n>>> con.execute(users.insert(), name='admin', email='admin@localhost')\n```\n\nSQLAlchemy will automatically commit for us.\n\nTo query your database, you use the engine directly or use a connection:\n\n```\n>>> users.select(users.c.id == 1).execute().first()\n(1, 'admin', 'admin@localhost')\n```\n\nThese results are also dict-like tuples:\n\n```\n>>> r = users.select(users.c.id == 1).execute().first()\n>>> r['name']\n'admin'\n```\n\nYou can also pass strings of SQL statements to the `execute()` method:\n\n```\n>>> engine.execute('select * from users where id = :1', [1]).first()\n(1, 'admin', 'admin@localhost')\n```\n\nFor more information about SQLAlchemy, head over to the website.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "overview", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I flask-sqlalchemy extension in flask-stable?\n\nAssistant: To flask-sqlalchemy extension in flask-stable, here's what you do:\nBecause SQLAlchemy is a common database abstraction layer and object relational mapper that requires a little bit of configuration effort, there is a Flask extension that handles that for you. This is recommended if you want to get started quickly.\n\nYou can download Flask-SQLAlchemy from PyPI..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I declarative in flask-stable?\n\nAssistant: To declarative in flask-stable, here's what you do:\nThe declarative extension in SQLAlchemy is the most recent method of using SQLAlchemy. It allows you to define tables and models in one go, similar to how Django works. In addition to the following text I recommend the official documentation on the declarative extension.\n\nHere’s the example `database.py` module for your application:\n\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker, declarative_base\n\nengine = create_engine('sqlite:////tmp/test.db')\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\ndef init_db():\n    # import all modules here that might define models so that\n    # they will be registered properly on the metadata.  Otherwise\n    # you will have to import them first before calling init_db()\n    import yourapplication.models\n    Base.metadata.create_all(bind=engine)\n```\n\nTo define your models, just subclass the `Base` class that was created by the code above. If you are wondering why we don’t have to care about threads here (like we did in the SQLite3 example above with the `g` object): that’s because SQLAlchemy does that for us already with the `scoped_session`.\n\nTo use SQLAlchemy in a declarative way with your application, you just have to put the following code into your application module. Flask will automatically remove database sessions at the end of the request or when the application shuts down:\n\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\nHere is an example model (put this into `models.py`, e.g.):\n\n```\nfrom sqlalchemy import Column, Integer, String\nfrom yourapplication.database import Base\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True)\n    email = Column(String(120), unique=True)\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n```\n\nTo create the database you can use the `init_db` function:\n\n```\n>>> from yourapplication.database import init_db\n>>> init_db()\n```\n\nYou can insert entries into the database like this:\n\n```\n>>> from yourapplication.database import db_session\n>>> from yourapplication.models import User\n>>> u = User('admin', 'admin@localhost')\n>>> db_session.add(u)\n>>> db_session.commit()\n```\n\nQuerying is simple as well:\n\n```\n>>> User.query.all()\n[<User 'admin'>]\n>>> User.query.filter(User.name == 'admin').first()\n<User 'admin'>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I manual object relational mapping in flask-stable?\n\nAssistant: To manual object relational mapping in flask-stable, here's what you do:\nManual object relational mapping has a few upsides and a few downsides versus the declarative approach from above. The main difference is that you define tables and classes separately and map them together. It’s more flexible but a little more to type. In general it works like the declarative approach, so make sure to also split up your application into multiple modules in a package.\n\nHere is an example `database.py` module for your application:\n\n```\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData()\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\ndef init_db():\n    metadata.create_all(bind=engine)\n```\n\nAs in the declarative approach, you need to close the session after each request or application context shutdown. Put this into your application module:\n\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\nHere is an example table and model (put this into `models.py`):\n\n```\nfrom sqlalchemy import Table, Column, Integer, String\nfrom sqlalchemy.orm import mapper\nfrom yourapplication.database import metadata, db_session\n\nclass User(object):\n    query = db_session.query_property()\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return f'<User {self.name!r}>'\n\nusers = Table('users', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('name', String(50), unique=True),\n    Column('email', String(120), unique=True)\n)\nmapper(User, users)\n```\n\nQuerying and inserting works exactly the same as in the example above..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I sql abstraction layer in flask-stable?\n\nAssistant: To sql abstraction layer in flask-stable, here's what you do:\nIf you just want to use the database system (and SQL) abstraction layer you basically only need the engine:\n\n```\nfrom sqlalchemy import create_engine, MetaData, Table\n\nengine = create_engine('sqlite:////tmp/test.db')\nmetadata = MetaData(bind=engine)\n```\n\nThen you can either declare the tables in your code like in the examples above, or automatically load them:\n\n```\nfrom sqlalchemy import Table\n\nusers = Table('users', metadata, autoload=True)\n```\n\nTo insert data you can use the `insert` method. We have to get a connection first so that we can use a transaction:\n\n```\n>>> con = engine.connect()\n>>> con.execute(users.insert(), name='admin', email='admin@localhost')\n```\n\nSQLAlchemy will automatically commit for us.\n\nTo query your database, you use the engine directly or use a connection:\n\n```\n>>> users.select(users.c.id == 1).execute().first()\n(1, 'admin', 'admin@localhost')\n```\n\nThese results are also dict-like tuples:\n\n```\n>>> r = users.select(users.c.id == 1).execute().first()\n>>> r['name']\n'admin'\n```\n\nYou can also pass strings of SQL statements to the `execute()` method:\n\n```\n>>> engine.execute('select * from users where id = :1', [1]).first()\n(1, 'admin', 'admin@localhost')\n```\n\nFor more information about SQLAlchemy, head over to the website..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "section_detail", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you give me some code examples for SQLAlchemy in Flask in flask-stable?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example database.py module for Declarative**:\n\n```yaml\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker, declarative_base\n\nengine = create_engine('sqlite:////tmp/test.db')\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\ndef init_db():\n    # import all modules here that might define models so that\n    # they will be registered properly on the metadata.  Otherwise\n    # you will have to import them first before calling init_db()\n    import yourapplication.models\n    Base.metadata.create_all(bind=engine)\n```\n\nThis snippet shows you how to example database.py module for declarative, which is an important aspect of sqlalchemy in flask.\n\n", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "title": "SQLAlchemy in Flask", "description": "Many people prefer SQLAlchemy for database access. In this case it’s encouraged to use a package instead of a module for your flask application and drop the models into a separate module. There are four very common ways to use SQLAlchemy.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:25:08", "type": "code_examples", "page_metadata": {"favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "readthedocs-resolver-filename": "/patterns/sqlalchemy/", "title": "SQLAlchemy in Flask — Flask Documentation (3.1.x)", "readthedocs-project-slug": "flask", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "04fa329d-8a58-4676-925f-2b187b889ebd", "sourceURL": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy", "url": "https://flask.palletsprojects.com/en/stable/patterns/sqlalchemy/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: Can you explain what Welcome to Flask is in flask-stable?\n\nAssistant: Sure, I'd be happy to explain Welcome to Flask in flask-stable.\n\n# Welcome to Flask\n\nWelcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.Here's a quick rundown of what this is about:\n\n## User’s Guide\n\nFlask provides configuration and conventions, with sensible defaults, to get started. This section of the documentation explains the different parts of the Flask framework and how they can be used, customized, and extended. Beyond Flask itself, look for community-maintained extensions to add even more functionality.\n\n## API Reference\n\nIf you are looking for information on a specific function, class or method, this part of the documentation is for you.\n\n## Additional Notes\n\nThis section contains design decisions in Flask, extension development guidelines, contributing information, and license details.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable", "title": "Welcome to Flask", "description": "Welcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:29:58", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Welcome to Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "73873946-22ff-48d2-9cf7-831f29cb3ac6", "sourceURL": "https://flask.palletsprojects.com/en/stable", "url": "https://flask.palletsprojects.com/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I user’s guide in flask-stable?\n\nAssistant: To user’s guide in flask-stable, here's what you do:\nFlask provides configuration and conventions, with sensible defaults, to get started. This section of the documentation explains the different parts of the Flask framework and how they can be used, customized, and extended. Beyond Flask itself, look for community-maintained extensions to add even more functionality..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable", "title": "Welcome to Flask", "description": "Welcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:29:58", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Welcome to Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "73873946-22ff-48d2-9cf7-831f29cb3ac6", "sourceURL": "https://flask.palletsprojects.com/en/stable", "url": "https://flask.palletsprojects.com/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I api reference in flask-stable?\n\nAssistant: To api reference in flask-stable, here's what you do:\nIf you are looking for information on a specific function, class or method, this part of the documentation is for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable", "title": "Welcome to Flask", "description": "Welcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:29:58", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Welcome to Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "73873946-22ff-48d2-9cf7-831f29cb3ac6", "sourceURL": "https://flask.palletsprojects.com/en/stable", "url": "https://flask.palletsprojects.com/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: How do I additional notes in flask-stable?\n\nAssistant: To additional notes in flask-stable, here's what you do:\nThis section contains design decisions in Flask, extension development guidelines, contributing information, and license details..\nPretty straightforward, right?", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable", "title": "Welcome to Flask", "description": "Welcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:29:58", "type": "section_detail", "page_metadata": {"readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Welcome to Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "73873946-22ff-48d2-9cf7-831f29cb3ac6", "sourceURL": "https://flask.palletsprojects.com/en/stable", "url": "https://flask.palletsprojects.com/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful flask-stable expert.\n\nUser: What are some tips for using Welcome to Flask in flask-stable effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCheck the documentation of Werkzeug, Jinja, and Click for additional information.\n\nLook for community-maintained extensions to add more functionality to Flask.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://flask.palletsprojects.com/en/stable", "title": "Welcome to Flask", "description": "Welcome to Flask’s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:29:58", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1"], "title": "Welcome to Flask — Flask Documentation (3.1.x)", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://flask.palletsprojects.com/en/_static/shortcut-icon.png", "language": "en", "readthedocs-project-slug": "flask", "scrapeId": "73873946-22ff-48d2-9cf7-831f29cb3ac6", "sourceURL": "https://flask.palletsprojects.com/en/stable", "url": "https://flask.palletsprojects.com/en/stable/", "statusCode": 200}}}
