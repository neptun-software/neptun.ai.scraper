{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Learn React is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Learn React in react-learn.\n\n# Learn React\n\nReact has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.Here's a quick rundown of what this is about:\n\n## Installation\n\nReact has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.\n\n## Try React\n\nYou don’t need to install anything to play with React. Try editing this sandbox!\n\nApp.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}</h1>;\n}\n\nexport default function App() {\n  return <Greeting name=\"world\" />\n}\n```\n\nYou can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.\n\nMost pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)\n\nTo try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!\n\n## Creating a React App\n\nIf you want to start a new React app, you can [create a React app](https://react.dev/learn/creating-a-react-app) using a recommended framework.\n\n## Build a React App from Scratch\n\nIf a framework is not a good fit for your project, you prefer to build your own framework, or you just want to learn the basics of a React app you can [build a React app from scratch](https://react.dev/learn/build-a-react-app-from-scratch).\n\n## Add React to an existing project\n\nIf want to try using React in your existing app or a website, you can [add React to an existing project.](https://react.dev/learn/add-react-to-an-existing-project)\n\n## Note\n\n#### Should I use Create React App?\n\nNo. Create React App has been deprecated. For more information, see [Sunsetting Create React App](https://react.dev/blog/2025/02/14/sunsetting-create-react-app).\n\n## Next steps\n\nHead to the [Quick Start](https://react.dev/learn) guide for a tour of the most important React concepts you will encounter every day.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "overview", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I installation in react-learn?\n\nAssistant: To installation in react-learn, here's what you do:\nReact has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try react in react-learn?\n\nAssistant: To try react in react-learn, here's what you do:\nYou don’t need to install anything to play with React. Try editing this sandbox!\n\nApp.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}</h1>;\n}\n\nexport default function App() {\n  return <Greeting name=\"world\" />\n}\n```\n\nYou can edit it directly or open it in a new tab by pressing the “Fork” button in the upper right corner.\n\nMost pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?template=QWYVwWN)\n\nTo try React locally on your computer, [download this HTML page.](https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html) Open it in your editor and in your browser!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I creating a react app in react-learn?\n\nAssistant: To creating a react app in react-learn, here's what you do:\nIf you want to start a new React app, you can [create a React app](https://react.dev/learn/creating-a-react-app) using a recommended framework..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I build a react app from scratch in react-learn?\n\nAssistant: To build a react app from scratch in react-learn, here's what you do:\nIf a framework is not a good fit for your project, you prefer to build your own framework, or you just want to learn the basics of a React app you can [build a React app from scratch](https://react.dev/learn/build-a-react-app-from-scratch)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I add react to an existing project in react-learn?\n\nAssistant: To add react to an existing project in react-learn, here's what you do:\nIf want to try using React in your existing app or a website, you can [add React to an existing project.](https://react.dev/learn/add-react-to-an-existing-project).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\n#### Should I use Create React App?\n\nNo. Create React App has been deprecated. For more information, see [Sunsetting Create React App](https://react.dev/blog/2025/02/14/sunsetting-create-react-app)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I next steps in react-learn?\n\nAssistant: To next steps in react-learn, here's what you do:\nHead to the [Quick Start](https://react.dev/learn) guide for a tour of the most important React concepts you will encounter every day..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "section_detail", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Learn React in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Greeting Component Example**:\n\n```yaml\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}</h1>;\n}\n\nexport default function App() {\n  return <Greeting name=\"world\" />\n}\n```\n\nThis snippet shows you how to greeting component example, which is an important aspect of learn react.\n\n", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "code_examples", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Learn React in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can edit the sandbox directly or open it in a new tab by pressing the 'Fork' button.\n\nMost pages in the React documentation contain sandboxes for experimentation.\n\nTo try React locally, download the provided HTML page and open it in your editor and browser.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/installation", "title": "Learn React", "description": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:29", "type": "best_practices", "page_metadata": {"twitter:title": "Installation – React", "ogImage": "https://react.dev/images/og-learn.png", "title": "Installation – React", "ogUrl": "https://react.dev/learn/installation", "ogTitle": "Installation – React", "og:type": "website", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "og:title": "Installation – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/installation", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "algolia-search-order": "6", "theme-color": "#23272f", "scrapeId": "a9e1c884-431d-4165-b4eb-f89ce8591c6d", "sourceURL": "https://react.dev/learn/installation", "url": "https://react.dev/learn/installation", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Learn React is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Learn React in react-learn.\n\n# Learn React\n\nThis page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.Here's a quick rundown of what this is about:\n\n## Setup\n\nReact integrates with tools like editors, TypeScript, browser extensions, and compilers. This section will help you get your environment set up.\n\n## Editor Setup\n\nSee our recommended editors and learn how to set them up to work with React.\n\n## Using TypeScript\n\nTypeScript is a popular way to add type definitions to JavaScript codebases. Learn how to integrate TypeScript into your React projects.\n\n## React Developer Tools\n\nReact Developer Tools is a browser extension that can inspect React components, edit props and state, and identify performance problems. Learn how to install it here.\n\n## React Compiler\n\nReact Compiler is a tool that automatically optimizes your React app. Learn more.\n\n## Next steps\n\nHead to the Quick Start guide for a tour of the most important React concepts you will encounter every day.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "overview", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I setup in react-learn?\n\nAssistant: To setup in react-learn, here's what you do:\nReact integrates with tools like editors, TypeScript, browser extensions, and compilers. This section will help you get your environment set up..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I editor setup in react-learn?\n\nAssistant: To editor setup in react-learn, here's what you do:\nSee our recommended editors and learn how to set them up to work with React..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using typescript in react-learn?\n\nAssistant: To using typescript in react-learn, here's what you do:\nTypeScript is a popular way to add type definitions to JavaScript codebases. Learn how to integrate TypeScript into your React projects..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react developer tools in react-learn?\n\nAssistant: To react developer tools in react-learn, here's what you do:\nReact Developer Tools is a browser extension that can inspect React components, edit props and state, and identify performance problems. Learn how to install it here..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react compiler in react-learn?\n\nAssistant: To react compiler in react-learn, here's what you do:\nReact Compiler is a tool that automatically optimizes your React app. Learn more..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I next steps in react-learn?\n\nAssistant: To next steps in react-learn, here's what you do:\nHead to the Quick Start guide for a tour of the most important React concepts you will encounter every day..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/setup", "title": "Learn React", "description": "This page covers the setup process for React, including editor setup, TypeScript integration, and tools for development.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"algolia-search-order": "10", "ogTitle": "Setup – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/setup", "twitter:card": "summary_large_image", "twitter:title": "Setup – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Setup – React", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Setup – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/setup", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "scrapeId": "eca4ad6a-567d-4897-b1e6-9fea4ec50bf3", "sourceURL": "https://react.dev/learn/setup", "url": "https://react.dev/learn/setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Using TypeScript is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Using TypeScript in react-learn.\n\n# Using TypeScript\n\nTypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- TypeScript with React Components\n- Examples of typing with Hooks\n- Common types from `@types/react`\n- Further learning locations\n\n## Installation\n\nAll production-grade React frameworks offer support for using TypeScript. Follow the framework specific guide for installation:\n\n- Next.js\n- Remix\n- Gatsby\n- Expo\n\n## Adding TypeScript to an existing React project\n\nTo install the latest version of React’s type definitions:\n\n```bash\nnpm install @types/react @types/react-dom\n```\n\nThe following compiler options need to be set in your `tsconfig.json`:\n\n1. `dom` must be included in `lib` (Note: If no `lib` option is specified, `dom` is included by default).\n2. `jsx` must be set to one of the valid options. `preserve` should suffice for most applications.\nIf you’re publishing a library, consult the `jsx` documentation on what value to choose.\n\n## TypeScript with React Components\n\nEvery file containing JSX must use the `.tsx` file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.\n\nWriting TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component’s props. These types can be used for correctness checking and providing inline documentation in editors.\n\n## Example Hooks\n\nThe type definitions from `@types/react` include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types.\n\n## Useful Types\n\nThere is quite an expansive set of types which come from the `@types/react` package, it is worth a read when you feel comfortable with how React and TypeScript interact. We will cover a few of the more common types here.\n\n## Further learning\n\nThis guide has covered the basics of using TypeScript with React, but there is a lot more to learn. Individual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "overview", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- TypeScript with React Components\n- Examples of typing with Hooks\n- Common types from `@types/react`\n- Further learning locations.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I installation in react-learn?\n\nAssistant: To installation in react-learn, here's what you do:\nAll production-grade React frameworks offer support for using TypeScript. Follow the framework specific guide for installation:\n\n- Next.js\n- Remix\n- Gatsby\n- Expo.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding typescript to an existing react project in react-learn?\n\nAssistant: To adding typescript to an existing react project in react-learn, here's what you do:\nTo install the latest version of React’s type definitions:\n\n```bash\nnpm install @types/react @types/react-dom\n```\n\nThe following compiler options need to be set in your `tsconfig.json`:\n\n1. `dom` must be included in `lib` (Note: If no `lib` option is specified, `dom` is included by default).\n2. `jsx` must be set to one of the valid options. `preserve` should suffice for most applications.\nIf you’re publishing a library, consult the `jsx` documentation on what value to choose..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I typescript with react components in react-learn?\n\nAssistant: To typescript with react components in react-learn, here's what you do:\nEvery file containing JSX must use the `.tsx` file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.\n\nWriting TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component’s props. These types can be used for correctness checking and providing inline documentation in editors..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I example hooks in react-learn?\n\nAssistant: To example hooks in react-learn, here's what you do:\nThe type definitions from `@types/react` include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I useful types in react-learn?\n\nAssistant: To useful types in react-learn, here's what you do:\nThere is quite an expansive set of types which come from the `@types/react` package, it is worth a read when you feel comfortable with how React and TypeScript interact. We will cover a few of the more common types here..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I further learning in react-learn?\n\nAssistant: To further learning in react-learn, here's what you do:\nThis guide has covered the basics of using TypeScript with React, but there is a lot more to learn. Individual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "section_detail", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Using TypeScript in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding TypeScript to an existing React project**:\n\n```yaml\nnpm install @types/react @types/react-dom\n```\n\nThis snippet shows you how to adding typescript to an existing react project, which is an important aspect of using typescript.\n\n**MyButton Component Example**:\n\n```yaml\nfunction MyButton({ title }: { title: string }) {\n  return (\n    <button>{title}</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton title=\"I'm a button\" />\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to mybutton component example, which is an important aspect of using typescript.\n\n", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "code_examples", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Using TypeScript in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEvery file containing JSX must use the .tsx file extension.\n\nThe type describing your component’s props can be as simple or as complex as you need, though they should be an object type described with either a type or interface.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/typescript", "title": "Using TypeScript", "description": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScript supports JSX and you can get full React Web support by adding @types/react and @types/react-dom to your project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:59:43", "type": "best_practices", "page_metadata": {"algolia-search-order": "12", "twitter:image": "https://react.dev/images/og-learn.png", "title": "Using TypeScript – React", "language": "en", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "og:url": "https://react.dev/learn/typescript", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Using TypeScript – React", "ogDescription": "The library for web and native user interfaces", "og:title": "Using TypeScript – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "twitter:title": "Using TypeScript – React", "og:type": "website", "ogUrl": "https://react.dev/learn/typescript", "twitter:site": "@reactjs", "scrapeId": "6783bd50-32ac-415b-8514-660cc6ea32d8", "sourceURL": "https://react.dev/learn/typescript", "url": "https://react.dev/learn/typescript", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Adding Interactivity is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Adding Interactivity in react-learn.\n\n# Adding Interactivity\n\nSome things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.Here's a quick rundown of what this is about:\n\n## In this chapter\n\n- How to handle user-initiated events\n- How to make components “remember” information with state\n- How React updates the UI in two phases\n- Why state doesn’t update right after you change it\n- How to queue multiple state updates\n- How to update an object in state\n- How to update an array in state\n\n## Responding to events\n\nReact lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\n\nBuilt-in components like <button> only support built-in browser events like onClick. However, you can also create your own components, and give their event handler props any application-specific names that you like.\n\n## State: a component’s memory\n\nComponents often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.\n\nYou can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.\n\n## Render and commit\n\nBefore your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\n\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\n\n1. Triggering a render (delivering the diner’s order to the kitchen)\n2. Rendering the component (preparing the order in the kitchen)\n3. Committing to the DOM (placing the order on the table)\n\n## State as a snapshot\n\nUnlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!\n\n## Queueing a series of state updates\n\nThis component is buggy: clicking “+3” increments the score only once.\n\n## Updating objects in state\n\nState can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.\n\n## Updating arrays in state\n\nArrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.\n\n## What’s next?\n\nHead over to Responding to Events to start reading this chapter page by page!\n\nOr, if you’re already familiar with these topics, why not read about Managing State?\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "overview", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I in this chapter in react-learn?\n\nAssistant: To in this chapter in react-learn, here's what you do:\n- How to handle user-initiated events\n- How to make components “remember” information with state\n- How React updates the UI in two phases\n- Why state doesn’t update right after you change it\n- How to queue multiple state updates\n- How to update an object in state\n- How to update an array in state.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I responding to events in react-learn?\n\nAssistant: To responding to events in react-learn, here's what you do:\nReact lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\n\nBuilt-in components like <button> only support built-in browser events like onClick. However, you can also create your own components, and give their event handler props any application-specific names that you like..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I state: a component’s memory in react-learn?\n\nAssistant: To state: a component’s memory in react-learn, here's what you do:\nComponents often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.\n\nYou can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I render and commit in react-learn?\n\nAssistant: To render and commit in react-learn, here's what you do:\nBefore your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\n\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\n\n1. Triggering a render (delivering the diner’s order to the kitchen)\n2. Rendering the component (preparing the order in the kitchen)\n3. Committing to the DOM (placing the order on the table).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I state as a snapshot in react-learn?\n\nAssistant: To state as a snapshot in react-learn, here's what you do:\nUnlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I queueing a series of state updates in react-learn?\n\nAssistant: To queueing a series of state updates in react-learn, here's what you do:\nThis component is buggy: clicking “+3” increments the score only once..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating objects in state in react-learn?\n\nAssistant: To updating objects in state in react-learn, here's what you do:\nState can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating arrays in state in react-learn?\n\nAssistant: To updating arrays in state in react-learn, here's what you do:\nArrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what’s next? in react-learn?\n\nAssistant: To what’s next? in react-learn, here's what you do:\nHead over to Responding to Events to start reading this chapter page by page!\n\nOr, if you’re already familiar with these topics, why not read about Managing State?.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Adding Interactivity in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**App.js Example for Responding to Events**:\n\n```yaml\nexport default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to app.js example for responding to events, which is an important aspect of adding interactivity.\n\n", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "code_examples", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Adding Interactivity in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the useState Hook to manage state in functional components.\n\nAvoid mutating state directly; instead, create copies of state when updating.\n\nConsider using libraries like Immer to simplify state updates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/adding-interactivity", "title": "Adding Interactivity", "description": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:03:37", "type": "best_practices", "page_metadata": {"og:url": "https://react.dev/learn/adding-interactivity", "language": "en", "twitter:title": "Adding Interactivity – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "ogTitle": "Adding Interactivity – React", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "algolia-search-order": "26", "og:title": "Adding Interactivity – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/adding-interactivity", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Adding Interactivity – React", "scrapeId": "7e84ed66-041d-4177-9d17-a49dae452132", "sourceURL": "https://react.dev/learn/adding-interactivity", "url": "https://react.dev/learn/adding-interactivity", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Conditional Rendering is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Conditional Rendering in react-learn.\n\n# Conditional Rendering\n\nYour components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to return different JSX depending on a condition\n- How to conditionally include or exclude a piece of JSX\n- Common conditional syntax shortcuts you’ll encounter in React codebases\n\n## Conditionally returning JSX\n\nLet’s say you have a PackingList component rendering several Item s, which can be marked as packed or not:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nNotice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✅) to packed items if isPacked={true}.\n\nYou can write this as an if/else statement like so:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nIf the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✅</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nTry editing what gets returned in either case, and see how the result changes! Notice how you’re creating branching logic with JavaScript’s if and return statements. In React, control flow (like conditions) is handled by JavaScript.\n\n## Conditionally returning nothing with null\n\nIn some situations, you won’t want to render anything at all. For example, say you don’t want to show packed items at all. A component must return something. In this case, you can return null:\n\n```javascript\nif (isPacked) {\n  return null;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nIf isPacked is true, the component will return nothing, null. Otherwise, it will return JSX to render.\n\n```javascript\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return null;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nIn practice, returning null from a component isn’t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component’s JSX.\n\n## Conditionally including JSX\n\nIn the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\n\n```javascript\n<li className=\"item\">{name} ✅</li>\n```\n\nis very similar to\n\n```javascript\n<li className=\"item\">{name}</li>\n```\n\nBoth of the conditional branches return <li className=\"item\">...</li>:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nWhile this duplication isn’t harmful, it could make your code harder to maintain. What if you want to change the className? You’d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY.\n\n## Conditional (ternary) operator ( ? :)\n\nJavaScript has a compact syntax for writing a conditional expression — the conditional operator or “ternary operator”. Instead of this:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nYou can write this:\n\n```javascript\nreturn (\n  <li className=\"item\">\n    {isPacked ? name + ' ✅' : name}\n  </li>\n);\n```\n\nYou can read it as _“if isPacked is true, then ( ?) render name + ' ✅', otherwise ( :) render name”_.\n\n## Deep Dive\n\nIf you’re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different “instances” of <li>. But JSX elements aren’t “instances” because they don’t hold any internal state and aren’t real DOM nodes. They’re lightweight descriptions, like blueprints.\n\n## Logical AND operator ( && )\n\nAnother common shortcut you’ll encounter is the JavaScript logical AND ( && ) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With &&, you could conditionally render the checkmark only if isPacked is true:\n\n```javascript\nreturn (\n  <li className=\"item\">\n    {name} {isPacked && '✅'}\n  </li>\n);\n```\n\nYou can read this as _“if isPacked, then ( &&) render the checkmark, otherwise, render nothing”_.\n\n## Pitfall\n\n**Don’t put numbers on the left side of &&.** To test the condition, JavaScript converts the left side to a boolean automatically. However, if the left side is 0, then the whole expression gets that value ( 0), and React will happily render 0 rather than nothing.\n\n## Conditionally assigning JSX to a variable\n\nWhen the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let, so start by providing the default content you want to display, the name:\n\n```javascript\nlet itemContent = name;\n```\n\nUse an if statement to reassign a JSX expression to itemContent if isPacked is true:\n\n```javascript\nif (isPacked) {\n  itemContent = name + \" ✅\";\n}\n```\n\nEmbed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:\n\n```javascript\n<li className=\"item\">\n  {itemContent}\n</li>\n```\n\nThis style is the most verbose, but it’s also the most flexible.\n\n## Recap\n\n- In React, you control branching logic with JavaScript.\n- You can return a JSX expression conditionally with an if statement.\n- You can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\n- In JSX, {cond ? <A /> : <B />} means _“if cond, render <A />, otherwise <B />”_.\n- In JSX, {cond && <A />} means _“if cond, render <A />, otherwise nothing”_.\n\n## Try out some challenges\n\n1. Show an icon for incomplete items with ? :\n2. Show the item importance with &&\n3. Refactor a series of ? : to if and variables\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to return different JSX depending on a condition\n- How to conditionally include or exclude a piece of JSX\n- Common conditional syntax shortcuts you’ll encounter in React codebases.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditionally returning jsx in react-learn?\n\nAssistant: To conditionally returning jsx in react-learn, here's what you do:\nLet’s say you have a PackingList component rendering several Item s, which can be marked as packed or not:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nNotice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✅) to packed items if isPacked={true}.\n\nYou can write this as an if/else statement like so:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nIf the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✅</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nTry editing what gets returned in either case, and see how the result changes! Notice how you’re creating branching logic with JavaScript’s if and return statements. In React, control flow (like conditions) is handled by JavaScript..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditionally returning nothing with null in react-learn?\n\nAssistant: To conditionally returning nothing with null in react-learn, here's what you do:\nIn some situations, you won’t want to render anything at all. For example, say you don’t want to show packed items at all. A component must return something. In this case, you can return null:\n\n```javascript\nif (isPacked) {\n  return null;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nIf isPacked is true, the component will return nothing, null. Otherwise, it will return JSX to render.\n\n```javascript\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return null;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nIn practice, returning null from a component isn’t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component’s JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditionally including jsx in react-learn?\n\nAssistant: To conditionally including jsx in react-learn, here's what you do:\nIn the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\n\n```javascript\n<li className=\"item\">{name} ✅</li>\n```\n\nis very similar to\n\n```javascript\n<li className=\"item\">{name}</li>\n```\n\nBoth of the conditional branches return <li className=\"item\">...</li>:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nWhile this duplication isn’t harmful, it could make your code harder to maintain. What if you want to change the className? You’d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditional (ternary) operator ( ? :) in react-learn?\n\nAssistant: To conditional (ternary) operator ( ? :) in react-learn, here's what you do:\nJavaScript has a compact syntax for writing a conditional expression — the conditional operator or “ternary operator”. Instead of this:\n\n```javascript\nif (isPacked) {\n  return <li className=\"item\">{name} ✅</li>;\n}\nreturn <li className=\"item\">{name}</li>;\n```\n\nYou can write this:\n\n```javascript\nreturn (\n  <li className=\"item\">\n    {isPacked ? name + ' ✅' : name}\n  </li>\n);\n```\n\nYou can read it as _“if isPacked is true, then ( ?) render name + ' ✅', otherwise ( :) render name”_..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nIf you’re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different “instances” of <li>. But JSX elements aren’t “instances” because they don’t hold any internal state and aren’t real DOM nodes. They’re lightweight descriptions, like blueprints..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I logical and operator ( && ) in react-learn?\n\nAssistant: To logical and operator ( && ) in react-learn, here's what you do:\nAnother common shortcut you’ll encounter is the JavaScript logical AND ( && ) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With &&, you could conditionally render the checkmark only if isPacked is true:\n\n```javascript\nreturn (\n  <li className=\"item\">\n    {name} {isPacked && '✅'}\n  </li>\n);\n```\n\nYou can read this as _“if isPacked, then ( &&) render the checkmark, otherwise, render nothing”_..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\n**Don’t put numbers on the left side of &&.** To test the condition, JavaScript converts the left side to a boolean automatically. However, if the left side is 0, then the whole expression gets that value ( 0), and React will happily render 0 rather than nothing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditionally assigning jsx to a variable in react-learn?\n\nAssistant: To conditionally assigning jsx to a variable in react-learn, here's what you do:\nWhen the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let, so start by providing the default content you want to display, the name:\n\n```javascript\nlet itemContent = name;\n```\n\nUse an if statement to reassign a JSX expression to itemContent if isPacked is true:\n\n```javascript\nif (isPacked) {\n  itemContent = name + \" ✅\";\n}\n```\n\nEmbed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:\n\n```javascript\n<li className=\"item\">\n  {itemContent}\n</li>\n```\n\nThis style is the most verbose, but it’s also the most flexible..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- In React, you control branching logic with JavaScript.\n- You can return a JSX expression conditionally with an if statement.\n- You can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\n- In JSX, {cond ? <A /> : <B />} means _“if cond, render <A />, otherwise <B />”_.\n- In JSX, {cond && <A />} means _“if cond, render <A />, otherwise nothing”_..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Show an icon for incomplete items with ? :\n2. Show the item importance with &&\n3. Refactor a series of ? : to if and variables.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Conditional Rendering in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Conditionally returning JSX**:\n\n```yaml\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✅</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n```\n\nThis snippet shows you how to conditionally returning jsx, which is an important aspect of conditional rendering.\n\n", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Conditional Rendering in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn practice, returning null from a component isn’t common because it might surprise a developer trying to render it.\n\nIf your components get messy with too much nested conditional markup, consider extracting child components to clean things up.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/conditional-rendering", "title": "Conditional Rendering", "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:05:25", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:title": "Conditional Rendering – React", "twitter:creator": "@reactjs", "og:type": "website", "algolia-search-order": "22", "title": "Conditional Rendering – React", "ogUrl": "https://react.dev/learn/conditional-rendering", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Conditional Rendering – React", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Conditional Rendering – React", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/conditional-rendering", "language": "en", "scrapeId": "0bae996e-dc74-4ba4-a6b2-6fb4a5bafe85", "sourceURL": "https://react.dev/learn/conditional-rendering", "url": "https://react.dev/learn/conditional-rendering", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Editor Setup is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Editor Setup in react-learn.\n\n# Editor Setup\n\nA properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What the most popular editors are\n- How to format your code automatically\n\n## Your editor\n\n[VS Code](https://code.visualstudio.com/) is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!\n\nOther popular text editors used in the React community include:\n\n- [WebStorm](https://www.jetbrains.com/webstorm/) is an integrated development environment designed specifically for JavaScript.\n- [Sublime Text](https://www.sublimetext.com/) has support for JSX and TypeScript, [syntax highlighting](https://stackoverflow.com/a/70960574/458193) and autocomplete built in.\n- [Vim](https://www.vim.org/) is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X.\n\n## Recommended text editor features\n\nSome editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!\n\n## Linting\n\nCode linters find problems in your code as you write, helping you fix them early. [ESLint](https://eslint.org/) is a popular, open source linter for JavaScript.\n\n- [Install ESLint with the recommended configuration for React](https://www.npmjs.com/package/eslint-config-react-app) (be sure you have [Node installed!](https://nodejs.org/en/download/current/))\n- [Integrate ESLint in VSCode with the official extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n\n**Make sure that you’ve enabled all the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks) rules for your project.** They are essential and catch the most severe bugs early. The recommended [`eslint-config-react-app`](https://www.npmjs.com/package/eslint-config-react-app) preset already includes them.\n\n## Formatting\n\nThe last thing you want to do when sharing your code with another contributor is get into a discussion about [tabs vs spaces](https://www.google.com/search?q=tabs+vs+spaces)! Fortunately, [Prettier](https://prettier.io/) will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces—and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\n\nYou can install the [Prettier extension in VSCode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) by following these steps:\n\n1. Launch VS Code\n2. Use Quick Open (press Ctrl/Cmd+P)\n3. Paste in `ext install esbenp.prettier-vscode`\n4. Press Enter\n\n## Formatting on save\n\nIdeally, you should format your code on every save. VS Code has settings for this!\n\n1. In VS Code, press `CTRL/CMD + SHIFT + P`.\n2. Type “settings”\n3. Hit Enter\n4. In the search bar, type “format on save”\n5. Be sure the “format on save” option is ticked!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "overview", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What the most popular editors are\n- How to format your code automatically.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I your editor in react-learn?\n\nAssistant: To your editor in react-learn, here's what you do:\n[VS Code](https://code.visualstudio.com/) is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!\n\nOther popular text editors used in the React community include:\n\n- [WebStorm](https://www.jetbrains.com/webstorm/) is an integrated development environment designed specifically for JavaScript.\n- [Sublime Text](https://www.sublimetext.com/) has support for JSX and TypeScript, [syntax highlighting](https://stackoverflow.com/a/70960574/458193) and autocomplete built in.\n- [Vim](https://www.vim.org/) is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recommended text editor features in react-learn?\n\nAssistant: To recommended text editor features in react-learn, here's what you do:\nSome editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I linting in react-learn?\n\nAssistant: To linting in react-learn, here's what you do:\nCode linters find problems in your code as you write, helping you fix them early. [ESLint](https://eslint.org/) is a popular, open source linter for JavaScript.\n\n- [Install ESLint with the recommended configuration for React](https://www.npmjs.com/package/eslint-config-react-app) (be sure you have [Node installed!](https://nodejs.org/en/download/current/))\n- [Integrate ESLint in VSCode with the official extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n\n**Make sure that you’ve enabled all the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks) rules for your project.** They are essential and catch the most severe bugs early. The recommended [`eslint-config-react-app`](https://www.npmjs.com/package/eslint-config-react-app) preset already includes them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I formatting in react-learn?\n\nAssistant: To formatting in react-learn, here's what you do:\nThe last thing you want to do when sharing your code with another contributor is get into a discussion about [tabs vs spaces](https://www.google.com/search?q=tabs+vs+spaces)! Fortunately, [Prettier](https://prettier.io/) will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces—and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\n\nYou can install the [Prettier extension in VSCode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) by following these steps:\n\n1. Launch VS Code\n2. Use Quick Open (press Ctrl/Cmd+P)\n3. Paste in `ext install esbenp.prettier-vscode`\n4. Press Enter.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I formatting on save in react-learn?\n\nAssistant: To formatting on save in react-learn, here's what you do:\nIdeally, you should format your code on every save. VS Code has settings for this!\n\n1. In VS Code, press `CTRL/CMD + SHIFT + P`.\n2. Type “settings”\n3. Hit Enter\n4. In the search bar, type “format on save”\n5. Be sure the “format on save” option is ticked!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Editor Setup in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install ESLint with recommended configuration**:\n\n```yaml\nnpm install eslint-config-react-app\n```\n\nThis snippet shows you how to install eslint with recommended configuration, which is an important aspect of editor setup.\n\n**Integrate ESLint in VSCode**:\n\n```yaml\ncode --install-extension dbaeumer.vscode-eslint\n```\n\nThis snippet shows you how to integrate eslint in vscode, which is an important aspect of editor setup.\n\n**Install Prettier extension in VSCode**:\n\n```yaml\next install esbenp.prettier-vscode\n```\n\nThis snippet shows you how to install prettier extension in vscode, which is an important aspect of editor setup.\n\n**Check formatting with Prettier**:\n\n```yaml\nprettier --check\n```\n\nThis snippet shows you how to check formatting with prettier, which is an important aspect of editor setup.\n\n", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "code_examples", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Editor Setup in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMake sure that you’ve enabled all the `eslint-plugin-react-hooks` rules for your project.\n\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset using `eslint-config-prettier` so that ESLint is only used for catching logical mistakes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/editor-setup", "title": "Editor Setup", "description": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:06:51", "type": "best_practices", "page_metadata": {"og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "language": "en", "og:title": "Editor Setup – React", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/editor-setup", "title": "Editor Setup – React", "ogTitle": "Editor Setup – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/editor-setup", "og:type": "website", "theme-color": "#23272f", "twitter:title": "Editor Setup – React", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "algolia-search-order": "11", "scrapeId": "5f18f400-ed0f-4d25-96b1-f806d98dd57d", "sourceURL": "https://react.dev/learn/editor-setup", "url": "https://react.dev/learn/editor-setup", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Escape Hatches is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Escape Hatches in react-learn.\n\n# Escape Hatches\n\nAdvanced techniques for controlling and synchronizing components with systems outside of React.Here's a quick rundown of what this is about:\n\n## In this chapter\n\n- [How to “remember” information without re-rendering](https://react.dev/learn/referencing-values-with-refs)\n- [How to access DOM elements managed by React](https://react.dev/learn/manipulating-the-dom-with-refs)\n- [How to synchronize components with external systems](https://react.dev/learn/synchronizing-with-effects)\n- [How to remove unnecessary Effects from your components](https://react.dev/learn/you-might-not-need-an-effect)\n- [How an Effect’s lifecycle is different from a component’s](https://react.dev/learn/lifecycle-of-reactive-effects)\n- [How to prevent some values from re-triggering Effects](https://react.dev/learn/separating-events-from-effects)\n- [How to make your Effect re-run less often](https://react.dev/learn/removing-effect-dependencies)\n- [How to share logic between components](https://react.dev/learn/reusing-logic-with-custom-hooks)\n\n## Referencing values with refs\n\nWhen you want a component to “remember” some information, but you don’t want that information to [trigger new renders](https://react.dev/learn/render-and-commit), you can use a _ref_:\n\n```javascript\nconst ref = useRef(0);\n```\n\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.\n\nA ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output.\n\n## Manipulating the DOM with refs\n\nReact automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node.\n\n## Synchronizing with Effects\n\nSome components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React.\n\n## You Might Not Need An Effect\n\nEffects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\n## Lifecycle of reactive effects\n\nEffects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.\n\n## Separating events from Effects\n\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.\n\n## Removing Effect dependencies\n\nWhen you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop.\n\n## Reusing logic with custom Hooks\n\nReact comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.\n\n## What’s next?\n\nHead over to [Referencing Values with Refs](https://react.dev/learn/referencing-values-with-refs) to start reading this chapter page by page!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I in this chapter in react-learn?\n\nAssistant: To in this chapter in react-learn, here's what you do:\n- [How to “remember” information without re-rendering](https://react.dev/learn/referencing-values-with-refs)\n- [How to access DOM elements managed by React](https://react.dev/learn/manipulating-the-dom-with-refs)\n- [How to synchronize components with external systems](https://react.dev/learn/synchronizing-with-effects)\n- [How to remove unnecessary Effects from your components](https://react.dev/learn/you-might-not-need-an-effect)\n- [How an Effect’s lifecycle is different from a component’s](https://react.dev/learn/lifecycle-of-reactive-effects)\n- [How to prevent some values from re-triggering Effects](https://react.dev/learn/separating-events-from-effects)\n- [How to make your Effect re-run less often](https://react.dev/learn/removing-effect-dependencies)\n- [How to share logic between components](https://react.dev/learn/reusing-logic-with-custom-hooks).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I referencing values with refs in react-learn?\n\nAssistant: To referencing values with refs in react-learn, here's what you do:\nWhen you want a component to “remember” some information, but you don’t want that information to [trigger new renders](https://react.dev/learn/render-and-commit), you can use a _ref_:\n\n```javascript\nconst ref = useRef(0);\n```\n\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.\n\nA ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don’t impact the component’s rendering output..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I manipulating the dom with refs in react-learn?\n\nAssistant: To manipulating the dom with refs in react-learn, here's what you do:\nReact automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I synchronizing with effects in react-learn?\n\nAssistant: To synchronizing with effects in react-learn, here's what you do:\nSome components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, _Effects_ let you run some code after rendering. Use them to synchronize your component with a system outside of React..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you might not need an effect in react-learn?\n\nAssistant: To you might not need an effect in react-learn, here's what you do:\nEffects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I lifecycle of reactive effects in react-learn?\n\nAssistant: To lifecycle of reactive effects in react-learn, here's what you do:\nEffects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I separating events from effects in react-learn?\n\nAssistant: To separating events from effects in react-learn, here's what you do:\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I removing effect dependencies in react-learn?\n\nAssistant: To removing effect dependencies in react-learn, here's what you do:\nWhen you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I reusing logic with custom hooks in react-learn?\n\nAssistant: To reusing logic with custom hooks in react-learn, here's what you do:\nReact comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what’s next? in react-learn?\n\nAssistant: To what’s next? in react-learn, here's what you do:\nHead over to [Referencing Values with Refs](https://react.dev/learn/referencing-values-with-refs) to start reading this chapter page by page!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Escape Hatches in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Referencing values with refs example**:\n\n```yaml\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to referencing values with refs example, which is an important aspect of escape hatches.\n\n", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Escape Hatches in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRemoving unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\nYou don’t need Effects to transform data for rendering.\n\nYou don’t need Effects to handle user events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/escape-hatches", "title": "Escape Hatches", "description": "Advanced techniques for controlling and synchronizing components with systems outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:11:22", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Escape Hatches – React", "og:url": "https://react.dev/learn/escape-hatches", "og:description": "The library for web and native user interfaces", "algolia-search-order": "42", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Escape Hatches – React", "title": "Escape Hatches – React", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/escape-hatches", "og:title": "Escape Hatches – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "2474bc99-3d80-4b52-a65f-306fbab45e71", "sourceURL": "https://react.dev/learn/escape-hatches", "url": "https://react.dev/learn/escape-hatches", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Render and Commit is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Render and Commit in react-learn.\n\n# Render and Commit\n\nUnderstanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What rendering means in React\n- When and why React renders a component\n- The steps involved in displaying a component on screen\n- Why rendering does not always produce a DOM update\n\n## Step 1: Trigger a render\n\nThere are two reasons for a component to render:\n\n1. It’s the component’s **initial render.**\n2. The component’s (or one of its ancestors’) **state has been updated.**\n\n### Initial render\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it’s done by calling [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) with the target DOM node, and then calling its `render` method with your component:\n\n```javascript\nimport Image from './Image.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Image />);\n```\n\nTry commenting out the `root.render()` call and see the component disappear!\n\n### Re-renders when state updates\nOnce the component has been initially rendered, you can trigger further renders by updating its state with the [`set` function.](https://react.dev/reference/react/useState#setstate) Updating your component’s state automatically queues a render.\n\n## Step 2: React renders your components\n\nAfter you trigger a render, React calls your components to figure out what to display on screen. **“Rendering” is React calling your components.**\n\n- **On initial render,** React will call the root component.\n- **For subsequent renders,** React will call the function component whose state update triggered the render.\n\nThis process is recursive: if the updated component returns some other component, React will render _that_ component next, and if that component also returns something, it will render _that_ component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\n\nIn the following example, React will call `Gallery()` and `Image()` several times:\n\n```javascript\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n```\n\n- **During the initial render,** React will [create the DOM nodes](https://developer.mozilla.org/docs/Web/API/Document/createElement) for `<section>`, `<h1>`, and three `<img>` tags.\n- **During a re-render,** React will calculate which of their properties, if any, have changed since the previous render. It won’t do anything with that information until the next step, the commit phase.\n\n## Step 3: React commits changes to the DOM\n\nAfter rendering (calling) your components, React will modify the DOM.\n\n- **For the initial render,** React will use the [`appendChild()`](https://developer.mozilla.org/docs/Web/API/Node/appendChild) DOM API to put all the DOM nodes it has created on screen.\n- **For re-renders,** React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\n\n**React only changes the DOM nodes if there’s a difference between renders.** For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the `<input>`, updating its `value`, but the text doesn’t disappear when the component re-renders:\n\n```javascript\nexport default function Clock({ time }) {\n  return (\n    <>\n      <h1>{time}</h1>\n      <input />\n    </>\n  );\n}\n```\n\nThis works because during this last step, React only updates the content of `<h1>` with the new `time`. It sees that the `<input>` appears in the JSX in the same place as last time, so React doesn’t touch the `<input>`—or its `value`!\n\n## Epilogue: Browser paint\n\nAfter rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion throughout the docs.\n\n## Recap\n\n- Any screen update in a React app happens in three steps:\n1. Trigger\n2. Render\n3. Commit\n- You can use Strict Mode to find mistakes in your components\n- React does not touch the DOM if the rendering result is the same as last time\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "overview", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What rendering means in React\n- When and why React renders a component\n- The steps involved in displaying a component on screen\n- Why rendering does not always produce a DOM update.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: trigger a render in react-learn?\n\nAssistant: To step 1: trigger a render in react-learn, here's what you do:\nThere are two reasons for a component to render:\n\n1. It’s the component’s **initial render.**\n2. The component’s (or one of its ancestors’) **state has been updated.**\n\n### Initial render\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it’s done by calling [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) with the target DOM node, and then calling its `render` method with your component:\n\n```javascript\nimport Image from './Image.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Image />);\n```\n\nTry commenting out the `root.render()` call and see the component disappear!\n\n### Re-renders when state updates\nOnce the component has been initially rendered, you can trigger further renders by updating its state with the [`set` function.](https://react.dev/reference/react/useState#setstate) Updating your component’s state automatically queues a render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: react renders your components in react-learn?\n\nAssistant: To step 2: react renders your components in react-learn, here's what you do:\nAfter you trigger a render, React calls your components to figure out what to display on screen. **“Rendering” is React calling your components.**\n\n- **On initial render,** React will call the root component.\n- **For subsequent renders,** React will call the function component whose state update triggered the render.\n\nThis process is recursive: if the updated component returns some other component, React will render _that_ component next, and if that component also returns something, it will render _that_ component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\n\nIn the following example, React will call `Gallery()` and `Image()` several times:\n\n```javascript\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n```\n\n- **During the initial render,** React will [create the DOM nodes](https://developer.mozilla.org/docs/Web/API/Document/createElement) for `<section>`, `<h1>`, and three `<img>` tags.\n- **During a re-render,** React will calculate which of their properties, if any, have changed since the previous render. It won’t do anything with that information until the next step, the commit phase..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: react commits changes to the dom in react-learn?\n\nAssistant: To step 3: react commits changes to the dom in react-learn, here's what you do:\nAfter rendering (calling) your components, React will modify the DOM.\n\n- **For the initial render,** React will use the [`appendChild()`](https://developer.mozilla.org/docs/Web/API/Node/appendChild) DOM API to put all the DOM nodes it has created on screen.\n- **For re-renders,** React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\n\n**React only changes the DOM nodes if there’s a difference between renders.** For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the `<input>`, updating its `value`, but the text doesn’t disappear when the component re-renders:\n\n```javascript\nexport default function Clock({ time }) {\n  return (\n    <>\n      <h1>{time}</h1>\n      <input />\n    </>\n  );\n}\n```\n\nThis works because during this last step, React only updates the content of `<h1>` with the new `time`. It sees that the `<input>` appears in the JSX in the same place as last time, so React doesn’t touch the `<input>`—or its `value`!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I epilogue: browser paint in react-learn?\n\nAssistant: To epilogue: browser paint in react-learn, here's what you do:\nAfter rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion throughout the docs..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Any screen update in a React app happens in three steps:\n1. Trigger\n2. Render\n3. Commit\n- You can use Strict Mode to find mistakes in your components\n- React does not touch the DOM if the rendering result is the same as last time.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "section_detail", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Render and Commit in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial Render Example**:\n\n```yaml\nimport Image from './Image.js';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\nroot.render(<Image />);\n```\n\nThis snippet shows you how to initial render example, which is an important aspect of render and commit.\n\n**Gallery Component Example**:\n\n```yaml\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Inspiring Sculptures</h1>\n      <Image />\n      <Image />\n      <Image />\n    </section>\n  );\n}\n\nfunction Image() {\n  return (\n    <img\n      src=\"https://i.imgur.com/ZF6s192.jpg\"\n      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n    />\n  );\n}\n```\n\nThis snippet shows you how to gallery component example, which is an important aspect of render and commit.\n\n", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "code_examples", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Render and Commit in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRendering must always be a pure calculation: Same inputs, same output.\n\nIt minds its own business: It should not change any objects or variables that existed before rendering.\n\nDon’t optimize prematurely!\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/render-and-commit", "title": "Render and Commit", "description": "Understanding the rendering process in React, including triggering renders, rendering components, and committing changes to the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:15:53", "type": "best_practices", "page_metadata": {"title": "Render and Commit – React", "ogUrl": "https://react.dev/learn/render-and-commit", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "og:url": "https://react.dev/learn/render-and-commit", "og:title": "Render and Commit – React", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "algolia-search-order": "29", "msapplication-TileColor": "#2b5797", "language": "en", "ogTitle": "Render and Commit – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Render and Commit – React", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "scrapeId": "6005631b-585b-4a44-9caa-418b9222895c", "sourceURL": "https://react.dev/learn/render-and-commit", "url": "https://react.dev/learn/render-and-commit", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Keeping Components Pure is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Keeping Components Pure in react-learn.\n\n# Keeping Components Pure\n\nThis section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What purity is and how it helps you avoid bugs\n- How to keep components pure by keeping changes out of the render phase\n- How to use Strict Mode to find mistakes in your components\n\n## Purity: Components as formulas\n\nIn computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:\n\n- **It minds its own business.** It does not change any objects or variables that existed before it was called.\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nYou might already be familiar with one example of pure functions: formulas in math.\n\nConsider this math formula: y = 2x.\n\nIf x = 2 then y = 4. Always.\n\nIf x = 3 then y = 6. Always.\n\nIf x = 3, y won’t sometimes be 9 or –1 or 2.5 depending on the time of day or the state of the stock market.\n\nIf y = 2x and x = 3, y will _always_ be 6.\n\nIf we made this into a JavaScript function, it would look like this:\n\n```javascript\nfunction double(number) {\n  return 2 * number;\n}\n```\n\nIn the above example, `double` is a **pure function.** If you pass it `3`, it will return `6`. Always.\n\nReact is designed around this concept. **React assumes that every component you write is a pure function.** This means that React components you write must always return the same JSX given the same inputs:\n\n```javascript\nfunction Recipe({ drinkers }) {\n  return (\n    <ol>\n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>Spiced Chai Recipe</h1>\n      <h2>For two</h2>\n      <Recipe drinkers={2} />\n      <h2>For a gathering</h2>\n      <Recipe drinkers={4} />\n    </section>\n  );\n}\n```\n\nWhen you pass `drinkers={2}` to `Recipe`, it will return JSX containing `2 cups of water`. Always.\n\nIf you pass `drinkers={4}`, it will return JSX containing `4 cups of water`. Always.\n\nJust like a math formula.\n\n## Side Effects: (un)intended consequences\n\nReact’s rendering process must always be pure. Components should only _return_ their JSX, and not _change_ any objects or variables that existed before rendering—that would make them impure!\n\nHere is a component that breaks this rule:\n\n```javascript\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n```\n\nThis component is reading and writing a `guest` variable declared outside of it. This means that **calling this component multiple times will produce different JSX!** And what’s more, if _other_ components read `guest`, they will produce different JSX, too, depending on when they were rendered! That’s not predictable.\n\nGoing back to our formula y = 2x, now even if x = 2, we cannot trust that y = 4. Our tests could fail, our users would be baffled, planes would fall out of the sky—you can see how this would lead to confusing bugs!\n\nYou can fix this component by passing `guest` as a prop instead:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n```\n\nNow your component is pure, as the JSX it returns only depends on the `guest` prop.\n\n## Detecting impure calculations with StrictMode\n\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props, state, and context. You should always treat these inputs as read-only.\n\nWhen you want to _change_ something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a “Strict Mode” in which it calls each component’s function twice during development. **By calling the component functions twice, Strict Mode helps find components that break these rules.**\n\nNotice how the original example displayed “Guest #2”, “Guest #4”, and “Guest #6” instead of “Guest #1”, “Guest #2”, and “Guest #3”. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. **Pure functions only calculate, so calling them twice won’t change anything**—just like calling `double(2)` twice doesn’t change what’s returned, and solving y = 2x twice doesn’t change what y is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won’t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into `<React.StrictMode>`.\n\n## Local mutation: Your component’s little secret\n\nIn the above example, the problem was that the component changed a _preexisting_ variable while rendering. This is often called a **“mutation”** to make it sound a bit scarier. Pure functions don’t mutate variables outside of the function’s scope or objects that were created before the call—that makes them impure!\n\nHowever, **it’s completely fine to change variables and objects that you’ve _just_ created while rendering.** In this example, you create an `[]` array, assign it to a `cups` variable, and then `push` a dozen cups into it:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaGathering() {\n  let cups = [];\n  for (let i = 1; i <= 12; i++) {\n    cups.push(<Cup key={i} guest={i} />);\n  }\n  return cups;\n}\n```\n\nIf the `cups` variable or the `[]` array were created outside the `TeaGathering` function, this would be a huge problem! You would be changing a _preexisting_ object by pushing items into that array.\n\nHowever, it’s fine because you’ve created them _during the same render_, inside `TeaGathering`. No code outside of `TeaGathering` will ever know that this happened. This is called **“local mutation”**—it’s like your component’s little secret.\n\n## Where you can cause side effects\n\nWhile functional programming relies heavily on purity, at some point, somewhere, _something_ has to change. That’s kind of the point of programming! These changes—updating the screen, starting an animation, changing the data—are called **side effects.** They’re things that happen _“on the side”_, not during rendering.\n\nIn React, **side effects usually belong inside event handlers.** Event handlers are functions that React runs when you perform some action—for example, when you click a button. Even though event handlers are defined _inside_ your component, they don’t run _during_ rendering! **So event handlers don’t need to be pure.**\n\nIf you’ve exhausted all other options and can’t find the right event handler for your side effect, you can still attach it to your returned JSX with a `useEffect` call in your component. This tells React to execute it later, after rendering, when side effects are allowed. **However, this approach should be your last resort.**\n\nWhen possible, try to express your logic with rendering alone. You’ll be surprised how far this can take you!\n\n## Why does React care about purity?\n\nWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\n\n- Your components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\n- You can improve performance by skipping rendering components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n- If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\nEvery new React feature we’re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.\n\n## Recap\n\n- A component must be pure, meaning:\n  - **It minds its own business.** It should not change any objects or variables that existed before rendering.\n  - **Same inputs, same output.** Given the same inputs, a component should always return the same JSX.\n- Rendering can happen at any time, so components should not depend on each others’ rendering sequence.\n- You should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, [“set” state instead of mutating preexisting objects.](https://react.dev/learn/state-a-components-memory)\n- Strive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can `useEffect`.\n- Writing pure functions takes a bit of practice, but it unlocks the power of React’s paradigm.\n\n## Try out some challenges\n\n1. Fix a broken clock 2. Fix a broken profile 3. Fix a broken story tray\n\n## Challenge1 of3: Fix a broken clock\n\nThis component tries to set the `<h1>`’s CSS class to `\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What purity is and how it helps you avoid bugs\n- How to keep components pure by keeping changes out of the render phase\n- How to use Strict Mode to find mistakes in your components.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I purity: components as formulas in react-learn?\n\nAssistant: To purity: components as formulas in react-learn, here's what you do:\nIn computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:\n\n- **It minds its own business.** It does not change any objects or variables that existed before it was called.\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nYou might already be familiar with one example of pure functions: formulas in math.\n\nConsider this math formula: y = 2x.\n\nIf x = 2 then y = 4. Always.\n\nIf x = 3 then y = 6. Always.\n\nIf x = 3, y won’t sometimes be 9 or –1 or 2.5 depending on the time of day or the state of the stock market.\n\nIf y = 2x and x = 3, y will _always_ be 6.\n\nIf we made this into a JavaScript function, it would look like this:\n\n```javascript\nfunction double(number) {\n  return 2 * number;\n}\n```\n\nIn the above example, `double` is a **pure function.** If you pass it `3`, it will return `6`. Always.\n\nReact is designed around this concept. **React assumes that every component you write is a pure function.** This means that React components you write must always return the same JSX given the same inputs:\n\n```javascript\nfunction Recipe({ drinkers }) {\n  return (\n    <ol>\n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>Spiced Chai Recipe</h1>\n      <h2>For two</h2>\n      <Recipe drinkers={2} />\n      <h2>For a gathering</h2>\n      <Recipe drinkers={4} />\n    </section>\n  );\n}\n```\n\nWhen you pass `drinkers={2}` to `Recipe`, it will return JSX containing `2 cups of water`. Always.\n\nIf you pass `drinkers={4}`, it will return JSX containing `4 cups of water`. Always.\n\nJust like a math formula..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I side effects: (un)intended consequences in react-learn?\n\nAssistant: To side effects: (un)intended consequences in react-learn, here's what you do:\nReact’s rendering process must always be pure. Components should only _return_ their JSX, and not _change_ any objects or variables that existed before rendering—that would make them impure!\n\nHere is a component that breaks this rule:\n\n```javascript\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n```\n\nThis component is reading and writing a `guest` variable declared outside of it. This means that **calling this component multiple times will produce different JSX!** And what’s more, if _other_ components read `guest`, they will produce different JSX, too, depending on when they were rendered! That’s not predictable.\n\nGoing back to our formula y = 2x, now even if x = 2, we cannot trust that y = 4. Our tests could fail, our users would be baffled, planes would fall out of the sky—you can see how this would lead to confusing bugs!\n\nYou can fix this component by passing `guest` as a prop instead:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n```\n\nNow your component is pure, as the JSX it returns only depends on the `guest` prop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I detecting impure calculations with strictmode in react-learn?\n\nAssistant: To detecting impure calculations with strictmode in react-learn, here's what you do:\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props, state, and context. You should always treat these inputs as read-only.\n\nWhen you want to _change_ something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a “Strict Mode” in which it calls each component’s function twice during development. **By calling the component functions twice, Strict Mode helps find components that break these rules.**\n\nNotice how the original example displayed “Guest #2”, “Guest #4”, and “Guest #6” instead of “Guest #1”, “Guest #2”, and “Guest #3”. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. **Pure functions only calculate, so calling them twice won’t change anything**—just like calling `double(2)` twice doesn’t change what’s returned, and solving y = 2x twice doesn’t change what y is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won’t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into `<React.StrictMode>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I local mutation: your component’s little secret in react-learn?\n\nAssistant: To local mutation: your component’s little secret in react-learn, here's what you do:\nIn the above example, the problem was that the component changed a _preexisting_ variable while rendering. This is often called a **“mutation”** to make it sound a bit scarier. Pure functions don’t mutate variables outside of the function’s scope or objects that were created before the call—that makes them impure!\n\nHowever, **it’s completely fine to change variables and objects that you’ve _just_ created while rendering.** In this example, you create an `[]` array, assign it to a `cups` variable, and then `push` a dozen cups into it:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaGathering() {\n  let cups = [];\n  for (let i = 1; i <= 12; i++) {\n    cups.push(<Cup key={i} guest={i} />);\n  }\n  return cups;\n}\n```\n\nIf the `cups` variable or the `[]` array were created outside the `TeaGathering` function, this would be a huge problem! You would be changing a _preexisting_ object by pushing items into that array.\n\nHowever, it’s fine because you’ve created them _during the same render_, inside `TeaGathering`. No code outside of `TeaGathering` will ever know that this happened. This is called **“local mutation”**—it’s like your component’s little secret..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I where you can cause side effects in react-learn?\n\nAssistant: To where you can cause side effects in react-learn, here's what you do:\nWhile functional programming relies heavily on purity, at some point, somewhere, _something_ has to change. That’s kind of the point of programming! These changes—updating the screen, starting an animation, changing the data—are called **side effects.** They’re things that happen _“on the side”_, not during rendering.\n\nIn React, **side effects usually belong inside event handlers.** Event handlers are functions that React runs when you perform some action—for example, when you click a button. Even though event handlers are defined _inside_ your component, they don’t run _during_ rendering! **So event handlers don’t need to be pure.**\n\nIf you’ve exhausted all other options and can’t find the right event handler for your side effect, you can still attach it to your returned JSX with a `useEffect` call in your component. This tells React to execute it later, after rendering, when side effects are allowed. **However, this approach should be your last resort.**\n\nWhen possible, try to express your logic with rendering alone. You’ll be surprised how far this can take you!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I why does react care about purity? in react-learn?\n\nAssistant: To why does react care about purity? in react-learn, here's what you do:\nWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\n\n- Your components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\n- You can improve performance by skipping rendering components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n- If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\nEvery new React feature we’re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- A component must be pure, meaning:\n  - **It minds its own business.** It should not change any objects or variables that existed before rendering.\n  - **Same inputs, same output.** Given the same inputs, a component should always return the same JSX.\n- Rendering can happen at any time, so components should not depend on each others’ rendering sequence.\n- You should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, [“set” state instead of mutating preexisting objects.](https://react.dev/learn/state-a-components-memory)\n- Strive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can `useEffect`.\n- Writing pure functions takes a bit of practice, but it unlocks the power of React’s paradigm..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Fix a broken clock 2. Fix a broken profile 3. Fix a broken story tray.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I challenge1 of3: fix a broken clock in react-learn?\n\nAssistant: To challenge1 of3: fix a broken clock in react-learn, here's what you do:\nThis component tries to set the `<h1>`’s CSS class to `.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Keeping Components Pure in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Pure Function Example**:\n\n```yaml\nfunction double(number) {\n  return 2 * number;\n}\n```\n\nThis snippet shows you how to pure function example, which is an important aspect of keeping components pure.\n\n**Recipe Component Example**:\n\n```yaml\nfunction Recipe({ drinkers }) {\n  return (\n    <ol>\n      <li>Boil {drinkers} cups of water.</li>\n      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n    </ol>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>Spiced Chai Recipe</h1>\n      <h2>For two</h2>\n      <Recipe drinkers={2} />\n      <h2>For a gathering</h2>\n      <Recipe drinkers={4} />\n    </section>\n  );\n}\n```\n\nThis snippet shows you how to recipe component example, which is an important aspect of keeping components pure.\n\n", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Keeping Components Pure in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways treat props, state, and context as read-only during rendering.\n\nUse event handlers for side effects instead of changing variables during rendering.\n\nWrap your root component in <React.StrictMode> to detect impure calculations during development.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/keeping-components-pure", "title": "Keeping Components Pure", "description": "This section covers the importance of writing pure components in React, how to avoid side effects, and best practices for maintaining component purity.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:46", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "24", "title": "Keeping Components Pure – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogTitle": "Keeping Components Pure – React", "og:url": "https://react.dev/learn/keeping-components-pure", "og:title": "Keeping Components Pure – React", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Keeping Components Pure – React", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/keeping-components-pure", "scrapeId": "98931210-40ac-43b8-9869-37bd4bc6e7b9", "sourceURL": "https://react.dev/learn/keeping-components-pure", "url": "https://react.dev/learn/keeping-components-pure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Describing the UI is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Describing the UI in react-learn.\n\n# Describing the UI\n\nReact is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.Here's a quick rundown of what this is about:\n\n## In this chapter\n\n- [How to write your first React component](https://react.dev/learn/your-first-component)\n- [When and how to create multi-component files](https://react.dev/learn/importing-and-exporting-components)\n- [How to add markup to JavaScript with JSX](https://react.dev/learn/writing-markup-with-jsx)\n- [How to use curly braces with JSX to access JavaScript functionality from your components](https://react.dev/learn/javascript-in-jsx-with-curly-braces)\n- [How to configure components with props](https://react.dev/learn/passing-props-to-a-component)\n- [How to conditionally render components](https://react.dev/learn/conditional-rendering)\n- [How to render multiple components at a time](https://react.dev/learn/rendering-lists)\n- [How to avoid confusing bugs by keeping components pure](https://react.dev/learn/keeping-components-pure)\n- [Why understanding your UI as trees is useful](https://react.dev/learn/understanding-your-ui-as-a-tree)\n\n## Your first component\n\nReact applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:\n\n```javascript\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nRead **[Your First Component](https://react.dev/learn/your-first-component)** to learn how to declare and use React components.\n\n## Importing and exporting components\n\nYou can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:\n\n```javascript\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n``` \n\nRead **[Importing and Exporting Components](https://react.dev/learn/importing-and-exporting-components)** to learn how to split components into their own files.\n\n## Writing markup with JSX\n\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\n\nIf we paste existing HTML markup into a React component, it won’t always work:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img\n      src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n      alt=\"Hedy Lamarr\"\n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve spectrum technology\n    </ul>\n  );\n}\n```\n\nIf you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):\n\n```javascript\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img\n        src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n        alt=\"Hedy Lamarr\"\n        className=\"photo\"\n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n``` \n\nRead **[Writing Markup with JSX](https://react.dev/learn/writing-markup-with-jsx)** to learn how to write valid JSX.\n\n## JavaScript in JSX with curly braces\n\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:\n\n```javascript\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n``` \n\nRead **[JavaScript in JSX with Curly Braces](https://react.dev/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.\n\n## Passing props to a component\n\nReact components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!\n\n```javascript\nimport { getImageUrl } from './utils.js'\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n``` \n\nRead **[Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)** to learn how to pass and read props.\n\n## Conditional rendering\n\nYour components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\n\nIn this example, the JavaScript `&&` operator is used to conditionally render a checkmark:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n``` \n\nRead **[Conditional Rendering](https://react.dev/learn/conditional-rendering)** to learn the different ways to render content conditionally.\n\n## Rendering lists\n\nYou will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.\n\nFor each array item, you will need to specify a key. Usually, you will want to use an ID from the database as a key. Keys let React keep track of each item’s place in the list even if the list changes.\n\n```javascript\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ul>{listItems}</ul>\n    </article>\n  );\n}\n``` \n\nRead **[Rendering Lists](https://react.dev/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.\n\n## Keeping components pure\n\nSome JavaScript functions are pure. A pure function:\n- **Minds its own business.** It does not change any objects or variables that existed before it was called.\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:\n\n```javascript\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n``` \n\nYou can make this component pure by passing a prop instead of modifying a preexisting variable:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n``` \n\nRead **[Keeping Components Pure](https://react.dev/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.\n\n## Your UI as a tree\n\nReact uses trees to model the relationships between components and modules.\n\nA React render tree is a representation of the parent and child relationship between components.\n\n![A tree graph with five nodes, with each node representing a component. The root node is located at the top the tree graph and is labelled 'Root Component'. It has two arrows extending down to two nodes labelled 'Component A' and 'Component C'. Each of the arrows is labelled with 'renders'. 'Component A' has a single 'renders' arrow to a node labelled 'Component B'. 'Component C' has a single 'renders' arrow to a node labelled 'Component D'.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fgeneric_render_tree.dark.png&w=1080&q=75)\n\nComponents near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.\n\nModelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.\n\n![A tree graph with five nodes. Each node represents a JavaScript module. The top-most node is labelled 'RootModule.js'. It has three arrows extending to the nodes: 'ModuleA.js', 'ModuleB.js', and 'ModuleC.js'. Each arrow is labelled as 'imports'. 'ModuleC.js' node has a single 'imports' arrow that points to a node labelled 'ModuleD.js'.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fgeneric_dependency_tree.dark.png&w=1080&q=75)\n\nA dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.\n\nRead **[Your UI as a Tree](https://react.dev/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.\n\n## What’s next?\n\nHead over to [Your First Component](https://react.dev/learn/your-first-component) to start reading this chapter page by page!\n\nOr, if you’re already familiar with these topics, why not read about [Adding Interactivity](https://react.dev/learn/adding-interactivity)?\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "overview", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I in this chapter in react-learn?\n\nAssistant: To in this chapter in react-learn, here's what you do:\n- [How to write your first React component](https://react.dev/learn/your-first-component)\n- [When and how to create multi-component files](https://react.dev/learn/importing-and-exporting-components)\n- [How to add markup to JavaScript with JSX](https://react.dev/learn/writing-markup-with-jsx)\n- [How to use curly braces with JSX to access JavaScript functionality from your components](https://react.dev/learn/javascript-in-jsx-with-curly-braces)\n- [How to configure components with props](https://react.dev/learn/passing-props-to-a-component)\n- [How to conditionally render components](https://react.dev/learn/conditional-rendering)\n- [How to render multiple components at a time](https://react.dev/learn/rendering-lists)\n- [How to avoid confusing bugs by keeping components pure](https://react.dev/learn/keeping-components-pure)\n- [Why understanding your UI as trees is useful](https://react.dev/learn/understanding-your-ui-as-a-tree).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I your first component in react-learn?\n\nAssistant: To your first component in react-learn, here's what you do:\nReact applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:\n\n```javascript\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nRead **[Your First Component](https://react.dev/learn/your-first-component)** to learn how to declare and use React components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I importing and exporting components in react-learn?\n\nAssistant: To importing and exporting components in react-learn, here's what you do:\nYou can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:\n\n```javascript\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n``` \n\nRead **[Importing and Exporting Components](https://react.dev/learn/importing-and-exporting-components)** to learn how to split components into their own files..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I writing markup with jsx in react-learn?\n\nAssistant: To writing markup with jsx in react-learn, here's what you do:\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\n\nIf we paste existing HTML markup into a React component, it won’t always work:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img\n      src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n      alt=\"Hedy Lamarr\"\n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve spectrum technology\n    </ul>\n  );\n}\n```\n\nIf you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):\n\n```javascript\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img\n        src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n        alt=\"Hedy Lamarr\"\n        className=\"photo\"\n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n``` \n\nRead **[Writing Markup with JSX](https://react.dev/learn/writing-markup-with-jsx)** to learn how to write valid JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I javascript in jsx with curly braces in react-learn?\n\nAssistant: To javascript in jsx with curly braces in react-learn, here's what you do:\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:\n\n```javascript\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n``` \n\nRead **[JavaScript in JSX with Curly Braces](https://react.dev/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing props to a component in react-learn?\n\nAssistant: To passing props to a component in react-learn, here's what you do:\nReact components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!\n\n```javascript\nimport { getImageUrl } from './utils.js'\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n\nfunction Avatar({ person, size }) {\n  return (\n    <img\n      className=\"avatar\"\n      src={getImageUrl(person)}\n      alt={person.name}\n      width={size}\n      height={size}\n    />\n  );\n}\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n``` \n\nRead **[Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)** to learn how to pass and read props..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I conditional rendering in react-learn?\n\nAssistant: To conditional rendering in react-learn, here's what you do:\nYour components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\n\nIn this example, the JavaScript `&&` operator is used to conditionally render a checkmark:\n\n```javascript\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✅'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        <Item\n          isPacked={false}\n          name=\"Photo of Tam\"\n        />\n      </ul>\n    </section>\n  );\n}\n``` \n\nRead **[Conditional Rendering](https://react.dev/learn/conditional-rendering)** to learn the different ways to render content conditionally..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rendering lists in react-learn?\n\nAssistant: To rendering lists in react-learn, here's what you do:\nYou will often want to display multiple similar components from a collection of data. You can use JavaScript’s `filter()` and `map()` with React to filter and transform your array of data into an array of components.\n\nFor each array item, you will need to specify a key. Usually, you will want to use an ID from the database as a key. Keys let React keep track of each item’s place in the list even if the list changes.\n\n```javascript\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ul>{listItems}</ul>\n    </article>\n  );\n}\n``` \n\nRead **[Rendering Lists](https://react.dev/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I keeping components pure in react-learn?\n\nAssistant: To keeping components pure in react-learn, here's what you do:\nSome JavaScript functions are pure. A pure function:\n- **Minds its own business.** It does not change any objects or variables that existed before it was called.\n- **Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:\n\n```javascript\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n``` \n\nYou can make this component pure by passing a prop instead of modifying a preexisting variable:\n\n```javascript\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n``` \n\nRead **[Keeping Components Pure](https://react.dev/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I your ui as a tree in react-learn?\n\nAssistant: To your ui as a tree in react-learn, here's what you do:\nReact uses trees to model the relationships between components and modules.\n\nA React render tree is a representation of the parent and child relationship between components.\n\n![A tree graph with five nodes, with each node representing a component. The root node is located at the top the tree graph and is labelled 'Root Component'. It has two arrows extending down to two nodes labelled 'Component A' and 'Component C'. Each of the arrows is labelled with 'renders'. 'Component A' has a single 'renders' arrow to a node labelled 'Component B'. 'Component C' has a single 'renders' arrow to a node labelled 'Component D'.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fgeneric_render_tree.dark.png&w=1080&q=75)\n\nComponents near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.\n\nModelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.\n\n![A tree graph with five nodes. Each node represents a JavaScript module. The top-most node is labelled 'RootModule.js'. It has three arrows extending to the nodes: 'ModuleA.js', 'ModuleB.js', and 'ModuleC.js'. Each arrow is labelled as 'imports'. 'ModuleC.js' node has a single 'imports' arrow that points to a node labelled 'ModuleD.js'.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fgeneric_dependency_tree.dark.png&w=1080&q=75)\n\nA dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.\n\nRead **[Your UI as a Tree](https://react.dev/learn/understanding-your-ui-as-a-tree)** to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what’s next? in react-learn?\n\nAssistant: To what’s next? in react-learn, here's what you do:\nHead over to [Your First Component](https://react.dev/learn/your-first-component) to start reading this chapter page by page!\n\nOr, if you’re already familiar with these topics, why not read about [Adding Interactivity](https://react.dev/learn/adding-interactivity)?.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Describing the UI in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Your first component**:\n\n```yaml\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nThis snippet shows you how to your first component, which is an important aspect of describing the ui.\n\n", "metadata": {"source_url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "description": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-03-01 01:17:46", "type": "code_examples", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "title": "Describing the UI – React", "ogTitle": "Describing the UI – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/describing-the-ui", "og:title": "Describing the UI – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/describing-the-ui", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Describing the UI – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "algolia-search-order": "16", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "20076500-c9c0-4765-8036-6f8cc8c73ee6", "sourceURL": "https://react.dev/learn/describing-the-ui", "url": "https://react.dev/learn/describing-the-ui", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what React Developer Tools is in react-learn?\n\nAssistant: Sure, I'd be happy to explain React Developer Tools in react-learn.\n\n# React Developer Tools\n\nUse React Developer Tools to inspect React components, edit props and state, and identify performance problems.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to install React Developer Tools\n\n## Browser extension\n\nThe easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\n\n- [Install for **Chrome**](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n- [Install for **Firefox**](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)\n- [Install for **Edge**](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil)\n\nNow, if you visit a website **built with React,** you will see the _Components_ and _Profiler_ panels.\n\n![React Developer Tools extension](https://react.dev/images/docs/react-devtools-extension.png)\n\n## Safari and other browsers\n\nFor other browsers (for example, Safari), install the [`react-devtools`](https://www.npmjs.com/package/react-devtools) npm package:\n\n```sp-pre-placeholder grow-[2]\n\n# Yarn\n\nyarn global add react-devtools\n\n# Npm\n\nnpm install -g react-devtools\n```\n\nNext open the developer tools from the terminal:\n\n```sp-pre-placeholder grow-[2]\n\nreact-devtools\n```\n\nThen connect your website by adding the following `<script>` tag to the beginning of your website’s `<head>`:\n\n```sp-pre-placeholder grow-[2]\n\n<html>\n\n  <head>\n\n    <script src=\"http://localhost:8097\"></script>\n```\n\nReload your website in the browser now to view it in developer tools.\n\n![React Developer Tools standalone](https://react.dev/images/docs/react-devtools-standalone.png)\n\n## Mobile (React Native)\n\nTo inspect apps built with [React Native](https://reactnative.dev/), you can use [React Native DevTools](https://reactnative.dev/docs/react-native-devtools), the built-in debugger that deeply integrates React Developer Tools. All features work identically to the browser extension, including native element highlighting and selection.\n\n[Learn more about debugging in React Native.](https://reactnative.dev/docs/debugging)\n\n> For versions of React Native earlier than 0.76, please use the standalone build of React DevTools by following the [Safari and other browsers](https://react.dev/learn/react-developer-tools#safari-and-other-browsers) guide above.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to install React Developer Tools.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I browser extension in react-learn?\n\nAssistant: To browser extension in react-learn, here's what you do:\nThe easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\n\n- [Install for **Chrome**](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n- [Install for **Firefox**](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)\n- [Install for **Edge**](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil)\n\nNow, if you visit a website **built with React,** you will see the _Components_ and _Profiler_ panels.\n\n![React Developer Tools extension](https://react.dev/images/docs/react-devtools-extension.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I safari and other browsers in react-learn?\n\nAssistant: To safari and other browsers in react-learn, here's what you do:\nFor other browsers (for example, Safari), install the [`react-devtools`](https://www.npmjs.com/package/react-devtools) npm package:\n\n```sp-pre-placeholder grow-[2]\n\n# Yarn\n\nyarn global add react-devtools\n\n# Npm\n\nnpm install -g react-devtools\n```\n\nNext open the developer tools from the terminal:\n\n```sp-pre-placeholder grow-[2]\n\nreact-devtools\n```\n\nThen connect your website by adding the following `<script>` tag to the beginning of your website’s `<head>`:\n\n```sp-pre-placeholder grow-[2]\n\n<html>\n\n  <head>\n\n    <script src=\"http://localhost:8097\"></script>\n```\n\nReload your website in the browser now to view it in developer tools.\n\n![React Developer Tools standalone](https://react.dev/images/docs/react-devtools-standalone.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I mobile (react native) in react-learn?\n\nAssistant: To mobile (react native) in react-learn, here's what you do:\nTo inspect apps built with [React Native](https://reactnative.dev/), you can use [React Native DevTools](https://reactnative.dev/docs/react-native-devtools), the built-in debugger that deeply integrates React Developer Tools. All features work identically to the browser extension, including native element highlighting and selection.\n\n[Learn more about debugging in React Native.](https://reactnative.dev/docs/debugging)\n\n> For versions of React Native earlier than 0.76, please use the standalone build of React DevTools by following the [Safari and other browsers](https://react.dev/learn/react-developer-tools#safari-and-other-browsers) guide above..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for React Developer Tools in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install react-devtools**:\n\n```yaml\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools\n```\n\nThis snippet shows you how to install react-devtools, which is an important aspect of react developer tools.\n\n**Open react-devtools**:\n\n```yaml\nreact-devtools\n```\n\nThis snippet shows you how to open react-devtools, which is an important aspect of react developer tools.\n\n**Add script tag to HTML**:\n\n```yaml\n<html>\n  <head>\n    <script src=\"http://localhost:8097\"></script>\n```\n\nThis snippet shows you how to add script tag to html, which is an important aspect of react developer tools.\n\n", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "code_examples", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using React Developer Tools in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor versions of React Native earlier than 0.76, please use the standalone build of React DevTools.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools", "description": "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:21:06", "type": "best_practices", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/react-developer-tools", "ogTitle": "React Developer Tools – React", "fb:app_id": "623268441017527", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:title": "React Developer Tools – React", "algolia-search-order": "13", "og:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "React Developer Tools – React", "ogUrl": "https://react.dev/learn/react-developer-tools", "title": "React Developer Tools – React", "scrapeId": "092109e9-1d75-4ea1-ab1f-590edf829127", "sourceURL": "https://react.dev/learn/react-developer-tools", "url": "https://react.dev/learn/react-developer-tools", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Your First Component is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Your First Component in react-learn.\n\n# Your First Component\n\nLearn how to create your first React component, understand the role of components in a React application, and how to write them effectively.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What a component is\n- What role components play in a React application\n- How to write your first React component\n\n## Components: UI building blocks\n\nOn the Web, HTML lets us create rich structured documents with its built-in set of tags like `<h1>` and `<li>`:\n\n```sp-pre-placeholder grow-[2]\n<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>\n```\n\nThis markup represents this article `<article>`, its heading `<h1>`, and an (abbreviated) table of contents as an ordered list `<ol>`. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown—every piece of UI you see on the Web.\n\nReact lets you combine your markup, CSS, and JavaScript into custom “components”, **reusable UI elements for your app.** The table of contents code you saw above could be turned into a `<TableOfContents />` component you could render on every page. Under the hood, it still uses the same HTML tags like `<article>`, `<h1>`, etc.\n\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you’re reading is made out of React components:\n\n```sp-pre-placeholder grow-[2]\n<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/your-first-component", "title": "Your First Component", "description": "Learn how to create your first React component, understand the role of components in a React application, and how to write them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:21:41", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "Your First Component – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Your First Component – React", "og:title": "Your First Component – React", "twitter:title": "Your First Component – React", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/your-first-component", "ogUrl": "https://react.dev/learn/your-first-component", "twitter:card": "summary_large_image", "algolia-search-order": "17", "language": "en", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "1a747d76-99f7-4eba-92c6-2bc5a0cfaa29", "sourceURL": "https://react.dev/learn/your-first-component", "url": "https://react.dev/learn/your-first-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What a component is\n- What role components play in a React application\n- How to write your first React component.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/your-first-component", "title": "Your First Component", "description": "Learn how to create your first React component, understand the role of components in a React application, and how to write them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "Your First Component – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Your First Component – React", "og:title": "Your First Component – React", "twitter:title": "Your First Component – React", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/your-first-component", "ogUrl": "https://react.dev/learn/your-first-component", "twitter:card": "summary_large_image", "algolia-search-order": "17", "language": "en", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "1a747d76-99f7-4eba-92c6-2bc5a0cfaa29", "sourceURL": "https://react.dev/learn/your-first-component", "url": "https://react.dev/learn/your-first-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I components: ui building blocks in react-learn?\n\nAssistant: To components: ui building blocks in react-learn, here's what you do:\nOn the Web, HTML lets us create rich structured documents with its built-in set of tags like `<h1>` and `<li>`:\n\n```sp-pre-placeholder grow-[2]\n<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>\n```\n\nThis markup represents this article `<article>`, its heading `<h1>`, and an (abbreviated) table of contents as an ordered list `<ol>`. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown—every piece of UI you see on the Web.\n\nReact lets you combine your markup, CSS, and JavaScript into custom “components”, **reusable UI elements for your app.** The table of contents code you saw above could be turned into a `<TableOfContents />` component you could render on every page. Under the hood, it still uses the same HTML tags like `<article>`, `<h1>`, etc.\n\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you’re reading is made out of React components:\n\n```sp-pre-placeholder grow-[2]\n<PageLayout>\n  <NavigationHeader>\n    <SearchBar />\n    <Link to=\"/docs\">Docs</Link>\n  </NavigationHeader>\n  <Sidebar />\n  <PageContent>\n    <TableOfContents />\n    <DocumentationText />\n  </PageContent>\n</PageLayout>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/your-first-component", "title": "Your First Component", "description": "Learn how to create your first React component, understand the role of components in a React application, and how to write them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:21:41", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "Your First Component – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Your First Component – React", "og:title": "Your First Component – React", "twitter:title": "Your First Component – React", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/your-first-component", "ogUrl": "https://react.dev/learn/your-first-component", "twitter:card": "summary_large_image", "algolia-search-order": "17", "language": "en", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "1a747d76-99f7-4eba-92c6-2bc5a0cfaa29", "sourceURL": "https://react.dev/learn/your-first-component", "url": "https://react.dev/learn/your-first-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Your First Component in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Defining a component**:\n\n```yaml\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3Am.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  )\n}\n```\n\nThis snippet shows you how to defining a component, which is an important aspect of your first component.\n\n", "metadata": {"source_url": "https://react.dev/learn/your-first-component", "title": "Your First Component", "description": "Learn how to create your first React component, understand the role of components in a React application, and how to write them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:21:41", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "Your First Component – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Your First Component – React", "og:title": "Your First Component – React", "twitter:title": "Your First Component – React", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/your-first-component", "ogUrl": "https://react.dev/learn/your-first-component", "twitter:card": "summary_large_image", "algolia-search-order": "17", "language": "en", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "1a747d76-99f7-4eba-92c6-2bc5a0cfaa29", "sourceURL": "https://react.dev/learn/your-first-component", "url": "https://react.dev/learn/your-first-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Your First Component in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact components are regular JavaScript functions, but their names must start with a capital letter or they won’t work!\n\nReturn statements can be written all on one line, but if your markup isn’t all on the same line as the return keyword, you must wrap it in a pair of parentheses.\n\nNever define a component inside another component!\n\nWhen a child component needs some data from a parent, pass it by props instead of nesting definitions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/your-first-component", "title": "Your First Component", "description": "Learn how to create your first React component, understand the role of components in a React application, and how to write them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:21:41", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "Your First Component – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Your First Component – React", "og:title": "Your First Component – React", "twitter:title": "Your First Component – React", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/your-first-component", "ogUrl": "https://react.dev/learn/your-first-component", "twitter:card": "summary_large_image", "algolia-search-order": "17", "language": "en", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "1a747d76-99f7-4eba-92c6-2bc5a0cfaa29", "sourceURL": "https://react.dev/learn/your-first-component", "url": "https://react.dev/learn/your-first-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Responding to Events is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Responding to Events in react-learn.\n\n# Responding to Events\n\nReact lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- Different ways to write an event handler\n- How to pass event handling logic from a parent component\n- How events propagate and how to stop them\n\n## Adding event handlers\n\nTo add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn’t do anything yet:\n\n```javascript\nexport default function Button() {\n  return (\n    <button>\n      I don't do anything\n    </button>\n  );\n}\n```\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called `handleClick` _inside_ your `Button` component.\n2. Implement the logic inside that function (use `alert` to show the message).\n3. Add `onClick={handleClick}` to the `<button>` JSX.\n\n```javascript\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n```\n\nYou defined the `handleClick` function and then passed it as a prop to `<button>`. `handleClick` is an **event handler.** Event handler functions:\n\n- Are usually defined _inside_ your components.\n- Have names that start with `handle`, followed by the name of the event.\n\nBy convention, it is common to name event handlers as `handle` followed by the event name. You’ll often see `onClick={handleClick}`, `onMouseEnter={handleMouseEnter}`, and so on.\n\nAlternatively, you can define an event handler inline in the JSX:\n\n```javascript\n<button onClick={function handleClick() {\n  alert('You clicked me!');\n}}>\n```\n\nOr, more concisely, using an arrow function:\n\n```javascript\n<button onClick={() => {\n  alert('You clicked me!');\n}}>\n```\n\nAll of these styles are equivalent. Inline event handlers are convenient for short functions.\n\n## Pitfall\n\nFunctions passed to event handlers must be passed, not called. For example:\n\n| passing a function (correct) | calling a function (incorrect) |\n| --- | --- |\n| `<button onClick={handleClick}>` | `<button onClick={handleClick()}>` |\n\nThe difference is subtle. In the first example, the `handleClick` function is passed as an `onClick` event handler. This tells React to remember it and only call your function when the user clicks the button.\n\nIn the second example, the `()` at the end of `handleClick()` fires the function _immediately_ during rendering, without any clicks. This is because JavaScript inside the JSX `{` and `}` executes right away.\n\nWhen you write code inline, the same pitfall presents itself in a different way:\n\n| passing a function (correct) | calling a function (incorrect) |\n| --- | --- |\n| `<button onClick={() => alert('...')}>` | `<button onClick={alert('...')}>` |\n\nPassing inline code like this won’t fire on click—it fires every time the component renders:\n\n```javascript\n// This alert fires when the component renders, not when clicked!\n<button onClick={alert('You clicked me!')}>\n```\n\nIf you want to define your event handler inline, wrap it in an anonymous function like so:\n\n```javascript\n<button onClick={() => alert('You clicked me!')}>\n```\n\nRather than executing the code inside with every render, this creates a function to be called later.\n\n## Reading props in event handlers\n\nBecause event handlers are declared inside of a component, they have access to the component’s props. Here is a button that, when clicked, shows an alert with its `message` prop:\n\n```javascript\nfunction AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <AlertButton message=\"Playing!\">\n        Play Movie\n      </AlertButton>\n      <AlertButton message=\"Uploading!\">\n        Upload Image\n      </AlertButton>\n    </div>\n  );\n}\n```\n\nThis lets these two buttons show different messages. Try changing the messages passed to them.\n\n## Passing event handlers as props\n\nOften you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a `Button` component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.\n\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    <Button onClick={handlePlayClick}>\n      Play \"{movieName}\"\n    </Button>\n  );\n}\n\nfunction UploadButton() {\n  return (\n    <Button onClick={() => alert('Uploading!')}> \n      Upload Image\n    </Button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <PlayButton movieName=\"Kiki's Delivery Service\" />\n      <UploadButton />\n    </div>\n  );\n}\n```\n\nHere, the `Toolbar` component renders a `PlayButton` and an `UploadButton`:\n\n- `PlayButton` passes `handlePlayClick` as the `onClick` prop to the `Button` inside.\n- `UploadButton` passes `() => alert('Uploading!')` as the `onClick` prop to the `Button` inside.\n\nFinally, your `Button` component accepts a prop called `onClick`. It passes that prop directly to the built-in browser `<button>` with `onClick={onClick}`. This tells React to call the passed function on click.\n\n## Naming event handler props\n\nBuilt-in components like `<button>` and `<div>` only support browser event names like `onClick`. However, when you’re building your own components, you can name their event handler props any way that you like.\n\nBy convention, event handler props should start with `on`, followed by a capital letter.\n\nFor example, the `Button` component’s `onClick` prop could have been called `onSmash`:\n\n```javascript\nfunction Button({ onSmash, children }) {\n  return (\n    <button onClick={onSmash}>\n      {children}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <Button onSmash={() => alert('Playing!')}> \n        Play Movie\n      </Button>\n      <Button onSmash={() => alert('Uploading!')}> \n        Upload Image\n      </Button>\n    </div>\n  );\n}\n```\n\nIn this example, `<button onClick={onSmash}>` shows that the browser `<button>` (lowercase) still needs a prop called `onClick`, but the prop name received by your custom `Button` component is up to you!\n\n## Event propagation\n\nEvent handlers will also catch events from any children your component might have. We say that an event “bubbles” or “propagates” up the tree: it starts with where the event happened, and then goes up the tree.\n\nThis `<div>` contains two buttons. Both the `<div>` _and_ each button have their own `onClick` handlers. Which handlers do you think will fire when you click a button?\n\n```javascript\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <button onClick={() => alert('Playing!')}> \n        Play Movie\n      </button>\n      <button onClick={() => alert('Uploading!')}> \n        Upload Image\n      </button>\n    </div>\n  );\n}\n```\n\nIf you click on either button, its `onClick` will run first, followed by the parent `<div>`’s `onClick`. So two messages will appear. If you click the toolbar itself, only the parent `<div>`’s `onClick` will run.\n\n## Pitfall\n\nAll events propagate in React except `onScroll`, which only works on the JSX tag you attach it to.\n\n## Stopping propagation\n\nEvent handlers receive an **event object** as their only argument. By convention, it’s usually called `e`, which stands for “event”. You can use this object to read information about the event.\n\nThat event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call `e.stopPropagation()` like this `Button` component does:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <Button onClick={() => alert('Playing!')}> \n        Play Movie\n      </Button>\n      <Button onClick={() => alert('Uploading!')}> \n        Upload Image\n      </Button>\n    </div>\n  );\n}\n```\n\nWhen you click on a button:\n\n1. React calls the `onClick` handler passed to `<button>`.\n2. That handler, defined in `Button`, does the following:\n   - Calls `e.stopPropagation()`, preventing the event from bubbling further.\n   - Calls the `onClick` function, which is a prop passed from the `Toolbar` component.\n3. That function, defined in the `Toolbar` component, displays the button’s own alert.\n4. Since the propagation was stopped, the parent `<div>`’s `onClick` handler does _not_ run.\n\n## Deep Dive\n\nIn rare cases, you might need to catch all events on child elements, _even if they stopped propagation_. For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding `Capture` at the end of the event name:\n\n```javascript\n<div onClickCapture={() => { /* this runs first */ }}>\n  <button onClick={e => e.stopPropagation()} />\n  <button onClick={e => e.stopPropagation()} />\n</div>\n```\n\nEach event propagates in three phases:\n\n1. It travels down, calling all `onClickCapture` handlers.\n2. It runs the clicked element’s `onClick` handler.\n3. It travels upwards, calling all `onClick` handlers.\n\n## Passing handlers as alternative to propagation\n\nNotice how this click handler runs a line of code _and then_ calls the `onClick` prop passed by the parent:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n```\n\nYou could add more code to this handler before calling the parent `onClick` event handler, too. This pattern provides an _alternative_ to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it’s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event.\n\n## Preventing default behavior\n\nSome browser events have default behavior associated with them. For example, a `<form>` submit event, which happens when a button inside of it is clicked, will reload the whole page by default:\n\n```javascript\nexport default function Signup() {\n  return (\n    <form onSubmit={() => alert('Submitting!')}> \n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n}\n```\n\nYou can call `e.preventDefault()` on the event object to stop this from happening:\n\n```javascript\nexport default function Signup() {\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      alert('Submitting!');\n    }}> \n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n}\n```\n\nDon’t confuse `e.stopPropagation()` and `e.preventDefault()`. They are both useful, but are unrelated:\n\n- `e.stopPropagation()` stops the event handlers attached to the tags above from firing.\n- `e.preventDefault()` prevents the default browser behavior for the few events that have it.\n\n## Can event handlers have side effects?\n\nAbsolutely! Event handlers are the best place for side effects.\n\nUnlike rendering functions, event handlers don’t need to be pure, so it’s a great place to _change_ something—for example, change an input’s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page.\n\n## Recap\n\n- You can handle events by passing a function as a prop to an element like `<button>`.\n- Event handlers must be passed, **not called!** `onClick={handleClick}`, not `onClick={handleClick()}`.\n- You can define an event handler function separately or inline.\n- Event handlers are defined inside a component, so they can access props.\n- You can declare an event handler in a parent and pass it as a prop to a child.\n- You can define your own event handler props with application-specific names.\n- Events propagate upwards. Call `e.stopPropagation()` on the first argument to prevent that.\n- Events may have unwanted default browser behavior. Call `e.preventDefault()` to prevent that.\n- Explicitly calling an event handler prop from a child handler is a good alternative to propagation.\n\n## Try out some challenges\n\n1. Fix an event handler 2. Wire up the events\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "overview", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- Different ways to write an event handler\n- How to pass event handling logic from a parent component\n- How events propagate and how to stop them.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding event handlers in react-learn?\n\nAssistant: To adding event handlers in react-learn, here's what you do:\nTo add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn’t do anything yet:\n\n```javascript\nexport default function Button() {\n  return (\n    <button>\n      I don't do anything\n    </button>\n  );\n}\n```\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called `handleClick` _inside_ your `Button` component.\n2. Implement the logic inside that function (use `alert` to show the message).\n3. Add `onClick={handleClick}` to the `<button>` JSX.\n\n```javascript\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n```\n\nYou defined the `handleClick` function and then passed it as a prop to `<button>`. `handleClick` is an **event handler.** Event handler functions:\n\n- Are usually defined _inside_ your components.\n- Have names that start with `handle`, followed by the name of the event.\n\nBy convention, it is common to name event handlers as `handle` followed by the event name. You’ll often see `onClick={handleClick}`, `onMouseEnter={handleMouseEnter}`, and so on.\n\nAlternatively, you can define an event handler inline in the JSX:\n\n```javascript\n<button onClick={function handleClick() {\n  alert('You clicked me!');\n}}>\n```\n\nOr, more concisely, using an arrow function:\n\n```javascript\n<button onClick={() => {\n  alert('You clicked me!');\n}}>\n```\n\nAll of these styles are equivalent. Inline event handlers are convenient for short functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nFunctions passed to event handlers must be passed, not called. For example:\n\n| passing a function (correct) | calling a function (incorrect) |\n| --- | --- |\n| `<button onClick={handleClick}>` | `<button onClick={handleClick()}>` |\n\nThe difference is subtle. In the first example, the `handleClick` function is passed as an `onClick` event handler. This tells React to remember it and only call your function when the user clicks the button.\n\nIn the second example, the `()` at the end of `handleClick()` fires the function _immediately_ during rendering, without any clicks. This is because JavaScript inside the JSX `{` and `}` executes right away.\n\nWhen you write code inline, the same pitfall presents itself in a different way:\n\n| passing a function (correct) | calling a function (incorrect) |\n| --- | --- |\n| `<button onClick={() => alert('...')}>` | `<button onClick={alert('...')}>` |\n\nPassing inline code like this won’t fire on click—it fires every time the component renders:\n\n```javascript\n// This alert fires when the component renders, not when clicked!\n<button onClick={alert('You clicked me!')}>\n```\n\nIf you want to define your event handler inline, wrap it in an anonymous function like so:\n\n```javascript\n<button onClick={() => alert('You clicked me!')}>\n```\n\nRather than executing the code inside with every render, this creates a function to be called later..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I reading props in event handlers in react-learn?\n\nAssistant: To reading props in event handlers in react-learn, here's what you do:\nBecause event handlers are declared inside of a component, they have access to the component’s props. Here is a button that, when clicked, shows an alert with its `message` prop:\n\n```javascript\nfunction AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <AlertButton message=\"Playing!\">\n        Play Movie\n      </AlertButton>\n      <AlertButton message=\"Uploading!\">\n        Upload Image\n      </AlertButton>\n    </div>\n  );\n}\n```\n\nThis lets these two buttons show different messages. Try changing the messages passed to them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing event handlers as props in react-learn?\n\nAssistant: To passing event handlers as props in react-learn, here's what you do:\nOften you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a `Button` component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.\n\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    <Button onClick={handlePlayClick}>\n      Play \"{movieName}\"\n    </Button>\n  );\n}\n\nfunction UploadButton() {\n  return (\n    <Button onClick={() => alert('Uploading!')}> \n      Upload Image\n    </Button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <PlayButton movieName=\"Kiki's Delivery Service\" />\n      <UploadButton />\n    </div>\n  );\n}\n```\n\nHere, the `Toolbar` component renders a `PlayButton` and an `UploadButton`:\n\n- `PlayButton` passes `handlePlayClick` as the `onClick` prop to the `Button` inside.\n- `UploadButton` passes `() => alert('Uploading!')` as the `onClick` prop to the `Button` inside.\n\nFinally, your `Button` component accepts a prop called `onClick`. It passes that prop directly to the built-in browser `<button>` with `onClick={onClick}`. This tells React to call the passed function on click..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I naming event handler props in react-learn?\n\nAssistant: To naming event handler props in react-learn, here's what you do:\nBuilt-in components like `<button>` and `<div>` only support browser event names like `onClick`. However, when you’re building your own components, you can name their event handler props any way that you like.\n\nBy convention, event handler props should start with `on`, followed by a capital letter.\n\nFor example, the `Button` component’s `onClick` prop could have been called `onSmash`:\n\n```javascript\nfunction Button({ onSmash, children }) {\n  return (\n    <button onClick={onSmash}>\n      {children}\n    </button>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <Button onSmash={() => alert('Playing!')}> \n        Play Movie\n      </Button>\n      <Button onSmash={() => alert('Uploading!')}> \n        Upload Image\n      </Button>\n    </div>\n  );\n}\n```\n\nIn this example, `<button onClick={onSmash}>` shows that the browser `<button>` (lowercase) still needs a prop called `onClick`, but the prop name received by your custom `Button` component is up to you!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I event propagation in react-learn?\n\nAssistant: To event propagation in react-learn, here's what you do:\nEvent handlers will also catch events from any children your component might have. We say that an event “bubbles” or “propagates” up the tree: it starts with where the event happened, and then goes up the tree.\n\nThis `<div>` contains two buttons. Both the `<div>` _and_ each button have their own `onClick` handlers. Which handlers do you think will fire when you click a button?\n\n```javascript\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <button onClick={() => alert('Playing!')}> \n        Play Movie\n      </button>\n      <button onClick={() => alert('Uploading!')}> \n        Upload Image\n      </button>\n    </div>\n  );\n}\n```\n\nIf you click on either button, its `onClick` will run first, followed by the parent `<div>`’s `onClick`. So two messages will appear. If you click the toolbar itself, only the parent `<div>`’s `onClick` will run..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nAll events propagate in React except `onScroll`, which only works on the JSX tag you attach it to..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I stopping propagation in react-learn?\n\nAssistant: To stopping propagation in react-learn, here's what you do:\nEvent handlers receive an **event object** as their only argument. By convention, it’s usually called `e`, which stands for “event”. You can use this object to read information about the event.\n\nThat event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call `e.stopPropagation()` like this `Button` component does:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div className=\"Toolbar\" onClick={() => {\n      alert('You clicked on the toolbar!');\n    }}>\n      <Button onClick={() => alert('Playing!')}> \n        Play Movie\n      </Button>\n      <Button onClick={() => alert('Uploading!')}> \n        Upload Image\n      </Button>\n    </div>\n  );\n}\n```\n\nWhen you click on a button:\n\n1. React calls the `onClick` handler passed to `<button>`.\n2. That handler, defined in `Button`, does the following:\n   - Calls `e.stopPropagation()`, preventing the event from bubbling further.\n   - Calls the `onClick` function, which is a prop passed from the `Toolbar` component.\n3. That function, defined in the `Toolbar` component, displays the button’s own alert.\n4. Since the propagation was stopped, the parent `<div>`’s `onClick` handler does _not_ run..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nIn rare cases, you might need to catch all events on child elements, _even if they stopped propagation_. For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding `Capture` at the end of the event name:\n\n```javascript\n<div onClickCapture={() => { /* this runs first */ }}>\n  <button onClick={e => e.stopPropagation()} />\n  <button onClick={e => e.stopPropagation()} />\n</div>\n```\n\nEach event propagates in three phases:\n\n1. It travels down, calling all `onClickCapture` handlers.\n2. It runs the clicked element’s `onClick` handler.\n3. It travels upwards, calling all `onClick` handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing handlers as alternative to propagation in react-learn?\n\nAssistant: To passing handlers as alternative to propagation in react-learn, here's what you do:\nNotice how this click handler runs a line of code _and then_ calls the `onClick` prop passed by the parent:\n\n```javascript\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={e => {\n      e.stopPropagation();\n      onClick();\n    }}>\n      {children}\n    </button>\n  );\n}\n```\n\nYou could add more code to this handler before calling the parent `onClick` event handler, too. This pattern provides an _alternative_ to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it’s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I preventing default behavior in react-learn?\n\nAssistant: To preventing default behavior in react-learn, here's what you do:\nSome browser events have default behavior associated with them. For example, a `<form>` submit event, which happens when a button inside of it is clicked, will reload the whole page by default:\n\n```javascript\nexport default function Signup() {\n  return (\n    <form onSubmit={() => alert('Submitting!')}> \n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n}\n```\n\nYou can call `e.preventDefault()` on the event object to stop this from happening:\n\n```javascript\nexport default function Signup() {\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      alert('Submitting!');\n    }}> \n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n}\n```\n\nDon’t confuse `e.stopPropagation()` and `e.preventDefault()`. They are both useful, but are unrelated:\n\n- `e.stopPropagation()` stops the event handlers attached to the tags above from firing.\n- `e.preventDefault()` prevents the default browser behavior for the few events that have it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I can event handlers have side effects? in react-learn?\n\nAssistant: To can event handlers have side effects? in react-learn, here's what you do:\nAbsolutely! Event handlers are the best place for side effects.\n\nUnlike rendering functions, event handlers don’t need to be pure, so it’s a great place to _change_ something—for example, change an input’s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- You can handle events by passing a function as a prop to an element like `<button>`.\n- Event handlers must be passed, **not called!** `onClick={handleClick}`, not `onClick={handleClick()}`.\n- You can define an event handler function separately or inline.\n- Event handlers are defined inside a component, so they can access props.\n- You can declare an event handler in a parent and pass it as a prop to a child.\n- You can define your own event handler props with application-specific names.\n- Events propagate upwards. Call `e.stopPropagation()` on the first argument to prevent that.\n- Events may have unwanted default browser behavior. Call `e.preventDefault()` to prevent that.\n- Explicitly calling an event handler prop from a child handler is a good alternative to propagation..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Fix an event handler 2. Wire up the events.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Responding to Events in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding event handlers**:\n\n```yaml\nexport default function Button() {\n  return (\n    <button>\n      I don't do anything\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to adding event handlers, which is an important aspect of responding to events.\n\n**Show message on click**:\n\n```yaml\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to show message on click, which is an important aspect of responding to events.\n\n**Inline event handler**:\n\n```yaml\n<button onClick={function handleClick() {\n  alert('You clicked me!');\n}}>\n```\n\nThis snippet shows you how to inline event handler, which is an important aspect of responding to events.\n\n**Arrow function inline event handler**:\n\n```yaml\n<button onClick={() => {\n  alert('You clicked me!');\n}}>\n```\n\nThis snippet shows you how to arrow function inline event handler, which is an important aspect of responding to events.\n\n**AlertButton component**:\n\n```yaml\nfunction AlertButton({ message, children }) {\n  return (\n    <button onClick={() => alert(message)}>\n      {children}\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to alertbutton component, which is an important aspect of responding to events.\n\n", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Responding to Events in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFunctions passed to event handlers must be passed, not called.\n\nBy convention, it is common to name event handlers as handle followed by the event name.\n\nMake sure that you use the appropriate HTML tags for your event handlers.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/responding-to-events", "title": "Responding to Events", "description": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:22:34", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "language": "en", "og:title": "Responding to Events – React", "twitter:title": "Responding to Events – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "title": "Responding to Events – React", "ogTitle": "Responding to Events – React", "ogUrl": "https://react.dev/learn/responding-to-events", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "27", "og:url": "https://react.dev/learn/responding-to-events", "scrapeId": "a17720eb-7ada-48d7-abf9-224198e20cf5", "sourceURL": "https://react.dev/learn/responding-to-events", "url": "https://react.dev/learn/responding-to-events", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Thinking in React is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Thinking in React in react-learn.\n\n# Thinking in React\n\nReact can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.Here's a quick rundown of what this is about:\n\n## Start with the mockup\n\nImagine that you already have a JSON API and a mockup from a designer.\n\nThe JSON API returns some data that looks like this:\n\n```json\n[\n  { \"category\": \"Fruits\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Apple\" },\n  { \"category\": \"Fruits\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Dragonfruit\" },\n  { \"category\": \"Fruits\", \"price\": \"$2\", \"stocked\": false, \"name\": \"Passionfruit\" },\n  { \"category\": \"Vegetables\", \"price\": \"$2\", \"stocked\": true, \"name\": \"Spinach\" },\n  { \"category\": \"Vegetables\", \"price\": \"$4\", \"stocked\": false, \"name\": \"Pumpkin\" },\n  { \"category\": \"Vegetables\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Peas\" }\n]\n```\n\nThe mockup looks like this:\n\n![Mockup](https://react.dev/images/docs/s_thinking-in-react_ui.png)\n\nTo implement a UI in React, you will usually follow the same five steps.\n\n## Step 1: Break the UI into a component hierarchy\n\nStart by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\n\nDepending on your background, you can think about splitting up a design into components in different ways:\n\n- **Programming**—use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n- **CSS**—consider what you would make class selectors for. (However, components are a bit less granular.)\n- **Design**—consider how you would organize the design’s layers.\n\nIf your JSON is well-structured, you’ll often find that it naturally maps to the component structure of your UI. That’s because UI and data models often have the same information architecture—that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\n\nThere are five components on this screen:\n\n1. `FilterableProductTable` (grey) contains the entire app.\n2. `SearchBar` (blue) receives the user input.\n3. `ProductTable` (lavender) displays and filters the list according to the user input.\n4. `ProductCategoryRow` (green) displays a heading for each category.\n5. `ProductRow` (yellow) displays a row for each product.\n\nIf you look at `ProductTable` (lavender), you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of `ProductTable` because it appears inside the `ProductTable`’s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own `ProductTableHeader` component.\n\nNow that you’ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:\n\n- `FilterableProductTable`\n  - `SearchBar`\n  - `ProductTable`\n    - `ProductCategoryRow`\n    - `ProductRow`\n\n## Step 2: Build a static version in React\n\nNow that you have your component hierarchy, it’s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\n\nTo build a static version of your app that renders your data model, you’ll want to build [components](https://react.dev/learn/your-first-component) that reuse other components and pass data using [props.](https://react.dev/learn/passing-props-to-a-component) Props are a way of passing data from parent to child. (If you’re familiar with the concept of [state](https://react.dev/learn/state-a-components-memory), don’t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.)\n\nYou can either build “top down” by starting with building the components higher up in the hierarchy (like `FilterableProductTable`) or “bottom up” by working from components lower down (like `ProductRow`). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.\n\n## Step 3: Find the minimal but complete representation of UI state\n\nTo make the UI interactive, you need to let users change your underlying data model. You will use _state_ for this.\n\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it [DRY (Don’t Repeat Yourself).](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.\n\nNow think of all of the pieces of data in this example application:\n\n1. The original list of products\n2. The search text the user has entered\n3. The value of the checkbox\n4. The filtered list of products\n\nWhich of these are state? Identify the ones that are not:\n\n- Does it **remain unchanged** over time? If so, it isn’t state.\n- Is it **passed in from a parent** via props? If so, it isn’t state.\n- **Can you compute it** based on existing state or props in your component? If so, it _definitely_ isn’t state!\n\nWhat’s left is probably state.\n\n## Step 4: Identify where your state should live\n\nAfter identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or _owns_ the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!\n\nFor each piece of state in your application:\n\n1. Identify _every_ component that renders something based on that state.\n2. Find their closest common parent component—a component above them all in the hierarchy.\n3. Decide where the state should live:\n   1. Often, you can put the state directly into their common parent.\n   2. You can also put the state into some component above their common parent.\n   3. If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\n## Step 5: Add inverse data flow\n\nCurrently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in `FilterableProductTable`.\n\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you’ll see that React ignores your input. This is intentional. By writing `<input value={filterText} />`, you’ve set the `value` prop of the `input` to always be equal to the `filterText` state passed in from `FilterableProductTable`. Since `filterText` state is never set, the input never changes.\n\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by `FilterableProductTable`, so only it can call `setFilterText` and `setInStockOnly`. To let `SearchBar` update the `FilterableProductTable`’s state, you need to pass these functions down to `SearchBar`.\n\n## Where to go from here\n\nThis was a very brief introduction to how to think about building components and applications with React. You can [start a React project](https://react.dev/learn/installation) right now or [dive deeper on all the syntax](https://react.dev/learn/describing-the-ui) used in this tutorial.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "overview", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I start with the mockup in react-learn?\n\nAssistant: To start with the mockup in react-learn, here's what you do:\nImagine that you already have a JSON API and a mockup from a designer.\n\nThe JSON API returns some data that looks like this:\n\n```json\n[\n  { \"category\": \"Fruits\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Apple\" },\n  { \"category\": \"Fruits\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Dragonfruit\" },\n  { \"category\": \"Fruits\", \"price\": \"$2\", \"stocked\": false, \"name\": \"Passionfruit\" },\n  { \"category\": \"Vegetables\", \"price\": \"$2\", \"stocked\": true, \"name\": \"Spinach\" },\n  { \"category\": \"Vegetables\", \"price\": \"$4\", \"stocked\": false, \"name\": \"Pumpkin\" },\n  { \"category\": \"Vegetables\", \"price\": \"$1\", \"stocked\": true, \"name\": \"Peas\" }\n]\n```\n\nThe mockup looks like this:\n\n![Mockup](https://react.dev/images/docs/s_thinking-in-react_ui.png)\n\nTo implement a UI in React, you will usually follow the same five steps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: break the ui into a component hierarchy in react-learn?\n\nAssistant: To step 1: break the ui into a component hierarchy in react-learn, here's what you do:\nStart by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\n\nDepending on your background, you can think about splitting up a design into components in different ways:\n\n- **Programming**—use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n- **CSS**—consider what you would make class selectors for. (However, components are a bit less granular.)\n- **Design**—consider how you would organize the design’s layers.\n\nIf your JSON is well-structured, you’ll often find that it naturally maps to the component structure of your UI. That’s because UI and data models often have the same information architecture—that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\n\nThere are five components on this screen:\n\n1. `FilterableProductTable` (grey) contains the entire app.\n2. `SearchBar` (blue) receives the user input.\n3. `ProductTable` (lavender) displays and filters the list according to the user input.\n4. `ProductCategoryRow` (green) displays a heading for each category.\n5. `ProductRow` (yellow) displays a row for each product.\n\nIf you look at `ProductTable` (lavender), you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of `ProductTable` because it appears inside the `ProductTable`’s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own `ProductTableHeader` component.\n\nNow that you’ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:\n\n- `FilterableProductTable`\n  - `SearchBar`\n  - `ProductTable`\n    - `ProductCategoryRow`\n    - `ProductRow`.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: build a static version in react in react-learn?\n\nAssistant: To step 2: build a static version in react in react-learn, here's what you do:\nNow that you have your component hierarchy, it’s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\n\nTo build a static version of your app that renders your data model, you’ll want to build [components](https://react.dev/learn/your-first-component) that reuse other components and pass data using [props.](https://react.dev/learn/passing-props-to-a-component) Props are a way of passing data from parent to child. (If you’re familiar with the concept of [state](https://react.dev/learn/state-a-components-memory), don’t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.)\n\nYou can either build “top down” by starting with building the components higher up in the hierarchy (like `FilterableProductTable`) or “bottom up” by working from components lower down (like `ProductRow`). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: find the minimal but complete representation of ui state in react-learn?\n\nAssistant: To step 3: find the minimal but complete representation of ui state in react-learn, here's what you do:\nTo make the UI interactive, you need to let users change your underlying data model. You will use _state_ for this.\n\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it [DRY (Don’t Repeat Yourself).](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.\n\nNow think of all of the pieces of data in this example application:\n\n1. The original list of products\n2. The search text the user has entered\n3. The value of the checkbox\n4. The filtered list of products\n\nWhich of these are state? Identify the ones that are not:\n\n- Does it **remain unchanged** over time? If so, it isn’t state.\n- Is it **passed in from a parent** via props? If so, it isn’t state.\n- **Can you compute it** based on existing state or props in your component? If so, it _definitely_ isn’t state!\n\nWhat’s left is probably state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 4: identify where your state should live in react-learn?\n\nAssistant: To step 4: identify where your state should live in react-learn, here's what you do:\nAfter identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or _owns_ the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!\n\nFor each piece of state in your application:\n\n1. Identify _every_ component that renders something based on that state.\n2. Find their closest common parent component—a component above them all in the hierarchy.\n3. Decide where the state should live:\n   1. Often, you can put the state directly into their common parent.\n   2. You can also put the state into some component above their common parent.\n   3. If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 5: add inverse data flow in react-learn?\n\nAssistant: To step 5: add inverse data flow in react-learn, here's what you do:\nCurrently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in `FilterableProductTable`.\n\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you’ll see that React ignores your input. This is intentional. By writing `<input value={filterText} />`, you’ve set the `value` prop of the `input` to always be equal to the `filterText` state passed in from `FilterableProductTable`. Since `filterText` state is never set, the input never changes.\n\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by `FilterableProductTable`, so only it can call `setFilterText` and `setInStockOnly`. To let `SearchBar` update the `FilterableProductTable`’s state, you need to pass these functions down to `SearchBar`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I where to go from here in react-learn?\n\nAssistant: To where to go from here in react-learn, here's what you do:\nThis was a very brief introduction to how to think about building components and applications with React. You can [start a React project](https://react.dev/learn/installation) right now or [dive deeper on all the syntax](https://react.dev/learn/describing-the-ui) used in this tutorial..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "section_detail", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Thinking in React in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Static Version of Product Category Row**:\n\n```yaml\nfunction ProductCategoryRow({ category }) {\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n```\n\nThis snippet shows you how to static version of product category row, which is an important aspect of thinking in react.\n\n**Static Version of Product Row**:\n\n```yaml\nfunction ProductRow({ product }) {\n  const name = product.stocked ? product.name :\n    <span style={{ color: 'red' }}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n```\n\nThis snippet shows you how to static version of product row, which is an important aspect of thinking in react.\n\n**Static Version of Product Table**:\n\n```yaml\nfunction ProductTable({ products }) {\n  const rows = [];\n  let lastCategory = null;\n\n  products.forEach((product) => {\n    if (product.category !== lastCategory) {\n      rows.push(\n        <ProductCategoryRow\n          category={product.category}\n          key={product.category} />\n      );\n    }\n    rows.push(\n      <ProductRow\n        product={product}\n        key={product.name} />\n    );\n    lastCategory = product.category;\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n```\n\nThis snippet shows you how to static version of product table, which is an important aspect of thinking in react.\n\n**Static Version of Search Bar**:\n\n```yaml\nfunction SearchBar() {\n  return (\n    <form>\n      <input type=\"text\" placeholder=\"Search...\" />\n      <label>\n        <input type=\"checkbox\" />\n        {' '}\n        Only show products in stock\n      </label>\n    </form>\n  );\n}\n```\n\nThis snippet shows you how to static version of search bar, which is an important aspect of thinking in react.\n\n**Final Version of Filterable Product Table**:\n\n```yaml\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar\n        filterText={filterText}\n        inStockOnly={inStockOnly}\n        onFilterTextChange={setFilterText}\n        onInStockOnlyChange={setInStockOnly} />\n      <ProductTable\n        products={products}\n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to final version of filterable product table, which is an important aspect of thinking in react.\n\n", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "code_examples", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Thinking in React in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStart with a mockup and break it down into components.\n\nUse the single responsibility principle when creating components.\n\nIdentify the minimal state needed for your application and keep it DRY.\n\nUse props to pass data down the component hierarchy.\n\nEnsure that state is owned by the closest common parent component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/thinking-in-react", "title": "Thinking in React", "description": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:25:30", "type": "best_practices", "page_metadata": {"twitter:title": "Thinking in React – React", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "ogTitle": "Thinking in React – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "og:title": "Thinking in React – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/thinking-in-react", "twitter:creator": "@reactjs", "algolia-search-order": "5", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/thinking-in-react", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "title": "Thinking in React – React", "scrapeId": "cc66c8bf-c67d-411b-86c1-b033e8085ebf", "sourceURL": "https://react.dev/learn/thinking-in-react", "url": "https://react.dev/learn/thinking-in-react", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Removing Effect Dependencies is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Removing Effect Dependencies in react-learn.\n\n# Removing Effect Dependencies\n\nThis guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to fix infinite Effect dependency loops\n- What to do when you want to remove a dependency\n- How to read a value from your Effect without “reacting” to it\n- How and why to avoid object and function dependencies\n- Why suppressing the dependency linter is dangerous, and what to do instead\n\n## Dependencies should match the code\n\nWhen you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => connection.disconnect();\n\n  }, []); // <-- Fix the mistake here!\n}\n```\n\nThen, if you leave the Effect dependencies empty ( `[]`), the linter will suggest the correct dependencies.\n\n## To remove a dependency, prove that it’s not a dependency\n\nNotice that you can’t “choose” the dependencies of your Effect. Every reactive value used by your Effect’s code must be declared in your dependency list. The dependency list is determined by the surrounding code:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => connection.disconnect();\n\n  }, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect\n}\n```\n\n## To change the dependencies, change the code\n\nYou might have noticed a pattern in your workflow:\n\n1. First, you **change the code** of your Effect or how your reactive values are declared.\n2. Then, you follow the linter and adjust the dependencies to **match the code you have changed.**\n3. If you’re not happy with the list of dependencies, you **go back to the first step** (and change the code again).\n\n## Pitfall\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n```javascript\nuseEffect(() => {\n\n  // ...\n\n  // 🔴 Avoid suppressing the linter like this:\n\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n```\n\n**When dependencies don’t match the code, there is a very high risk of introducing bugs.** By suppressing the linter, you “lie” to React about the values your Effect depends on.\n\n## Removing unnecessary dependencies\n\nEvery time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:\n\n- You might want to re-execute _different parts_ of your Effect under different conditions.\n- You might want to only read the _latest value_ of some dependency instead of “reacting” to its changes.\n- A dependency may change too often _unintentionally_ because it’s an object or a function.\n\n## Should this code move to an event handler?\n\nThe first thing you should think about is whether this code should be an Effect at all.\n\nImagine a form. On submit, you set the `submitted` state variable to `true`. You need to send a POST request and show a notification. You’ve put this logic inside an Effect that “reacts” to `submitted` being `true`:\n\n```javascript\nfunction Form() {\n\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n\n    if (submitted) {\n\n      // 🔴 Avoid: Event-specific logic inside an Effect\n\n      post('/api/register');\n\n      showNotification('Successfully registered!');\n\n    }\n\n  }, [submitted]);\n\n  function handleSubmit() {\n\n    setSubmitted(true);\n\n  }\n\n  // ...\n}\n```\n\n## Is your Effect doing several unrelated things?\n\nImagine you’re creating a shipping form where the user needs to choose their city and area. You fetch the list of `cities` from the server according to the selected `country` to show them in a dropdown:\n\n```javascript\nfunction ShippingForm({ country }) {\n\n  const [cities, setCities] = useState(null);\n\n  useEffect(() => {\n\n    let ignore = false;\n\n    fetch(`/api/cities?country=${country}`)\n\n      .then(response => response.json())\n\n      .then(json => {\n\n        if (!ignore) {\n\n          setCities(json);\n\n        }\n\n      });\n\n    return () => {\n\n      ignore = true;\n\n    };\n\n  }, [country]); // ✅ All dependencies declared\n}\n```\n\n## Are you reading some state to calculate the next state?\n\nThis Effect updates the `messages` state variable with a newly created array every time a new message arrives:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n\n    const connection = createConnection();\n\n    connection.connect();\n\n    connection.on('message', (receivedMessage) => {\n\n      setMessages([...messages, receivedMessage]);\n\n    });\n\n    // ...\n```\n\n## Do you want to read a value without “reacting” to its changes?\n\nSuppose that you want to play a sound when the user receives a new message unless `isMuted` is `true`:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n\n  const [messages, setMessages] = useState([]);\n\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n\n    const connection = createConnection();\n\n    connection.connect();\n\n    connection.on('message', (receivedMessage) => {\n\n      setMessages(msgs => [...msgs, receivedMessage]);\n\n      if (!isMuted) {\n\n        playSound();\n\n      }\n\n    });\n\n    // ...\n```\n\n## Recap\n\n- Dependencies should always match the code.\n- When you’re not happy with your dependencies, what you need to edit is the code.\n- Suppressing the linter leads to very confusing bugs, and you should always avoid it.\n- To remove a dependency, you need to “prove” to the linter that it’s not necessary.\n- If some code should run in response to a specific interaction, move that code to an event handler.\n- If different parts of your Effect should re-run for different reasons, split it into several Effects.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "overview", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to fix infinite Effect dependency loops\n- What to do when you want to remove a dependency\n- How to read a value from your Effect without “reacting” to it\n- How and why to avoid object and function dependencies\n- Why suppressing the dependency linter is dangerous, and what to do instead.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I dependencies should match the code in react-learn?\n\nAssistant: To dependencies should match the code in react-learn, here's what you do:\nWhen you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => connection.disconnect();\n\n  }, []); // <-- Fix the mistake here!\n}\n```\n\nThen, if you leave the Effect dependencies empty ( `[]`), the linter will suggest the correct dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I to remove a dependency, prove that it’s not a dependency in react-learn?\n\nAssistant: To to remove a dependency, prove that it’s not a dependency in react-learn, here's what you do:\nNotice that you can’t “choose” the dependencies of your Effect. Every reactive value used by your Effect’s code must be declared in your dependency list. The dependency list is determined by the surrounding code:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => connection.disconnect();\n\n  }, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I to change the dependencies, change the code in react-learn?\n\nAssistant: To to change the dependencies, change the code in react-learn, here's what you do:\nYou might have noticed a pattern in your workflow:\n\n1. First, you **change the code** of your Effect or how your reactive values are declared.\n2. Then, you follow the linter and adjust the dependencies to **match the code you have changed.**\n3. If you’re not happy with the list of dependencies, you **go back to the first step** (and change the code again)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n```javascript\nuseEffect(() => {\n\n  // ...\n\n  // 🔴 Avoid suppressing the linter like this:\n\n  // eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n```\n\n**When dependencies don’t match the code, there is a very high risk of introducing bugs.** By suppressing the linter, you “lie” to React about the values your Effect depends on..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I removing unnecessary dependencies in react-learn?\n\nAssistant: To removing unnecessary dependencies in react-learn, here's what you do:\nEvery time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:\n\n- You might want to re-execute _different parts_ of your Effect under different conditions.\n- You might want to only read the _latest value_ of some dependency instead of “reacting” to its changes.\n- A dependency may change too often _unintentionally_ because it’s an object or a function..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I should this code move to an event handler? in react-learn?\n\nAssistant: To should this code move to an event handler? in react-learn, here's what you do:\nThe first thing you should think about is whether this code should be an Effect at all.\n\nImagine a form. On submit, you set the `submitted` state variable to `true`. You need to send a POST request and show a notification. You’ve put this logic inside an Effect that “reacts” to `submitted` being `true`:\n\n```javascript\nfunction Form() {\n\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n\n    if (submitted) {\n\n      // 🔴 Avoid: Event-specific logic inside an Effect\n\n      post('/api/register');\n\n      showNotification('Successfully registered!');\n\n    }\n\n  }, [submitted]);\n\n  function handleSubmit() {\n\n    setSubmitted(true);\n\n  }\n\n  // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I is your effect doing several unrelated things? in react-learn?\n\nAssistant: To is your effect doing several unrelated things? in react-learn, here's what you do:\nImagine you’re creating a shipping form where the user needs to choose their city and area. You fetch the list of `cities` from the server according to the selected `country` to show them in a dropdown:\n\n```javascript\nfunction ShippingForm({ country }) {\n\n  const [cities, setCities] = useState(null);\n\n  useEffect(() => {\n\n    let ignore = false;\n\n    fetch(`/api/cities?country=${country}`)\n\n      .then(response => response.json())\n\n      .then(json => {\n\n        if (!ignore) {\n\n          setCities(json);\n\n        }\n\n      });\n\n    return () => {\n\n      ignore = true;\n\n    };\n\n  }, [country]); // ✅ All dependencies declared\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I are you reading some state to calculate the next state? in react-learn?\n\nAssistant: To are you reading some state to calculate the next state? in react-learn, here's what you do:\nThis Effect updates the `messages` state variable with a newly created array every time a new message arrives:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n\n    const connection = createConnection();\n\n    connection.connect();\n\n    connection.on('message', (receivedMessage) => {\n\n      setMessages([...messages, receivedMessage]);\n\n    });\n\n    // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I do you want to read a value without “reacting” to its changes? in react-learn?\n\nAssistant: To do you want to read a value without “reacting” to its changes? in react-learn, here's what you do:\nSuppose that you want to play a sound when the user receives a new message unless `isMuted` is `true`:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n\n  const [messages, setMessages] = useState([]);\n\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n\n    const connection = createConnection();\n\n    connection.connect();\n\n    connection.on('message', (receivedMessage) => {\n\n      setMessages(msgs => [...msgs, receivedMessage]);\n\n      if (!isMuted) {\n\n        playSound();\n\n      }\n\n    });\n\n    // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Dependencies should always match the code.\n- When you’re not happy with your dependencies, what you need to edit is the code.\n- Suppressing the linter leads to very confusing bugs, and you should always avoid it.\n- To remove a dependency, you need to “prove” to the linter that it’s not necessary.\n- If some code should run in response to a specific interaction, move that code to an event handler.\n- If different parts of your Effect should re-run for different reasons, split it into several Effects..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "section_detail", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Removing Effect Dependencies in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**ChatRoom Component Example**:\n\n```yaml\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nThis snippet shows you how to chatroom component example, which is an important aspect of removing effect dependencies.\n\n", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "code_examples", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Removing Effect Dependencies in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid suppressing the linter; it can lead to bugs.\n\nAlways ensure dependencies match the code to prevent unintended behavior.\n\nIf you want to read a value without reacting to its changes, consider using Effect Events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/removing-effect-dependencies", "title": "Removing Effect Dependencies", "description": "This guide explains how to manage Effect dependencies in React to avoid unnecessary re-renders and infinite loops.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:26:03", "type": "best_practices", "page_metadata": {"language": "en", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "ogTitle": "Removing Effect Dependencies – React", "ogUrl": "https://react.dev/learn/removing-effect-dependencies", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Removing Effect Dependencies – React", "og:title": "Removing Effect Dependencies – React", "twitter:creator": "@reactjs", "algolia-search-order": "49", "og:url": "https://react.dev/learn/removing-effect-dependencies", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Removing Effect Dependencies – React", "scrapeId": "7747e00e-89e5-41b3-a924-69a5adedae2e", "sourceURL": "https://react.dev/learn/removing-effect-dependencies", "url": "https://react.dev/learn/removing-effect-dependencies", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what State as a Snapshot is in react-learn?\n\nAssistant: Sure, I'd be happy to explain State as a Snapshot in react-learn.\n\n# State as a Snapshot\n\nThis page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How setting state triggers re-renders\n- When and how state updates\n- Why state does not update immediately after you set it\n- How event handlers access a “snapshot” of the state\n\n## Setting state triggers renders\n\nYou might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state.\n\nIn this example, when you press “send”, `setIsSent(true)` tells React to re-render the UI:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n```\n\nHere’s what happens when you click the button:\n\n1. The `onSubmit` event handler executes.\n2. `setIsSent(true)` sets `isSent` to `true` and queues a new render.\n3. React re-renders the component according to the new `isSent` value.\n\n## Rendering takes a snapshot in time\n\n“Rendering” means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.\n\nUnlike a photograph or a movie frame, the UI “snapshot” you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n2. Your function returns a new JSX snapshot.\n3. React then updates the screen to match the snapshot your function returned.\n\nAs a component’s memory, state is not like a regular variable that disappears after your function returns. State actually “lives” in React itself—as if on a shelf!—outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!\n\n## State over time\n\nWell, that was fun. Try to guess what clicking this button will alert:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        alert(number);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\nIf you use the substitution method from before, you can guess that the alert shows “0”.\n\nBut what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say “0” or “5”? Have a guess!\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setTimeout(() => {\n          alert(number);\n        }, 3000);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\nSurprised? If you use the substitution method, you can see the “snapshot” of the state passed to the alert.\n\n## Recap\n\n- Setting state requests a new render.\n- React stores state outside of your component, as if on a shelf.\n- When you call `useState`, React gives you a snapshot of the state for that render.\n- Variables and event handlers don’t “survive” re-renders. Every render has its own event handlers.\n- Every render (and functions inside it) will always “see” the snapshot of the state that React gave to that render.\n- You can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.\n- Event handlers created in the past have the state values from the render in which they were created.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How setting state triggers re-renders\n- When and how state updates\n- Why state does not update immediately after you set it\n- How event handlers access a “snapshot” of the state.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I setting state triggers renders in react-learn?\n\nAssistant: To setting state triggers renders in react-learn, here's what you do:\nYou might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state.\n\nIn this example, when you press “send”, `setIsSent(true)` tells React to re-render the UI:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n```\n\nHere’s what happens when you click the button:\n\n1. The `onSubmit` event handler executes.\n2. `setIsSent(true)` sets `isSent` to `true` and queues a new render.\n3. React re-renders the component according to the new `isSent` value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rendering takes a snapshot in time in react-learn?\n\nAssistant: To rendering takes a snapshot in time in react-learn, here's what you do:\n“Rendering” means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.\n\nUnlike a photograph or a movie frame, the UI “snapshot” you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n2. Your function returns a new JSX snapshot.\n3. React then updates the screen to match the snapshot your function returned.\n\nAs a component’s memory, state is not like a regular variable that disappears after your function returns. State actually “lives” in React itself—as if on a shelf!—outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I state over time in react-learn?\n\nAssistant: To state over time in react-learn, here's what you do:\nWell, that was fun. Try to guess what clicking this button will alert:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        alert(number);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\nIf you use the substitution method from before, you can guess that the alert shows “0”.\n\nBut what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say “0” or “5”? Have a guess!\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setTimeout(() => {\n          alert(number);\n        }, 3000);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\nSurprised? If you use the substitution method, you can see the “snapshot” of the state passed to the alert..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Setting state requests a new render.\n- React stores state outside of your component, as if on a shelf.\n- When you call `useState`, React gives you a snapshot of the state for that render.\n- Variables and event handlers don’t “survive” re-renders. Every render has its own event handlers.\n- Every render (and functions inside it) will always “see” the snapshot of the state that React gave to that render.\n- You can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.\n- Event handlers created in the past have the state values from the render in which they were created..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for State as a Snapshot in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setting state triggers renders**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n```\n\nThis snippet shows you how to setting state triggers renders, which is an important aspect of state as a snapshot.\n\n", "metadata": {"source_url": "https://react.dev/learn/state-as-a-snapshot", "title": "State as a Snapshot", "description": "This page explains how state in React behaves like a snapshot, detailing how setting state triggers re-renders and the implications of state updates.", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-03-01 01:26:36", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "State as a Snapshot – React", "og:type": "website", "twitter:site": "@reactjs", "twitter:title": "State as a Snapshot – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/learn/state-as-a-snapshot", "algolia-search-order": "30", "ogTitle": "State as a Snapshot – React", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/state-as-a-snapshot", "og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "State as a Snapshot – React", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "279c27eb-dcf5-4dbc-92ad-8a885ec368dc", "sourceURL": "https://react.dev/learn/state-as-a-snapshot", "url": "https://react.dev/learn/state-as-a-snapshot", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what State: A Component's Memory is in react-learn?\n\nAssistant: Sure, I'd be happy to explain State: A Component's Memory in react-learn.\n\n# State: A Component's Memory\n\nComponents often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to add a state variable with the `useState` Hook\n- What pair of values the `useState` Hook returns\n- How to add more than one state variable\n- Why state is called local\n\n## When a regular variable isn’t enough\n\nHere’s a component that renders a sculpture image. Clicking the “Next” button should show the next sculpture by changing the `index` to `1`, then `2`, and so on. However, this **won’t work** (you can try it!).\n\nThe `handleClick` event handler is updating a local variable, `index`. But two things prevent that change from being visible:\n\n1. **Local variables don’t persist between renders.** When React renders this component a second time, it renders it from scratch—it doesn’t consider any changes to the local variables.\n2. **Changes to local variables won’t trigger renders.** React doesn’t realize it needs to render the component again with the new data.\n\nTo update a component with new data, two things need to happen:\n\n1. **Retain** the data between renders.\n2. **Trigger** React to render the component with new data (re-rendering).\n\n## Adding a state variable\n\nTo add a state variable, import `useState` from React at the top of the file:\n\n```javascript\nimport { useState } from 'react';\n```\n\nThen, replace this line:\n\n```javascript\nlet index = 0;\n```\n\nwith\n\n```javascript\nconst [index, setIndex] = useState(0);\n```\n\n`index` is a state variable and `setIndex` is the setter function.\n\n## Meet your first Hook\n\nIn React, `useState`, as well as any other function starting with “ `use`”, is called a Hook.\n\n_Hooks_ are special functions that are only available while React is rendering. They let you “hook into” different React features.\n\n## Pitfall\n\n**Hooks—functions starting with `use`—can only be called at the top level of your components or your own Hooks.** You can’t call Hooks inside conditions, loops, or other nested functions.\n\n## Anatomy of `useState`\n\nWhen you call `useState`, you are telling React that you want this component to remember something:\n\n```javascript\nconst [index, setIndex] = useState(0);\n```\n\nThe only argument to `useState` is the **initial value** of your state variable.\n\n## Giving a component multiple state variables\n\nYou can have as many state variables of as many types as you like in one component. This component has two state variables, a number `index` and a boolean `showMore` that’s toggled when you click “Show details”.\n\n## State is isolated and private\n\nState is local to a component instance on the screen. In other words, **if you render the same component twice, each copy will have completely isolated state!** Changing one of them will not affect the other.\n\n## Recap\n\n- Use a state variable when a component needs to “remember” some information between renders.\n- State variables are declared by calling the `useState` Hook.\n- Hooks are special functions that start with `use`. They let you “hook into” React features like state.\n- Hooks might remind you of imports: they need to be called unconditionally.\n\n## Try out some challenges\n\n1. Complete the gallery 2. Fix stuck form inputs 3. Fix a crash 4. Remove unnecessary state\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "overview", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to add a state variable with the `useState` Hook\n- What pair of values the `useState` Hook returns\n- How to add more than one state variable\n- Why state is called local.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I when a regular variable isn’t enough in react-learn?\n\nAssistant: To when a regular variable isn’t enough in react-learn, here's what you do:\nHere’s a component that renders a sculpture image. Clicking the “Next” button should show the next sculpture by changing the `index` to `1`, then `2`, and so on. However, this **won’t work** (you can try it!).\n\nThe `handleClick` event handler is updating a local variable, `index`. But two things prevent that change from being visible:\n\n1. **Local variables don’t persist between renders.** When React renders this component a second time, it renders it from scratch—it doesn’t consider any changes to the local variables.\n2. **Changes to local variables won’t trigger renders.** React doesn’t realize it needs to render the component again with the new data.\n\nTo update a component with new data, two things need to happen:\n\n1. **Retain** the data between renders.\n2. **Trigger** React to render the component with new data (re-rendering)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding a state variable in react-learn?\n\nAssistant: To adding a state variable in react-learn, here's what you do:\nTo add a state variable, import `useState` from React at the top of the file:\n\n```javascript\nimport { useState } from 'react';\n```\n\nThen, replace this line:\n\n```javascript\nlet index = 0;\n```\n\nwith\n\n```javascript\nconst [index, setIndex] = useState(0);\n```\n\n`index` is a state variable and `setIndex` is the setter function..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I meet your first hook in react-learn?\n\nAssistant: To meet your first hook in react-learn, here's what you do:\nIn React, `useState`, as well as any other function starting with “ `use`”, is called a Hook.\n\n_Hooks_ are special functions that are only available while React is rendering. They let you “hook into” different React features..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\n**Hooks—functions starting with `use`—can only be called at the top level of your components or your own Hooks.** You can’t call Hooks inside conditions, loops, or other nested functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I anatomy of `usestate` in react-learn?\n\nAssistant: To anatomy of `usestate` in react-learn, here's what you do:\nWhen you call `useState`, you are telling React that you want this component to remember something:\n\n```javascript\nconst [index, setIndex] = useState(0);\n```\n\nThe only argument to `useState` is the **initial value** of your state variable..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I giving a component multiple state variables in react-learn?\n\nAssistant: To giving a component multiple state variables in react-learn, here's what you do:\nYou can have as many state variables of as many types as you like in one component. This component has two state variables, a number `index` and a boolean `showMore` that’s toggled when you click “Show details”..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I state is isolated and private in react-learn?\n\nAssistant: To state is isolated and private in react-learn, here's what you do:\nState is local to a component instance on the screen. In other words, **if you render the same component twice, each copy will have completely isolated state!** Changing one of them will not affect the other..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Use a state variable when a component needs to “remember” some information between renders.\n- State variables are declared by calling the `useState` Hook.\n- Hooks are special functions that start with `use`. They let you “hook into” React features like state.\n- Hooks might remind you of imports: they need to be called unconditionally..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Complete the gallery 2. Fix stuck form inputs 3. Fix a crash 4. Remove unnecessary state.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for State: A Component's Memory in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial State Variable Declaration**:\n\n```yaml\nconst [index, setIndex] = useState(0);\n```\n\nThis snippet shows you how to initial state variable declaration, which is an important aspect of state: a component's memory.\n\n**State Variable with Multiple States**:\n\n```yaml\nconst [index, setIndex] = useState(0);\nconst [showMore, setShowMore] = useState(false);\n```\n\nThis snippet shows you how to state variable with multiple states, which is an important aspect of state: a component's memory.\n\n**Handle Click Function with State Setter**:\n\n```yaml\nfunction handleClick() {\n  setIndex(index + 1);\n}\n```\n\nThis snippet shows you how to handle click function with state setter, which is an important aspect of state: a component's memory.\n\n", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "code_examples", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using State: A Component's Memory in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is a good idea to have multiple state variables if their state is unrelated, like `index` and `showMore`.\n\nIf you find that you often change two state variables together, it might be easier to combine them into one.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/state-a-components-memory", "title": "State: A Component's Memory", "description": "Components often need to change what’s on the screen as a result of an interaction. In React, this kind of component-specific memory is called state.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:27:04", "type": "best_practices", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:title": "State: A Component's Memory – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/learn/state-a-components-memory", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "language": "en", "twitter:creator": "@reactjs", "og:title": "State: A Component's Memory – React", "ogUrl": "https://react.dev/learn/state-a-components-memory", "ogDescription": "The library for web and native user interfaces", "title": "State: A Component's Memory – React", "ogTitle": "State: A Component's Memory – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "28", "og:type": "website", "scrapeId": "ab1c08ee-0c01-44ae-8cd1-3aaacf9fac50", "sourceURL": "https://react.dev/learn/state-a-components-memory", "url": "https://react.dev/learn/state-a-components-memory", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Separating Events from Effects is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Separating Events from Effects in react-learn.\n\n# Separating Events from Effects\n\nThis page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to choose between an event handler and an Effect\n- Why Effects are reactive, and event handlers are not\n- What to do when you want a part of your Effect’s code to not be reactive\n- What Effect Events are, and how to extract them from your Effects\n- How to read the latest props and state from Effects using Effect Events\n\n## Choosing between event handlers and Effects\n\nFirst, let’s recap the difference between event handlers and Effects.\n\nImagine you’re implementing a chat room component. Your requirements look like this:\n\n1. Your component should automatically connect to the selected chat room.\n2. When you click the “Send” button, it should send a message to the chat.\n\nLet’s say you’ve already implemented the code for them, but you’re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run.\n\n## Event handlers run in response to specific interactions\n\nFrom the user’s perspective, sending a message should happen because the particular “Send” button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  function handleSendClick() {\n    sendMessage(message);\n  }\n\n  return (\n    <>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\n## Effects run whenever synchronization is needed\n\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\n\nThe reason to run this code is not some particular interaction. It doesn’t matter why or how the user navigated to the chat room screen. Now that they’re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it’s an Effect:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\n## Reactive values and reactive logic\n\nIntuitively, you could say that event handlers are always triggered “manually”, for example by clicking a button. Effects, on the other hand, are “automatic”: they run and re-run as often as it’s needed to stay synchronized.\n\nProps, state, and variables declared inside your component’s body are called reactive values. In this example, `serverUrl` is not a reactive value, but `roomId` and `message` are. They participate in the rendering data flow:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n}\n```\n\n## Logic inside event handlers is not reactive\n\nTake a look at this line of code. Should this logic be reactive or not?\n\n```javascript\nsendMessage(message);\n```\n\nFrom the user’s perspective, a change to the `message` does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That’s why it belongs in the event handler:\n\n```javascript\nfunction handleSendClick() {\n  sendMessage(message);\n}\n```\n\n## Logic inside Effects is reactive\n\nNow let’s return to these lines:\n\n```javascript\nconst connection = createConnection(serverUrl, roomId);\nconnection.connect();\n```\n\nFrom the user’s perspective, a change to the `roomId` does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to “keep up” with the reactive value, and to run again if that value is different. That’s why it belongs in an Effect:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => {\n    connection.disconnect();\n  };\n}, [roomId]);\n```\n\n## Extracting non-reactive logic out of Effects\n\nThings get more tricky when you want to mix reactive logic with non-reactive logic.\n\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\n\n```javascript\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, theme]); // ✅ All dependencies declared\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "overview", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to choose between an event handler and an Effect\n- Why Effects are reactive, and event handlers are not\n- What to do when you want a part of your Effect’s code to not be reactive\n- What Effect Events are, and how to extract them from your Effects\n- How to read the latest props and state from Effects using Effect Events.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I choosing between event handlers and effects in react-learn?\n\nAssistant: To choosing between event handlers and effects in react-learn, here's what you do:\nFirst, let’s recap the difference between event handlers and Effects.\n\nImagine you’re implementing a chat room component. Your requirements look like this:\n\n1. Your component should automatically connect to the selected chat room.\n2. When you click the “Send” button, it should send a message to the chat.\n\nLet’s say you’ve already implemented the code for them, but you’re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I event handlers run in response to specific interactions in react-learn?\n\nAssistant: To event handlers run in response to specific interactions in react-learn, here's what you do:\nFrom the user’s perspective, sending a message should happen because the particular “Send” button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  function handleSendClick() {\n    sendMessage(message);\n  }\n\n  return (\n    <>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I effects run whenever synchronization is needed in react-learn?\n\nAssistant: To effects run whenever synchronization is needed in react-learn, here's what you do:\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\n\nThe reason to run this code is not some particular interaction. It doesn’t matter why or how the user navigated to the chat room screen. Now that they’re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it’s an Effect:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I reactive values and reactive logic in react-learn?\n\nAssistant: To reactive values and reactive logic in react-learn, here's what you do:\nIntuitively, you could say that event handlers are always triggered “manually”, for example by clicking a button. Effects, on the other hand, are “automatic”: they run and re-run as often as it’s needed to stay synchronized.\n\nProps, state, and variables declared inside your component’s body are called reactive values. In this example, `serverUrl` is not a reactive value, but `roomId` and `message` are. They participate in the rendering data flow:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I logic inside event handlers is not reactive in react-learn?\n\nAssistant: To logic inside event handlers is not reactive in react-learn, here's what you do:\nTake a look at this line of code. Should this logic be reactive or not?\n\n```javascript\nsendMessage(message);\n```\n\nFrom the user’s perspective, a change to the `message` does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That’s why it belongs in the event handler:\n\n```javascript\nfunction handleSendClick() {\n  sendMessage(message);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I logic inside effects is reactive in react-learn?\n\nAssistant: To logic inside effects is reactive in react-learn, here's what you do:\nNow let’s return to these lines:\n\n```javascript\nconst connection = createConnection(serverUrl, roomId);\nconnection.connect();\n```\n\nFrom the user’s perspective, a change to the `roomId` does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to “keep up” with the reactive value, and to run again if that value is different. That’s why it belongs in an Effect:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => {\n    connection.disconnect();\n  };\n}, [roomId]);\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I extracting non-reactive logic out of effects in react-learn?\n\nAssistant: To extracting non-reactive logic out of effects in react-learn, here's what you do:\nThings get more tricky when you want to mix reactive logic with non-reactive logic.\n\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\n\n```javascript\nfunction ChatRoom({ roomId, theme }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.on('connected', () => {\n      showNotification('Connected!', theme);\n    });\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId, theme]); // ✅ All dependencies declared\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Separating Events from Effects in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**ChatRoom Component with Event Handler**:\n\n```yaml\nfunction ChatRoom({ roomId }) {\n  const [message, setMessage] = useState('');\n\n  function handleSendClick() {\n    sendMessage(message);\n  }\n\n  return (\n    <>\n      <input value={message} onChange={e => setMessage(e.target.value)} />\n      <button onClick={handleSendClick}>Send</button>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to chatroom component with event handler, which is an important aspect of separating events from effects.\n\n**ChatRoom Component with Effect**:\n\n```yaml\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\nThis snippet shows you how to chatroom component with effect, which is an important aspect of separating events from effects.\n\n", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Separating Events from Effects in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEvent handlers run in response to specific interactions.\n\nEffects run whenever synchronization is needed.\n\nLogic inside event handlers is not reactive.\n\nLogic inside Effects is reactive.\n\nYou can move non-reactive logic from Effects into Effect Events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/separating-events-from-effects", "title": "Separating Events from Effects", "description": "This page teaches how to manage event handlers and effects in React, explaining their differences and how to use them effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:28:39", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "Separating Events from Effects – React", "twitter:creator": "@reactjs", "ogTitle": "Separating Events from Effects – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "twitter:title": "Separating Events from Effects – React", "title": "Separating Events from Effects – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/separating-events-from-effects", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "48", "og:url": "https://react.dev/learn/separating-events-from-effects", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1b492291-ddd1-49b8-a25c-0509b3b8585d", "sourceURL": "https://react.dev/learn/separating-events-from-effects", "url": "https://react.dev/learn/separating-events-from-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Tutorial: Tic-Tac-Toe is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Tutorial: Tic-Tac-Toe in react-learn.\n\n# Tutorial: Tic-Tac-Toe\n\nYou will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.Here's a quick rundown of what this is about:\n\n## What are you building?\n\nIn this tutorial, you’ll build an interactive tic-tac-toe game with React.\n\n## Setup for the tutorial\n\nIn the live code editor below, click **Fork** in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial.\n\n## Overview\n\nNow that you’re set up, let’s get an overview of React!\n\n## Inspecting the starter code\n\nIn CodeSandbox you’ll see three main sections: 1. The _Files_ section with a list of files like `App.js`, `index.js`, `styles.css` and a folder called `public` 2. The _code editor_ where you’ll see the source code of your selected file 3. The _browser_ section where you’ll see how the code you’ve written will be displayed.\n\n## Building the board\n\nLet’s get back to `App.js`. This is where you’ll spend the rest of the tutorial.\n\n## Passing data through props\n\nNext, you’ll want to change the value of a square from empty to “X” when the user clicks on the square.\n\n## Making an interactive component\n\nLet’s fill the `Square` component with an `X` when you click it.\n\n## React Developer Tools\n\nReact DevTools let you check the props and the state of your React components.\n\n## Completing the game\n\nBy this point, you have all the basic building blocks for your tic-tac-toe game.\n\n## Lifting state up\n\nCurrently, each `Square` component maintains a part of the game’s state.\n\n## Declaring a winner\n\nNow that the players can take turns, you’ll want to show when the game is won and there are no more turns to make.\n\n## Adding time travel\n\nAs a final exercise, let’s make it possible to “go back in time” to the previous moves in the game.\n\n## Final cleanup\n\nIf you look at the code very closely, you may notice that `xIsNext === true` when `currentMove` is even and `xIsNext === false` when `currentMove` is odd.\n\n## Wrapping up\n\nCongratulations! You’ve created a tic-tac-toe game that lets you play tic-tac-toe.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "overview", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what are you building? in react-learn?\n\nAssistant: To what are you building? in react-learn, here's what you do:\nIn this tutorial, you’ll build an interactive tic-tac-toe game with React..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I setup for the tutorial in react-learn?\n\nAssistant: To setup for the tutorial in react-learn, here's what you do:\nIn the live code editor below, click **Fork** in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I overview in react-learn?\n\nAssistant: To overview in react-learn, here's what you do:\nNow that you’re set up, let’s get an overview of React!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I inspecting the starter code in react-learn?\n\nAssistant: To inspecting the starter code in react-learn, here's what you do:\nIn CodeSandbox you’ll see three main sections: 1. The _Files_ section with a list of files like `App.js`, `index.js`, `styles.css` and a folder called `public` 2. The _code editor_ where you’ll see the source code of your selected file 3. The _browser_ section where you’ll see how the code you’ve written will be displayed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I building the board in react-learn?\n\nAssistant: To building the board in react-learn, here's what you do:\nLet’s get back to `App.js`. This is where you’ll spend the rest of the tutorial..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing data through props in react-learn?\n\nAssistant: To passing data through props in react-learn, here's what you do:\nNext, you’ll want to change the value of a square from empty to “X” when the user clicks on the square..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I making an interactive component in react-learn?\n\nAssistant: To making an interactive component in react-learn, here's what you do:\nLet’s fill the `Square` component with an `X` when you click it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react developer tools in react-learn?\n\nAssistant: To react developer tools in react-learn, here's what you do:\nReact DevTools let you check the props and the state of your React components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I completing the game in react-learn?\n\nAssistant: To completing the game in react-learn, here's what you do:\nBy this point, you have all the basic building blocks for your tic-tac-toe game..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I lifting state up in react-learn?\n\nAssistant: To lifting state up in react-learn, here's what you do:\nCurrently, each `Square` component maintains a part of the game’s state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I declaring a winner in react-learn?\n\nAssistant: To declaring a winner in react-learn, here's what you do:\nNow that the players can take turns, you’ll want to show when the game is won and there are no more turns to make..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding time travel in react-learn?\n\nAssistant: To adding time travel in react-learn, here's what you do:\nAs a final exercise, let’s make it possible to “go back in time” to the previous moves in the game..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I final cleanup in react-learn?\n\nAssistant: To final cleanup in react-learn, here's what you do:\nIf you look at the code very closely, you may notice that `xIsNext === true` when `currentMove` is even and `xIsNext === false` when `currentMove` is odd..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I wrapping up in react-learn?\n\nAssistant: To wrapping up in react-learn, here's what you do:\nCongratulations! You’ve created a tic-tac-toe game that lets you play tic-tac-toe..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "section_detail", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Tutorial: Tic-Tac-Toe in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**App.js**:\n\n```yaml\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\nThis snippet shows you how to app.js, which is an important aspect of tutorial: tic-tac-toe.\n\n", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "code_examples", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Tutorial: Tic-Tac-Toe in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis tutorial is designed for people who prefer to learn by doing and want to quickly try making something tangible.\n\nIf you get stuck, don’t let this stop you! Follow along online instead and try a local setup again later.\n\nIt’s okay to copy and paste code from this page. However, if you’re up for a little challenge, we recommend only copying code that you’ve manually typed at least once yourself.\n\nPsssst… That’s a lot to type!\n\nAlways try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/tutorial-tic-tac-toe", "title": "Tutorial: Tic-Tac-Toe", "description": "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 01:29:15", "type": "best_practices", "page_metadata": {"og:image": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "title": "Tutorial: Tic-Tac-Toe – React", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "ogTitle": "Tutorial: Tic-Tac-Toe – React", "og:type": "website", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/tutorial-tic-tac-toe", "twitter:title": "Tutorial: Tic-Tac-Toe – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "4", "og:title": "Tutorial: Tic-Tac-Toe – React", "language": "en", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/tutorial-tic-tac-toe", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "scrapeId": "f056773b-dbeb-441c-8809-bebf89cc6fd5", "sourceURL": "https://react.dev/learn/tutorial-tic-tac-toe", "url": "https://react.dev/learn/tutorial-tic-tac-toe", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Sharing State Between Components is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Sharing State Between Components in react-learn.\n\n# Sharing State Between Components\n\nLearn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to share state between components by lifting it up\n- What are controlled and uncontrolled components\n\n## Lifting state up by example\n\nIn this example, a parent `Accordion` component renders two separate `Panel`s:\n\n- `Accordion`\n  - `Panel`\n  - `Panel`\n\nEach `Panel` component has a boolean `isActive` state that determines whether its content is visible.\n\nPress the Show button for both panels:\n\nNotice how pressing one panel’s button does not affect the other panel—they are independent.\n\n## Step 1: Remove state from the child components\n\nYou will give control of the `Panel`’s `isActive` to its parent component. This means that the parent component will pass `isActive` to `Panel` as a prop instead. Start by **removing this line** from the `Panel` component:\n\n```javascript\nconst [isActive, setIsActive] = useState(false);\n```\n\nAnd instead, add `isActive` to the `Panel`’s list of props:\n\n```javascript\nfunction Panel({ title, children, isActive }) {\n```\n\nNow the `Panel`’s parent component can _control_ `isActive` by passing it down as a prop. Conversely, the `Panel` component now has _no control_ over the value of `isActive`—it’s now up to the parent component!\n\n## Step 2: Pass hardcoded data from the common parent\n\nTo lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:\n\n- `Accordion` _(closest common parent)_\n  - `Panel`\n  - `Panel`\n\nIn this example, it’s the `Accordion` component. Since it’s above both panels and can control their props, it will become the “source of truth” for which panel is currently active. Make the `Accordion` component pass a hardcoded value of `isActive` (for example, `true`) to both panels.\n\n## Step 3: Add state to the common parent\n\nLifting state up often changes the nature of what you’re storing as state.\n\nIn this case, only one panel should be active at a time. This means that the `Accordion` common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:\n\n```javascript\nconst [activeIndex, setActiveIndex] = useState(0);\n```\n\nWhen the `activeIndex` is `0`, the first panel is active, and when it’s `1`, it’s the second one.\n\n## Controlled and uncontrolled components\n\nIt is common to call a component with some local state “uncontrolled”. For example, the original `Panel` component with an `isActive` state variable is uncontrolled because its parent cannot influence whether the panel is active or not.\n\nIn contrast, you might say a component is “controlled” when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior.\n\n## A single source of truth for each state\n\nIn a React application, many components will have their own state. Some state may “live” close to the leaf components (components at the bottom of the tree) like inputs. Other state may “live” closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!\n\n## Recap\n\n- When you want to coordinate two components, move their state to their common parent.\n- Then pass the information down through props from their common parent.\n- Finally, pass the event handlers down so that the children can change the parent’s state.\n\n## Try out some challenges\n\n1. Synced inputs 2. Filtering a list\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to share state between components by lifting it up\n- What are controlled and uncontrolled components.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I lifting state up by example in react-learn?\n\nAssistant: To lifting state up by example in react-learn, here's what you do:\nIn this example, a parent `Accordion` component renders two separate `Panel`s:\n\n- `Accordion`\n  - `Panel`\n  - `Panel`\n\nEach `Panel` component has a boolean `isActive` state that determines whether its content is visible.\n\nPress the Show button for both panels:\n\nNotice how pressing one panel’s button does not affect the other panel—they are independent..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: remove state from the child components in react-learn?\n\nAssistant: To step 1: remove state from the child components in react-learn, here's what you do:\nYou will give control of the `Panel`’s `isActive` to its parent component. This means that the parent component will pass `isActive` to `Panel` as a prop instead. Start by **removing this line** from the `Panel` component:\n\n```javascript\nconst [isActive, setIsActive] = useState(false);\n```\n\nAnd instead, add `isActive` to the `Panel`’s list of props:\n\n```javascript\nfunction Panel({ title, children, isActive }) {\n```\n\nNow the `Panel`’s parent component can _control_ `isActive` by passing it down as a prop. Conversely, the `Panel` component now has _no control_ over the value of `isActive`—it’s now up to the parent component!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: pass hardcoded data from the common parent in react-learn?\n\nAssistant: To step 2: pass hardcoded data from the common parent in react-learn, here's what you do:\nTo lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:\n\n- `Accordion` _(closest common parent)_\n  - `Panel`\n  - `Panel`\n\nIn this example, it’s the `Accordion` component. Since it’s above both panels and can control their props, it will become the “source of truth” for which panel is currently active. Make the `Accordion` component pass a hardcoded value of `isActive` (for example, `true`) to both panels..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: add state to the common parent in react-learn?\n\nAssistant: To step 3: add state to the common parent in react-learn, here's what you do:\nLifting state up often changes the nature of what you’re storing as state.\n\nIn this case, only one panel should be active at a time. This means that the `Accordion` common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:\n\n```javascript\nconst [activeIndex, setActiveIndex] = useState(0);\n```\n\nWhen the `activeIndex` is `0`, the first panel is active, and when it’s `1`, it’s the second one..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I controlled and uncontrolled components in react-learn?\n\nAssistant: To controlled and uncontrolled components in react-learn, here's what you do:\nIt is common to call a component with some local state “uncontrolled”. For example, the original `Panel` component with an `isActive` state variable is uncontrolled because its parent cannot influence whether the panel is active or not.\n\nIn contrast, you might say a component is “controlled” when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I a single source of truth for each state in react-learn?\n\nAssistant: To a single source of truth for each state in react-learn, here's what you do:\nIn a React application, many components will have their own state. Some state may “live” close to the leaf components (components at the bottom of the tree) like inputs. Other state may “live” closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- When you want to coordinate two components, move their state to their common parent.\n- Then pass the information down through props from their common parent.\n- Finally, pass the event handlers down so that the children can change the parent’s state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Synced inputs 2. Filtering a list.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Sharing State Between Components in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Accordion Component Example**:\n\n```yaml\nimport { useState } from 'react';\n\nfunction Panel({ title, children }) {\n  const [isActive, setIsActive] = useState(false);\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={() => setIsActive(true)}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}\n\nexport default function Accordion() {\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel title=\"About\">\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel title=\"Etymology\">\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to accordion component example, which is an important aspect of sharing state between components.\n\n", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Sharing State Between Components in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider which information in a component should be controlled (via props) and which should be uncontrolled (via state).\n\nRefactor components as needed to ensure a single source of truth for each piece of state.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/sharing-state-between-components", "title": "Sharing State Between Components", "description": "Learn how to share state between components in React by lifting state up to their closest common parent and passing it down via props.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:29:46", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogUrl": "https://react.dev/learn/sharing-state-between-components", "og:url": "https://react.dev/learn/sharing-state-between-components", "og:description": "The library for web and native user interfaces", "ogTitle": "Sharing State Between Components – React", "og:title": "Sharing State Between Components – React", "twitter:card": "summary_large_image", "og:type": "website", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:title": "Sharing State Between Components – React", "ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "algolia-search-order": "37", "title": "Sharing State Between Components – React", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "10a335ff-b852-4b57-b625-a6a048fc0536", "sourceURL": "https://react.dev/learn/sharing-state-between-components", "url": "https://react.dev/learn/sharing-state-between-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Creating a React App is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Creating a React App in react-learn.\n\n# Creating a React App\n\nThis page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.Here's a quick rundown of what this is about:\n\n## Full-stack frameworks\n\nThese recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React’s architecture.\n\n### Note\n\n#### Full-stack frameworks do not require a server.\n\nAll the frameworks on this page support client-side rendering (CSR), single-page apps (SPA), and static-site generation (SSG). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case.\n\nThis allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework’s documentation for configuring the rendering strategy.\n\n## Next.js (App Router)\n\nNext.js’s App Router is a React framework that takes full advantage of React’s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server. Vercel additionally provides opt-in paid cloud services.\n\n## React Router (v7)\n\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework. It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms.\n\n## Expo (for native apps)\n\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions.\n\n## Other frameworks\n\nThere are other up-and-coming frameworks that are working towards our full stack React vision:\n\n- TanStack Start (Beta): TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n- RedwoodJS: Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications.\n\n## Deep Dive\n\nNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components.\n\n## Start From Scratch\n\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "overview", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I full-stack frameworks in react-learn?\n\nAssistant: To full-stack frameworks in react-learn, here's what you do:\nThese recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React’s architecture.\n\n### Note\n\n#### Full-stack frameworks do not require a server.\n\nAll the frameworks on this page support client-side rendering (CSR), single-page apps (SPA), and static-site generation (SSG). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case.\n\nThis allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework’s documentation for configuring the rendering strategy..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I next.js (app router) in react-learn?\n\nAssistant: To next.js (app router) in react-learn, here's what you do:\nNext.js’s App Router is a React framework that takes full advantage of React’s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server. Vercel additionally provides opt-in paid cloud services..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react router (v7) in react-learn?\n\nAssistant: To react router (v7) in react-learn, here's what you do:\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework. It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I expo (for native apps) in react-learn?\n\nAssistant: To expo (for native apps) in react-learn, here's what you do:\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I other frameworks in react-learn?\n\nAssistant: To other frameworks in react-learn, here's what you do:\nThere are other up-and-coming frameworks that are working towards our full stack React vision:\n\n- TanStack Start (Beta): TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n- RedwoodJS: Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I start from scratch in react-learn?\n\nAssistant: To start from scratch in react-learn, here's what you do:\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "section_detail", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Creating a React App in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a Next.js app**:\n\n```yaml\nnpx create-next-app@latest\n```\n\nThis snippet shows you how to create a next.js app, which is an important aspect of creating a react app.\n\n**Create a React Router project**:\n\n```yaml\nnpx create-react-router@latest\n```\n\nThis snippet shows you how to create a react router project, which is an important aspect of creating a react app.\n\n**Create an Expo project**:\n\n```yaml\nnpx create-expo-app@latest\n```\n\nThis snippet shows you how to create an expo project, which is an important aspect of creating a react app.\n\n**Server-only React component example**:\n\n```yaml\nasync function Talks({ confId }) {\n  const talks = await db.Talks.findAll({ confId });\n  const videos = talks.map(talk => talk.video);\n  return <SearchableVideoList videos={videos} />;\n}\n```\n\nThis snippet shows you how to server-only react component example, which is an important aspect of creating a react app.\n\n", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "code_examples", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Creating a React App in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider using a full-stack framework for production apps to leverage built-in features and optimizations.\n\nIf starting from scratch, be prepared to make choices on tools for routing and data fetching.\n\nCheck the documentation of your chosen framework for specific configuration options.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/creating-a-react-app", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:46:43", "type": "best_practices", "page_metadata": {"ogTitle": "Creating a React App – React", "og:type": "website", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Creating a React App – React", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/creating-a-react-app", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "title": "Creating a React App – React", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "og:title": "Creating a React App – React", "twitter:card": "summary_large_image", "algolia-search-order": "7", "fb:app_id": "623268441017527", "scrapeId": "8951ccaf-a1a8-439f-b2a7-e9cb3f4ac411", "sourceURL": "https://react.dev/learn/creating-a-react-app", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Importing and Exporting Components is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Importing and Exporting Components in react-learn.\n\n# Importing and Exporting Components\n\nThis page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What a root component file is\n- How to import and export a component\n- When to use default and named imports and exports\n- How to import and export multiple components from one file\n- How to split components into multiple files\n\n## The root component file\n\nIn [Your First Component](https://react.dev/learn/your-first-component), you made a `Profile` component and a `Gallery` component that renders it:\n\n```javascript\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nThese currently live in a **root component file,** named `App.js` in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page.\n\n## Exporting and importing a component\n\nWhat if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move `Gallery` and `Profile` out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\n\n1. **Make** a new JS file to put the components in.\n2. **Export** your function component from that file (using either [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports) exports).\n3. **Import** it in the file where you’ll use the component (using the corresponding technique for importing [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module) exports).\n\nHere both `Profile` and `Gallery` have been moved out of `App.js` into a new file called `Gallery.js`. Now you can change `App.js` to import `Gallery` from `Gallery.js`:\n\n```javascript\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Gallery />\n  );\n}\n```\n\nNotice how this example is broken down into two component files now:\n\n1. `Gallery.js`:\n   - Defines the `Profile` component which is only used within the same file and is not exported.\n   - Exports the `Gallery` component as a **default export.**\n2. `App.js`:\n   - Imports `Gallery` as a **default import** from `Gallery.js`.\n   - Exports the root `App` component as a **default export.**\n\n## Note\n\nYou may encounter files that leave off the `.js` file extension like so:\n\n```javascript\nimport Gallery from './Gallery';\n```\n\nEither `'./Gallery.js'` or `'./Gallery'` will work with React, though the former is closer to how [native ES Modules](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Modules) work.\n\n## Deep Dive\n\nThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. **A file can have no more than one _default_ export, but it can have as many _named_ exports as you like.**\n\n![Default and named exports](https://react.dev/images/docs/illustrations/i_import-export.svg)\n\nHow you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:\n\n| Syntax | Export statement | Import statement |\n| --- | --- | --- |\n| Default | `export default function Button() {}` | `import Button from './Button.js';` |\n| Named | `export function Button() {}` | `import { Button } from './Button.js';` |\n\nWhen you write a _default_ import, you can put any name you want after `import`. For example, you could write `import Banana from './Button.js'` instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That’s why they are called _named_ imports!\n\n**People often use default exports if the file exports only one component, and use named exports if it exports multiple components and values.** Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like `export default () => {}`, are discouraged because they make debugging harder.\n\n## Exporting and importing multiple components from the same file\n\nWhat if you want to show just one `Profile` instead of a gallery? You can export the `Profile` component, too. But `Gallery.js` already has a _default_ export, and you can’t have _two_ default exports. You could create a new file with a default export, or you could add a _named_ export for `Profile`. **A file can only have one default export, but it can have numerous named exports!**\n\n### Note\n\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!\n\nFirst, **export** `Profile` from `Gallery.js` using a named export (no `default` keyword):\n\n```javascript\nexport function Profile() {\n  // ...\n}\n```\n\nThen, **import** `Profile` from `Gallery.js` to `App.js` using a named import (with the curly braces):\n\n```javascript\nimport { Profile } from './Gallery.js';\n```\n\nFinally, **render** `<Profile />` from the `App` component:\n\n```javascript\nexport default function App() {\n  return <Profile />;\n}\n```\n\nNow `Gallery.js` contains two exports: a default `Gallery` export, and a named `Profile` export. `App.js` imports both of them. Try editing `<Profile />` to `<Gallery />` and back in this example.\n\n## Recap\n\nOn this page you learned:\n- What a root component file is\n- How to import and export a component\n- When and how to use default and named imports and exports\n- How to export multiple components from the same file\n\n## Try out some challenges\n\n#### Challenge1 of1:   Split the components further\nCurrently, `Gallery.js` exports both `Profile` and `Gallery`, which is a bit confusing.\n\nMove the `Profile` component to its own `Profile.js`, and then change the `App` component to render both `<Profile />` and `<Gallery />` one after another.\n\nYou may use either a default or a named export for `Profile`, but make sure that you use the corresponding import syntax in both `App.js` and `Gallery.js`! You can refer to the table from the deep dive above:\n\n| Syntax | Export statement | Import statement |\n| --- | --- | --- |\n| Default | `export default function Button() {}` | `import Button from './Button.js';` |\n| Named | `export function Button() {}` | `import { Button } from './Button.js';` |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What a root component file is\n- How to import and export a component\n- When to use default and named imports and exports\n- How to import and export multiple components from one file\n- How to split components into multiple files.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the root component file in react-learn?\n\nAssistant: To the root component file in react-learn, here's what you do:\nIn [Your First Component](https://react.dev/learn/your-first-component), you made a `Profile` component and a `Gallery` component that renders it:\n\n```javascript\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nThese currently live in a **root component file,** named `App.js` in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I exporting and importing a component in react-learn?\n\nAssistant: To exporting and importing a component in react-learn, here's what you do:\nWhat if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move `Gallery` and `Profile` out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\n\n1. **Make** a new JS file to put the components in.\n2. **Export** your function component from that file (using either [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports) exports).\n3. **Import** it in the file where you’ll use the component (using the corresponding technique for importing [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module) exports).\n\nHere both `Profile` and `Gallery` have been moved out of `App.js` into a new file called `Gallery.js`. Now you can change `App.js` to import `Gallery` from `Gallery.js`:\n\n```javascript\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Gallery />\n  );\n}\n```\n\nNotice how this example is broken down into two component files now:\n\n1. `Gallery.js`:\n   - Defines the `Profile` component which is only used within the same file and is not exported.\n   - Exports the `Gallery` component as a **default export.**\n2. `App.js`:\n   - Imports `Gallery` as a **default import** from `Gallery.js`.\n   - Exports the root `App` component as a **default export.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nYou may encounter files that leave off the `.js` file extension like so:\n\n```javascript\nimport Gallery from './Gallery';\n```\n\nEither `'./Gallery.js'` or `'./Gallery'` will work with React, though the former is closer to how [native ES Modules](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Modules) work..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. **A file can have no more than one _default_ export, but it can have as many _named_ exports as you like.**\n\n![Default and named exports](https://react.dev/images/docs/illustrations/i_import-export.svg)\n\nHow you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:\n\n| Syntax | Export statement | Import statement |\n| --- | --- | --- |\n| Default | `export default function Button() {}` | `import Button from './Button.js';` |\n| Named | `export function Button() {}` | `import { Button } from './Button.js';` |\n\nWhen you write a _default_ import, you can put any name you want after `import`. For example, you could write `import Banana from './Button.js'` instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That’s why they are called _named_ imports!\n\n**People often use default exports if the file exports only one component, and use named exports if it exports multiple components and values.** Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like `export default () => {}`, are discouraged because they make debugging harder..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I exporting and importing multiple components from the same file in react-learn?\n\nAssistant: To exporting and importing multiple components from the same file in react-learn, here's what you do:\nWhat if you want to show just one `Profile` instead of a gallery? You can export the `Profile` component, too. But `Gallery.js` already has a _default_ export, and you can’t have _two_ default exports. You could create a new file with a default export, or you could add a _named_ export for `Profile`. **A file can only have one default export, but it can have numerous named exports!**\n\n### Note\n\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!\n\nFirst, **export** `Profile` from `Gallery.js` using a named export (no `default` keyword):\n\n```javascript\nexport function Profile() {\n  // ...\n}\n```\n\nThen, **import** `Profile` from `Gallery.js` to `App.js` using a named import (with the curly braces):\n\n```javascript\nimport { Profile } from './Gallery.js';\n```\n\nFinally, **render** `<Profile />` from the `App` component:\n\n```javascript\nexport default function App() {\n  return <Profile />;\n}\n```\n\nNow `Gallery.js` contains two exports: a default `Gallery` export, and a named `Profile` export. `App.js` imports both of them. Try editing `<Profile />` to `<Gallery />` and back in this example..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\nOn this page you learned:\n- What a root component file is\n- How to import and export a component\n- When and how to use default and named imports and exports\n- How to export multiple components from the same file.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n#### Challenge1 of1:   Split the components further\nCurrently, `Gallery.js` exports both `Profile` and `Gallery`, which is a bit confusing.\n\nMove the `Profile` component to its own `Profile.js`, and then change the `App` component to render both `<Profile />` and `<Gallery />` one after another.\n\nYou may use either a default or a named export for `Profile`, but make sure that you use the corresponding import syntax in both `App.js` and `Gallery.js`! You can refer to the table from the deep dive above:\n\n| Syntax | Export statement | Import statement |\n| --- | --- | --- |\n| Default | `export default function Button() {}` | `import Button from './Button.js';` |\n| Named | `export function Button() {}` | `import { Button } from './Button.js';` |.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Importing and Exporting Components in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Profile Component**:\n\n```yaml\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\nThis snippet shows you how to profile component, which is an important aspect of importing and exporting components.\n\n", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "code_examples", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Importing and Exporting Components in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways give meaningful names to your component functions and the files that contain them.\n\nComponents without names, like `export default () => {}`, are discouraged because they make debugging harder.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/importing-and-exporting-components", "title": "Importing and Exporting Components", "description": "This page covers how to import and export components in React, including the use of default and named exports, and how to structure components across multiple files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:48:21", "type": "best_practices", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/importing-and-exporting-components", "ogUrl": "https://react.dev/learn/importing-and-exporting-components", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "18", "ogTitle": "Importing and Exporting Components – React", "title": "Importing and Exporting Components – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:title": "Importing and Exporting Components – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Importing and Exporting Components – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "035909a0-4340-4ec1-a1a0-ab6ca3daf1d9", "sourceURL": "https://react.dev/learn/importing-and-exporting-components", "url": "https://react.dev/learn/importing-and-exporting-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Writing Markup with JSX is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Writing Markup with JSX in react-learn.\n\n# Writing Markup with JSX\n\nJSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- Why React mixes markup with rendering logic\n- How JSX is different from HTML\n- How to display information with JSX\n\n## JSX: Putting markup into JavaScript\n\nThe Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files! Content was marked up inside HTML while the page’s logic lived separately in JavaScript:\n\nBut as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why **in React, rendering logic and markup live together in the same place—components.**\n\nKeeping a button’s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button’s markup and a sidebar’s markup, are isolated from each other, making it safer to change either of them on their own.\n\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.\n\n## Converting HTML to JSX\n\nSuppose that you have some (perfectly valid) HTML:\n\n```html\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n  src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n  alt=\"Hedy Lamarr\"\n  class=\"photo\"\n>\n\n<ul>\n    <li>Invent new traffic lights\n    <li>Rehearse a movie scene\n    <li>Improve the spectrum technology\n</ul>\n```\n\nAnd you want to put it into your component:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // ???\n  )\n}\n```\n\nIf you copy and paste it as is, it will not work:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img\n      src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n      alt=\"Hedy Lamarr\"\n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve the spectrum technology\n    </ul>\n  )\n}\n```\n\nThis is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they’ll guide you to fix the markup, or you can follow the guide below.\n\n## The Rules of JSX\n\n### 1. Return a single root element\nTo return multiple elements from a component, **wrap them with a single parent tag.**\n\nFor example, you can use a `<div>`:\n\n```html\n<div>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img\n    src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n    alt=\"Hedy Lamarr\"\n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</div>\n```\n\nIf you don’t want to add an extra `<div>` to your markup, you can write `<>` and `</>` instead:\n\n```html\n<>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img\n    src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n    alt=\"Hedy Lamarr\"\n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</>\n```\n\nThis empty tag is called a _[Fragment.]_ Fragments let you group things without leaving any trace in the browser HTML tree.\n\n### 2. Close all the tags\nJSX requires tags to be explicitly closed: self-closing tags like `<img>` must become `<img />`, and wrapping tags like `<li>oranges` must be written as `<li>oranges</li>`.\n\n### 3. camelCase ~~all~~ most of the things!\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like `class`.\n\n## Recap\n\nNow you know why JSX exists and how to use it in components:\n- React components group rendering logic together with markup because they are related.\n- JSX is similar to HTML, with a few differences. You can use a [converter](https://transform.tools/html-to-jsx) if you need to.\n- Error messages will often point you in the right direction to fixing your markup.\n\n## Try out some challenges\n\nChallenge1 of1:   Convert some HTML to JSX. This HTML was pasted into a component, but it’s not valid JSX. Fix it:\n\n```javascript\nexport default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "overview", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- Why React mixes markup with rendering logic\n- How JSX is different from HTML\n- How to display information with JSX.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I jsx: putting markup into javascript in react-learn?\n\nAssistant: To jsx: putting markup into javascript in react-learn, here's what you do:\nThe Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files! Content was marked up inside HTML while the page’s logic lived separately in JavaScript:\n\nBut as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why **in React, rendering logic and markup live together in the same place—components.**\n\nKeeping a button’s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button’s markup and a sidebar’s markup, are isolated from each other, making it safer to change either of them on their own.\n\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I converting html to jsx in react-learn?\n\nAssistant: To converting html to jsx in react-learn, here's what you do:\nSuppose that you have some (perfectly valid) HTML:\n\n```html\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n  src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n  alt=\"Hedy Lamarr\"\n  class=\"photo\"\n>\n\n<ul>\n    <li>Invent new traffic lights\n    <li>Rehearse a movie scene\n    <li>Improve the spectrum technology\n</ul>\n```\n\nAnd you want to put it into your component:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // ???\n  )\n}\n```\n\nIf you copy and paste it as is, it will not work:\n\n```javascript\nexport default function TodoList() {\n  return (\n    // This doesn't quite work!\n    <h1>Hedy Lamarr's Todos</h1>\n    <img\n      src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n      alt=\"Hedy Lamarr\"\n      class=\"photo\"\n    >\n    <ul>\n      <li>Invent new traffic lights\n      <li>Rehearse a movie scene\n      <li>Improve the spectrum technology\n    </ul>\n  )\n}\n```\n\nThis is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they’ll guide you to fix the markup, or you can follow the guide below..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the rules of jsx in react-learn?\n\nAssistant: To the rules of jsx in react-learn, here's what you do:\n### 1. Return a single root element\nTo return multiple elements from a component, **wrap them with a single parent tag.**\n\nFor example, you can use a `<div>`:\n\n```html\n<div>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img\n    src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n    alt=\"Hedy Lamarr\"\n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</div>\n```\n\nIf you don’t want to add an extra `<div>` to your markup, you can write `<>` and `</>` instead:\n\n```html\n<>\n  <h1>Hedy Lamarr's Todos</h1>\n  <img\n    src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n    alt=\"Hedy Lamarr\"\n    class=\"photo\"\n  >\n  <ul>\n    ...\n  </ul>\n</>\n```\n\nThis empty tag is called a _[Fragment.]_ Fragments let you group things without leaving any trace in the browser HTML tree.\n\n### 2. Close all the tags\nJSX requires tags to be explicitly closed: self-closing tags like `<img>` must become `<img />`, and wrapping tags like `<li>oranges` must be written as `<li>oranges</li>`.\n\n### 3. camelCase ~~all~~ most of the things!\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like `class`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\nNow you know why JSX exists and how to use it in components:\n- React components group rendering logic together with markup because they are related.\n- JSX is similar to HTML, with a few differences. You can use a [converter](https://transform.tools/html-to-jsx) if you need to.\n- Error messages will often point you in the right direction to fixing your markup..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\nChallenge1 of1:   Convert some HTML to JSX. This HTML was pasted into a component, but it’s not valid JSX. Fix it:\n\n```javascript\nexport default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "section_detail", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Writing Markup with JSX in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Converting HTML to JSX Example**:\n\n```yaml\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img\n        src=\"https://i.imgur.com/yXOvdOSs.jpg\"\n        alt=\"Hedy Lamarr\"\n        className=\"photo\"\n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve the spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to converting html to jsx example, which is an important aspect of writing markup with jsx.\n\n", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "code_examples", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Writing Markup with JSX in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nJSX and React are two separate things. They’re often used together, but you can use them independently of each other.\n\nMost of the time, React’s on-screen error messages will help you find where the problem is. Give them a read if you get stuck!\n\nFor historical reasons, aria-* and data-* attributes are written as in HTML with dashes.\n\nUse a JSX Converter to translate your existing HTML and SVG to JSX.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/writing-markup-with-jsx", "title": "Writing Markup with JSX", "description": "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:59:10", "type": "best_practices", "page_metadata": {"og:type": "website", "og:url": "https://react.dev/learn/writing-markup-with-jsx", "language": "en", "fb:app_id": "623268441017527", "og:title": "Writing Markup with JSX – React", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Writing Markup with JSX – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Writing Markup with JSX – React", "twitter:title": "Writing Markup with JSX – React", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "19", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/learn/writing-markup-with-jsx", "og:description": "The library for web and native user interfaces", "scrapeId": "577d7810-e81a-496b-9d33-611fcaa5bdb7", "sourceURL": "https://react.dev/learn/writing-markup-with-jsx", "url": "https://react.dev/learn/writing-markup-with-jsx", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Preserving and Resetting State is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Preserving and Resetting State in react-learn.\n\n# Preserving and Resetting State\n\nThis page covers how React manages state between components, including when to preserve or reset state during re-renders.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- When React chooses to preserve or reset the state\n- How to force React to reset component’s state\n- How keys and types affect whether the state is preserved\n\n## State is tied to a position in the render tree\n\nReact builds render trees for the component structure in your UI. When you give a component state, you might think the state “lives” inside the component. But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree. Here, there is only one <Counter /> JSX tag, but it’s rendered at two different positions.\n\n## React tree\n\nThese are two separate counters because each is rendered at its own position in the tree. You don’t usually have to think about these positions to use React, but it can be useful to understand how it works. In React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.\n\n## Updating state\n\nReact will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking “Render the second counter” checkbox, and then add it back by ticking it again.\n\n## Deleting a component\n\nWhen you tick “Render the second counter”, a second Counter and its state are initialized from scratch ( score = 0) and added to the DOM.\n\n## Same component at the same position preserves state\n\nIn this example, there are two different <Counter /> tags. When you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false, you always have a <Counter /> as the first child of the div returned from the root App component.\n\n## Pitfall\n\nRemember that it’s the position in the UI tree—not in the JSX markup—that matters to React! This component has two return clauses with different <Counter /> JSX tags inside and outside the if.\n\n## Different components at the same position reset state\n\nIn this example, ticking the checkbox will replace <Counter> with a <p>. Here, you switch between different component types at the same position.\n\n## Resetting state at the same position\n\nBy default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component’s state.\n\n## Option 1: Rendering a component in different positions\n\nIf you want these two Counters to be independent, you can render them in two different positions.\n\n## Option 2: Resetting state with a key\n\nYou might have seen keys when rendering lists. Keys aren’t just for lists! You can use keys to make React distinguish between any components.\n\n## Resetting a form with a key\n\nResetting state with a key is particularly useful when dealing with forms.\n\n## Deep Dive\n\nIn a real chat app, you’d probably want to recover the input state when the user selects the previous recipient again.\n\n## Recap\n\n- React keeps state for as long as the same component is rendered at the same position.\n- State is not kept in JSX tags. It’s associated with the tree position in which you put that JSX.\n- You can force a subtree to reset its state by giving it a different key.\n- Don’t nest component definitions, or you’ll reset state by accident.\n\n## Try out some challenges\n\n1. Fix disappearing input text 2. Swap two form fields 3. Reset a detail form 4. Clear an image while it’s loading 5. Fix misplaced state in the list\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- When React chooses to preserve or reset the state\n- How to force React to reset component’s state\n- How keys and types affect whether the state is preserved.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I state is tied to a position in the render tree in react-learn?\n\nAssistant: To state is tied to a position in the render tree in react-learn, here's what you do:\nReact builds render trees for the component structure in your UI. When you give a component state, you might think the state “lives” inside the component. But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree. Here, there is only one <Counter /> JSX tag, but it’s rendered at two different positions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react tree in react-learn?\n\nAssistant: To react tree in react-learn, here's what you do:\nThese are two separate counters because each is rendered at its own position in the tree. You don’t usually have to think about these positions to use React, but it can be useful to understand how it works. In React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating state in react-learn?\n\nAssistant: To updating state in react-learn, here's what you do:\nReact will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking “Render the second counter” checkbox, and then add it back by ticking it again..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deleting a component in react-learn?\n\nAssistant: To deleting a component in react-learn, here's what you do:\nWhen you tick “Render the second counter”, a second Counter and its state are initialized from scratch ( score = 0) and added to the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I same component at the same position preserves state in react-learn?\n\nAssistant: To same component at the same position preserves state in react-learn, here's what you do:\nIn this example, there are two different <Counter /> tags. When you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false, you always have a <Counter /> as the first child of the div returned from the root App component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nRemember that it’s the position in the UI tree—not in the JSX markup—that matters to React! This component has two return clauses with different <Counter /> JSX tags inside and outside the if..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I different components at the same position reset state in react-learn?\n\nAssistant: To different components at the same position reset state in react-learn, here's what you do:\nIn this example, ticking the checkbox will replace <Counter> with a <p>. Here, you switch between different component types at the same position..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I resetting state at the same position in react-learn?\n\nAssistant: To resetting state at the same position in react-learn, here's what you do:\nBy default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component’s state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I option 1: rendering a component in different positions in react-learn?\n\nAssistant: To option 1: rendering a component in different positions in react-learn, here's what you do:\nIf you want these two Counters to be independent, you can render them in two different positions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I option 2: resetting state with a key in react-learn?\n\nAssistant: To option 2: resetting state with a key in react-learn, here's what you do:\nYou might have seen keys when rendering lists. Keys aren’t just for lists! You can use keys to make React distinguish between any components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I resetting a form with a key in react-learn?\n\nAssistant: To resetting a form with a key in react-learn, here's what you do:\nResetting state with a key is particularly useful when dealing with forms..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nIn a real chat app, you’d probably want to recover the input state when the user selects the previous recipient again..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- React keeps state for as long as the same component is rendered at the same position.\n- State is not kept in JSX tags. It’s associated with the tree position in which you put that JSX.\n- You can force a subtree to reset its state by giving it a different key.\n- Don’t nest component definitions, or you’ll reset state by accident..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Fix disappearing input text 2. Swap two form fields 3. Reset a detail form 4. Clear an image while it’s loading 5. Fix misplaced state in the list.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Preserving and Resetting State in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter Component Example**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function App() {\n  const counter = <Counter />;\n  return (\n    <div>\n      {counter}\n      {counter}\n    </div>\n  );\n}\n\nfunction Counter() {\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n\n  let className = 'counter';\n  if (hover) {\n    className += ' hover';\n  }\n\n  return (\n    <div\n      className={className}\n      onPointerEnter={() => setHover(true)}\n      onPointerLeave={() => setHover(false)}\n    >\n      <h1>{score}</h1>\n      <button onClick={() => setScore(score + 1)}>\n        Add one\n      </button>\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to counter component example, which is an important aspect of preserving and resetting state.\n\n", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Preserving and Resetting State in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways declare component functions at the top level, and don’t nest their definitions.\n\nIf you want to preserve the state between re-renders, the structure of your tree needs to match up from one render to another.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "description": "This page covers how React manages state between components, including when to preserve or reset state during re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 01:59:36", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogTitle": "Preserving and Resetting State – React", "og:url": "https://react.dev/learn/preserving-and-resetting-state", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Preserving and Resetting State – React", "theme-color": "#23272f", "og:title": "Preserving and Resetting State – React", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/learn/preserving-and-resetting-state", "fb:app_id": "623268441017527", "title": "Preserving and Resetting State – React", "algolia-search-order": "38", "og:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "1da25cf0-8a4f-4499-8a69-b209b4dedfbb", "sourceURL": "https://react.dev/learn/preserving-and-resetting-state", "url": "https://react.dev/learn/preserving-and-resetting-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Passing Props to a Component is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Passing Props to a Component in react-learn.\n\n# Passing Props to a Component\n\nLearn how to pass props to React components, read them, specify default values, and understand how props change over time.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to pass props to a component\n- How to read props from a component\n- How to specify default values for props\n- How to pass some JSX to a component\n- How props change over time\n\n## Familiar props\n\nProps are the information that you pass to a JSX tag. For example, `className`, `src`, `alt`, `width`, and `height` are some of the props you can pass to an `<img>`:\n\n```javascript\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/1bX5QH6.jpg\"\n      alt=\"Lin Lanying\"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\nThe props you can pass to an `<img>` tag are predefined (ReactDOM conforms to [the HTML standard](https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element)). But you can pass any props to _your own_ components, such as `<Avatar>`, to customize them.\n\n## Passing props to a component\n\nIn this code, the `Profile` component isn’t passing any props to its child component, `Avatar`:\n\n```javascript\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\nYou can give `Avatar` some props in two steps.\n\n## Step 1: Pass props to the child component\n\nFirst, pass some props to `Avatar`. For example, let’s pass two props: `person` (an object), and `size` (a number):\n\n```javascript\nexport default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}\n```\n\n### Note\n\nIf double curly braces after `person=` confuse you, recall [they’re merely an object](https://react.dev/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx) inside the JSX curlies.\n\n## Step 2: Read props inside the child component\n\nYou can read these props by listing their names `person, size` separated by the commas inside `({` and `})` directly after `function Avatar`. This lets you use them inside the `Avatar` code, like you would with a variable.\n\n```javascript\nfunction Avatar({ person, size }) {\n  // person and size are available here\n}\n```\n\nAdd some logic to `Avatar` that uses the `person` and `size` props for rendering, and you’re done.\n\n## Specifying a default value for a prop\n\nIf you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting `=` and the default value right after the parameter:\n\n```javascript\nfunction Avatar({ person, size = 100 }) {\n  // ...\n}\n```\n\nNow, if `<Avatar person={...} />` is rendered with no `size` prop, the `size` will be set to `100`.\n\n## Forwarding props with the JSX spread syntax\n\nSometimes, passing props gets very repetitive:\n\n```javascript\nfunction Profile({ person, size, isSepia, thickBorder }) {\n  return (\n    <div className=\"card\">\n      <Avatar\n        person={person}\n        size={size}\n        isSepia={isSepia}\n        thickBorder={thickBorder}\n      />\n    </div>\n  );\n}\n```\n\nThere’s nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this `Profile` does with `Avatar`. Because they don’t use any of their props directly, it can make sense to use a more concise “spread” syntax:\n\n```javascript\nfunction Profile(props) {\n  return (\n    <div className=\"card\">\n      <Avatar {...props} />\n    </div>\n  );\n}\n```\n\nThis forwards all of `Profile`’s props to the `Avatar` without listing each of their names.\n\n## Passing JSX as children\n\nIt is common to nest built-in browser tags:\n\n```javascript\n<div>\n  <img />\n</div>\n```\n\nSometimes you’ll want to nest your own components the same way:\n\n```javascript\n<Card>\n  <Avatar />\n</Card>\n```\n\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called `children`. For example, the `Card` component below will receive a `children` prop set to `<Avatar />` and render it in a wrapper div:\n\n```javascript\nimport Avatar from './Avatar.js';\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n```\n\nTry replacing the `<Avatar>` inside `<Card>` with some text to see how the `Card` component can wrap any nested content.\n\n## How props change over time\n\nThe `Clock` component below receives two props from its parent component: `color` and `time`.\n\n```javascript\nexport default function Clock({ color, time }) {\n  return (\n    <h1 style={{ color: color }}>\n      {time}\n    </h1>\n  );\n}\n```\n\nThis example illustrates that **a component may receive different props over time.** Props are not always static!\n\n## Recap\n\n- To pass props, add them to the JSX, just like you would with HTML attributes.\n- To read props, use the `function Avatar({ person, size })` destructuring syntax.\n- You can specify a default value like `size = 100`, which is used for missing and `undefined` props.\n- You can forward all props with `<Avatar {...props} />` JSX spread syntax, but don’t overuse it!\n- Nested JSX like `<Card><Avatar /></Card>` will appear as `Card` component’s `children` prop.\n- Props are read-only snapshots in time: every render receives a new version of props.\n- You can’t change props. When you need interactivity, you’ll need to set state.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to pass props to a component\n- How to read props from a component\n- How to specify default values for props\n- How to pass some JSX to a component\n- How props change over time.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I familiar props in react-learn?\n\nAssistant: To familiar props in react-learn, here's what you do:\nProps are the information that you pass to a JSX tag. For example, `className`, `src`, `alt`, `width`, and `height` are some of the props you can pass to an `<img>`:\n\n```javascript\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/1bX5QH6.jpg\"\n      alt=\"Lin Lanying\"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\nThe props you can pass to an `<img>` tag are predefined (ReactDOM conforms to [the HTML standard](https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element)). But you can pass any props to _your own_ components, such as `<Avatar>`, to customize them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing props to a component in react-learn?\n\nAssistant: To passing props to a component in react-learn, here's what you do:\nIn this code, the `Profile` component isn’t passing any props to its child component, `Avatar`:\n\n```javascript\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\nYou can give `Avatar` some props in two steps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: pass props to the child component in react-learn?\n\nAssistant: To step 1: pass props to the child component in react-learn, here's what you do:\nFirst, pass some props to `Avatar`. For example, let’s pass two props: `person` (an object), and `size` (a number):\n\n```javascript\nexport default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}\n```\n\n### Note\n\nIf double curly braces after `person=` confuse you, recall [they’re merely an object](https://react.dev/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx) inside the JSX curlies..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: read props inside the child component in react-learn?\n\nAssistant: To step 2: read props inside the child component in react-learn, here's what you do:\nYou can read these props by listing their names `person, size` separated by the commas inside `({` and `})` directly after `function Avatar`. This lets you use them inside the `Avatar` code, like you would with a variable.\n\n```javascript\nfunction Avatar({ person, size }) {\n  // person and size are available here\n}\n```\n\nAdd some logic to `Avatar` that uses the `person` and `size` props for rendering, and you’re done..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I specifying a default value for a prop in react-learn?\n\nAssistant: To specifying a default value for a prop in react-learn, here's what you do:\nIf you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting `=` and the default value right after the parameter:\n\n```javascript\nfunction Avatar({ person, size = 100 }) {\n  // ...\n}\n```\n\nNow, if `<Avatar person={...} />` is rendered with no `size` prop, the `size` will be set to `100`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I forwarding props with the jsx spread syntax in react-learn?\n\nAssistant: To forwarding props with the jsx spread syntax in react-learn, here's what you do:\nSometimes, passing props gets very repetitive:\n\n```javascript\nfunction Profile({ person, size, isSepia, thickBorder }) {\n  return (\n    <div className=\"card\">\n      <Avatar\n        person={person}\n        size={size}\n        isSepia={isSepia}\n        thickBorder={thickBorder}\n      />\n    </div>\n  );\n}\n```\n\nThere’s nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this `Profile` does with `Avatar`. Because they don’t use any of their props directly, it can make sense to use a more concise “spread” syntax:\n\n```javascript\nfunction Profile(props) {\n  return (\n    <div className=\"card\">\n      <Avatar {...props} />\n    </div>\n  );\n}\n```\n\nThis forwards all of `Profile`’s props to the `Avatar` without listing each of their names..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing jsx as children in react-learn?\n\nAssistant: To passing jsx as children in react-learn, here's what you do:\nIt is common to nest built-in browser tags:\n\n```javascript\n<div>\n  <img />\n</div>\n```\n\nSometimes you’ll want to nest your own components the same way:\n\n```javascript\n<Card>\n  <Avatar />\n</Card>\n```\n\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called `children`. For example, the `Card` component below will receive a `children` prop set to `<Avatar />` and render it in a wrapper div:\n\n```javascript\nimport Avatar from './Avatar.js';\n\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{\n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n```\n\nTry replacing the `<Avatar>` inside `<Card>` with some text to see how the `Card` component can wrap any nested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how props change over time in react-learn?\n\nAssistant: To how props change over time in react-learn, here's what you do:\nThe `Clock` component below receives two props from its parent component: `color` and `time`.\n\n```javascript\nexport default function Clock({ color, time }) {\n  return (\n    <h1 style={{ color: color }}>\n      {time}\n    </h1>\n  );\n}\n```\n\nThis example illustrates that **a component may receive different props over time.** Props are not always static!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- To pass props, add them to the JSX, just like you would with HTML attributes.\n- To read props, use the `function Avatar({ person, size })` destructuring syntax.\n- You can specify a default value like `size = 100`, which is used for missing and `undefined` props.\n- You can forward all props with `<Avatar {...props} />` JSX spread syntax, but don’t overuse it!\n- Nested JSX like `<Card><Avatar /></Card>` will appear as `Card` component’s `children` prop.\n- Props are read-only snapshots in time: every render receives a new version of props.\n- You can’t change props. When you need interactivity, you’ll need to set state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Passing Props to a Component in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Avatar Component Example**:\n\n```yaml\nfunction Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/1bX5QH6.jpg\"\n      alt=\"Lin Lanying\"\n      width={100}\n      height={100}\n    />\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Avatar />\n  );\n}\n```\n\nThis snippet shows you how to avatar component example, which is an important aspect of passing props to a component.\n\n", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Passing Props to a Component in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse destructuring to read props for cleaner code.\n\nSpecify default values for props to avoid undefined errors.\n\nUse spread syntax with restraint to maintain code clarity.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/passing-props-to-a-component", "title": "Passing Props to a Component", "description": "Learn how to pass props to React components, read them, specify default values, and understand how props change over time.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:03:28", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Passing Props to a Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "21", "og:url": "https://react.dev/learn/passing-props-to-a-component", "twitter:title": "Passing Props to a Component – React", "theme-color": "#23272f", "og:title": "Passing Props to a Component – React", "title": "Passing Props to a Component – React", "language": "en", "ogUrl": "https://react.dev/learn/passing-props-to-a-component", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "scrapeId": "04abb935-0d52-4488-bc7d-5c89722ed502", "sourceURL": "https://react.dev/learn/passing-props-to-a-component", "url": "https://react.dev/learn/passing-props-to-a-component", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Creating a React App is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Creating a React App in react-learn.\n\n# Creating a React App\n\nThis page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.Here's a quick rundown of what this is about:\n\n## Full-stack frameworks\n\nThese recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React’s architecture.\n\n### Note\n\n#### Full-stack frameworks do not require a server.\n\nAll the frameworks on this page support client-side rendering (CSR), single-page apps (SPA), and static-site generation (SSG). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case.\n\nThis allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework’s documentation for configuring the rendering strategy.\n\n## Next.js (App Router)\n\nNext.js’s App Router is a React framework that takes full advantage of React’s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server. Vercel additionally provides opt-in paid cloud services.\n\n## React Router (v7)\n\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework. It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms.\n\n## Expo (for native apps)\n\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions.\n\n## Other frameworks\n\nThere are other up-and-coming frameworks that are working towards our full stack React vision:\n\n- TanStack Start (Beta): TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n- RedwoodJS: Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications.\n\n## Deep Dive\n\nNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components.\n\n## Start From Scratch\n\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "overview", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I full-stack frameworks in react-learn?\n\nAssistant: To full-stack frameworks in react-learn, here's what you do:\nThese recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React’s architecture.\n\n### Note\n\n#### Full-stack frameworks do not require a server.\n\nAll the frameworks on this page support client-side rendering (CSR), single-page apps (SPA), and static-site generation (SSG). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case.\n\nThis allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework’s documentation for configuring the rendering strategy..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I next.js (app router) in react-learn?\n\nAssistant: To next.js (app router) in react-learn, here's what you do:\nNext.js’s App Router is a React framework that takes full advantage of React’s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server. Vercel additionally provides opt-in paid cloud services..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react router (v7) in react-learn?\n\nAssistant: To react router (v7) in react-learn, here's what you do:\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework. It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I expo (for native apps) in react-learn?\n\nAssistant: To expo (for native apps) in react-learn, here's what you do:\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I other frameworks in react-learn?\n\nAssistant: To other frameworks in react-learn, here's what you do:\nThere are other up-and-coming frameworks that are working towards our full stack React vision:\n\n- TanStack Start (Beta): TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n- RedwoodJS: Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I start from scratch in react-learn?\n\nAssistant: To start from scratch in react-learn, here's what you do:\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Creating a React App in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a Next.js app**:\n\n```yaml\nnpx create-next-app@latest\n```\n\nThis snippet shows you how to create a next.js app, which is an important aspect of creating a react app.\n\n**Create a React Router project**:\n\n```yaml\nnpx create-react-router@latest\n```\n\nThis snippet shows you how to create a react router project, which is an important aspect of creating a react app.\n\n**Create an Expo project**:\n\n```yaml\nnpx create-expo-app@latest\n```\n\nThis snippet shows you how to create an expo project, which is an important aspect of creating a react app.\n\n**Server-only React component example**:\n\n```yaml\nasync function Talks({ confId }) {\n  const talks = await db.Talks.findAll({ confId });\n  const videos = talks.map(talk => talk.video);\n  return <SearchableVideoList videos={videos} />;\n}\n```\n\nThis snippet shows you how to server-only react component example, which is an important aspect of creating a react app.\n\n", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "code_examples", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Creating a React App in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider using a full-stack framework for deploying and scaling your app in production.\n\nIf you want to learn the basics of a React app, consider building from scratch.\n\nCheck your framework’s documentation for configuring the rendering strategy.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/start-a-new-react-project", "title": "Creating a React App", "description": "This page provides guidance on how to create a new app or website with React, including recommended frameworks and options for building from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:03:50", "type": "best_practices", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "ogTitle": "Creating a React App – React", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "og:title": "Creating a React App – React", "og:image": "https://react.dev/images/og-learn.png", "title": "Creating a React App – React", "ogUrl": "https://react.dev/learn/creating-a-react-app", "ogImage": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "algolia-search-order": "7", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "og:type": "website", "og:url": "https://react.dev/learn/creating-a-react-app", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Creating a React App – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "scrapeId": "5217f223-0c31-41d9-937a-1f6d7ee0b8aa", "sourceURL": "https://react.dev/learn/start-a-new-react-project", "url": "https://react.dev/learn/creating-a-react-app", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Reacting to Input with State is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Reacting to Input with State in react-learn.\n\n# Reacting to Input with State\n\nThis section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How declarative UI programming differs from imperative UI programming\n- How to enumerate the different visual states your component can be in\n- How to trigger the changes between the different visual states from code\n\n## How declarative UI compares to imperative\n\nWhen you design UI interactions, you probably think about how the UI _changes_ in response to user actions. Consider a form that lets the user submit an answer:\n\n- When you type something into the form, the “Submit” button **becomes enabled.**\n- When you press “Submit”, both the form and the button **become disabled,** and a spinner **appears.**\n- If the network request succeeds, the form **gets hidden,** and the “Thank you” message **appears.**\n- If the network request fails, an error message **appears,** and the form **becomes enabled** again.\n\nIn **imperative programming,** the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here’s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.\n\n## Thinking about UI declaratively\n\nYou’ve seen how to implement a form imperatively above. To better understand how to think in React, you’ll walk through reimplementing this UI in React below:\n\n1. **Identify** your component’s different visual states\n2. **Determine** what triggers those state changes\n3. **Represent** the state in memory using `useState`\n4. **Remove** any non-essential state variables\n5. **Connect** the event handlers to set the state\n\n## Step 1: Identify your component’s different visual states\n\nIn computer science, you may hear about a [“state machine”](https://en.wikipedia.org/wiki/Finite-state_machine) being in one of several “states”. If you work with a designer, you may have seen mockups for different “visual states”. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\n\nFirst, you need to visualize all the different “states” of the UI the user might see:\n\n- **Empty**: Form has a disabled “Submit” button.\n- **Typing**: Form has an enabled “Submit” button.\n- **Submitting**: Form is completely disabled. Spinner is shown.\n- **Success**: “Thank you” message is shown instead of a form.\n- **Error**: Same as Typing state, but with an extra error message.\n\n## Step 2: Determine what triggers those state changes\n\nYou can trigger state updates in response to two kinds of inputs:\n\n- **Human inputs,** like clicking a button, typing in a field, navigating a link.\n- **Computer inputs,** like a network response arriving, a timeout completing, an image loading.\n\n## Step 3: Represent the state in memory with `useState`\n\nNext you’ll need to represent the visual states of your component in memory with [`useState`](https://react.dev/reference/react/useState). Simplicity is key: each piece of state is a “moving piece”, and **you want as few “moving pieces” as possible.** More complexity leads to more bugs!\n\n## Step 4: Remove any non-essential state variables\n\nYou want to avoid duplication in the state content so you’re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings.\n\n## Step 5: Connect the event handlers to set state\n\nLastly, create event handlers that update the state. Below is the final form, with all event handlers wired up.\n\n## Recap\n\n- Declarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).\n- When developing a component:\n1. Identify all its visual states.\n2. Determine the human and computer triggers for state changes.\n3. Model the state with `useState`.\n4. Remove non-essential state to avoid bugs and paradoxes.\n5. Connect the event handlers to set state.\n\n## Try out some challenges\n\n1. Add and remove a CSS class 2. Profile editor 3. Refactor the imperative solution without React\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How declarative UI programming differs from imperative UI programming\n- How to enumerate the different visual states your component can be in\n- How to trigger the changes between the different visual states from code.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how declarative ui compares to imperative in react-learn?\n\nAssistant: To how declarative ui compares to imperative in react-learn, here's what you do:\nWhen you design UI interactions, you probably think about how the UI _changes_ in response to user actions. Consider a form that lets the user submit an answer:\n\n- When you type something into the form, the “Submit” button **becomes enabled.**\n- When you press “Submit”, both the form and the button **become disabled,** and a spinner **appears.**\n- If the network request succeeds, the form **gets hidden,** and the “Thank you” message **appears.**\n- If the network request fails, an error message **appears,** and the form **becomes enabled** again.\n\nIn **imperative programming,** the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here’s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I thinking about ui declaratively in react-learn?\n\nAssistant: To thinking about ui declaratively in react-learn, here's what you do:\nYou’ve seen how to implement a form imperatively above. To better understand how to think in React, you’ll walk through reimplementing this UI in React below:\n\n1. **Identify** your component’s different visual states\n2. **Determine** what triggers those state changes\n3. **Represent** the state in memory using `useState`\n4. **Remove** any non-essential state variables\n5. **Connect** the event handlers to set the state.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: identify your component’s different visual states in react-learn?\n\nAssistant: To step 1: identify your component’s different visual states in react-learn, here's what you do:\nIn computer science, you may hear about a [“state machine”](https://en.wikipedia.org/wiki/Finite-state_machine) being in one of several “states”. If you work with a designer, you may have seen mockups for different “visual states”. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\n\nFirst, you need to visualize all the different “states” of the UI the user might see:\n\n- **Empty**: Form has a disabled “Submit” button.\n- **Typing**: Form has an enabled “Submit” button.\n- **Submitting**: Form is completely disabled. Spinner is shown.\n- **Success**: “Thank you” message is shown instead of a form.\n- **Error**: Same as Typing state, but with an extra error message..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: determine what triggers those state changes in react-learn?\n\nAssistant: To step 2: determine what triggers those state changes in react-learn, here's what you do:\nYou can trigger state updates in response to two kinds of inputs:\n\n- **Human inputs,** like clicking a button, typing in a field, navigating a link.\n- **Computer inputs,** like a network response arriving, a timeout completing, an image loading..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: represent the state in memory with `usestate` in react-learn?\n\nAssistant: To step 3: represent the state in memory with `usestate` in react-learn, here's what you do:\nNext you’ll need to represent the visual states of your component in memory with [`useState`](https://react.dev/reference/react/useState). Simplicity is key: each piece of state is a “moving piece”, and **you want as few “moving pieces” as possible.** More complexity leads to more bugs!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 4: remove any non-essential state variables in react-learn?\n\nAssistant: To step 4: remove any non-essential state variables in react-learn, here's what you do:\nYou want to avoid duplication in the state content so you’re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 5: connect the event handlers to set state in react-learn?\n\nAssistant: To step 5: connect the event handlers to set state in react-learn, here's what you do:\nLastly, create event handlers that update the state. Below is the final form, with all event handlers wired up..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Declarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).\n- When developing a component:\n1. Identify all its visual states.\n2. Determine the human and computer triggers for state changes.\n3. Model the state with `useState`.\n4. Remove non-essential state to avoid bugs and paradoxes.\n5. Connect the event handlers to set state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Add and remove a CSS class 2. Profile editor 3. Refactor the imperative solution without React.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Reacting to Input with State in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Imperative Form Example**:\n\n```yaml\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n  disable(textarea);\n  disable(button);\n  show(loadingMessage);\n  hide(errorMessage);\n  try {\n    await submitForm(textarea.value);\n    show(successMessage);\n    hide(form);\n  } catch (err) {\n    show(errorMessage);\n    errorMessage.textContent = err.message;\n  } finally {\n    hide(loadingMessage);\n    enable(textarea);\n    enable(button);\n  }\n}\n\nfunction handleTextareaChange() {\n  if (textarea.value.length === 0) {\n    disable(button);\n  } else {\n    enable(button);\n  }\n}\n\nfunction hide(el) {\n  el.style.display = 'none';\n}\n\nfunction show(el) {\n  el.style.display = '';\n}\n\nfunction enable(el) {\n  el.disabled = false;\n}\n\nfunction disable(el) {\n  el.disabled = true;\n}\n\nfunction submitForm(answer) {\n  // Pretend it's hitting the network.\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (answer.toLowerCase() === 'istanbul') {\n        resolve();\n      } else {\n        reject(new Error('Good guess but a wrong answer. Try again!'));\n      }\n    }, 1500);\n  });\n}\n```\n\nThis snippet shows you how to imperative form example, which is an important aspect of reacting to input with state.\n\n", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Reacting to Input with State in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIdentify all visual states of your component before implementing logic.\n\nUse `useState` to manage component state effectively.\n\nAvoid unnecessary state variables to reduce complexity and potential bugs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/reacting-to-input-with-state", "title": "Reacting to Input with State", "description": "This section covers how to manage state in React applications, focusing on declarative UI programming and how to respond to user input effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:04:54", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/learn/reacting-to-input-with-state", "viewport": "width=device-width, initial-scale=1", "og:title": "Reacting to Input with State – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Reacting to Input with State – React", "ogTitle": "Reacting to Input with State – React", "og:url": "https://react.dev/learn/reacting-to-input-with-state", "algolia-search-order": "35", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Reacting to Input with State – React", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "4b9f8e07-292c-4f97-a21f-cb389973df3b", "sourceURL": "https://react.dev/learn/reacting-to-input-with-state", "url": "https://react.dev/learn/reacting-to-input-with-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Reusing Logic with Custom Hooks is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Reusing Logic with Custom Hooks in react-learn.\n\n# Reusing Logic with Custom Hooks\n\nThis page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What custom Hooks are, and how to write your own\n- How to reuse logic between components\n- How to name and structure your custom Hooks\n- When and why to extract custom Hooks\n\n## Custom Hooks: Sharing logic between components\n\nImagine you’re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you’ll need two things in your component:\n\n1. A piece of state that tracks whether the network is online.\n2. An Effect that subscribes to the global online and offline events, and updates that state.\n\nThis will keep your component synchronized with the network status. You might start with something like this:\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nexport default function StatusBar() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n```\n\nTry turning your network on and off, and notice how this StatusBar updates in response to your actions.\n\n## Extracting your own custom Hook from a component\n\nImagine for a moment that, similar to useState and useEffect, there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:\n\n```javascript\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n```\n\nAlthough there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:\n\n```javascript\nfunction useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}\n```\n\nAt the end of the function, return isOnline. This lets your components read that value.\n\n## Hook names always start with `use`\n\nReact applications are built from components. Components are built from Hooks, whether built-in or custom. You’ll likely often use custom Hooks created by others, but occasionally you might write one yourself!\n\nYou must follow these naming conventions:\n\n1. **React component names must start with a capital letter,** like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.\n2. **Hook names must start with `use` followed by a capital letter,** like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.\n\n## Note\n\nIf your linter is configured for React, it will enforce this naming convention. Scroll up to the sandbox above and rename useOnlineStatus to getOnlineStatus. Notice that the linter won’t allow you to call useState or useEffect inside of it anymore. Only Hooks and components can call other Hooks!\n\n## Custom Hooks let you share stateful logic, not state itself\n\nIn the earlier example, when you turned the network on and off, both components updated together. However, it’s wrong to think that a single isOnline state variable is shared between them. Look at this code:\n\n```javascript\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n}\n```\n\nThese are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What custom Hooks are, and how to write your own\n- How to reuse logic between components\n- How to name and structure your custom Hooks\n- When and why to extract custom Hooks.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I custom hooks: sharing logic between components in react-learn?\n\nAssistant: To custom hooks: sharing logic between components in react-learn, here's what you do:\nImagine you’re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you’ll need two things in your component:\n\n1. A piece of state that tracks whether the network is online.\n2. An Effect that subscribes to the global online and offline events, and updates that state.\n\nThis will keep your component synchronized with the network status. You might start with something like this:\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nexport default function StatusBar() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n```\n\nTry turning your network on and off, and notice how this StatusBar updates in response to your actions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I extracting your own custom hook from a component in react-learn?\n\nAssistant: To extracting your own custom hook from a component in react-learn, here's what you do:\nImagine for a moment that, similar to useState and useEffect, there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:\n\n```javascript\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n  function handleSaveClick() {\n    console.log('✅ Progress saved');\n  }\n  return (\n    <button disabled={!isOnline} onClick={handleSaveClick}>\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\n    </button>\n  );\n}\n```\n\nAlthough there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:\n\n```javascript\nfunction useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  return isOnline;\n}\n```\n\nAt the end of the function, return isOnline. This lets your components read that value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I hook names always start with `use` in react-learn?\n\nAssistant: To hook names always start with `use` in react-learn, here's what you do:\nReact applications are built from components. Components are built from Hooks, whether built-in or custom. You’ll likely often use custom Hooks created by others, but occasionally you might write one yourself!\n\nYou must follow these naming conventions:\n\n1. **React component names must start with a capital letter,** like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.\n2. **Hook names must start with `use` followed by a capital letter,** like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nIf your linter is configured for React, it will enforce this naming convention. Scroll up to the sandbox above and rename useOnlineStatus to getOnlineStatus. Notice that the linter won’t allow you to call useState or useEffect inside of it anymore. Only Hooks and components can call other Hooks!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I custom hooks let you share stateful logic, not state itself in react-learn?\n\nAssistant: To custom hooks let you share stateful logic, not state itself in react-learn, here's what you do:\nIn the earlier example, when you turned the network on and off, both components updated together. However, it’s wrong to think that a single isOnline state variable is shared between them. Look at this code:\n\n```javascript\nfunction StatusBar() {\n  const isOnline = useOnlineStatus();\n}\n\nfunction SaveButton() {\n  const isOnline = useOnlineStatus();\n}\n```\n\nThese are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Reusing Logic with Custom Hooks in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**StatusBar Component**:\n\n```yaml\nimport { useState, useEffect } from 'react';\n\nexport default function StatusBar() {\n  const [isOnline, setIsOnline] = useState(true);\n  useEffect(() => {\n    function handleOnline() {\n      setIsOnline(true);\n    }\n    function handleOffline() {\n      setIsOnline(false);\n    }\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n}\n```\n\nThis snippet shows you how to statusbar component, which is an important aspect of reusing logic with custom hooks.\n\n", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Reusing Logic with Custom Hooks in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCustom Hooks must be named starting with `use` followed by a capital letter.\n\nCustom Hooks only share stateful logic, not state itself.\n\nWrap event handlers received by custom Hooks into Effect Events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "title": "Reusing Logic with Custom Hooks", "description": "This page covers how to create and use custom hooks in React to share logic between components, including best practices and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:14:02", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "algolia-search-order": "50", "twitter:site": "@reactjs", "ogTitle": "Reusing Logic with Custom Hooks – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "title": "Reusing Logic with Custom Hooks – React", "theme-color": "#23272f", "twitter:title": "Reusing Logic with Custom Hooks – React", "language": "en", "og:title": "Reusing Logic with Custom Hooks – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/learn/reusing-logic-with-custom-hooks", "scrapeId": "160157e3-728a-4aba-9f1f-f548afb1d4dd", "sourceURL": "https://react.dev/learn/reusing-logic-with-custom-hooks", "url": "https://react.dev/learn/reusing-logic-with-custom-hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Add React to an Existing Project is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Add React to an Existing Project in react-learn.\n\n# Add React to an Existing Project\n\nIf you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.Here's a quick rundown of what this is about:\n\n## Using React for an entire subroute of your existing website\n\nLet’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.\n\nHere’s how we recommend to set it up:\n\n1. **Build the React part of your app** using one of the [React-based frameworks](https://react.dev/learn/start-a-new-react-project).\n2. **Specify `/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/app/api-reference/config/next-config-js/basePath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).\n3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.\n\nThis ensures the React part of your app can [benefit from the best practices](https://react.dev/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.\n\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export ( [`next export` output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead.\n\n## Using React for a part of your existing page\n\nLet’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!\n\nYou can do this in two steps:\n\n1. **Set up a JavaScript environment** that lets you use the [JSX syntax](https://react.dev/learn/writing-markup-with-jsx), split your code into modules with the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.\n2. **Render your React components** where you want to see them on the page.\n\nThe exact approach depends on your existing page setup, so let’s walk through some details.\n\n## Step 1: Set up a modular JavaScript environment\n\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:\n\n- **If your app is already split into files that use `import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.\n\n- **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vite.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vite.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.\n\nTo check whether your setup works, run this command in your project folder:\n\nTerminal\n\nCopy\n\nnpm install react react-dom\n\nThen add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):\n\nindex.js\n\nindex.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);\n```\n\nIf the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.\n\n## Step 2: Render React components anywhere on the page\n\nIn the previous step, you put this code at the top of your main file:\n\n```sp-pre-placeholder grow-[2]\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world!</h1>);\n```\n\nOf course, you don’t actually want to clear the existing HTML content!\n\nDelete this code.\n\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:\n\n```sp-pre-placeholder grow-[2]\n<!-- ... somewhere in your html ... -->\n<nav id=\"navigation\"></nav>\n<!-- ... more html ... -->\n```\n\nThis lets you find that HTML element with [`document.getElementById`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) so that you can render your own React component inside:\n\nindex.jsindex.html\n\nindex.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  return <h1>Hello from React!</h1>;\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);\n```\n\nNotice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id=\"navigation\">` from your HTML. Read the [`createRoot` usage documentation](https://react.dev/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.\n\nWhen you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](https://react.dev/learn/start-a-new-react-project) right after to get the most out of React.\n\n## Using React Native in an existing native mobile app\n\n[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using react for an entire subroute of your existing website in react-learn?\n\nAssistant: To using react for an entire subroute of your existing website in react-learn, here's what you do:\nLet’s say you have an existing web app at `example.com` built with another server technology (like Rails), and you want to implement all routes starting with `example.com/some-app/` fully with React.\n\nHere’s how we recommend to set it up:\n\n1. **Build the React part of your app** using one of the [React-based frameworks](https://react.dev/learn/start-a-new-react-project).\n2. **Specify `/some-app` as the _base path_** in your framework’s configuration (here’s how: [Next.js](https://nextjs.org/docs/app/api-reference/config/next-config-js/basePath), [Gatsby](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/)).\n3. **Configure your server or a proxy** so that all requests under `/some-app/` are handled by your React app.\n\nThis ensures the React part of your app can [benefit from the best practices](https://react.dev/learn/start-a-new-react-project#can-i-use-react-without-a-framework) baked into those frameworks.\n\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export ( [`next export` output](https://nextjs.org/docs/advanced-features/static-html-export) for Next.js, default for Gatsby) at `/some-app/` instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using react for a part of your existing page in react-learn?\n\nAssistant: To using react for a part of your existing page in react-learn, here's what you do:\nLet’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!\n\nYou can do this in two steps:\n\n1. **Set up a JavaScript environment** that lets you use the [JSX syntax](https://react.dev/learn/writing-markup-with-jsx), split your code into modules with the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) / [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax, and use packages (for example, React) from the [npm](https://www.npmjs.com/) package registry.\n2. **Render your React components** where you want to see them on the page.\n\nThe exact approach depends on your existing page setup, so let’s walk through some details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: set up a modular javascript environment in react-learn?\n\nAssistant: To step 1: set up a modular javascript environment in react-learn, here's what you do:\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the [npm](https://www.npmjs.com/) registry—including React itself! How you do this depends on your existing setup:\n\n- **If your app is already split into files that use `import` statements,** try to use the setup you already have. Check whether writing `<div />` in your JS code causes a syntax error. If it causes a syntax error, you might need to [transform your JavaScript code with Babel](https://babeljs.io/setup), and enable the [Babel React preset](https://babeljs.io/docs/babel-preset-react) to use JSX.\n\n- **If your app doesn’t have an existing setup for compiling JavaScript modules,** set it up with [Vite](https://vite.dev/). The Vite community maintains [many integrations with backend frameworks](https://github.com/vitejs/awesome-vite#integrations-with-backends), including Rails, Django, and Laravel. If your backend framework is not listed, [follow this guide](https://vite.dev/guide/backend-integration.html) to manually integrate Vite builds with your backend.\n\nTo check whether your setup works, run this command in your project folder:\n\nTerminal\n\nCopy\n\nnpm install react react-dom\n\nThen add these lines of code at the top of your main JavaScript file (it might be called `index.js` or `main.js`):\n\nindex.js\n\nindex.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);\n```\n\nIf the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: render react components anywhere on the page in react-learn?\n\nAssistant: To step 2: render react components anywhere on the page in react-learn, here's what you do:\nIn the previous step, you put this code at the top of your main file:\n\n```sp-pre-placeholder grow-[2]\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world!</h1>);\n```\n\nOf course, you don’t actually want to clear the existing HTML content!\n\nDelete this code.\n\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) attribute to any tag, for example:\n\n```sp-pre-placeholder grow-[2]\n<!-- ... somewhere in your html ... -->\n<nav id=\"navigation\"></nav>\n<!-- ... more html ... -->\n```\n\nThis lets you find that HTML element with [`document.getElementById`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) and pass it to [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) so that you can render your own React component inside:\n\nindex.jsindex.html\n\nindex.js\n\nReset [Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app \"Open in CodeSandbox\")\n\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  return <h1>Hello from React!</h1>;\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);\n```\n\nNotice how the original HTML content from `index.html` is preserved, but your own `NavigationBar` React component now appears inside the `<nav id=\"navigation\">` from your HTML. Read the [`createRoot` usage documentation](https://react.dev/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) to learn more about rendering React components inside an existing HTML page.\n\nWhen you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to [a React framework](https://react.dev/learn/start-a-new-react-project) right after to get the most out of React..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using react native in an existing native mobile app in react-learn?\n\nAssistant: To using react native in an existing native mobile app in react-learn, here's what you do:\n[React Native](https://reactnative.dev/) can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), [follow this guide](https://reactnative.dev/docs/integration-with-existing-apps) to add a React Native screen to it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Add React to an Existing Project in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic React Component Rendering**:\n\n```yaml\nimport { createRoot } from 'react-dom/client';\n\n// Clear the existing HTML content\ndocument.body.innerHTML = '<div id=\"app\"></div>';\n\n// Render your React component instead\nconst root = createRoot(document.getElementById('app'));\nroot.render(<h1>Hello, world</h1>);\n```\n\nThis snippet shows you how to basic react component rendering, which is an important aspect of add react to an existing project.\n\n**Rendering React Component in Existing HTML**:\n\n```yaml\nimport { createRoot } from 'react-dom/client';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  return <h1>Hello from React!</h1>;\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);\n```\n\nThis snippet shows you how to rendering react component in existing html, which is an important aspect of add react to an existing project.\n\n", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Add React to an Existing Project in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou need to install Node.js for local development.\n\nIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our community resources or the Vite Chat.\n\nWhen you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep 'moving upwards' until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/add-react-to-an-existing-project", "title": "Add React to an Existing Project", "description": "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:14:42", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/add-react-to-an-existing-project", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "title": "Add React to an Existing Project – React", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "twitter:title": "Add React to an Existing Project – React", "algolia-search-order": "9", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Add React to an Existing Project – React", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:title": "Add React to an Existing Project – React", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/add-react-to-an-existing-project", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "scrapeId": "7a302f37-ba50-480b-91e9-f3be824737a3", "sourceURL": "https://react.dev/learn/add-react-to-an-existing-project", "url": "https://react.dev/learn/add-react-to-an-existing-project", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Build a React app from Scratch is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Build a React app from Scratch in react-learn.\n\n# Build a React app from Scratch\n\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.Here's a quick rundown of what this is about:\n\n## Deep Dive\n\nStarting from scratch is an easy way to get started using React, but a major tradeoff to be aware of is that going this route is often the same as building your own adhoc framework. As your requirements evolve, you may need to solve more framework-like problems that our recommended frameworks already have well developed and supported solutions for.\n\nFor example, if in the future your app needs support for server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC), you will have to implement those on your own. Similarly, future React features that require integrating at the framework level will have to be implemented on your own if you want to use them.\n\nOur recommended frameworks also help you build better performing apps. For example, reducing or eliminating waterfalls from network requests makes for a better user experience. This might not be a high priority when you are building a toy project, but if your app gains users you may want to improve its performance.\n\nGoing this route also makes it more difficult to get support, since the way you develop routing, data-fetching, and other features will be unique to your situation. You should only choose this option if you are comfortable tackling these problems on your own, or if you’re confident that you will never need these features.\n\nFor a list of recommended frameworks, check out Creating a React App.\n\n## Step 1: Install a build tool\n\nThe first step is to install a build tool like `vite`, `parcel`, or `rsbuild`. These build tools provide features to package and run source code, provide a development server for local development and a build command to deploy your app to a production server.\n\n## Vite\n\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\n\nTerminal\n\nCopy\n\nnpm create vite@latest my-app -- --template react\n\nVite is opinionated and comes with sensible defaults out of the box. Vite has a rich ecosystem of plugins to support fast refresh, JSX, Babel/SWC, and other common features. See Vite’s React plugin or React SWC plugin and React SSR example project to get started.\n\nVite is already being used as a build tool in one of our recommended frameworks: React Router.\n\n## Parcel\n\nParcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production applications.\n\nTerminal\n\nCopy\n\nnpm install --save-dev parcel\n\nParcel supports fast refresh, JSX, TypeScript, Flow, and styling out of the box. See Parcel’s React recipe to get started.\n\n## Rsbuild\n\nRsbuild is an Rspack-powered build tool that provides a seamless development experience for React applications. It comes with carefully tuned defaults and performance optimizations ready to use.\n\nTerminal\n\nCopy\n\nnpx create-rsbuild --template react\n\nRsbuild includes built-in support for React features like fast refresh, JSX, TypeScript, and styling. See Rsbuild’s React guide to get started.\n\n## Note\n\nIf you’d you’re starting from scratch with React Native you’ll need to use Metro, the JavaScript bundler for React Native. Metro supports bundling for platforms like iOS and Android, but lacks many features when compared to the tools here. We recommend starting with Vite, Parcel, or Rsbuild unless your project requires React Native support.\n\n## Step 2: Build Common Application Patterns\n\nThe build tools listed above start off with a client-only, single-page app (SPA), but don’t include any further solutions for common functionality like routing, data fetching, or styling.\n\nThe React ecosystem includes many tools for these problems. We’ve listed a few that are widely used as a starting point, but feel free to choose other tools if those work better for you.\n\n## Routing\n\nRouting determines what content or pages to display when a user visits a particular URL. You need to set up a router to map URLs to different parts of your app. You’ll also need to handle nested routes, route parameters, and query parameters. Routers can be configured within your code, or defined based on your component folder and file structures.\n\nRouters are a core part of modern applications, and are usually integrated with data fetching (including prefetching data for a whole page for faster loading), code splitting (to minimize client bundle sizes), and page rendering approaches (to decide how each page gets generated).\n\nWe suggest using:\n\n- React Router\n- Tanstack Router\n\n## Data Fetching\n\nFetching data from a server or other data source is a key part of most applications. Doing this properly requires handling loading states, error states, and caching the fetched data, which can be complex.\n\nPurpose-built data fetching libraries do the hard work of fetching and caching the data for you, letting you focus on what data your app needs and how to display it. These libraries are typically used directly in your components, but can also be integrated into routing loaders for faster pre-fetching and better performance, and in server rendering as well.\n\nNote that fetching data directly in components can lead to slower loading times due to network request waterfalls, so we recommend prefetching data in router loaders or on the server as much as possible! This allows a page’s data to be fetched all at once as the page is being displayed.\n\nIf you’re fetching data from most backends or REST-style APIs, we suggest using:\n\n- React Query\n- SWR\n- RTK Query\n\nIf you’re fetching data from a GraphQL API, we suggest using:\n\n- Apollo\n- Relay\n\n## Code-splitting\n\nCode-splitting is the process of breaking your app into smaller bundles that can be loaded on demand. An app’s code size increases with every new feature and additional dependency. Apps can become slow to load because all of the code for the entire app needs to be sent before it can be used. Caching, reducing features/dependencies, and moving some code to run on the server can help mitigate slow loading but are incomplete solutions that can sacrifice functionality if overused.\n\nSimilarly, if you rely on the apps using your framework to split the code, you might encounter situations where loading becomes slower than if no code splitting were happening at all. For example, lazily loading a chart delays sending the code needed to render the chart, splitting the chart code from the rest of the app. Parcel supports code splitting with React.lazy. However, if the chart loads its data after it has been initially rendered you are now waiting twice. This is a waterfall: rather than fetching the data for the chart and sending the code to render it simultaneously, you must wait for each step to complete one after the other.\n\nSplitting code by route, when integrated with bundling and data fetching, can reduce the initial load time of your app and the time it takes for the largest visible content of the app to render.\n\n## Improving Application Performance\n\nSince the build tool you select only support single page apps (SPAs) you’ll need to implement other rendering patterns like server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC). Even if you don’t need these features at first, in the future there may be some routes that would benefit SSR, SSG or RSC.\n\n- **Single-page apps (SPA)** load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n\n- **Streaming Server-side rendering (SSR)** renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain.\n\n- **Static site generation (SSG)** generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering.\n\n- **React Server Components (RSC)** lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain.\n\nYour rendering strategies need to integrate with your router so apps built with your framework can choose the rendering strategy on a per-route level. This will enable different rendering strategies without having to rewrite your whole app.\n\n## And more…\n\nThese are just a few examples of the features a new app will need to consider when building from scratch. Many limitations you’ll hit can be difficult to solve as each problem is interconnected with the others and can require deep expertise in problem areas you may not be familiar with.\n\nIf you don’t want to solve these problems on your own, you can get started with a framework that provides these features out of the box.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "overview", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nStarting from scratch is an easy way to get started using React, but a major tradeoff to be aware of is that going this route is often the same as building your own adhoc framework. As your requirements evolve, you may need to solve more framework-like problems that our recommended frameworks already have well developed and supported solutions for.\n\nFor example, if in the future your app needs support for server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC), you will have to implement those on your own. Similarly, future React features that require integrating at the framework level will have to be implemented on your own if you want to use them.\n\nOur recommended frameworks also help you build better performing apps. For example, reducing or eliminating waterfalls from network requests makes for a better user experience. This might not be a high priority when you are building a toy project, but if your app gains users you may want to improve its performance.\n\nGoing this route also makes it more difficult to get support, since the way you develop routing, data-fetching, and other features will be unique to your situation. You should only choose this option if you are comfortable tackling these problems on your own, or if you’re confident that you will never need these features.\n\nFor a list of recommended frameworks, check out Creating a React App..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: install a build tool in react-learn?\n\nAssistant: To step 1: install a build tool in react-learn, here's what you do:\nThe first step is to install a build tool like `vite`, `parcel`, or `rsbuild`. These build tools provide features to package and run source code, provide a development server for local development and a build command to deploy your app to a production server..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I vite in react-learn?\n\nAssistant: To vite in react-learn, here's what you do:\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\n\nTerminal\n\nCopy\n\nnpm create vite@latest my-app -- --template react\n\nVite is opinionated and comes with sensible defaults out of the box. Vite has a rich ecosystem of plugins to support fast refresh, JSX, Babel/SWC, and other common features. See Vite’s React plugin or React SWC plugin and React SSR example project to get started.\n\nVite is already being used as a build tool in one of our recommended frameworks: React Router..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I parcel in react-learn?\n\nAssistant: To parcel in react-learn, here's what you do:\nParcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production applications.\n\nTerminal\n\nCopy\n\nnpm install --save-dev parcel\n\nParcel supports fast refresh, JSX, TypeScript, Flow, and styling out of the box. See Parcel’s React recipe to get started..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rsbuild in react-learn?\n\nAssistant: To rsbuild in react-learn, here's what you do:\nRsbuild is an Rspack-powered build tool that provides a seamless development experience for React applications. It comes with carefully tuned defaults and performance optimizations ready to use.\n\nTerminal\n\nCopy\n\nnpx create-rsbuild --template react\n\nRsbuild includes built-in support for React features like fast refresh, JSX, TypeScript, and styling. See Rsbuild’s React guide to get started..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nIf you’d you’re starting from scratch with React Native you’ll need to use Metro, the JavaScript bundler for React Native. Metro supports bundling for platforms like iOS and Android, but lacks many features when compared to the tools here. We recommend starting with Vite, Parcel, or Rsbuild unless your project requires React Native support..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: build common application patterns in react-learn?\n\nAssistant: To step 2: build common application patterns in react-learn, here's what you do:\nThe build tools listed above start off with a client-only, single-page app (SPA), but don’t include any further solutions for common functionality like routing, data fetching, or styling.\n\nThe React ecosystem includes many tools for these problems. We’ve listed a few that are widely used as a starting point, but feel free to choose other tools if those work better for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I routing in react-learn?\n\nAssistant: To routing in react-learn, here's what you do:\nRouting determines what content or pages to display when a user visits a particular URL. You need to set up a router to map URLs to different parts of your app. You’ll also need to handle nested routes, route parameters, and query parameters. Routers can be configured within your code, or defined based on your component folder and file structures.\n\nRouters are a core part of modern applications, and are usually integrated with data fetching (including prefetching data for a whole page for faster loading), code splitting (to minimize client bundle sizes), and page rendering approaches (to decide how each page gets generated).\n\nWe suggest using:\n\n- React Router\n- Tanstack Router.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I data fetching in react-learn?\n\nAssistant: To data fetching in react-learn, here's what you do:\nFetching data from a server or other data source is a key part of most applications. Doing this properly requires handling loading states, error states, and caching the fetched data, which can be complex.\n\nPurpose-built data fetching libraries do the hard work of fetching and caching the data for you, letting you focus on what data your app needs and how to display it. These libraries are typically used directly in your components, but can also be integrated into routing loaders for faster pre-fetching and better performance, and in server rendering as well.\n\nNote that fetching data directly in components can lead to slower loading times due to network request waterfalls, so we recommend prefetching data in router loaders or on the server as much as possible! This allows a page’s data to be fetched all at once as the page is being displayed.\n\nIf you’re fetching data from most backends or REST-style APIs, we suggest using:\n\n- React Query\n- SWR\n- RTK Query\n\nIf you’re fetching data from a GraphQL API, we suggest using:\n\n- Apollo\n- Relay.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I code-splitting in react-learn?\n\nAssistant: To code-splitting in react-learn, here's what you do:\nCode-splitting is the process of breaking your app into smaller bundles that can be loaded on demand. An app’s code size increases with every new feature and additional dependency. Apps can become slow to load because all of the code for the entire app needs to be sent before it can be used. Caching, reducing features/dependencies, and moving some code to run on the server can help mitigate slow loading but are incomplete solutions that can sacrifice functionality if overused.\n\nSimilarly, if you rely on the apps using your framework to split the code, you might encounter situations where loading becomes slower than if no code splitting were happening at all. For example, lazily loading a chart delays sending the code needed to render the chart, splitting the chart code from the rest of the app. Parcel supports code splitting with React.lazy. However, if the chart loads its data after it has been initially rendered you are now waiting twice. This is a waterfall: rather than fetching the data for the chart and sending the code to render it simultaneously, you must wait for each step to complete one after the other.\n\nSplitting code by route, when integrated with bundling and data fetching, can reduce the initial load time of your app and the time it takes for the largest visible content of the app to render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I improving application performance in react-learn?\n\nAssistant: To improving application performance in react-learn, here's what you do:\nSince the build tool you select only support single page apps (SPAs) you’ll need to implement other rendering patterns like server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC). Even if you don’t need these features at first, in the future there may be some routes that would benefit SSR, SSG or RSC.\n\n- **Single-page apps (SPA)** load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n\n- **Streaming Server-side rendering (SSR)** renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain.\n\n- **Static site generation (SSG)** generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering.\n\n- **React Server Components (RSC)** lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain.\n\nYour rendering strategies need to integrate with your router so apps built with your framework can choose the rendering strategy on a per-route level. This will enable different rendering strategies without having to rewrite your whole app..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I and more… in react-learn?\n\nAssistant: To and more… in react-learn, here's what you do:\nThese are just a few examples of the features a new app will need to consider when building from scratch. Many limitations you’ll hit can be difficult to solve as each problem is interconnected with the others and can require deep expertise in problem areas you may not be familiar with.\n\nIf you don’t want to solve these problems on your own, you can get started with a framework that provides these features out of the box..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "section_detail", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Build a React app from Scratch in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Vite Installation Command**:\n\n```yaml\nnpm create vite@latest my-app -- --template react\n```\n\nThis snippet shows you how to vite installation command, which is an important aspect of build a react app from scratch.\n\n**Parcel Installation Command**:\n\n```yaml\nnpm install --save-dev parcel\n```\n\nThis snippet shows you how to parcel installation command, which is an important aspect of build a react app from scratch.\n\n**Rsbuild Installation Command**:\n\n```yaml\nnpx create-rsbuild --template react\n```\n\nThis snippet shows you how to rsbuild installation command, which is an important aspect of build a react app from scratch.\n\n", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "code_examples", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Build a React app from Scratch in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider using a framework instead of building from scratch to avoid common pitfalls and gain better performance.\n\nUse purpose-built data fetching libraries to handle loading and error states effectively.\n\nPrefetch data in router loaders or on the server to improve loading times and performance.\n\nImplement rendering strategies that integrate with your router for better performance on a per-route basis.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/build-a-react-app-from-scratch", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:15:36", "type": "best_practices", "page_metadata": {"title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:title": "Build a React app from Scratch – React", "twitter:creator": "@reactjs", "twitter:title": "Build a React app from Scratch – React", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "algolia-search-order": "8", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "ogTitle": "Build a React app from Scratch – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "theme-color": "#23272f", "language": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "775fea79-1af7-4aca-ac2b-76e7bd344d0e", "sourceURL": "https://react.dev/learn/build-a-react-app-from-scratch", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Extracting State Logic into a Reducer is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Extracting State Logic into a Reducer in react-learn.\n\n# Extracting State Logic into a Reducer\n\nThis page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What a reducer function is\n- How to refactor `useState` to `useReducer`\n- When to use a reducer\n- How to write one well\n\n## Consolidate state logic with a reducer\n\nAs your components grow in complexity, it can get harder to see at a glance all the different ways in which a component’s state gets updated. For example, the `TaskApp` component below holds an array of `tasks` in state and uses three different event handlers to add, remove, and edit tasks:\n\n```javascript\nimport { useState } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, setTasks] = useState(initialTasks);\n\n  function handleAddTask(text) {\n    setTasks([\n      ...tasks,\n      {\n        id: nextId++,\n        text: text,\n        done: false,\n      },\n    ]);\n  }\n\n  function handleChangeTask(task) {\n    setTasks(\n      tasks.map((t) => {\n        if (t.id === task.id) {\n          return task;\n        } else {\n          return t;\n        }\n      })\n    );\n  }\n\n  function handleDeleteTask(taskId) {\n    setTasks(tasks.filter((t) => t.id !== taskId));\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "title": "Extracting State Logic into a Reducer", "description": "This page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:18:15", "type": "overview", "page_metadata": {"ogUrl": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Extracting State Logic into a Reducer – React", "viewport": "width=device-width, initial-scale=1", "title": "Extracting State Logic into a Reducer – React", "og:title": "Extracting State Logic into a Reducer – React", "twitter:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:title": "Extracting State Logic into a Reducer – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "algolia-search-order": "39", "og:type": "website", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "9129b2d9-24d9-4b93-abb0-5467b6c05018", "sourceURL": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What a reducer function is\n- How to refactor `useState` to `useReducer`\n- When to use a reducer\n- How to write one well.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "title": "Extracting State Logic into a Reducer", "description": "This page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:18:15", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Extracting State Logic into a Reducer – React", "viewport": "width=device-width, initial-scale=1", "title": "Extracting State Logic into a Reducer – React", "og:title": "Extracting State Logic into a Reducer – React", "twitter:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:title": "Extracting State Logic into a Reducer – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "algolia-search-order": "39", "og:type": "website", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "9129b2d9-24d9-4b93-abb0-5467b6c05018", "sourceURL": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I consolidate state logic with a reducer in react-learn?\n\nAssistant: To consolidate state logic with a reducer in react-learn, here's what you do:\nAs your components grow in complexity, it can get harder to see at a glance all the different ways in which a component’s state gets updated. For example, the `TaskApp` component below holds an array of `tasks` in state and uses three different event handlers to add, remove, and edit tasks:\n\n```javascript\nimport { useState } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, setTasks] = useState(initialTasks);\n\n  function handleAddTask(text) {\n    setTasks([\n      ...tasks,\n      {\n        id: nextId++,\n        text: text,\n        done: false,\n      },\n    ]);\n  }\n\n  function handleChangeTask(task) {\n    setTasks(\n      tasks.map((t) => {\n        if (t.id === task.id) {\n          return task;\n        } else {\n          return t;\n        }\n      })\n    );\n  }\n\n  function handleDeleteTask(taskId) {\n    setTasks(tasks.filter((t) => t.id !== taskId));\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "title": "Extracting State Logic into a Reducer", "description": "This page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:18:15", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Extracting State Logic into a Reducer – React", "viewport": "width=device-width, initial-scale=1", "title": "Extracting State Logic into a Reducer – React", "og:title": "Extracting State Logic into a Reducer – React", "twitter:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:title": "Extracting State Logic into a Reducer – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "algolia-search-order": "39", "og:type": "website", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "9129b2d9-24d9-4b93-abb0-5467b6c05018", "sourceURL": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Extracting State Logic into a Reducer in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Initial TaskApp Component**:\n\n```yaml\nimport { useState } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, setTasks] = useState(initialTasks);\n\n  function handleAddTask(text) {\n    setTasks([\n      ...tasks,\n      {\n        id: nextId++,\n        text: text,\n        done: false,\n      },\n    ]);\n  }\n\n  function handleChangeTask(task) {\n    setTasks(\n      tasks.map((t) => {\n        if (t.id === task.id) {\n          return task;\n        } else {\n          return t;\n        }\n      })\n    );\n  }\n\n  function handleDeleteTask(taskId) {\n    setTasks(tasks.filter((t) => t.id !== taskId));\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n```\n\nThis snippet shows you how to initial taskapp component, which is an important aspect of extracting state logic into a reducer.\n\n", "metadata": {"source_url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "title": "Extracting State Logic into a Reducer", "description": "This page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:18:15", "type": "code_examples", "page_metadata": {"ogUrl": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Extracting State Logic into a Reducer – React", "viewport": "width=device-width, initial-scale=1", "title": "Extracting State Logic into a Reducer – React", "og:title": "Extracting State Logic into a Reducer – React", "twitter:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:title": "Extracting State Logic into a Reducer – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "algolia-search-order": "39", "og:type": "website", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "9129b2d9-24d9-4b93-abb0-5467b6c05018", "sourceURL": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Extracting State Logic into a Reducer in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReducers must be pure.\n\nEach action describes a single user interaction, even if that leads to multiple changes in the data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "title": "Extracting State Logic into a Reducer", "description": "This page covers how to manage state in React components using reducers, including when to use them, how to write them, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:18:15", "type": "best_practices", "page_metadata": {"ogUrl": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Extracting State Logic into a Reducer – React", "viewport": "width=device-width, initial-scale=1", "title": "Extracting State Logic into a Reducer – React", "og:title": "Extracting State Logic into a Reducer – React", "twitter:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "og:url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "twitter:title": "Extracting State Logic into a Reducer – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "algolia-search-order": "39", "og:type": "website", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-learn.png", "scrapeId": "9129b2d9-24d9-4b93-abb0-5467b6c05018", "sourceURL": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Understanding Your UI as a Tree is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Understanding Your UI as a Tree in react-learn.\n\n# Understanding Your UI as a Tree\n\nThis page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How React “sees” component structures\n- What a render tree is and what it is useful for\n- What a module dependency tree is and what it is useful for\n\n## Your UI as a tree\n\nTrees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (DOM) and CSS (CSSOM). Mobile platforms also use trees to represent their view hierarchy.\n\nReact creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM. Like browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size.\n\n## The Render Tree\n\nA major feature of components is the ability to compose components of other components. As we nest components, we have the concept of parent and child components, where each parent component may itself be a child of another component.\n\nWhen we render a React app, we can model this relationship in a tree, known as the render tree. React creates a render tree, a UI tree, composed of the rendered components. The root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.\n\n## Where are the HTML tags in the render tree?\n\nYou’ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components. React, as a UI framework, is platform agnostic. A render tree represents a single render pass of a React application. With conditional rendering, a parent component may render different children depending on the data passed.\n\n## The Module Dependency Tree\n\nAnother relationship in a React app that can be modeled with a tree are an app’s module dependencies. Each node in a module dependency tree is a module and each branch represents an import statement in that module. The root node of the tree is the root module, also known as the entrypoint file. Comparing to the render tree of the same app, there are similar structures but some notable differences: the nodes that make-up the tree represent modules, not components.\n\n## Recap\n\n- Trees are a common way to represent the relationship between entities. They are often used to model UI.\n- Render trees represent the nested relationship between React components across a single render.\n- With conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.\n- Render trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.\n- Dependency trees represent the module dependencies in a React app.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "overview", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How React “sees” component structures\n- What a render tree is and what it is useful for\n- What a module dependency tree is and what it is useful for.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I your ui as a tree in react-learn?\n\nAssistant: To your ui as a tree in react-learn, here's what you do:\nTrees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (DOM) and CSS (CSSOM). Mobile platforms also use trees to represent their view hierarchy.\n\nReact creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM. Like browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the render tree in react-learn?\n\nAssistant: To the render tree in react-learn, here's what you do:\nA major feature of components is the ability to compose components of other components. As we nest components, we have the concept of parent and child components, where each parent component may itself be a child of another component.\n\nWhen we render a React app, we can model this relationship in a tree, known as the render tree. React creates a render tree, a UI tree, composed of the rendered components. The root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I where are the html tags in the render tree? in react-learn?\n\nAssistant: To where are the html tags in the render tree? in react-learn, here's what you do:\nYou’ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components. React, as a UI framework, is platform agnostic. A render tree represents a single render pass of a React application. With conditional rendering, a parent component may render different children depending on the data passed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the module dependency tree in react-learn?\n\nAssistant: To the module dependency tree in react-learn, here's what you do:\nAnother relationship in a React app that can be modeled with a tree are an app’s module dependencies. Each node in a module dependency tree is a module and each branch represents an import statement in that module. The root node of the tree is the root module, also known as the entrypoint file. Comparing to the render tree of the same app, there are similar structures but some notable differences: the nodes that make-up the tree represent modules, not components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Trees are a common way to represent the relationship between entities. They are often used to model UI.\n- Render trees represent the nested relationship between React components across a single render.\n- With conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.\n- Render trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.\n- Dependency trees represent the module dependencies in a React app..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Understanding Your UI as a Tree in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**App.js**:\n\n```yaml\nimport FancyText from './FancyText';\nimport InspirationGenerator from './InspirationGenerator';\nimport Copyright from './Copyright';\n\nexport default function App() {\n  return (\n    <>\n      <FancyText title text=\"Get Inspired App\" />\n      <InspirationGenerator>\n        <Copyright year={2004} />\n      </InspirationGenerator>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to app.js, which is an important aspect of understanding your ui as a tree.\n\n", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Understanding Your UI as a Tree in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIdentifying top-level and leaf components is useful for understanding data flow and performance of your app.\n\nGetting a sense of your app’s dependency tree may help with debugging issues related to large bundle sizes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "description": "This page explains how React models UI as a tree structure, detailing the render tree and module dependency tree, and their significance in understanding component relationships and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 02:24:55", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "algolia-search-order": "25", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "ogTitle": "Understanding Your UI as a Tree – React", "language": "en", "og:type": "website", "twitter:image": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/understanding-your-ui-as-a-tree", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-learn.png", "title": "Understanding Your UI as a Tree – React", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "Understanding Your UI as a Tree – React", "og:description": "The library for web and native user interfaces", "twitter:title": "Understanding Your UI as a Tree – React", "twitter:site": "@reactjs", "scrapeId": "8814bbe5-b704-4ca4-b558-d33e97b470d7", "sourceURL": "https://react.dev/learn/understanding-your-ui-as-a-tree", "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Scaling Up with Reducer and Context is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Scaling Up with Reducer and Context in react-learn.\n\n# Scaling Up with Reducer and Context\n\nReducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to combine a reducer with context\n- How to avoid passing state and dispatch through props\n- How to keep context and state logic in a separate file\n\n## Combining a reducer with context\n\nIn this example from the introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file.\n\n## Step 1: Create the context\n\nThe useReducer Hook returns the current tasks and the dispatch function that lets you update them. To pass them down the tree, you will create two separate contexts: TasksContext provides the current list of tasks. TasksDispatchContext provides the function that lets components dispatch actions.\n\n## Step 2: Put state and dispatch into context\n\nNow you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below.\n\n## Step 3: Use context anywhere in the tree\n\nNow you don’t need to pass the list of tasks or the event handlers down the tree. Instead, any component that needs the task list can read it from the TaskContext.\n\n## Moving all wiring into a single file\n\nYou don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new TasksProvider component in the same file.\n\n## Recap\n\n- You can combine reducer with context to let any component read and update state above it.\n- To provide state and the dispatch function to components below:\n1. Create two contexts (for state and for dispatch functions).\n2. Provide both contexts from the component that uses the reducer.\n3. Use either context from components that need to read them.\n- You can further declutter the components by moving all wiring into one file.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to combine a reducer with context\n- How to avoid passing state and dispatch through props\n- How to keep context and state logic in a separate file.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I combining a reducer with context in react-learn?\n\nAssistant: To combining a reducer with context in react-learn, here's what you do:\nIn this example from the introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: create the context in react-learn?\n\nAssistant: To step 1: create the context in react-learn, here's what you do:\nThe useReducer Hook returns the current tasks and the dispatch function that lets you update them. To pass them down the tree, you will create two separate contexts: TasksContext provides the current list of tasks. TasksDispatchContext provides the function that lets components dispatch actions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: put state and dispatch into context in react-learn?\n\nAssistant: To step 2: put state and dispatch into context in react-learn, here's what you do:\nNow you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: use context anywhere in the tree in react-learn?\n\nAssistant: To step 3: use context anywhere in the tree in react-learn, here's what you do:\nNow you don’t need to pass the list of tasks or the event handlers down the tree. Instead, any component that needs the task list can read it from the TaskContext..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I moving all wiring into a single file in react-learn?\n\nAssistant: To moving all wiring into a single file in react-learn, here's what you do:\nYou don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new TasksProvider component in the same file..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- You can combine reducer with context to let any component read and update state above it.\n- To provide state and the dispatch function to components below:\n1. Create two contexts (for state and for dispatch functions).\n2. Provide both contexts from the component that uses the reducer.\n3. Use either context from components that need to read them.\n- You can further declutter the components by moving all wiring into one file..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Scaling Up with Reducer and Context in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**TaskApp.js**:\n\n```yaml\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(\n    tasksReducer,\n    initialTasks\n  );\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n\n  return (\n    <>\n      <h1>Day off in Kyoto</h1>\n      <AddTask\n        onAddTask={handleAddTask}\n      />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </>\n  );\n}\n\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added': {\n      return [...tasks, {\n        id: action.id,\n        text: action.text,\n        done: false\n      }];\n    }\n    case 'changed': {\n      return tasks.map(t => {\n        if (t.id === action.task.id) {\n          return action.task;\n        } else {\n          return t;\n        }\n      });\n    }\n    case 'deleted': {\n      return tasks.filter(t => t.id !== action.id);\n    }\n    default: {\n      throw Error('Unknown action: ' + action.type);\n    }\n  }\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  { id: 0, text: 'Philosopher’s Path', done: true },\n  { id: 1, text: 'Visit the temple', done: false },\n  { id: 2, text: 'Drink matcha', done: false }\n];\n```\n\nThis snippet shows you how to taskapp.js, which is an important aspect of scaling up with reducer and context.\n\n**TasksContext.js**:\n\n```yaml\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\nexport const TasksDispatchContext = createContext(null);\n```\n\nThis snippet shows you how to taskscontext.js, which is an important aspect of scaling up with reducer and context.\n\n**TasksProvider**:\n\n```yaml\nexport function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        {children}\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n```\n\nThis snippet shows you how to tasksprovider, which is an important aspect of scaling up with reducer and context.\n\n", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Scaling Up with Reducer and Context in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nA reducer helps keep the event handlers short and concise.\n\nTo avoid prop drilling, use context to provide state and dispatch to components.\n\nConsider moving reducer and context into a single file to declutter components.\n\nUse custom hooks to access context easily.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "title": "Scaling Up with Reducer and Context", "description": "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 02:25:20", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "Scaling Up with Reducer and Context – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/scaling-up-with-reducer-and-context", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "ogTitle": "Scaling Up with Reducer and Context – React", "ogImage": "https://react.dev/images/og-learn.png", "fb:app_id": "623268441017527", "og:type": "website", "og:title": "Scaling Up with Reducer and Context – React", "viewport": "width=device-width, initial-scale=1", "algolia-search-order": "41", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Scaling Up with Reducer and Context – React", "scrapeId": "9213f132-e0b0-4e99-8ff3-2e8b4c7fb7ae", "sourceURL": "https://react.dev/learn/scaling-up-with-reducer-and-context", "url": "https://react.dev/learn/scaling-up-with-reducer-and-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Queueing a Series of State Updates is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Queueing a Series of State Updates in react-learn.\n\n# Queueing a Series of State Updates\n\nThis page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What “batching” is and how React uses it to process multiple state updates\n- How to apply several updates to the same state variable in a row\n\n## React batches state updates\n\nYou might expect that clicking the “+3” button will increment the counter three times because it calls `setNumber(number + 1)` three times:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nHowever, as you might recall from the previous section, [each render’s state values are fixed](https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time), so the value of `number` inside the first render’s event handler is always `0`, no matter how many times you call `setNumber(1)`:\n\n```sp-pre-placeholder grow-[2]\nsetNumber(0 + 1);\nsetNumber(0 + 1);\nsetNumber(0 + 1);\n```\n\nBut there is one other factor at play here. **React waits until _all_ code in the event handlers has run before processing your state updates.** This is why the re-render only happens _after_ all these `setNumber()` calls.\n\nThis might remind you of a waiter taking an order at the restaurant. A waiter doesn’t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.\n\n![An elegant cursor at a restaurant places and order multiple times with React, playing the part of the waiter. After she calls setState() multiple times, the waiter writes down the last one she requested as her final order.](https://react.dev/images/docs/illustrations/i_react-batching.png)\n\nThis lets you update multiple state variables—even from multiple components—without triggering too many [re-renders.](https://react.dev/learn/render-and-commit#re-renders-when-state-updates) But this also means that the UI won’t be updated until _after_ your event handler, and any code in it, completes. This behavior, also known as **batching,** makes your React app run much faster. It also avoids dealing with confusing “half-finished” renders where only some of the variables have been updated.\n\n**React does not batch across _multiple_ intentional events like clicks**—each click is handled separately. Rest assured that React only does batching when it’s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again.\n\n## Updating the same state multiple times before the next render\n\nIt is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the _next state value_ like `setNumber(number + 1)`, you can pass a _function_ that calculates the next state based on the previous one in the queue, like `setNumber(n => n + 1)`. It is a way to tell React to “do something with the state value” instead of just replacing it.\n\nTry incrementing the counter now:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nHere, `n => n + 1` is called an **updater function.** When you pass it to a state setter:\n\n1. React queues this function to be processed after all the other code in the event handler has run.\n2. During the next render, React goes through the queue and gives you the final updated state.\n\n```sp-pre-placeholder grow-[2]\nsetNumber(n => n + 1);\nsetNumber(n => n + 1);\nsetNumber(n => n + 1);\n```\n\nHere’s how React works through these lines of code while executing the event handler:\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n3. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\nWhen you call `useState` during the next render, React goes through the queue. The previous `number` state was `0`, so that’s what React passes to the first updater function as the `n` argument. Then React takes the return value of your previous updater function and passes it to the next updater as `n`, and so on:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| `n => n + 1` | `0` | `0 + 1 = 1` |\n| `n => n + 1` | `1` | `1 + 1 = 2` |\n| `n => n + 1` | `2` | `2 + 1 = 3` |\n\nReact stores `3` as the final result and returns it from `useState`.\n\n## What happens if you update state after replacing it\n\nWhat about this event handler? What do you think `number` will be in the next render?\n\n```sp-pre-placeholder grow-[2]\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n}}>\n```\n\nHere’s what this event handler tells React to do:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds _“replace with `5`”_ to its queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds _that function_ to its queue.\n\nDuring the next render, React goes through the state queue:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| ”replace with `5`” | `0` (unused) | `5` |\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n\nReact stores `6` as the final result and returns it from `useState`.\n\n## What happens if you replace state after updating it\n\nLet’s try one more example. What do you think `number` will be in the next render?\n\n```sp-pre-placeholder grow-[2]\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n  setNumber(42);\n}}>\n```\n\nHere’s how React works through these lines of code while executing this event handler:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds _“replace with `5`”_ to its queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds _that function_ to its queue.\n3. `setNumber(42)`: React adds _“replace with `42`”_ to its queue.\n\nDuring the next render, React goes through the state queue:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| ”replace with `5`” | `0` (unused) | `5` |\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n| ”replace with `42`” | `6` (unused) | `42` |\n\nThen React stores `42` as the final result and returns it from `useState`.\n\n## Naming conventions\n\nIt’s common to name the updater function argument by the first letters of the corresponding state variable:\n\n```sp-pre-placeholder grow-[2]\nsetEnabled(e => !e);\nsetLastName(ln => ln.reverse());\nsetFriendCount(fc => fc * 2);\n```\n\nIf you prefer more verbose code, another common convention is to repeat the full state variable name, like `setEnabled(enabled => !enabled)`, or to use a prefix like `setEnabled(prevEnabled => !prevEnabled)`.\n\n## Recap\n\n- Setting state does not change the variable in the existing render, but it requests a new render.\n- React processes state updates after event handlers have finished running. This is called batching.\n- To update some state multiple times in one event, you can use `setNumber(n => n + 1)` updater function.\n\n## Try out some challenges\n\n1. Fix a request counter 2. Implement the state queue yourself\n\n#### Challenge1 of2:   Fix a request counter\nYou’re working on an art marketplace app that lets the user submit multiple orders for an art item at the same time. Each time the user presses the “Buy” button, the “Pending” counter should increase by one. After three seconds, the “Pending” counter should decrease, and the “Completed” counter should increase.\n\nHowever, the “Pending” counter does not behave as intended. When you press “Buy”, it decreases to `-1` (which should not be possible!). And if you click fast twice, both counters seem to behave unpredictably.\n\nWhy does this happen? Fix both counters.\n\n```javascript\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(pending + 1);\n    await delay(3000);\n    setPending(pending - 1);\n    setCompleted(completed + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy\n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\nShow more\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "overview", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What “batching” is and how React uses it to process multiple state updates\n- How to apply several updates to the same state variable in a row.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react batches state updates in react-learn?\n\nAssistant: To react batches state updates in react-learn, here's what you do:\nYou might expect that clicking the “+3” button will increment the counter three times because it calls `setNumber(number + 1)` three times:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nHowever, as you might recall from the previous section, [each render’s state values are fixed](https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time), so the value of `number` inside the first render’s event handler is always `0`, no matter how many times you call `setNumber(1)`:\n\n```sp-pre-placeholder grow-[2]\nsetNumber(0 + 1);\nsetNumber(0 + 1);\nsetNumber(0 + 1);\n```\n\nBut there is one other factor at play here. **React waits until _all_ code in the event handlers has run before processing your state updates.** This is why the re-render only happens _after_ all these `setNumber()` calls.\n\nThis might remind you of a waiter taking an order at the restaurant. A waiter doesn’t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.\n\n![An elegant cursor at a restaurant places and order multiple times with React, playing the part of the waiter. After she calls setState() multiple times, the waiter writes down the last one she requested as her final order.](https://react.dev/images/docs/illustrations/i_react-batching.png)\n\nThis lets you update multiple state variables—even from multiple components—without triggering too many [re-renders.](https://react.dev/learn/render-and-commit#re-renders-when-state-updates) But this also means that the UI won’t be updated until _after_ your event handler, and any code in it, completes. This behavior, also known as **batching,** makes your React app run much faster. It also avoids dealing with confusing “half-finished” renders where only some of the variables have been updated.\n\n**React does not batch across _multiple_ intentional events like clicks**—each click is handled separately. Rest assured that React only does batching when it’s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating the same state multiple times before the next render in react-learn?\n\nAssistant: To updating the same state multiple times before the next render in react-learn, here's what you do:\nIt is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the _next state value_ like `setNumber(number + 1)`, you can pass a _function_ that calculates the next state based on the previous one in the queue, like `setNumber(n => n + 1)`. It is a way to tell React to “do something with the state value” instead of just replacing it.\n\nTry incrementing the counter now:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}\n```\n\nHere, `n => n + 1` is called an **updater function.** When you pass it to a state setter:\n\n1. React queues this function to be processed after all the other code in the event handler has run.\n2. During the next render, React goes through the queue and gives you the final updated state.\n\n```sp-pre-placeholder grow-[2]\nsetNumber(n => n + 1);\nsetNumber(n => n + 1);\nsetNumber(n => n + 1);\n```\n\nHere’s how React works through these lines of code while executing the event handler:\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n3. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\nWhen you call `useState` during the next render, React goes through the queue. The previous `number` state was `0`, so that’s what React passes to the first updater function as the `n` argument. Then React takes the return value of your previous updater function and passes it to the next updater as `n`, and so on:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| `n => n + 1` | `0` | `0 + 1 = 1` |\n| `n => n + 1` | `1` | `1 + 1 = 2` |\n| `n => n + 1` | `2` | `2 + 1 = 3` |\n\nReact stores `3` as the final result and returns it from `useState`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what happens if you update state after replacing it in react-learn?\n\nAssistant: To what happens if you update state after replacing it in react-learn, here's what you do:\nWhat about this event handler? What do you think `number` will be in the next render?\n\n```sp-pre-placeholder grow-[2]\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n}}>\n```\n\nHere’s what this event handler tells React to do:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds _“replace with `5`”_ to its queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds _that function_ to its queue.\n\nDuring the next render, React goes through the state queue:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| ”replace with `5`” | `0` (unused) | `5` |\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n\nReact stores `6` as the final result and returns it from `useState`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what happens if you replace state after updating it in react-learn?\n\nAssistant: To what happens if you replace state after updating it in react-learn, here's what you do:\nLet’s try one more example. What do you think `number` will be in the next render?\n\n```sp-pre-placeholder grow-[2]\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n  setNumber(42);\n}}>\n```\n\nHere’s how React works through these lines of code while executing this event handler:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds _“replace with `5`”_ to its queue.\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds _that function_ to its queue.\n3. `setNumber(42)`: React adds _“replace with `42`”_ to its queue.\n\nDuring the next render, React goes through the state queue:\n\n| queued update | `n` | returns |\n| --- | --- | --- |\n| ”replace with `5`” | `0` (unused) | `5` |\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n| ”replace with `42`” | `6` (unused) | `42` |\n\nThen React stores `42` as the final result and returns it from `useState`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I naming conventions in react-learn?\n\nAssistant: To naming conventions in react-learn, here's what you do:\nIt’s common to name the updater function argument by the first letters of the corresponding state variable:\n\n```sp-pre-placeholder grow-[2]\nsetEnabled(e => !e);\nsetLastName(ln => ln.reverse());\nsetFriendCount(fc => fc * 2);\n```\n\nIf you prefer more verbose code, another common convention is to repeat the full state variable name, like `setEnabled(enabled => !enabled)`, or to use a prefix like `setEnabled(prevEnabled => !prevEnabled)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Setting state does not change the variable in the existing render, but it requests a new render.\n- React processes state updates after event handlers have finished running. This is called batching.\n- To update some state multiple times in one event, you can use `setNumber(n => n + 1)` updater function..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Fix a request counter 2. Implement the state queue yourself\n\n#### Challenge1 of2:   Fix a request counter\nYou’re working on an art marketplace app that lets the user submit multiple orders for an art item at the same time. Each time the user presses the “Buy” button, the “Pending” counter should increase by one. After three seconds, the “Pending” counter should decrease, and the “Completed” counter should increase.\n\nHowever, the “Pending” counter does not behave as intended. When you press “Buy”, it decreases to `-1` (which should not be possible!). And if you click fast twice, both counters seem to behave unpredictably.\n\nWhy does this happen? Fix both counters.\n\n```javascript\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(pending + 1);\n    await delay(3000);\n    setPending(pending - 1);\n    setCompleted(completed + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy\n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\nShow more.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Queueing a Series of State Updates in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter Component with setNumber**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n\n```\n\nThis snippet shows you how to counter component with setnumber, which is an important aspect of queueing a series of state updates.\n\n**Counter Component with updater function**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}\n\n```\n\nThis snippet shows you how to counter component with updater function, which is an important aspect of queueing a series of state updates.\n\n**Request Tracker Component**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(pending + 1);\n    await delay(3000);\n    setPending(pending - 1);\n    setCompleted(completed + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy\n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\nThis snippet shows you how to request tracker component, which is an important aspect of queueing a series of state updates.\n\n", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "code_examples", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Queueing a Series of State Updates in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact does not batch across multiple intentional events like clicks—each click is handled separately.\n\nWhen using updater functions, ensure they are pure and only return the result without side effects.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/queueing-a-series-of-state-updates", "title": "Queueing a Series of State Updates", "description": "This page explains how React batches state updates and how to perform multiple operations on a state variable before queuing the next render.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:27:13", "type": "best_practices", "page_metadata": {"og:url": "https://react.dev/learn/queueing-a-series-of-state-updates", "twitter:creator": "@reactjs", "twitter:title": "Queueing a Series of State Updates – React", "algolia-search-order": "31", "twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogImage": "https://react.dev/images/og-learn.png", "title": "Queueing a Series of State Updates – React", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Queueing a Series of State Updates – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Queueing a Series of State Updates – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/queueing-a-series-of-state-updates", "scrapeId": "770b79ea-bdf8-4f32-9ac0-1174a9f41692", "sourceURL": "https://react.dev/learn/queueing-a-series-of-state-updates", "url": "https://react.dev/learn/queueing-a-series-of-state-updates", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Quick Start is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Quick Start in react-learn.\n\n# Quick Start\n\nWelcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to create and nest components\n- How to add markup and styles\n- How to display data\n- How to render conditions and lists\n- How to respond to events and update the screen\n- How to share data between components\n\n## Creating and nesting components\n\nReact apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\n\nReact components are JavaScript functions that return markup:\n\n```javascript\nfunction MyButton() {\n  return (\n    <button>I'm a button</button>\n  );\n}\n```\n\nNow that you’ve declared `MyButton`, you can nest it into another component:\n\n```javascript\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\nNotice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\n\nHave a look at the result:\n\n```javascript\nfunction MyButton() {\n  return (\n    <button>\n      I'm a button\n    </button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\nThe `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.\n\n## Writing markup with JSX\n\nThe markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](https://react.dev/learn/installation) support JSX out of the box.\n\nJSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:\n\n```javascript\nfunction AboutPage() {\n  return (\n    <>\n      <h1>About</h1>\n      <p>Hello there.<br />How do you do?</p>\n    </>\n  );\n}\n```\n\nIf you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to create and nest components\n- How to add markup and styles\n- How to display data\n- How to render conditions and lists\n- How to respond to events and update the screen\n- How to share data between components.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I creating and nesting components in react-learn?\n\nAssistant: To creating and nesting components in react-learn, here's what you do:\nReact apps are made out of _components_. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\n\nReact components are JavaScript functions that return markup:\n\n```javascript\nfunction MyButton() {\n  return (\n    <button>I'm a button</button>\n  );\n}\n```\n\nNow that you’ve declared `MyButton`, you can nest it into another component:\n\n```javascript\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\nNotice that `<MyButton />` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\n\nHave a look at the result:\n\n```javascript\nfunction MyButton() {\n  return (\n    <button>\n      I'm a button\n    </button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\nThe `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I writing markup with jsx in react-learn?\n\nAssistant: To writing markup with jsx in react-learn, here's what you do:\nThe markup syntax you’ve seen above is called _JSX_. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](https://react.dev/learn/installation) support JSX out of the box.\n\nJSX is stricter than HTML. You have to close tags like `<br />`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:\n\n```javascript\nfunction AboutPage() {\n  return (\n    <>\n      <h1>About</h1>\n      <p>Hello there.<br />How do you do?</p>\n    </>\n  );\n}\n```\n\nIf you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Quick Start in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating and nesting components**:\n\n```yaml\nfunction MyButton() {\n  return (\n    <button>I'm a button</button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to creating and nesting components, which is an important aspect of quick start.\n\n", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Quick Start in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact component names must always start with a capital letter, while HTML tags must be lowercase.\n\nJSX is stricter than HTML; you must close tags and wrap multiple JSX tags in a parent element.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn", "title": "Quick Start", "description": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 02:27:38", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn", "twitter:title": "Quick Start – React", "og:title": "Quick Start – React", "algolia-search-order": "3", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "title": "Quick Start – React", "twitter:card": "summary_large_image", "ogTitle": "Quick Start – React", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "ogDescription": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "scrapeId": "5b3d5a96-a1b2-4018-bdbc-b0bab237b916", "sourceURL": "https://react.dev/learn", "url": "https://react.dev/learn", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Managing State is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Managing State in react-learn.\n\n# Managing State\n\nAs your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.Here's a quick rundown of what this is about:\n\n## In this chapter\n\n- [How to think about UI changes as state changes](https://react.dev/learn/reacting-to-input-with-state)\n- [How to structure state well](https://react.dev/learn/choosing-the-state-structure)\n- [How to “lift state up” to share it between components](https://react.dev/learn/sharing-state-between-components)\n- [How to control whether the state gets preserved or reset](https://react.dev/learn/preserving-and-resetting-state)\n- [How to consolidate complex state logic in a function](https://react.dev/learn/extracting-state-logic-into-a-reducer)\n- [How to pass information without “prop drilling”](https://react.dev/learn/passing-data-deeply-with-context)\n- [How to scale state management as your app grows](https://react.dev/learn/scaling-up-with-reducer-and-context)\n\n## Reacting to input with state\n\nWith React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\n\nHere is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.\n\n## Choosing the state structure\n\nStructuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!\n\n## Sharing state between components\n\nSometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.\n\n## Preserving and resetting state\n\nWhen you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.\n\n## Extracting state logic into a reducer\n\nComponents with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!\n\n## Passing data deeply with context\n\nUsually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.\n\n## Scaling up with reducer and context\n\nReducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\n\n## What’s next?\n\nHead over to [Reacting to Input with State](https://react.dev/learn/reacting-to-input-with-state) to start reading this chapter page by page!\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "overview", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I in this chapter in react-learn?\n\nAssistant: To in this chapter in react-learn, here's what you do:\n- [How to think about UI changes as state changes](https://react.dev/learn/reacting-to-input-with-state)\n- [How to structure state well](https://react.dev/learn/choosing-the-state-structure)\n- [How to “lift state up” to share it between components](https://react.dev/learn/sharing-state-between-components)\n- [How to control whether the state gets preserved or reset](https://react.dev/learn/preserving-and-resetting-state)\n- [How to consolidate complex state logic in a function](https://react.dev/learn/extracting-state-logic-into-a-reducer)\n- [How to pass information without “prop drilling”](https://react.dev/learn/passing-data-deeply-with-context)\n- [How to scale state management as your app grows](https://react.dev/learn/scaling-up-with-reducer-and-context).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I reacting to input with state in react-learn?\n\nAssistant: To reacting to input with state in react-learn, here's what you do:\nWith React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\n\nHere is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I choosing the state structure in react-learn?\n\nAssistant: To choosing the state structure in react-learn, here's what you do:\nStructuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I sharing state between components in react-learn?\n\nAssistant: To sharing state between components in react-learn, here's what you do:\nSometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I preserving and resetting state in react-learn?\n\nAssistant: To preserving and resetting state in react-learn, here's what you do:\nWhen you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I extracting state logic into a reducer in react-learn?\n\nAssistant: To extracting state logic into a reducer in react-learn, here's what you do:\nComponents with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing data deeply with context in react-learn?\n\nAssistant: To passing data deeply with context in react-learn, here's what you do:\nUsually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I scaling up with reducer and context in react-learn?\n\nAssistant: To scaling up with reducer and context in react-learn, here's what you do:\nReducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what’s next? in react-learn?\n\nAssistant: To what’s next? in react-learn, here's what you do:\nHead over to [Reacting to Input with State](https://react.dev/learn/reacting-to-input-with-state) to start reading this chapter page by page!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "section_detail", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Managing State in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Quiz Form Example**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [answer, setAnswer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('typing');\n\n  if (status === 'success') {\n    return <h1>That's right!</h1>;\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('submitting');\n    try {\n      await submitForm(answer);\n      setStatus('success');\n    } catch (err) {\n      setStatus('typing');\n      setError(err);\n    }\n  }\n\n  function handleTextareaChange(e) {\n    setAnswer(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>City quiz</h2>\n      <p>In which city is there a billboard that turns air into drinkable water?</p>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={answer}\n          onChange={handleTextareaChange}\n          disabled={status === 'submitting'}\n        />\n        <br />\n        <button disabled={answer.length === 0 || status === 'submitting'}>\n          Submit\n        </button>\n        {error !== null && <p className=\"Error\">{error.message}</p>}\n      </form>\n    </>\n  );\n}\n\nfunction submitForm(answer) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let shouldError = answer.toLowerCase() !== 'lima';\n      if (shouldError) {\n        reject(new Error('Good guess but a wrong answer. Try again!'));\n      } else {\n        resolve();\n      }\n    }, 1500);\n  });\n}\n```\n\nThis snippet shows you how to quiz form example, which is an important aspect of managing state.\n\n", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "code_examples", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Managing State in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nState shouldn’t contain redundant or duplicated information.\n\nRemove unnecessary state to avoid bugs.\n\nUse context to avoid prop drilling.\n\nCombine reducers and context for complex state management.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/managing-state", "title": "Managing State", "description": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:28:27", "type": "best_practices", "page_metadata": {"language": "en", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Managing State – React", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "og:type": "website", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:title": "Managing State – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "title": "Managing State – React", "fb:app_id": "623268441017527", "ogTitle": "Managing State – React", "og:url": "https://react.dev/learn/managing-state", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "34", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/managing-state", "scrapeId": "46bca9da-b113-4526-8ae8-c129e3b83510", "sourceURL": "https://react.dev/learn/managing-state", "url": "https://react.dev/learn/managing-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Synchronizing with Effects is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Synchronizing with Effects in react-learn.\n\n# Synchronizing with Effects\n\nSome components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What Effects are\n- How Effects are different from events\n- How to declare an Effect in your component\n- How to skip re-running an Effect unnecessarily\n- Why Effects run twice in development and how to fix them\n\n## What are Effects and how are they different from events?\n\nBefore getting to Effects, you need to be familiar with two types of logic inside React components:\n\n- **Rendering code** lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n\n- **Event handlers** are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain side effects (they change the program’s state) caused by a specific user action (for example, a button click or typing).\n\nSometimes this isn’t enough. Consider a `ChatRoom` component that must connect to the chat server whenever it’s visible on the screen. Connecting to a server is not a pure calculation (it’s a side effect) so it can’t happen during rendering. However, there is no single particular event like a click that causes `ChatRoom` to be displayed.\n\n**Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.** Sending a message in the chat is an event because it is directly caused by the user clicking a specific button. However, setting up a server connection is an Effect because it should happen no matter which interaction caused the component to appear. Effects run at the end of a commit after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).\n\n## You might not need an Effect\n\n**Don’t rush to add Effects to your components.** Keep in mind that Effects are typically used to “step out” of your React code and synchronize with some external system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, you might not need an Effect.\n\n## How to write an Effect\n\nTo write an Effect, follow these three steps:\n\n1. **Declare an Effect.** By default, your Effect will run after every commit.\n2. **Specify the Effect dependencies.** Most Effects should only re-run when needed rather than after every render.\n3. **Add cleanup if needed.** Some Effects need to specify how to stop, undo, or clean up whatever they were doing.\n\n## Step 1: Declare an Effect\n\nTo declare an Effect in your component, import the `useEffect` Hook from React:\n\n```javascript\nimport { useEffect } from 'react';\n```\n\nThen, call it at the top level of your component and put some code inside your Effect:\n\n```javascript\nfunction MyComponent() {\n  useEffect(() => {\n    // Code here will run after *every* render\n  });\n  return <div />;\n}\n```\n\nEvery time your component renders, React will update the screen and then run the code inside `useEffect`. In other words, **`useEffect` “delays” a piece of code from running until that render is reflected on the screen.**\n\n## Step 2: Specify the Effect dependencies\n\nBy default, Effects run after every render. Often, this is not what you want:\n\n- Sometimes, it’s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it’s necessary.\n- Sometimes, it’s wrong. For example, you don’t want to trigger a component fade-in animation on every keystroke.\n\nYou can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the `useEffect` call.\n\n## Step 3: Add cleanup if needed\n\nConsider a different example. You’re writing a `ChatRoom` component that needs to connect to the chat server when it appears. You are given a `createConnection()` API that returns an object with `connect()` and `disconnect()` methods. How do you keep the component connected while it is displayed to the user?\n\nStart by writing the Effect logic:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n});\n```\n\nIt would be slow to connect to the chat after every re-render, so you add the dependency array:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n}, []);\n```\n\n**The code inside the Effect does not use any props or state, so your dependency array is `[]` (empty). This tells React to only run this code when the component “mounts”, i.e. appears on the screen for the first time.**\n\n## How to handle the Effect firing twice in development?\n\nReact intentionally remounts your components in development to find bugs like in the last example. **The right question isn’t “how to run an Effect once”, but “how to fix my Effect so that it works after remounting”.**\n\n## Putting it all together\n\nThis playground can help you “get a feel” for how Effects work in practice.\n\n## Recap\n\n- Unlike events, Effects are caused by rendering itself rather than a particular interaction.\n- Effects let you synchronize a component with some external system (third-party API, network, etc).\n- By default, Effects run after every render (including the initial one).\n- React will skip the Effect if all of its dependencies have the same values as during the last render.\n- You can’t “choose” your dependencies. They are determined by the code inside the Effect.\n- Empty dependency array ( `[]`) corresponds to the component “mounting”, i.e. being added to the screen.\n- In Strict Mode, React mounts components twice (in development only!) to stress-test your Effects.\n- If your Effect breaks because of remounting, you need to implement a cleanup function.\n- React will call your cleanup function before the Effect runs next time, and during the unmount.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "overview", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What Effects are\n- How Effects are different from events\n- How to declare an Effect in your component\n- How to skip re-running an Effect unnecessarily\n- Why Effects run twice in development and how to fix them.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what are effects and how are they different from events? in react-learn?\n\nAssistant: To what are effects and how are they different from events? in react-learn, here's what you do:\nBefore getting to Effects, you need to be familiar with two types of logic inside React components:\n\n- **Rendering code** lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n\n- **Event handlers** are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain side effects (they change the program’s state) caused by a specific user action (for example, a button click or typing).\n\nSometimes this isn’t enough. Consider a `ChatRoom` component that must connect to the chat server whenever it’s visible on the screen. Connecting to a server is not a pure calculation (it’s a side effect) so it can’t happen during rendering. However, there is no single particular event like a click that causes `ChatRoom` to be displayed.\n\n**Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.** Sending a message in the chat is an event because it is directly caused by the user clicking a specific button. However, setting up a server connection is an Effect because it should happen no matter which interaction caused the component to appear. Effects run at the end of a commit after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you might not need an effect in react-learn?\n\nAssistant: To you might not need an effect in react-learn, here's what you do:\n**Don’t rush to add Effects to your components.** Keep in mind that Effects are typically used to “step out” of your React code and synchronize with some external system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, you might not need an Effect..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how to write an effect in react-learn?\n\nAssistant: To how to write an effect in react-learn, here's what you do:\nTo write an Effect, follow these three steps:\n\n1. **Declare an Effect.** By default, your Effect will run after every commit.\n2. **Specify the Effect dependencies.** Most Effects should only re-run when needed rather than after every render.\n3. **Add cleanup if needed.** Some Effects need to specify how to stop, undo, or clean up whatever they were doing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: declare an effect in react-learn?\n\nAssistant: To step 1: declare an effect in react-learn, here's what you do:\nTo declare an Effect in your component, import the `useEffect` Hook from React:\n\n```javascript\nimport { useEffect } from 'react';\n```\n\nThen, call it at the top level of your component and put some code inside your Effect:\n\n```javascript\nfunction MyComponent() {\n  useEffect(() => {\n    // Code here will run after *every* render\n  });\n  return <div />;\n}\n```\n\nEvery time your component renders, React will update the screen and then run the code inside `useEffect`. In other words, **`useEffect` “delays” a piece of code from running until that render is reflected on the screen.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: specify the effect dependencies in react-learn?\n\nAssistant: To step 2: specify the effect dependencies in react-learn, here's what you do:\nBy default, Effects run after every render. Often, this is not what you want:\n\n- Sometimes, it’s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it’s necessary.\n- Sometimes, it’s wrong. For example, you don’t want to trigger a component fade-in animation on every keystroke.\n\nYou can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the `useEffect` call..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: add cleanup if needed in react-learn?\n\nAssistant: To step 3: add cleanup if needed in react-learn, here's what you do:\nConsider a different example. You’re writing a `ChatRoom` component that needs to connect to the chat server when it appears. You are given a `createConnection()` API that returns an object with `connect()` and `disconnect()` methods. How do you keep the component connected while it is displayed to the user?\n\nStart by writing the Effect logic:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n});\n```\n\nIt would be slow to connect to the chat after every re-render, so you add the dependency array:\n\n```javascript\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n}, []);\n```\n\n**The code inside the Effect does not use any props or state, so your dependency array is `[]` (empty). This tells React to only run this code when the component “mounts”, i.e. appears on the screen for the first time.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how to handle the effect firing twice in development? in react-learn?\n\nAssistant: To how to handle the effect firing twice in development? in react-learn, here's what you do:\nReact intentionally remounts your components in development to find bugs like in the last example. **The right question isn’t “how to run an Effect once”, but “how to fix my Effect so that it works after remounting”.**.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I putting it all together in react-learn?\n\nAssistant: To putting it all together in react-learn, here's what you do:\nThis playground can help you “get a feel” for how Effects work in practice..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Unlike events, Effects are caused by rendering itself rather than a particular interaction.\n- Effects let you synchronize a component with some external system (third-party API, network, etc).\n- By default, Effects run after every render (including the initial one).\n- React will skip the Effect if all of its dependencies have the same values as during the last render.\n- You can’t “choose” your dependencies. They are determined by the code inside the Effect.\n- Empty dependency array ( `[]`) corresponds to the component “mounting”, i.e. being added to the screen.\n- In Strict Mode, React mounts components twice (in development only!) to stress-test your Effects.\n- If your Effect breaks because of remounting, you need to implement a cleanup function.\n- React will call your cleanup function before the Effect runs next time, and during the unmount..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "section_detail", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Synchronizing with Effects in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Declare an Effect**:\n\n```yaml\nimport { useEffect } from 'react';\n\nfunction MyComponent() {\n  useEffect(() => {\n    // Code here will run after *every* render\n  });\n  return <div />;\n}\n```\n\nThis snippet shows you how to declare an effect, which is an important aspect of synchronizing with effects.\n\n", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "code_examples", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Synchronizing with Effects in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDon’t rush to add Effects to your components.\n\nIf your Effect only adjusts some state based on other state, you might not need an Effect.\n\nImplement the cleanup function to avoid memory leaks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/synchronizing-with-effects", "title": "Synchronizing with Effects", "description": "Some components need to synchronize with external systems. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 02:36:27", "type": "best_practices", "page_metadata": {"og:title": "Synchronizing with Effects – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "ogTitle": "Synchronizing with Effects – React", "og:type": "website", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/synchronizing-with-effects", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "title": "Synchronizing with Effects – React", "twitter:title": "Synchronizing with Effects – React", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/synchronizing-with-effects", "algolia-search-order": "45", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "2d145c8f-9e67-4846-9e93-660e1d7aaf78", "sourceURL": "https://react.dev/learn/synchronizing-with-effects", "url": "https://react.dev/learn/synchronizing-with-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Updating Objects in State is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Updating Objects in State in react-learn.\n\n# Updating Objects in State\n\nThis page covers how to correctly update objects in React state, including handling nested objects and immutability.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to correctly update an object in React state\n- How to update a nested object without mutating it\n- What immutability is, and how not to break it\n- How to make object copying less repetitive with Immer\n\n## What’s a mutation?\n\nYou can store any kind of JavaScript value in state.\n\n```sp-pre-placeholder grow-[2]\nconst [x, setX] = useState(0);\n```\n\nSo far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are “immutable”, meaning unchangeable or “read-only”. You can trigger a re-render to _replace_ a value:\n\n```sp-pre-placeholder grow-[2]\nsetX(5);\n```\n\nThe `x` state changed from `0` to `5`, but the _number `0` itself_ did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\n\nNow consider an object in state:\n\n```sp-pre-placeholder grow-[2]\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\nTechnically, it is possible to change the contents of _the object itself_. **This is called a mutation:**\n\n```sp-pre-placeholder grow-[2]\nposition.x = 5;\n```\n\nHowever, although objects in React state are technically mutable, you should treat them **as if** they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them.\n\n## Treat state as read-only\n\nIn other words, you should **treat any JavaScript object that you put into state as read-only.**\n\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        position.x = e.clientX;\n        position.y = e.clientY;\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\nThe problem is with this bit of code.\n\n```sp-pre-placeholder grow-[2]\nonPointerMove={e => {\n\n  position.x = e.clientX;\n\n  position.y = e.clientY;\n}}\n```\n\nThis code modifies the object assigned to `position` from [the previous render.](https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time) But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It’s like trying to change the order after you’ve already eaten the meal. While mutating state can work in some cases, we don’t recommend it. You should treat the state value you have access to in a render as read-only.\n\nTo actually [trigger a re-render](https://react.dev/learn/state-as-a-snapshot#setting-state-triggers-renders) in this case, **create a _new_ object and pass it to the state setting function:**\n\n```sp-pre-placeholder grow-[2]\nonPointerMove={e => {\n\n  setPosition({\n\n    x: e.clientX,\n\n    y: e.clientY\n\n  });\n}}\n```\n\nWith `setPosition`, you’re telling React:\n- Replace `position` with this new object\n- And render this component again\n\nNotice how the red dot now follows your pointer when you touch or hover over the preview area.\n\n## Deep Dive\n\n#### Local mutation is fine\n\nCode like this is a problem because it modifies an _existing_ object in state:\n\n```sp-pre-placeholder grow-[2]\nposition.x = e.clientX;\n\nposition.y = e.clientY;\n```\n\nBut code like this is **absolutely fine** because you’re mutating a fresh object you have _just created_:\n\n```sp-pre-placeholder grow-[2]\nconst nextPosition = {};\n\nnextPosition.x = e.clientX;\n\nnextPosition.y = e.clientY;\n\nsetPosition(nextPosition);\n```\n\nIn fact, it is completely equivalent to writing this:\n\n```sp-pre-placeholder grow-[2]\nsetPosition({\n\n  x: e.clientX,\n\n  y: e.clientY\n\n});\n```\n\nMutation is only a problem when you change _existing_ objects that are already in state. Mutating an object you’ve just created is okay because _no other code references it yet._ Changing it isn’t going to accidentally impact something that depends on it. This is called a “local mutation”. You can even do local mutation [while rendering.](https://react.dev/learn/keeping-components-pure#local-mutation-your-components-little-secret) Very convenient and completely okay!\n\n## Copying objects with the spread syntax\n\nIn the previous example, the `position` object is always created fresh from the current cursor position. But often, you will want to include _existing_ data as a part of the new object you’re creating. For example, you may want to update _only one_ field in a form, but keep the previous values for all other fields.\n\nThese input fields don’t work because the `onChange` handlers mutate the state:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleFirstNameChange(e) {\n    person.firstName = e.target.value;\n  }\n\n  function handleLastNameChange(e) {\n    person.lastName = e.target.value;\n  }\n\n  function handleEmailChange(e) {\n    person.email = e.target.value;\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={person.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={person.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          value={person.email}\n          onChange={handleEmailChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n```\n\nFor example, this line mutates the state from a past render:\n\n```sp-pre-placeholder grow-[2]\nperson.firstName = e.target.value;\n```\n\nThe reliable way to get the behavior you’re looking for is to create a new object and pass it to `setPerson`. But here, you want to also **copy the existing data into it** because only one of the fields has changed:\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  firstName: e.target.value, // New first name from the input\n\n  lastName: person.lastName,\n\n  email: person.email\n});\n```\n\nYou can use the `...` [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals) syntax so that you don’t need to copy every property separately.\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  ...person, // Copy the old fields\n\n  firstName: e.target.value // But override this one\n});\n```\n\nNow the form works!\n\nNotice how you didn’t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient—as long as you update it correctly!\n\n## Updating a nested object\n\nConsider a nested object structure like this:\n\n```sp-pre-placeholder grow-[2]\nconst [person, setPerson] = useState({\n\n  name: 'Niki de Saint Phalle',\n\n  artwork: {\n\n    title: 'Blue Nana',\n\n    city: 'Hamburg',\n\n    image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n  }\n});\n```\n\nIf you wanted to update `person.artwork.city`, it’s clear how to do it with mutation:\n\n```sp-pre-placeholder grow-[2]\nperson.artwork.city = 'New Delhi';\n```\n\nBut in React, you treat state as immutable! In order to change `city`, you would first need to produce the new `artwork` object (pre-populated with data from the previous one), and then produce the new `person` object which points at the new `artwork`:\n\n```sp-pre-placeholder grow-[2]\nconst nextArtwork = { ...person.artwork, city: 'New Delhi' };\n\nconst nextPerson = { ...person, artwork: nextArtwork };\n\nsetPerson(nextPerson);\n```\n\nOr, written as a single function call:\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  ...person, // Copy other fields\n\n  artwork: { // but replace the artwork\n\n    ...person.artwork, // with the same one\n\n    city: 'New Delhi' // but in New Delhi!\n\n  }\n});\n```\n\nThis gets a bit wordy, but it works fine for many cases.\n\n## Write concise update logic with Immer\n\nIf your state is deeply nested, you might want to consider [flattening it.](https://react.dev/learn/choosing-the-state-structure#avoid-deeply-nested-state) But, if you don’t want to change your state structure, you might prefer a shortcut to nested spreads. [Immer](https://github.com/immerjs/use-immer) is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are “breaking the rules” and mutating an object:\n\n```sp-pre-placeholder grow-[2]\nupdatePerson(draft => {\n\n  draft.artwork.city = 'Lagos';\n\n});\n```\n\nBut unlike a regular mutation, it doesn’t overwrite the past state!\n\n## Recap\n\n- Treat all state in React as immutable.\n- When you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.\n- Instead of mutating an object, create a _new_ version of it, and trigger a re-render by setting state to it.\n- You can use the `{...obj, something: 'newValue'}` object spread syntax to create copies of objects.\n- Spread syntax is shallow: it only copies one level deep.\n- To update a nested object, you need to create copies all the way up from the place you’re updating.\n- To reduce repetitive copying code, use Immer.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to correctly update an object in React state\n- How to update a nested object without mutating it\n- What immutability is, and how not to break it\n- How to make object copying less repetitive with Immer.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what’s a mutation? in react-learn?\n\nAssistant: To what’s a mutation? in react-learn, here's what you do:\nYou can store any kind of JavaScript value in state.\n\n```sp-pre-placeholder grow-[2]\nconst [x, setX] = useState(0);\n```\n\nSo far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are “immutable”, meaning unchangeable or “read-only”. You can trigger a re-render to _replace_ a value:\n\n```sp-pre-placeholder grow-[2]\nsetX(5);\n```\n\nThe `x` state changed from `0` to `5`, but the _number `0` itself_ did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\n\nNow consider an object in state:\n\n```sp-pre-placeholder grow-[2]\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\nTechnically, it is possible to change the contents of _the object itself_. **This is called a mutation:**\n\n```sp-pre-placeholder grow-[2]\nposition.x = 5;\n```\n\nHowever, although objects in React state are technically mutable, you should treat them **as if** they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I treat state as read-only in react-learn?\n\nAssistant: To treat state as read-only in react-learn, here's what you do:\nIn other words, you should **treat any JavaScript object that you put into state as read-only.**\n\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  return (\n    <div\n      onPointerMove={e => {\n        position.x = e.clientX;\n        position.y = e.clientY;\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\nThe problem is with this bit of code.\n\n```sp-pre-placeholder grow-[2]\nonPointerMove={e => {\n\n  position.x = e.clientX;\n\n  position.y = e.clientY;\n}}\n```\n\nThis code modifies the object assigned to `position` from [the previous render.](https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time) But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It’s like trying to change the order after you’ve already eaten the meal. While mutating state can work in some cases, we don’t recommend it. You should treat the state value you have access to in a render as read-only.\n\nTo actually [trigger a re-render](https://react.dev/learn/state-as-a-snapshot#setting-state-triggers-renders) in this case, **create a _new_ object and pass it to the state setting function:**\n\n```sp-pre-placeholder grow-[2]\nonPointerMove={e => {\n\n  setPosition({\n\n    x: e.clientX,\n\n    y: e.clientY\n\n  });\n}}\n```\n\nWith `setPosition`, you’re telling React:\n- Replace `position` with this new object\n- And render this component again\n\nNotice how the red dot now follows your pointer when you touch or hover over the preview area..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\n#### Local mutation is fine\n\nCode like this is a problem because it modifies an _existing_ object in state:\n\n```sp-pre-placeholder grow-[2]\nposition.x = e.clientX;\n\nposition.y = e.clientY;\n```\n\nBut code like this is **absolutely fine** because you’re mutating a fresh object you have _just created_:\n\n```sp-pre-placeholder grow-[2]\nconst nextPosition = {};\n\nnextPosition.x = e.clientX;\n\nnextPosition.y = e.clientY;\n\nsetPosition(nextPosition);\n```\n\nIn fact, it is completely equivalent to writing this:\n\n```sp-pre-placeholder grow-[2]\nsetPosition({\n\n  x: e.clientX,\n\n  y: e.clientY\n\n});\n```\n\nMutation is only a problem when you change _existing_ objects that are already in state. Mutating an object you’ve just created is okay because _no other code references it yet._ Changing it isn’t going to accidentally impact something that depends on it. This is called a “local mutation”. You can even do local mutation [while rendering.](https://react.dev/learn/keeping-components-pure#local-mutation-your-components-little-secret) Very convenient and completely okay!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I copying objects with the spread syntax in react-learn?\n\nAssistant: To copying objects with the spread syntax in react-learn, here's what you do:\nIn the previous example, the `position` object is always created fresh from the current cursor position. But often, you will want to include _existing_ data as a part of the new object you’re creating. For example, you may want to update _only one_ field in a form, but keep the previous values for all other fields.\n\nThese input fields don’t work because the `onChange` handlers mutate the state:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleFirstNameChange(e) {\n    person.firstName = e.target.value;\n  }\n\n  function handleLastNameChange(e) {\n    person.lastName = e.target.value;\n  }\n\n  function handleEmailChange(e) {\n    person.email = e.target.value;\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          value={person.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={person.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          value={person.email}\n          onChange={handleEmailChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n```\n\nFor example, this line mutates the state from a past render:\n\n```sp-pre-placeholder grow-[2]\nperson.firstName = e.target.value;\n```\n\nThe reliable way to get the behavior you’re looking for is to create a new object and pass it to `setPerson`. But here, you want to also **copy the existing data into it** because only one of the fields has changed:\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  firstName: e.target.value, // New first name from the input\n\n  lastName: person.lastName,\n\n  email: person.email\n});\n```\n\nYou can use the `...` [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals) syntax so that you don’t need to copy every property separately.\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  ...person, // Copy the old fields\n\n  firstName: e.target.value // But override this one\n});\n```\n\nNow the form works!\n\nNotice how you didn’t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient—as long as you update it correctly!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating a nested object in react-learn?\n\nAssistant: To updating a nested object in react-learn, here's what you do:\nConsider a nested object structure like this:\n\n```sp-pre-placeholder grow-[2]\nconst [person, setPerson] = useState({\n\n  name: 'Niki de Saint Phalle',\n\n  artwork: {\n\n    title: 'Blue Nana',\n\n    city: 'Hamburg',\n\n    image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n  }\n});\n```\n\nIf you wanted to update `person.artwork.city`, it’s clear how to do it with mutation:\n\n```sp-pre-placeholder grow-[2]\nperson.artwork.city = 'New Delhi';\n```\n\nBut in React, you treat state as immutable! In order to change `city`, you would first need to produce the new `artwork` object (pre-populated with data from the previous one), and then produce the new `person` object which points at the new `artwork`:\n\n```sp-pre-placeholder grow-[2]\nconst nextArtwork = { ...person.artwork, city: 'New Delhi' };\n\nconst nextPerson = { ...person, artwork: nextArtwork };\n\nsetPerson(nextPerson);\n```\n\nOr, written as a single function call:\n\n```sp-pre-placeholder grow-[2]\nsetPerson({\n\n  ...person, // Copy other fields\n\n  artwork: { // but replace the artwork\n\n    ...person.artwork, // with the same one\n\n    city: 'New Delhi' // but in New Delhi!\n\n  }\n});\n```\n\nThis gets a bit wordy, but it works fine for many cases..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I write concise update logic with immer in react-learn?\n\nAssistant: To write concise update logic with immer in react-learn, here's what you do:\nIf your state is deeply nested, you might want to consider [flattening it.](https://react.dev/learn/choosing-the-state-structure#avoid-deeply-nested-state) But, if you don’t want to change your state structure, you might prefer a shortcut to nested spreads. [Immer](https://github.com/immerjs/use-immer) is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are “breaking the rules” and mutating an object:\n\n```sp-pre-placeholder grow-[2]\nupdatePerson(draft => {\n\n  draft.artwork.city = 'Lagos';\n\n});\n```\n\nBut unlike a regular mutation, it doesn’t overwrite the past state!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Treat all state in React as immutable.\n- When you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.\n- Instead of mutating an object, create a _new_ version of it, and trigger a re-render by setting state to it.\n- You can use the `{...obj, something: 'newValue'}` object spread syntax to create copies of objects.\n- Spread syntax is shallow: it only copies one level deep.\n- To update a nested object, you need to create copies all the way up from the place you’re updating.\n- To reduce repetitive copying code, use Immer..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Updating Objects in State in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of state initialization with useState**:\n\n```yaml\nconst [x, setX] = useState(0);\n```\n\nThis snippet shows you how to example of state initialization with usestate, which is an important aspect of updating objects in state.\n\n**Updating state with setX**:\n\n```yaml\nsetX(5);\n```\n\nThis snippet shows you how to updating state with setx, which is an important aspect of updating objects in state.\n\n**Example of state initialization with an object**:\n\n```yaml\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\nThis snippet shows you how to example of state initialization with an object, which is an important aspect of updating objects in state.\n\n**Mutating an object in state (not recommended)**:\n\n```yaml\nposition.x = 5; // This is a mutation!\n```\n\nThis snippet shows you how to mutating an object in state (not recommended), which is an important aspect of updating objects in state.\n\n**Correct way to update state with a new object**:\n\n```yaml\nsetPosition({\n  x: e.clientX,\n  y: e.clientY\n});\n```\n\nThis snippet shows you how to correct way to update state with a new object, which is an important aspect of updating objects in state.\n\n**Example of using setPerson with spread syntax**:\n\n```yaml\nsetPerson({\n  ...person,\n  firstName: e.target.value\n});\n```\n\nThis snippet shows you how to example of using setperson with spread syntax, which is an important aspect of updating objects in state.\n\n**Updating a nested object correctly**:\n\n```yaml\nconst nextArtwork = { ...person.artwork, city: 'New Delhi' };\nconst nextPerson = { ...person, artwork: nextArtwork };\nsetPerson(nextPerson);\n```\n\nThis snippet shows you how to updating a nested object correctly, which is an important aspect of updating objects in state.\n\n**Using Immer for state updates**:\n\n```yaml\nupdatePerson(draft => {\n  draft.artwork.city = 'Lagos';\n});\n```\n\nThis snippet shows you how to using immer for state updates, which is an important aspect of updating objects in state.\n\n", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Updating Objects in State in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTreat all state in React as immutable.\n\nUse the spread syntax to create copies of objects when updating state.\n\nAvoid mutating existing objects in state to ensure re-renders occur.\n\nConsider using Immer for complex state updates to simplify your code.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/updating-objects-in-state", "title": "Updating Objects in State", "description": "This page covers how to correctly update objects in React state, including handling nested objects and immutability.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:37:21", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/updating-objects-in-state", "theme-color": "#23272f", "fb:app_id": "623268441017527", "ogTitle": "Updating Objects in State – React", "ogUrl": "https://react.dev/learn/updating-objects-in-state", "language": "en", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-learn.png", "og:title": "Updating Objects in State – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "algolia-search-order": "32", "title": "Updating Objects in State – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "twitter:title": "Updating Objects in State – React", "scrapeId": "7cdeacc3-ac1a-4921-8824-eb4d5c67999a", "sourceURL": "https://react.dev/learn/updating-objects-in-state", "url": "https://react.dev/learn/updating-objects-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Build a React app from Scratch is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Build a React app from Scratch in react-learn.\n\n# Build a React app from Scratch\n\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.Here's a quick rundown of what this is about:\n\n## Deep Dive\n\nStarting from scratch is an easy way to get started using React, but a major tradeoff to be aware of is that going this route is often the same as building your own adhoc framework. As your requirements evolve, you may need to solve more framework-like problems that our recommended frameworks already have well developed and supported solutions for.\n\nFor example, if in the future your app needs support for server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC), you will have to implement those on your own. Similarly, future React features that require integrating at the framework level will have to be implemented on your own if you want to use them.\n\nOur recommended frameworks also help you build better performing apps. For example, reducing or eliminating waterfalls from network requests makes for a better user experience. This might not be a high priority when you are building a toy project, but if your app gains users you may want to improve its performance.\n\nGoing this route also makes it more difficult to get support, since the way you develop routing, data-fetching, and other features will be unique to your situation. You should only choose this option if you are comfortable tackling these problems on your own, or if you’re confident that you will never need these features.\n\nFor a list of recommended frameworks, check out Creating a React App.\n\n## Step 1: Install a build tool\n\nThe first step is to install a build tool like `vite`, `parcel`, or `rsbuild`. These build tools provide features to package and run source code, provide a development server for local development and a build command to deploy your app to a production server.\n\n## Vite\n\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\n\nTerminal\n\nCopy\n\nnpm create vite@latest my-app -- --template react\n\nVite is opinionated and comes with sensible defaults out of the box. Vite has a rich ecosystem of plugins to support fast refresh, JSX, Babel/SWC, and other common features. See Vite’s React plugin or React SWC plugin and React SSR example project to get started.\n\nVite is already being used as a build tool in one of our recommended frameworks: React Router.\n\n## Parcel\n\nParcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production applications.\n\nTerminal\n\nCopy\n\nnpm install --save-dev parcel\n\nParcel supports fast refresh, JSX, TypeScript, Flow, and styling out of the box. See Parcel’s React recipe to get started.\n\n## Rsbuild\n\nRsbuild is an Rspack-powered build tool that provides a seamless development experience for React applications. It comes with carefully tuned defaults and performance optimizations ready to use.\n\nTerminal\n\nCopy\n\nnpx create-rsbuild --template react\n\nRsbuild includes built-in support for React features like fast refresh, JSX, TypeScript, and styling. See Rsbuild’s React guide to get started.\n\n## Note\n\nIf you’d you’re starting from scratch with React Native you’ll need to use Metro, the JavaScript bundler for React Native. Metro supports bundling for platforms like iOS and Android, but lacks many features when compared to the tools here. We recommend starting with Vite, Parcel, or Rsbuild unless your project requires React Native support.\n\n## Step 2: Build Common Application Patterns\n\nThe build tools listed above start off with a client-only, single-page app (SPA), but don’t include any further solutions for common functionality like routing, data fetching, or styling.\n\nThe React ecosystem includes many tools for these problems. We’ve listed a few that are widely used as a starting point, but feel free to choose other tools if those work better for you.\n\n## Routing\n\nRouting determines what content or pages to display when a user visits a particular URL. You need to set up a router to map URLs to different parts of your app. You’ll also need to handle nested routes, route parameters, and query parameters. Routers can be configured within your code, or defined based on your component folder and file structures.\n\nRouters are a core part of modern applications, and are usually integrated with data fetching (including prefetching data for a whole page for faster loading), code splitting (to minimize client bundle sizes), and page rendering approaches (to decide how each page gets generated).\n\nWe suggest using:\n\n- React Router\n- Tanstack Router\n\n## Data Fetching\n\nFetching data from a server or other data source is a key part of most applications. Doing this properly requires handling loading states, error states, and caching the fetched data, which can be complex.\n\nPurpose-built data fetching libraries do the hard work of fetching and caching the data for you, letting you focus on what data your app needs and how to display it. These libraries are typically used directly in your components, but can also be integrated into routing loaders for faster pre-fetching and better performance, and in server rendering as well.\n\nNote that fetching data directly in components can lead to slower loading times due to network request waterfalls, so we recommend prefetching data in router loaders or on the server as much as possible! This allows a page’s data to be fetched all at once as the page is being displayed.\n\nIf you’re fetching data from most backends or REST-style APIs, we suggest using:\n\n- React Query\n- SWR\n- RTK Query\n\nIf you’re fetching data from a GraphQL API, we suggest using:\n\n- Apollo\n- Relay\n\n## Code-splitting\n\nCode-splitting is the process of breaking your app into smaller bundles that can be loaded on demand. An app’s code size increases with every new feature and additional dependency. Apps can become slow to load because all of the code for the entire app needs to be sent before it can be used. Caching, reducing features/dependencies, and moving some code to run on the server can help mitigate slow loading but are incomplete solutions that can sacrifice functionality if overused.\n\nSimilarly, if you rely on the apps using your framework to split the code, you might encounter situations where loading becomes slower than if no code splitting were happening at all. For example, lazily loading a chart delays sending the code needed to render the chart, splitting the chart code from the rest of the app. Parcel supports code splitting with React.lazy. However, if the chart loads its data after it has been initially rendered you are now waiting twice. This is a waterfall: rather than fetching the data for the chart and sending the code to render it simultaneously, you must wait for each step to complete one after the other.\n\nSplitting code by route, when integrated with bundling and data fetching, can reduce the initial load time of your app and the time it takes for the largest visible content of the app to render.\n\n## Improving Application Performance\n\nSince the build tool you select only support single page apps (SPAs) you’ll need to implement other rendering patterns like server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC). Even if you don’t need these features at first, in the future there may be some routes that would benefit SSR, SSG or RSC.\n\n- **Single-page apps (SPA)** load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n\n- **Streaming Server-side rendering (SSR)** renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain.\n\n- **Static site generation (SSG)** generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering.\n\n- **React Server Components (RSC)** lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain.\n\nYour rendering strategies need to integrate with your router so apps built with your framework can choose the rendering strategy on a per-route level. This will enable different rendering strategies without having to rewrite your whole app.\n\n## And more…\n\nThese are just a few examples of the features a new app will need to consider when building from scratch. Many limitations you’ll hit can be difficult to solve as each problem is interconnected with the others and can require deep expertise in problem areas you may not be familiar with.\n\nIf you don’t want to solve these problems on your own, you can get started with a framework that provides these features out of the box.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "overview", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\nStarting from scratch is an easy way to get started using React, but a major tradeoff to be aware of is that going this route is often the same as building your own adhoc framework. As your requirements evolve, you may need to solve more framework-like problems that our recommended frameworks already have well developed and supported solutions for.\n\nFor example, if in the future your app needs support for server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC), you will have to implement those on your own. Similarly, future React features that require integrating at the framework level will have to be implemented on your own if you want to use them.\n\nOur recommended frameworks also help you build better performing apps. For example, reducing or eliminating waterfalls from network requests makes for a better user experience. This might not be a high priority when you are building a toy project, but if your app gains users you may want to improve its performance.\n\nGoing this route also makes it more difficult to get support, since the way you develop routing, data-fetching, and other features will be unique to your situation. You should only choose this option if you are comfortable tackling these problems on your own, or if you’re confident that you will never need these features.\n\nFor a list of recommended frameworks, check out Creating a React App..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: install a build tool in react-learn?\n\nAssistant: To step 1: install a build tool in react-learn, here's what you do:\nThe first step is to install a build tool like `vite`, `parcel`, or `rsbuild`. These build tools provide features to package and run source code, provide a development server for local development and a build command to deploy your app to a production server..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I vite in react-learn?\n\nAssistant: To vite in react-learn, here's what you do:\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\n\nTerminal\n\nCopy\n\nnpm create vite@latest my-app -- --template react\n\nVite is opinionated and comes with sensible defaults out of the box. Vite has a rich ecosystem of plugins to support fast refresh, JSX, Babel/SWC, and other common features. See Vite’s React plugin or React SWC plugin and React SSR example project to get started.\n\nVite is already being used as a build tool in one of our recommended frameworks: React Router..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I parcel in react-learn?\n\nAssistant: To parcel in react-learn, here's what you do:\nParcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production applications.\n\nTerminal\n\nCopy\n\nnpm install --save-dev parcel\n\nParcel supports fast refresh, JSX, TypeScript, Flow, and styling out of the box. See Parcel’s React recipe to get started..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rsbuild in react-learn?\n\nAssistant: To rsbuild in react-learn, here's what you do:\nRsbuild is an Rspack-powered build tool that provides a seamless development experience for React applications. It comes with carefully tuned defaults and performance optimizations ready to use.\n\nTerminal\n\nCopy\n\nnpx create-rsbuild --template react\n\nRsbuild includes built-in support for React features like fast refresh, JSX, TypeScript, and styling. See Rsbuild’s React guide to get started..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nIf you’d you’re starting from scratch with React Native you’ll need to use Metro, the JavaScript bundler for React Native. Metro supports bundling for platforms like iOS and Android, but lacks many features when compared to the tools here. We recommend starting with Vite, Parcel, or Rsbuild unless your project requires React Native support..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: build common application patterns in react-learn?\n\nAssistant: To step 2: build common application patterns in react-learn, here's what you do:\nThe build tools listed above start off with a client-only, single-page app (SPA), but don’t include any further solutions for common functionality like routing, data fetching, or styling.\n\nThe React ecosystem includes many tools for these problems. We’ve listed a few that are widely used as a starting point, but feel free to choose other tools if those work better for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I routing in react-learn?\n\nAssistant: To routing in react-learn, here's what you do:\nRouting determines what content or pages to display when a user visits a particular URL. You need to set up a router to map URLs to different parts of your app. You’ll also need to handle nested routes, route parameters, and query parameters. Routers can be configured within your code, or defined based on your component folder and file structures.\n\nRouters are a core part of modern applications, and are usually integrated with data fetching (including prefetching data for a whole page for faster loading), code splitting (to minimize client bundle sizes), and page rendering approaches (to decide how each page gets generated).\n\nWe suggest using:\n\n- React Router\n- Tanstack Router.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I data fetching in react-learn?\n\nAssistant: To data fetching in react-learn, here's what you do:\nFetching data from a server or other data source is a key part of most applications. Doing this properly requires handling loading states, error states, and caching the fetched data, which can be complex.\n\nPurpose-built data fetching libraries do the hard work of fetching and caching the data for you, letting you focus on what data your app needs and how to display it. These libraries are typically used directly in your components, but can also be integrated into routing loaders for faster pre-fetching and better performance, and in server rendering as well.\n\nNote that fetching data directly in components can lead to slower loading times due to network request waterfalls, so we recommend prefetching data in router loaders or on the server as much as possible! This allows a page’s data to be fetched all at once as the page is being displayed.\n\nIf you’re fetching data from most backends or REST-style APIs, we suggest using:\n\n- React Query\n- SWR\n- RTK Query\n\nIf you’re fetching data from a GraphQL API, we suggest using:\n\n- Apollo\n- Relay.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I code-splitting in react-learn?\n\nAssistant: To code-splitting in react-learn, here's what you do:\nCode-splitting is the process of breaking your app into smaller bundles that can be loaded on demand. An app’s code size increases with every new feature and additional dependency. Apps can become slow to load because all of the code for the entire app needs to be sent before it can be used. Caching, reducing features/dependencies, and moving some code to run on the server can help mitigate slow loading but are incomplete solutions that can sacrifice functionality if overused.\n\nSimilarly, if you rely on the apps using your framework to split the code, you might encounter situations where loading becomes slower than if no code splitting were happening at all. For example, lazily loading a chart delays sending the code needed to render the chart, splitting the chart code from the rest of the app. Parcel supports code splitting with React.lazy. However, if the chart loads its data after it has been initially rendered you are now waiting twice. This is a waterfall: rather than fetching the data for the chart and sending the code to render it simultaneously, you must wait for each step to complete one after the other.\n\nSplitting code by route, when integrated with bundling and data fetching, can reduce the initial load time of your app and the time it takes for the largest visible content of the app to render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I improving application performance in react-learn?\n\nAssistant: To improving application performance in react-learn, here's what you do:\nSince the build tool you select only support single page apps (SPAs) you’ll need to implement other rendering patterns like server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC). Even if you don’t need these features at first, in the future there may be some routes that would benefit SSR, SSG or RSC.\n\n- **Single-page apps (SPA)** load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n\n- **Streaming Server-side rendering (SSR)** renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain.\n\n- **Static site generation (SSG)** generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering.\n\n- **React Server Components (RSC)** lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain.\n\nYour rendering strategies need to integrate with your router so apps built with your framework can choose the rendering strategy on a per-route level. This will enable different rendering strategies without having to rewrite your whole app..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I and more… in react-learn?\n\nAssistant: To and more… in react-learn, here's what you do:\nThese are just a few examples of the features a new app will need to consider when building from scratch. Many limitations you’ll hit can be difficult to solve as each problem is interconnected with the others and can require deep expertise in problem areas you may not be familiar with.\n\nIf you don’t want to solve these problems on your own, you can get started with a framework that provides these features out of the box..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Build a React app from Scratch in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Vite Installation Command**:\n\n```yaml\nnpm create vite@latest my-app -- --template react\n```\n\nThis snippet shows you how to vite installation command, which is an important aspect of build a react app from scratch.\n\n**Parcel Installation Command**:\n\n```yaml\nnpm install --save-dev parcel\n```\n\nThis snippet shows you how to parcel installation command, which is an important aspect of build a react app from scratch.\n\n**Rsbuild Installation Command**:\n\n```yaml\nnpx create-rsbuild --template react\n```\n\nThis snippet shows you how to rsbuild installation command, which is an important aspect of build a react app from scratch.\n\n", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "code_examples", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Build a React app from Scratch in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider using a framework if you want to avoid building your own solutions for common problems.\n\nUse purpose-built data fetching libraries to handle loading and error states effectively.\n\nPrefetch data in router loaders or on the server to improve loading times.\n\nImplement rendering strategies that integrate with your router for better performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/building-a-react-framework", "title": "Build a React app from Scratch", "description": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-03-01 02:37:49", "type": "best_practices", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "title": "Build a React app from Scratch – React", "og:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "twitter:title": "Build a React app from Scratch – React", "ogTitle": "Build a React app from Scratch – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/learn/build-a-react-app-from-scratch", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app from Scratch – React", "fb:app_id": "623268441017527", "algolia-search-order": "8", "og:type": "website", "twitter:creator": "@reactjs", "og:url": "https://react.dev/learn/build-a-react-app-from-scratch", "scrapeId": "743ed448-f86e-4f0b-8f2e-64aedaa8f0b2", "sourceURL": "https://react.dev/learn/building-a-react-framework", "url": "https://react.dev/learn/build-a-react-app-from-scratch", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Updating Arrays in State is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Updating Arrays in State in react-learn.\n\n# Updating Arrays in State\n\nThis page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to add, remove, or change items in an array in React state\n- How to update an object inside of an array\n- How to make array copying less repetitive with Immer\n\n## Updating arrays without mutation\n\nIn JavaScript, arrays are just another kind of object. You should treat arrays in React state as read-only. This means that you shouldn’t reassign items inside an array like `arr[0] = 'bird'`, and you also shouldn’t use methods that mutate the array, such as `push()` and `pop()`. Instead, every time you want to update an array, you’ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like `filter()` and `map()`. Then you can set your state to the resulting new array. Here is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\n\n|  | avoid (mutates the array) | prefer (returns a new array) |\n| --- | --- | --- |\n| adding | `push`, `unshift` | `concat`, `[...arr]` spread syntax |\n| removing | `pop`, `shift`, `splice` | `filter`, `slice` |\n| replacing | `splice`, `arr[i] = ...` assignment | `map` |\n| sorting | `reverse`, `sort` | copy the array first | Alternatively, you can use Immer which lets you use methods from both columns.\n\n## Pitfall\n\nUnfortunately, `slice` and `splice` are named similarly but are very different:\n- `slice` lets you copy an array or a part of it.\n- `splice` mutates the array (to insert or delete items).\nIn React, you will be using `slice` (no `p`!) a lot more often because you don’t want to mutate objects or arrays in state.\n\n## Adding to an array\n\n`push()` will mutate an array, which you don’t want:\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        artists.push({\n          id: nextId++,\n          name: name,\n        });\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\nInstead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the `...` array spread syntax:\n\n```javascript\nsetArtists([\n  ...artists,\n  { id: nextId++, name: name }\n]);\n```\nNow it works correctly.\n\n## Removing from an array\n\nThe easiest way to remove an item from an array is to filter it out. In other words, you will produce a new array that will not contain that item. To do this, use the `filter` method, for example:\n\n```javascript\nimport { useState } from 'react';\n\nlet initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [artists, setArtists] = useState(initialArtists);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>\n            {artist.name}{' '}\n            <button onClick={() => {\n              setArtists(artists.filter(a => a.id !== artist.id));\n            }}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\nClick the “Delete” button a few times, and look at its click handler.\n\n## Transforming an array\n\nIf you want to change some or all items of the array, you can use `map()` to create a new array. The function you will pass to `map` can decide what to do with each item, based on its data or its index (or both).\n\n```javascript\nimport { useState } from 'react';\n\nlet initialShapes = [\n  { id: 0, type: 'circle', x: 50, y: 100 },\n  { id: 1, type: 'square', x: 150, y: 100 },\n  { id: 2, type: 'circle', x: 250, y: 100 },\n];\n\nexport default function ShapeEditor() {\n  const [shapes, setShapes] = useState(initialShapes);\n\n  function handleClick() {\n    const nextShapes = shapes.map(shape => {\n      if (shape.type === 'square') {\n        return shape;\n      } else {\n        return {\n          ...shape,\n          y: shape.y + 50,\n        };\n      }\n    });\n    setShapes(nextShapes);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Move circles down!\n      </button>\n      {shapes.map(shape => (\n        <div\n          key={shape.id}\n          style={{\n          background: 'purple',\n          position: 'absolute',\n          left: shape.x,\n          top: shape.y,\n          borderRadius:\n            shape.type === 'circle'\n              ? '50%' : '',\n          width: 20,\n          height: 20,\n        }} />\n      ))}\n    </>\n  );\n}\n```\n\n## Replacing items in an array\n\nIt is particularly common to want to replace one or more items in an array. Assignments like `arr[0] = 'bird'` are mutating the original array, so instead you’ll want to use `map` for this as well.\n\n```javascript\nimport { useState } from 'react';\n\nlet initialCounters = [\n  0, 0, 0\n];\n\nexport default function CounterList() {\n  const [counters, setCounters] = useState(initialCounters);\n\n  function handleIncrementClick(index) {\n    const nextCounters = counters.map((c, i) => {\n      if (i === index) {\n        return c + 1;\n      } else {\n        return c;\n      }\n    });\n    setCounters(nextCounters);\n  }\n\n  return (\n    <ul>\n      {counters.map((counter, i) => (\n        <li key={i}>\n          {counter}\n          <button onClick={() => {\n            handleIncrementClick(i);\n          }}>+1</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n## Inserting into an array\n\nSometimes, you may want to insert an item at a particular position that’s neither at the beginning nor at the end. To do this, you can use the `...` array spread syntax together with the `slice()` method.\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(initialArtists);\n\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n      ...artists.slice(0, insertAt),\n      { id: nextId++, name: name },\n      ...artists.slice(insertAt)\n    ];\n    setArtists(nextArtists);\n    setName('');\n  }\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={handleClick}>\n        Insert\n      </button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n## Making other changes to an array\n\nThere are some things you can’t do with the spread syntax and non-mutating methods like `map()` and `filter()` alone. For example, you may want to reverse or sort an array. The JavaScript `reverse()` and `sort()` methods are mutating the original array, so you can’t use them directly.\n\nHowever, you can copy the array first, and then make changes to it.\n\n```javascript\nimport { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies' },\n  { id: 1, title: 'Lunar Landscape' },\n  { id: 2, title: 'Terracotta Army' },\n];\n\nexport default function List() {\n  const [list, setList] = useState(initialList);\n\n  function handleClick() {\n    const nextList = [...list];\n    nextList.reverse();\n    setList(nextList);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Reverse\n      </button>\n      <ul>\n        {list.map(artwork => (\n          <li key={artwork.id}>{artwork.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n## Updating objects inside arrays\n\nObjects are not really located “inside” arrays. They might appear to be “inside” in code, but each object in an array is a separate value, to which the array “points”. This is why you need to be careful when changing nested fields like `list[0]`. Another person’s artwork list may point to the same element of the array!\n\nWhen updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let’s see how this works.\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, setMyList] = useState(initialList);\n  const [yourList, setYourList] = useState(initialList);\n\n  function handleToggleMyList(artworkId, nextSeen) {\n    const myNextList = [...myList];\n    const artwork = myNextList.find(a => a.id === artworkId);\n    artwork.seen = nextSeen;\n    setMyList(myNextList);\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    const yourNextList = [...yourList];\n    const artwork = yourNextList.find(a => a.id === artworkId);\n    artwork.seen = nextSeen;\n    setYourList(yourNextList);\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList artworks={myList} onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList artworks={yourList} onToggle={handleToggleYourList} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(artwork.id, e.target.checked);\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n## Write concise update logic with Immer\n\nUpdating nested arrays without mutation can get a little bit repetitive. Just as with objects:\n- Generally, you shouldn’t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.\n- If you don’t want to change your state structure, you might prefer to use Immer, which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.\n\nHere is the Art Bucket List example rewritten with Immer:\n\n```json\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}\n```\nNote how with Immer, mutation like `artwork.seen = nextSeen` is now okay:\n\n```javascript\nupdateMyTodos(draft => {\n  const artwork = draft.find(a => a.id === artworkId);\n  artwork.seen = nextSeen;\n});\n```\nThis is because you’re not mutating the original state, but you’re mutating a special draft object provided by Immer.\n\n## Recap\n\n- You can put arrays into state, but you can’t change them.\n- Instead of mutating an array, create a new version of it, and update the state to it.\n- You can use the `[...arr, newItem]` array spread syntax to create arrays with new items.\n- You can use `filter()` and `map()` to create new arrays with filtered or transformed items.\n- You can use Immer to keep your code concise.\n\n## Try out some challenges\n\n1. Update an item in the shopping cart 2. Remove an item from the shopping cart 3. Fix the mutations using non-mutative methods 4. Fix the mutations using Immer\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "overview", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to add, remove, or change items in an array in React state\n- How to update an object inside of an array\n- How to make array copying less repetitive with Immer.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating arrays without mutation in react-learn?\n\nAssistant: To updating arrays without mutation in react-learn, here's what you do:\nIn JavaScript, arrays are just another kind of object. You should treat arrays in React state as read-only. This means that you shouldn’t reassign items inside an array like `arr[0] = 'bird'`, and you also shouldn’t use methods that mutate the array, such as `push()` and `pop()`. Instead, every time you want to update an array, you’ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like `filter()` and `map()`. Then you can set your state to the resulting new array. Here is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\n\n|  | avoid (mutates the array) | prefer (returns a new array) |\n| --- | --- | --- |\n| adding | `push`, `unshift` | `concat`, `[...arr]` spread syntax |\n| removing | `pop`, `shift`, `splice` | `filter`, `slice` |\n| replacing | `splice`, `arr[i] = ...` assignment | `map` |\n| sorting | `reverse`, `sort` | copy the array first | Alternatively, you can use Immer which lets you use methods from both columns..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nUnfortunately, `slice` and `splice` are named similarly but are very different:\n- `slice` lets you copy an array or a part of it.\n- `splice` mutates the array (to insert or delete items).\nIn React, you will be using `slice` (no `p`!) a lot more often because you don’t want to mutate objects or arrays in state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding to an array in react-learn?\n\nAssistant: To adding to an array in react-learn, here's what you do:\n`push()` will mutate an array, which you don’t want:\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        artists.push({\n          id: nextId++,\n          name: name,\n        });\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\nInstead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the `...` array spread syntax:\n\n```javascript\nsetArtists([\n  ...artists,\n  { id: nextId++, name: name }\n]);\n```\nNow it works correctly..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I removing from an array in react-learn?\n\nAssistant: To removing from an array in react-learn, here's what you do:\nThe easiest way to remove an item from an array is to filter it out. In other words, you will produce a new array that will not contain that item. To do this, use the `filter` method, for example:\n\n```javascript\nimport { useState } from 'react';\n\nlet initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [artists, setArtists] = useState(initialArtists);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>\n            {artist.name}{' '}\n            <button onClick={() => {\n              setArtists(artists.filter(a => a.id !== artist.id));\n            }}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\nClick the “Delete” button a few times, and look at its click handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I transforming an array in react-learn?\n\nAssistant: To transforming an array in react-learn, here's what you do:\nIf you want to change some or all items of the array, you can use `map()` to create a new array. The function you will pass to `map` can decide what to do with each item, based on its data or its index (or both).\n\n```javascript\nimport { useState } from 'react';\n\nlet initialShapes = [\n  { id: 0, type: 'circle', x: 50, y: 100 },\n  { id: 1, type: 'square', x: 150, y: 100 },\n  { id: 2, type: 'circle', x: 250, y: 100 },\n];\n\nexport default function ShapeEditor() {\n  const [shapes, setShapes] = useState(initialShapes);\n\n  function handleClick() {\n    const nextShapes = shapes.map(shape => {\n      if (shape.type === 'square') {\n        return shape;\n      } else {\n        return {\n          ...shape,\n          y: shape.y + 50,\n        };\n      }\n    });\n    setShapes(nextShapes);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Move circles down!\n      </button>\n      {shapes.map(shape => (\n        <div\n          key={shape.id}\n          style={{\n          background: 'purple',\n          position: 'absolute',\n          left: shape.x,\n          top: shape.y,\n          borderRadius:\n            shape.type === 'circle'\n              ? '50%' : '',\n          width: 20,\n          height: 20,\n        }} />\n      ))}\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I replacing items in an array in react-learn?\n\nAssistant: To replacing items in an array in react-learn, here's what you do:\nIt is particularly common to want to replace one or more items in an array. Assignments like `arr[0] = 'bird'` are mutating the original array, so instead you’ll want to use `map` for this as well.\n\n```javascript\nimport { useState } from 'react';\n\nlet initialCounters = [\n  0, 0, 0\n];\n\nexport default function CounterList() {\n  const [counters, setCounters] = useState(initialCounters);\n\n  function handleIncrementClick(index) {\n    const nextCounters = counters.map((c, i) => {\n      if (i === index) {\n        return c + 1;\n      } else {\n        return c;\n      }\n    });\n    setCounters(nextCounters);\n  }\n\n  return (\n    <ul>\n      {counters.map((counter, i) => (\n        <li key={i}>\n          {counter}\n          <button onClick={() => {\n            handleIncrementClick(i);\n          }}>+1</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I inserting into an array in react-learn?\n\nAssistant: To inserting into an array in react-learn, here's what you do:\nSometimes, you may want to insert an item at a particular position that’s neither at the beginning nor at the end. To do this, you can use the `...` array spread syntax together with the `slice()` method.\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(initialArtists);\n\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n      ...artists.slice(0, insertAt),\n      { id: nextId++, name: name },\n      ...artists.slice(insertAt)\n    ];\n    setArtists(nextArtists);\n    setName('');\n  }\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={handleClick}>\n        Insert\n      </button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I making other changes to an array in react-learn?\n\nAssistant: To making other changes to an array in react-learn, here's what you do:\nThere are some things you can’t do with the spread syntax and non-mutating methods like `map()` and `filter()` alone. For example, you may want to reverse or sort an array. The JavaScript `reverse()` and `sort()` methods are mutating the original array, so you can’t use them directly.\n\nHowever, you can copy the array first, and then make changes to it.\n\n```javascript\nimport { useState } from 'react';\n\nconst initialList = [\n  { id: 0, title: 'Big Bellies' },\n  { id: 1, title: 'Lunar Landscape' },\n  { id: 2, title: 'Terracotta Army' },\n];\n\nexport default function List() {\n  const [list, setList] = useState(initialList);\n\n  function handleClick() {\n    const nextList = [...list];\n    nextList.reverse();\n    setList(nextList);\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Reverse\n      </button>\n      <ul>\n        {list.map(artwork => (\n          <li key={artwork.id}>{artwork.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating objects inside arrays in react-learn?\n\nAssistant: To updating objects inside arrays in react-learn, here's what you do:\nObjects are not really located “inside” arrays. They might appear to be “inside” in code, but each object in an array is a separate value, to which the array “points”. This is why you need to be careful when changing nested fields like `list[0]`. Another person’s artwork list may point to the same element of the array!\n\nWhen updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let’s see how this works.\n\n```javascript\nimport { useState } from 'react';\n\nlet nextId = 3;\nconst initialList = [\n  { id: 0, title: 'Big Bellies', seen: false },\n  { id: 1, title: 'Lunar Landscape', seen: false },\n  { id: 2, title: 'Terracotta Army', seen: true },\n];\n\nexport default function BucketList() {\n  const [myList, setMyList] = useState(initialList);\n  const [yourList, setYourList] = useState(initialList);\n\n  function handleToggleMyList(artworkId, nextSeen) {\n    const myNextList = [...myList];\n    const artwork = myNextList.find(a => a.id === artworkId);\n    artwork.seen = nextSeen;\n    setMyList(myNextList);\n  }\n\n  function handleToggleYourList(artworkId, nextSeen) {\n    const yourNextList = [...yourList];\n    const artwork = yourNextList.find(a => a.id === artworkId);\n    artwork.seen = nextSeen;\n    setYourList(yourNextList);\n  }\n\n  return (\n    <>\n      <h1>Art Bucket List</h1>\n      <h2>My list of art to see:</h2>\n      <ItemList artworks={myList} onToggle={handleToggleMyList} />\n      <h2>Your list of art to see:</h2>\n      <ItemList artworks={yourList} onToggle={handleToggleYourList} />\n    </>\n  );\n}\n\nfunction ItemList({ artworks, onToggle }) {\n  return (\n    <ul>\n      {artworks.map(artwork => (\n        <li key={artwork.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={artwork.seen}\n              onChange={e => {\n                onToggle(artwork.id, e.target.checked);\n              }}\n            />\n            {artwork.title}\n          </label>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I write concise update logic with immer in react-learn?\n\nAssistant: To write concise update logic with immer in react-learn, here's what you do:\nUpdating nested arrays without mutation can get a little bit repetitive. Just as with objects:\n- Generally, you shouldn’t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.\n- If you don’t want to change your state structure, you might prefer to use Immer, which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.\n\nHere is the Art Bucket List example rewritten with Immer:\n\n```json\n{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}\n```\nNote how with Immer, mutation like `artwork.seen = nextSeen` is now okay:\n\n```javascript\nupdateMyTodos(draft => {\n  const artwork = draft.find(a => a.id === artworkId);\n  artwork.seen = nextSeen;\n});\n```\nThis is because you’re not mutating the original state, but you’re mutating a special draft object provided by Immer..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- You can put arrays into state, but you can’t change them.\n- Instead of mutating an array, create a new version of it, and update the state to it.\n- You can use the `[...arr, newItem]` array spread syntax to create arrays with new items.\n- You can use `filter()` and `map()` to create new arrays with filtered or transformed items.\n- You can use Immer to keep your code concise..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Update an item in the shopping cart 2. Remove an item from the shopping cart 3. Fix the mutations using non-mutative methods 4. Fix the mutations using Immer.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "section_detail", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Updating Arrays in State in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding to an array**:\n\n```yaml\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        setArtists([\n          ...artists,\n          { id: nextId++, name: name }\n        ]);\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to adding to an array, which is an important aspect of updating arrays in state.\n\n", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "code_examples", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Updating Arrays in State in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou should treat arrays in React state as read-only.\n\nAvoid using methods that mutate the array, such as push() and pop().\n\nUse non-mutating methods like filter() and map() to update arrays in state.\n\nUse Immer for more concise update logic.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/updating-arrays-in-state", "title": "Updating Arrays in State", "description": "This page covers how to manage arrays in React state, including adding, removing, and updating items without mutating the original array.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:39:45", "type": "best_practices", "page_metadata": {"og:title": "Updating Arrays in State – React", "ogTitle": "Updating Arrays in State – React", "og:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "33", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Updating Arrays in State – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "title": "Updating Arrays in State – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/learn/updating-arrays-in-state", "language": "en", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "theme-color": "#23272f", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/updating-arrays-in-state", "og:type": "website", "scrapeId": "37a21f2c-7a35-4fe4-8761-94190c22be96", "sourceURL": "https://react.dev/learn/updating-arrays-in-state", "url": "https://react.dev/learn/updating-arrays-in-state", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Lifecycle of Reactive Effects is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Lifecycle of Reactive Effects in react-learn.\n\n# Lifecycle of Reactive Effects\n\nThis page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How an Effect’s lifecycle is different from a component’s lifecycle\n- How to think about each individual Effect in isolation\n- When your Effect needs to re-synchronize, and why\n- How your Effect’s dependencies are determined\n- What it means for a value to be reactive\n- What an empty dependency array means\n- How React verifies your dependencies are correct with a linter\n- What to do when you disagree with the linter\n\n## The lifecycle of an Effect\n\nEvery React component goes through the same lifecycle:\n\n- A component _mounts_ when it’s added to the screen.\n- A component _updates_ when it receives new props or state, usually in response to an interaction.\n- A component _unmounts_ when it’s removed from the screen.\n\n**It’s a good way to think about components, but _not_ about Effects.** Instead, try to think about each Effect independently from your component’s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often.\n\n## Why synchronization may need to happen more than once\n\nImagine this `ChatRoom` component receives a `roomId` prop that the user picks in a dropdown. Let’s say that initially the user picks the \"general\" room as the `roomId`. Your app displays the \"general\" chat room:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nAfter the UI is displayed, React will run your Effect to **start synchronizing.** It connects to the \"general\" room:\n\n```javascript\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n  }, [roomId]);\n  // ...\n}\n```\n\nSo far, so good.\n\nLater, the user picks a different room in the dropdown (for example, \"travel\"). First, React will update the UI:\n\n```javascript\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nThink about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. **The `roomId` prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.**\n\nAt this point, you want React to do two things:\n\n1. Stop synchronizing with the old `roomId` (disconnect from the \"general\" room)\n2. Start synchronizing with the new `roomId` (connect to the \"travel\" room)\n\n**Luckily, you’ve already taught React how to do both of these things!** Your Effect’s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing.\n\n## How React re-synchronizes your Effect\n\nRecall that your `ChatRoom` component has received a new value for its `roomId` prop. It used to be \"general\", and now it is \"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.\n\nTo **stop synchronizing,** React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since `roomId` was \"general\", the cleanup function disconnects from the \"general\" room:\n\n```javascript\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n  }, [roomId]);\n}\n```\n\nThen React will run the Effect that you’ve provided during this render. This time, `roomId` is \"travel\" so it will **start synchronizing** to the \"travel\" chat room (until its cleanup function is eventually called too):\n\n```javascript\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room\n    connection.connect();\n  }, [roomId]);\n}\n```\n\n## Thinking from the Effect’s perspective\n\nLet’s recap everything that’s happened from the `ChatRoom` component’s perspective:\n\n1. `ChatRoom` mounted with `roomId` set to \"general\"\n2. `ChatRoom` updated with `roomId` set to \"travel\"\n3. `ChatRoom` updated with `roomId` set to \"music\"\n4. `ChatRoom` unmounted\n\nDuring each of these points in the component’s lifecycle, your Effect did different things:\n\n1. Your Effect connected to the \"general\" room\n2. Your Effect disconnected from the \"general\" room and connected to the \"travel\" room\n3. Your Effect disconnected from the \"travel\" room and connected to the \"music\" room\n4. Your Effect disconnected from the \"music\" room\n\nNow let’s think about what happened from the perspective of the Effect itself:\n\n```javascript\nuseEffect(() => {\n  // Your Effect connected to the room specified with roomId...\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => {\n    // ...until it disconnected\n    connection.disconnect();\n  };\n}, [roomId]);\n```\n\n## How React verifies that your Effect can re-synchronize\n\nHere is a live example that you can play with. Press “Open chat” to mount the `ChatRoom` component:\n\n```javascript\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\nNotice that when the component mounts for the first time, you see three logs:\n\n1. `✅ Connecting to \"general\" room at https://localhost:1234...` _(development-only)_\n2. `❌ Disconnected from \"general\" room at https://localhost:1234.` _(development-only)_\n3. `✅ Connecting to \"general\" room at https://localhost:1234...`\n\nThe first two logs are development-only. In development, React always remounts each component once.\n\n## How React knows that it needs to re-synchronize the Effect\n\nYou might be wondering how React knew that your Effect needed to re-synchronize after `roomId` changes. It’s because _you told React_ that its code depends on `roomId` by including it in the list of dependencies:\n\n```javascript\nfunction ChatRoom({ roomId }) { // The roomId prop may change over time\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]); // So you tell React that this Effect \"depends on\" roomId\n}\n```\n\n## Each Effect represents a separate synchronization process\n\nResist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let’s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on `roomId`, so you might feel tempted to add the analytics call there:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\nBut imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call `logVisit(roomId)` for the same room, which you did not intend. Logging the visit **is a separate process** from connecting. Write them as two separate Effects:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n  }, [roomId]);\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    // ...\n  }, [roomId]);\n}\n```\n\n## Effects “react” to reactive values\n\nYour Effect reads two variables ( `serverUrl` and `roomId`), but you only specified `roomId` as a dependency:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\nWhy doesn’t `serverUrl` need to be a dependency?\n\nThis is because the `serverUrl` never changes due to a re-render. It’s always the same no matter how many times the component re-renders and why. Since `serverUrl` never changes, it wouldn’t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!\n\n## What an Effect with empty dependencies means\n\nWhat happens if you move both `serverUrl` and `roomId` outside the component?\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n}\n```\n\n## All variables declared in the component body are reactive\n\nProps and state aren’t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change.\n\n## Can global or mutable values be dependencies?\n\nMutable values (including global variables) aren’t reactive.\n\n## React verifies that you specified every reactive value as a dependency\n\nIf your linter is configured for React, it will check that every reactive value used by your Effect’s code is declared as its dependency.\n\n## What to do when you don’t want to re-synchronize\n\nIn the previous example, you’ve fixed the lint error by listing `roomId` and `serverUrl` as dependencies.\n\n## Pitfall\n\nThe linter is your friend, but its powers are limited.\n\n## Recap\n\n- Components can mount, update, and unmount.\n- Each Effect has a separate lifecycle from the surrounding component.\n- Each Effect describes a separate synchronization process that can _start_ and _stop_.\n- When you write and read Effects, think from each individual Effect’s perspective (how to start and stop synchronization) rather than from the component’s perspective (how it mounts, updates, or unmounts).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How an Effect’s lifecycle is different from a component’s lifecycle\n- How to think about each individual Effect in isolation\n- When your Effect needs to re-synchronize, and why\n- How your Effect’s dependencies are determined\n- What it means for a value to be reactive\n- What an empty dependency array means\n- How React verifies your dependencies are correct with a linter\n- What to do when you disagree with the linter.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the lifecycle of an effect in react-learn?\n\nAssistant: To the lifecycle of an effect in react-learn, here's what you do:\nEvery React component goes through the same lifecycle:\n\n- A component _mounts_ when it’s added to the screen.\n- A component _updates_ when it receives new props or state, usually in response to an interaction.\n- A component _unmounts_ when it’s removed from the screen.\n\n**It’s a good way to think about components, but _not_ about Effects.** Instead, try to think about each Effect independently from your component’s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I why synchronization may need to happen more than once in react-learn?\n\nAssistant: To why synchronization may need to happen more than once in react-learn, here's what you do:\nImagine this `ChatRoom` component receives a `roomId` prop that the user picks in a dropdown. Let’s say that initially the user picks the \"general\" room as the `roomId`. Your app displays the \"general\" chat room:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nAfter the UI is displayed, React will run your Effect to **start synchronizing.** It connects to the \"general\" room:\n\n```javascript\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n  }, [roomId]);\n  // ...\n}\n```\n\nSo far, so good.\n\nLater, the user picks a different room in the dropdown (for example, \"travel\"). First, React will update the UI:\n\n```javascript\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n  // ...\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nThink about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. **The `roomId` prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.**\n\nAt this point, you want React to do two things:\n\n1. Stop synchronizing with the old `roomId` (disconnect from the \"general\" room)\n2. Start synchronizing with the new `roomId` (connect to the \"travel\" room)\n\n**Luckily, you’ve already taught React how to do both of these things!** Your Effect’s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how react re-synchronizes your effect in react-learn?\n\nAssistant: To how react re-synchronizes your effect in react-learn, here's what you do:\nRecall that your `ChatRoom` component has received a new value for its `roomId` prop. It used to be \"general\", and now it is \"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.\n\nTo **stop synchronizing,** React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since `roomId` was \"general\", the cleanup function disconnects from the \"general\" room:\n\n```javascript\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n    connection.connect();\n    return () => {\n      connection.disconnect(); // Disconnects from the \"general\" room\n    };\n  }, [roomId]);\n}\n```\n\nThen React will run the Effect that you’ve provided during this render. This time, `roomId` is \"travel\" so it will **start synchronizing** to the \"travel\" chat room (until its cleanup function is eventually called too):\n\n```javascript\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room\n    connection.connect();\n  }, [roomId]);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I thinking from the effect’s perspective in react-learn?\n\nAssistant: To thinking from the effect’s perspective in react-learn, here's what you do:\nLet’s recap everything that’s happened from the `ChatRoom` component’s perspective:\n\n1. `ChatRoom` mounted with `roomId` set to \"general\"\n2. `ChatRoom` updated with `roomId` set to \"travel\"\n3. `ChatRoom` updated with `roomId` set to \"music\"\n4. `ChatRoom` unmounted\n\nDuring each of these points in the component’s lifecycle, your Effect did different things:\n\n1. Your Effect connected to the \"general\" room\n2. Your Effect disconnected from the \"general\" room and connected to the \"travel\" room\n3. Your Effect disconnected from the \"travel\" room and connected to the \"music\" room\n4. Your Effect disconnected from the \"music\" room\n\nNow let’s think about what happened from the perspective of the Effect itself:\n\n```javascript\nuseEffect(() => {\n  // Your Effect connected to the room specified with roomId...\n  const connection = createConnection(serverUrl, roomId);\n  connection.connect();\n  return () => {\n    // ...until it disconnected\n    connection.disconnect();\n  };\n}, [roomId]);\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how react verifies that your effect can re-synchronize in react-learn?\n\nAssistant: To how react verifies that your effect can re-synchronize in react-learn, here's what you do:\nHere is a live example that you can play with. Press “Open chat” to mount the `ChatRoom` component:\n\n```javascript\nimport { useState, useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n\nexport default function App() {\n  const [roomId, setRoomId] = useState('general');\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <label>\n        Choose the chat room:{' '}\n        <select\n          value={roomId}\n          onChange={e => setRoomId(e.target.value)}\n        >\n          <option value=\"general\">general</option>\n          <option value=\"travel\">travel</option>\n          <option value=\"music\">music</option>\n        </select>\n      </label>\n      <button onClick={() => setShow(!show)}>\n        {show ? 'Close chat' : 'Open chat'}\n      </button>\n      {show && <hr />}\n      {show && <ChatRoom roomId={roomId} />}\n    </>\n  );\n}\n```\n\nNotice that when the component mounts for the first time, you see three logs:\n\n1. `✅ Connecting to \"general\" room at https://localhost:1234...` _(development-only)_\n2. `❌ Disconnected from \"general\" room at https://localhost:1234.` _(development-only)_\n3. `✅ Connecting to \"general\" room at https://localhost:1234...`\n\nThe first two logs are development-only. In development, React always remounts each component once..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how react knows that it needs to re-synchronize the effect in react-learn?\n\nAssistant: To how react knows that it needs to re-synchronize the effect in react-learn, here's what you do:\nYou might be wondering how React knew that your Effect needed to re-synchronize after `roomId` changes. It’s because _you told React_ that its code depends on `roomId` by including it in the list of dependencies:\n\n```javascript\nfunction ChatRoom({ roomId }) { // The roomId prop may change over time\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]); // So you tell React that this Effect \"depends on\" roomId\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I each effect represents a separate synchronization process in react-learn?\n\nAssistant: To each effect represents a separate synchronization process in react-learn, here's what you do:\nResist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let’s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on `roomId`, so you might feel tempted to add the analytics call there:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\nBut imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call `logVisit(roomId)` for the same room, which you did not intend. Logging the visit **is a separate process** from connecting. Write them as two separate Effects:\n\n```javascript\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    logVisit(roomId);\n  }, [roomId]);\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    // ...\n  }, [roomId]);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I effects “react” to reactive values in react-learn?\n\nAssistant: To effects “react” to reactive values in react-learn, here's what you do:\nYour Effect reads two variables ( `serverUrl` and `roomId`), but you only specified `roomId` as a dependency:\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [roomId]);\n}\n```\n\nWhy doesn’t `serverUrl` need to be a dependency?\n\nThis is because the `serverUrl` never changes due to a re-render. It’s always the same no matter how many times the component re-renders and why. Since `serverUrl` never changes, it wouldn’t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what an effect with empty dependencies means in react-learn?\n\nAssistant: To what an effect with empty dependencies means in react-learn, here's what you do:\nWhat happens if you move both `serverUrl` and `roomId` outside the component?\n\n```javascript\nconst serverUrl = 'https://localhost:1234';\nconst roomId = 'general';\n\nfunction ChatRoom() {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, []); // ✅ All dependencies declared\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I all variables declared in the component body are reactive in react-learn?\n\nAssistant: To all variables declared in the component body are reactive in react-learn, here's what you do:\nProps and state aren’t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I can global or mutable values be dependencies? in react-learn?\n\nAssistant: To can global or mutable values be dependencies? in react-learn, here's what you do:\nMutable values (including global variables) aren’t reactive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I react verifies that you specified every reactive value as a dependency in react-learn?\n\nAssistant: To react verifies that you specified every reactive value as a dependency in react-learn, here's what you do:\nIf your linter is configured for React, it will check that every reactive value used by your Effect’s code is declared as its dependency..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what to do when you don’t want to re-synchronize in react-learn?\n\nAssistant: To what to do when you don’t want to re-synchronize in react-learn, here's what you do:\nIn the previous example, you’ve fixed the lint error by listing `roomId` and `serverUrl` as dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I pitfall in react-learn?\n\nAssistant: To pitfall in react-learn, here's what you do:\nThe linter is your friend, but its powers are limited..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Components can mount, update, and unmount.\n- Each Effect has a separate lifecycle from the surrounding component.\n- Each Effect describes a separate synchronization process that can _start_ and _stop_.\n- When you write and read Effects, think from each individual Effect’s perspective (how to start and stop synchronization) rather than from the component’s perspective (how it mounts, updates, or unmounts)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Lifecycle of Reactive Effects in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**ChatRoom Component Example**:\n\n```yaml\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n  return <h1>Welcome to the {roomId} room!</h1>;\n}\n```\n\nThis snippet shows you how to chatroom component example, which is an important aspect of lifecycle of reactive effects.\n\n", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Lifecycle of Reactive Effects in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways specify all reactive values as dependencies in your Effect.\n\nSeparate unrelated logic into different Effects to avoid unintended behavior.\n\nUse the linter to verify that all reactive values are specified as dependencies.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects", "description": "This page covers the lifecycle of effects in React, explaining how they differ from component lifecycles, how to manage dependencies, and best practices for using effects effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 02:47:59", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "language": "en", "ogTitle": "Lifecycle of Reactive Effects – React", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "og:title": "Lifecycle of Reactive Effects – React", "twitter:title": "Lifecycle of Reactive Effects – React", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/lifecycle-of-reactive-effects", "title": "Lifecycle of Reactive Effects – React", "algolia-search-order": "47", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/learn/lifecycle-of-reactive-effects", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:description": "The library for web and native user interfaces", "scrapeId": "802f543b-91a3-42aa-9be8-a0bd2639b99e", "sourceURL": "https://react.dev/learn/lifecycle-of-reactive-effects", "url": "https://react.dev/learn/lifecycle-of-reactive-effects", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Passing Data Deeply with Context is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Passing Data Deeply with Context in react-learn.\n\n# Passing Data Deeply with Context\n\nThis page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- What “prop drilling” is\n- How to replace repetitive prop passing with context\n- Common use cases for context\n- Common alternatives to context\n\n## The problem with passing props\n\n[Passing props](https://react.dev/learn/passing-props-to-a-component) is a great way to explicitly pipe data through your UI tree to the components that use it.\n\nBut passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and [lifting state up](https://react.dev/learn/sharing-state-between-components) that high can lead to a situation called “prop drilling”.\n\n![Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in purple. The value flows down to each of the two children, both highlighted in purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_lifting_state.dark.png&w=1920&q=75)\n\n![Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in purple. The value flows down to each of the two children, both highlighted in purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_lifting_state.png&w=1920&q=75)\n\nProp drilling\n\n![Diagram with a tree of ten nodes, each node with two children or less. The root node contains a bubble representing a value highlighted in purple. The value flows down through the two children, each of which pass the value but do not contain it. The left child passes the value down to two children which are both highlighted purple. The right child of the root passes the value through to one of its two children - the right one, which is highlighted purple. That child passed the value through its single child, which passes it down to both of its two children, which are highlighted purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_prop_drilling.dark.png&w=1920&q=75)\n\n![Diagram with a tree of ten nodes, each node with two children or less. The root node contains a bubble representing a value highlighted in purple. The value flows down through the two children, each of which pass the value but do not contain it. The left child passes the value down to two children which are both highlighted purple. The right child of the root passes the value through to one of its two children - the right one, which is highlighted purple. That child passed the value through its single child, which passes it down to both of its two children, which are highlighted purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_prop_drilling.png&w=1920&q=75)\n\nWouldn’t it be great if there were a way to “teleport” data to the components in the tree that need it without passing props? With React’s context feature, there is!\n\n## Context: an alternative to passing props\n\nContext lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this `Heading` component that accepts a `level` for its size:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Heading level={2}>Heading</Heading>\n      <Heading level={3}>Sub-heading</Heading>\n      <Heading level={4}>Sub-sub-heading</Heading>\n      <Heading level={5}>Sub-sub-sub-heading</Heading>\n      <Heading level={6}>Sub-sub-sub-sub-heading</Heading>\n    </Section>\n  );\n}\n```\n\nLet’s say you want multiple headings within the same `Section` to always have the same size:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Section>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Section>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Section>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\nCurrently, you pass the `level` prop to each `<Heading>` separately:\n\n```jsx\n<Section>\n  <Heading level={3}>About</Heading>\n  <Heading level={3}>Photos</Heading>\n  <Heading level={3}>Videos</Heading>\n</Section>\n```\n\nIt would be nice if you could pass the `level` prop to the `<Section>` component instead and remove it from the `<Heading>`. This way you could enforce that all headings in the same section have the same size:\n\n```jsx\n<Section level={3}>\n  <Heading>About</Heading>\n  <Heading>Photos</Heading>\n  <Heading>Videos</Heading>\n</Section>\n```\n\nBut how can the `<Heading>` component know the level of its closest `<Section>`? **That would require some way for a child to “ask” for data from somewhere above in the tree.**\n\nYou can’t do it with props alone. This is where context comes into play. You will do it in three steps:\n\n1. **Create** a context. (You can call it `LevelContext`, since it’s for the heading level.)\n2. **Use** that context from the component that needs the data. ( `Heading` will use `LevelContext`.)\n3. **Provide** that context from the component that specifies the data. ( `Section` will provide `LevelContext`.)\n\nContext lets a parent—even a distant one!—provide some data to the entire tree inside of it.\n\n## Step 1: Create the context\n\nFirst, you need to create the context. You’ll need to **export it from a file** so that your components can use it:\n\n```jsx\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n```\n\nThe only argument to `createContext` is the _default_ value. Here, `1` refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step.\n\n## Step 2: Use the context\n\nImport the `useContext` Hook from React and your context:\n\n```jsx\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n```\n\nCurrently, the `Heading` component reads `level` from props:\n\n```jsx\nexport default function Heading({ level, children }) {\n  // ...\n}\n```\n\nInstead, remove the `level` prop and read the value from the context you just imported, `LevelContext`:\n\n```jsx\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  // ...\n}\n```\n\n`useContext` is a Hook. Just like `useState` and `useReducer`, you can only call a Hook immediately inside a React component (not inside loops or conditions). **`useContext` tells React that the `Heading` component wants to read the `LevelContext`.**\n\nNow that the `Heading` component doesn’t have a `level` prop, you don’t need to pass the level prop to `Heading` in your JSX like this anymore:\n\n```jsx\n<Section>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n</Section>\n```\n\nUpdate the JSX so that it’s the `Section` that receives it instead:\n\n```jsx\n<Section level={4}>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n</Section>\n```\n\nAs a reminder, this is the markup that you were trying to get working:\n\n## Step 3: Provide the context\n\nThe `Section` component currently renders its children:\n\n```jsx\nexport default function Section({ children }) {\n  return (\n    <section className=\"section\">\n      {children}\n    </section>\n  );\n}\n```\n\n**Wrap them with a context provider** to provide the `LevelContext` to them:\n\n```jsx\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n  return (\n    <section className=\"section\">\n      <LevelContext value={level}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\nThis tells React: “if any component inside this `<Section>` asks for `LevelContext`, give them this `level`.” The component will use the value of the nearest `<LevelContext>` in the UI tree above it.\n\n## Using and providing context from the same component\n\nCurrently, you still have to specify each section’s `level` manually:\n\n```jsx\nexport default function Page() {\n  return (\n    <Section level={1}>\n      ...\n      <Section level={2}>\n        ...\n        <Section level={3}>\n          ...\n```\n\nSince context lets you read information from a component above, each `Section` could read the `level` from the `Section` above, and pass `level + 1` down automatically. Here is how you could do it:\n\n```jsx\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext value={level + 1}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\nWith this change, you don’t need to pass the `level` prop _either_ to the `<Section>` or to the `<Heading>`.\n\n## Note\n\nThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on.\n\n## Context passes through intermediate components\n\nYou can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like `<div>` and components you might build yourself.\n\nIn this example, the same `Post` component (with a dashed border) is rendered at two different nesting levels. Notice that the `<Heading>` inside of it gets its level automatically from the closest `<Section>`:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function ProfilePage() {\n  return (\n    <Section>\n      <Heading>My Profile</Heading>\n      <Post\n        title=\"Hello traveller!\"\n        body=\"Read about my adventures.\"\n      />\n      <AllPosts />\n    </Section>\n  );\n}\n\nfunction AllPosts() {\n  return (\n    <Section>\n      <Heading>Posts</Heading>\n      <RecentPosts />\n    </Section>\n  );\n}\n\nfunction RecentPosts() {\n  return (\n    <Section>\n      <Heading>Recent Posts</Heading>\n      <Post\n        title=\"Flavors of Lisbon\"\n        body=\"...those pastéis de nata!\"\n      />\n      <Post\n        title=\"Buenos Aires in the rhythm of tango\"\n        body=\"I loved it!\"\n      />\n    </Section>\n  );\n}\n\nfunction Post({ title, body }) {\n  return (\n    <Section isFancy={true}>\n      <Heading>\n        {title}\n      </Heading>\n      <p><i>{body}</i></p>\n    </Section>\n  );\n}\n```\n\nYou didn’t do anything special for this to work. A `Section` specifies the context for the tree inside it, so you can insert a `<Heading>` anywhere, and it will have the correct size.\n\n## Before you use context\n\nContext is very tempting to use! However, this also means it’s too easy to overuse it. **Just because you need to pass some props several levels deep doesn’t mean you should put that information into context.**\n\nHere’s a few alternatives you should consider before using context:\n\n1. **Start by [passing props.](https://react.dev/learn/passing-props-to-a-component)** If your components are not trivial, it’s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you’ve made the data flow explicit with props.\n2. **Extract components and [pass JSX as `children`](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) to them.** If you pass some data through many layers of intermediate components that don’t use that data (and only pass it further down), this often means that you forgot to extract some components along the way.\n\n## Use cases for context\n\n- **Theming:** If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.\n- **Current account:** Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree.\n- **Routing:** Most routing solutions use context internally to hold the current route.\n- **Managing state:** As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it.\n\n## Recap\n\n- Context lets a component provide some information to the entire tree below it.\n- To pass context:\n1. Create and export it with `export const MyContext = createContext(defaultValue)`.\n2. Pass it to the `useContext(MyContext)` Hook to read it in any child component, no matter how deep.\n3. Wrap children into `<MyContext value={...}>` to provide it from a parent.\n- Context passes through any components in the middle.\n\n## Try out some challenges\n\n#### Challenge1 of1:   Replace prop drilling with context\nIn this example, toggling the checkbox changes the `imageSize` prop passed to each `<PlaceImage>`. The checkbox state is held in the top-level `App` component, but each `<PlaceImage>` needs to be aware of it.\n\nCurrently, `App` passes `imageSize` to `List`, which passes it to each `Place`, which passes it to the `PlaceImage`. Remove the `imageSize` prop, and instead pass it from the `App` component directly to `PlaceImage.`\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- What “prop drilling” is\n- How to replace repetitive prop passing with context\n- Common use cases for context\n- Common alternatives to context.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I the problem with passing props in react-learn?\n\nAssistant: To the problem with passing props in react-learn, here's what you do:\n[Passing props](https://react.dev/learn/passing-props-to-a-component) is a great way to explicitly pipe data through your UI tree to the components that use it.\n\nBut passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and [lifting state up](https://react.dev/learn/sharing-state-between-components) that high can lead to a situation called “prop drilling”.\n\n![Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in purple. The value flows down to each of the two children, both highlighted in purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_lifting_state.dark.png&w=1920&q=75)\n\n![Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in purple. The value flows down to each of the two children, both highlighted in purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_lifting_state.png&w=1920&q=75)\n\nProp drilling\n\n![Diagram with a tree of ten nodes, each node with two children or less. The root node contains a bubble representing a value highlighted in purple. The value flows down through the two children, each of which pass the value but do not contain it. The left child passes the value down to two children which are both highlighted purple. The right child of the root passes the value through to one of its two children - the right one, which is highlighted purple. That child passed the value through its single child, which passes it down to both of its two children, which are highlighted purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_prop_drilling.dark.png&w=1920&q=75)\n\n![Diagram with a tree of ten nodes, each node with two children or less. The root node contains a bubble representing a value highlighted in purple. The value flows down through the two children, each of which pass the value but do not contain it. The left child passes the value down to two children which are both highlighted purple. The right child of the root passes the value through to one of its two children - the right one, which is highlighted purple. That child passed the value through its single child, which passes it down to both of its two children, which are highlighted purple.](https://react.dev/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpassing_data_prop_drilling.png&w=1920&q=75)\n\nWouldn’t it be great if there were a way to “teleport” data to the components in the tree that need it without passing props? With React’s context feature, there is!.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I context: an alternative to passing props in react-learn?\n\nAssistant: To context: an alternative to passing props in react-learn, here's what you do:\nContext lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this `Heading` component that accepts a `level` for its size:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Heading level={2}>Heading</Heading>\n      <Heading level={3}>Sub-heading</Heading>\n      <Heading level={4}>Sub-sub-heading</Heading>\n      <Heading level={5}>Sub-sub-sub-heading</Heading>\n      <Heading level={6}>Sub-sub-sub-sub-heading</Heading>\n    </Section>\n  );\n}\n```\n\nLet’s say you want multiple headings within the same `Section` to always have the same size:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function Page() {\n  return (\n    <Section>\n      <Heading level={1}>Title</Heading>\n      <Section>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Heading level={2}>Heading</Heading>\n        <Section>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Heading level={3}>Sub-heading</Heading>\n          <Section>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n            <Heading level={4}>Sub-sub-heading</Heading>\n          </Section>\n        </Section>\n      </Section>\n    </Section>\n  );\n}\n```\n\nCurrently, you pass the `level` prop to each `<Heading>` separately:\n\n```jsx\n<Section>\n  <Heading level={3}>About</Heading>\n  <Heading level={3}>Photos</Heading>\n  <Heading level={3}>Videos</Heading>\n</Section>\n```\n\nIt would be nice if you could pass the `level` prop to the `<Section>` component instead and remove it from the `<Heading>`. This way you could enforce that all headings in the same section have the same size:\n\n```jsx\n<Section level={3}>\n  <Heading>About</Heading>\n  <Heading>Photos</Heading>\n  <Heading>Videos</Heading>\n</Section>\n```\n\nBut how can the `<Heading>` component know the level of its closest `<Section>`? **That would require some way for a child to “ask” for data from somewhere above in the tree.**\n\nYou can’t do it with props alone. This is where context comes into play. You will do it in three steps:\n\n1. **Create** a context. (You can call it `LevelContext`, since it’s for the heading level.)\n2. **Use** that context from the component that needs the data. ( `Heading` will use `LevelContext`.)\n3. **Provide** that context from the component that specifies the data. ( `Section` will provide `LevelContext`.)\n\nContext lets a parent—even a distant one!—provide some data to the entire tree inside of it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 1: create the context in react-learn?\n\nAssistant: To step 1: create the context in react-learn, here's what you do:\nFirst, you need to create the context. You’ll need to **export it from a file** so that your components can use it:\n\n```jsx\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n```\n\nThe only argument to `createContext` is the _default_ value. Here, `1` refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 2: use the context in react-learn?\n\nAssistant: To step 2: use the context in react-learn, here's what you do:\nImport the `useContext` Hook from React and your context:\n\n```jsx\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n```\n\nCurrently, the `Heading` component reads `level` from props:\n\n```jsx\nexport default function Heading({ level, children }) {\n  // ...\n}\n```\n\nInstead, remove the `level` prop and read the value from the context you just imported, `LevelContext`:\n\n```jsx\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  // ...\n}\n```\n\n`useContext` is a Hook. Just like `useState` and `useReducer`, you can only call a Hook immediately inside a React component (not inside loops or conditions). **`useContext` tells React that the `Heading` component wants to read the `LevelContext`.**\n\nNow that the `Heading` component doesn’t have a `level` prop, you don’t need to pass the level prop to `Heading` in your JSX like this anymore:\n\n```jsx\n<Section>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n  <Heading level={4}>Sub-sub-heading</Heading>\n</Section>\n```\n\nUpdate the JSX so that it’s the `Section` that receives it instead:\n\n```jsx\n<Section level={4}>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n  <Heading>Sub-sub-heading</Heading>\n</Section>\n```\n\nAs a reminder, this is the markup that you were trying to get working:.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I step 3: provide the context in react-learn?\n\nAssistant: To step 3: provide the context in react-learn, here's what you do:\nThe `Section` component currently renders its children:\n\n```jsx\nexport default function Section({ children }) {\n  return (\n    <section className=\"section\">\n      {children}\n    </section>\n  );\n}\n```\n\n**Wrap them with a context provider** to provide the `LevelContext` to them:\n\n```jsx\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n  return (\n    <section className=\"section\">\n      <LevelContext value={level}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\nThis tells React: “if any component inside this `<Section>` asks for `LevelContext`, give them this `level`.” The component will use the value of the nearest `<LevelContext>` in the UI tree above it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using and providing context from the same component in react-learn?\n\nAssistant: To using and providing context from the same component in react-learn, here's what you do:\nCurrently, you still have to specify each section’s `level` manually:\n\n```jsx\nexport default function Page() {\n  return (\n    <Section level={1}>\n      ...\n      <Section level={2}>\n        ...\n        <Section level={3}>\n          ...\n```\n\nSince context lets you read information from a component above, each `Section` could read the `level` from the `Section` above, and pass `level + 1` down automatically. Here is how you could do it:\n\n```jsx\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n  const level = useContext(LevelContext);\n  return (\n    <section className=\"section\">\n      <LevelContext value={level + 1}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\nWith this change, you don’t need to pass the `level` prop _either_ to the `<Section>` or to the `<Heading>`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I context passes through intermediate components in react-learn?\n\nAssistant: To context passes through intermediate components in react-learn, here's what you do:\nYou can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like `<div>` and components you might build yourself.\n\nIn this example, the same `Post` component (with a dashed border) is rendered at two different nesting levels. Notice that the `<Heading>` inside of it gets its level automatically from the closest `<Section>`:\n\n```jsx\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nexport default function ProfilePage() {\n  return (\n    <Section>\n      <Heading>My Profile</Heading>\n      <Post\n        title=\"Hello traveller!\"\n        body=\"Read about my adventures.\"\n      />\n      <AllPosts />\n    </Section>\n  );\n}\n\nfunction AllPosts() {\n  return (\n    <Section>\n      <Heading>Posts</Heading>\n      <RecentPosts />\n    </Section>\n  );\n}\n\nfunction RecentPosts() {\n  return (\n    <Section>\n      <Heading>Recent Posts</Heading>\n      <Post\n        title=\"Flavors of Lisbon\"\n        body=\"...those pastéis de nata!\"\n      />\n      <Post\n        title=\"Buenos Aires in the rhythm of tango\"\n        body=\"I loved it!\"\n      />\n    </Section>\n  );\n}\n\nfunction Post({ title, body }) {\n  return (\n    <Section isFancy={true}>\n      <Heading>\n        {title}\n      </Heading>\n      <p><i>{body}</i></p>\n    </Section>\n  );\n}\n```\n\nYou didn’t do anything special for this to work. A `Section` specifies the context for the tree inside it, so you can insert a `<Heading>` anywhere, and it will have the correct size..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I before you use context in react-learn?\n\nAssistant: To before you use context in react-learn, here's what you do:\nContext is very tempting to use! However, this also means it’s too easy to overuse it. **Just because you need to pass some props several levels deep doesn’t mean you should put that information into context.**\n\nHere’s a few alternatives you should consider before using context:\n\n1. **Start by [passing props.](https://react.dev/learn/passing-props-to-a-component)** If your components are not trivial, it’s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you’ve made the data flow explicit with props.\n2. **Extract components and [pass JSX as `children`](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) to them.** If you pass some data through many layers of intermediate components that don’t use that data (and only pass it further down), this often means that you forgot to extract some components along the way..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I use cases for context in react-learn?\n\nAssistant: To use cases for context in react-learn, here's what you do:\n- **Theming:** If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.\n- **Current account:** Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree.\n- **Routing:** Most routing solutions use context internally to hold the current route.\n- **Managing state:** As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Context lets a component provide some information to the entire tree below it.\n- To pass context:\n1. Create and export it with `export const MyContext = createContext(defaultValue)`.\n2. Pass it to the `useContext(MyContext)` Hook to read it in any child component, no matter how deep.\n3. Wrap children into `<MyContext value={...}>` to provide it from a parent.\n- Context passes through any components in the middle..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n#### Challenge1 of1:   Replace prop drilling with context\nIn this example, toggling the checkbox changes the `imageSize` prop passed to each `<PlaceImage>`. The checkbox state is held in the top-level `App` component, but each `<PlaceImage>` needs to be aware of it.\n\nCurrently, `App` passes `imageSize` to `List`, which passes it to each `Place`, which passes it to the `PlaceImage`. Remove the `imageSize` prop, and instead pass it from the `App` component directly to `PlaceImage.`.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Passing Data Deeply with Context in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of creating context**:\n\n```yaml\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n```\n\nThis snippet shows you how to example of creating context, which is an important aspect of passing data deeply with context.\n\n**Example of using context in Heading component**:\n\n```yaml\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  // ...\n}\n```\n\nThis snippet shows you how to example of using context in heading component, which is an important aspect of passing data deeply with context.\n\n**Example of providing context in Section component**:\n\n```yaml\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n  return (\n    <section className=\"section\">\n      <LevelContext value={level}>\n        {children}\n      </LevelContext>\n    </section>\n  );\n}\n```\n\nThis snippet shows you how to example of providing context in section component, which is an important aspect of passing data deeply with context.\n\n", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Passing Data Deeply with Context in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStart by passing props if your components are not trivial.\n\nExtract components and pass JSX as children to them.\n\nConsider context for theming, current account, routing, and managing state.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/passing-data-deeply-with-context", "title": "Passing Data Deeply with Context", "description": "This page covers how to use React's context feature to pass data deeply through a component tree without prop drilling.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:52:01", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "language": "en", "ogUrl": "https://react.dev/learn/passing-data-deeply-with-context", "ogImage": "https://react.dev/images/og-learn.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:url": "https://react.dev/learn/passing-data-deeply-with-context", "twitter:creator": "@reactjs", "twitter:site": "@reactjs", "twitter:title": "Passing Data Deeply with Context – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "algolia-search-order": "40", "og:description": "The library for web and native user interfaces", "og:title": "Passing Data Deeply with Context – React", "twitter:image": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "favicon": "https://react.dev/favicon-32x32.png", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "Passing Data Deeply with Context – React", "title": "Passing Data Deeply with Context – React", "twitter:card": "summary_large_image", "scrapeId": "384ac2ac-9690-4807-8840-070d2c9a670b", "sourceURL": "https://react.dev/learn/passing-data-deeply-with-context", "url": "https://react.dev/learn/passing-data-deeply-with-context", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what JavaScript in JSX with Curly Braces is in react-learn?\n\nAssistant: Sure, I'd be happy to explain JavaScript in JSX with Curly Braces in react-learn.\n\n# JavaScript in JSX with Curly Braces\n\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to pass strings with quotes\n- How to reference a JavaScript variable inside JSX with curly braces\n- How to call a JavaScript function inside JSX with curly braces\n- How to use a JavaScript object inside JSX with curly braces\n\n## Passing strings with quotes\n\nWhen you want to pass a string attribute to JSX, you put it in single or double quotes:\n\n```javascript\nexport default function Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n      alt=\"Gregorio Y. Zara\"\n    />\n  );\n}\n```\n\nHere, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.\n\nBut what if you want to dynamically specify the `src` or `alt` text? You could **use a value from JavaScript by replacing `\"` and `\"` with `{` and `}`**:\n\n```javascript\nexport default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}\n```\n\n## Using curly braces: A window into the JavaScript world\n\nJSX is a special way of writing JavaScript. That means it’s possible to use JavaScript inside it—with curly braces `{ }`. The example below first declares a name for the scientist, `name`, then embeds it with curly braces inside the `<h1>`:\n\n```javascript\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n```\n\nTry changing the `name`’s value from `'Gregorio Y. Zara'` to `'Hedy Lamarr'`. See how the list title changes?\n\nAny JavaScript expression will work between curly braces, including function calls like `formatDate()`: \n\n```javascript\nconst today = new Date();\n\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat(\n    'en-US',\n    { weekday: 'long' }\n  ).format(date);\n}\n\nexport default function TodoList() {\n  return (\n    <h1>To Do List for {formatDate(today)}</h1>\n  );\n}\n```\n\n## Where to use curly braces\n\nYou can only use curly braces in two ways inside JSX:\n\n1. **As text** directly inside a JSX tag: `<h1>{name}'s To Do List</h1>` works, but `<{tag}>Gregorio Y. Zara's To Do List</{tag}>` will not.\n2. **As attributes** immediately following the `=` sign: `src={avatar}` will read the `avatar` variable, but `src=\"{avatar}\"` will pass the string \"{avatar}\".\n\n## Using “double curlies”: CSS and other objects in JSX\n\nIn addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like `{ name: \"Hedy Lamarr\", inventions: 5 }`. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: `person={{ name: \"Hedy Lamarr\", inventions: 5 }}`.\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the `style` attribute:\n\n```javascript\nexport default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n```\n\nTry changing the values of `backgroundColor` and `color`.\n\n## More fun with JavaScript objects and curly braces\n\nYou can move several expressions into one object, and reference them in your JSX inside curly braces:\n\n```javascript\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n## Recap\n\nNow you know almost everything about JSX:\n- JSX attributes inside quotes are passed as strings.\n- Curly braces let you bring JavaScript logic and variables into your markup.\n- They work inside the JSX tag content or immediately after `=` in attributes.\n- `{{` and `}}` is not special syntax: it’s a JavaScript object tucked inside JSX curly braces.\n\n## Try out some challenges\n\n1. Fix the mistake 2. Extract information into an object 3. Write an expression inside JSX curly braces\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to pass strings with quotes\n- How to reference a JavaScript variable inside JSX with curly braces\n- How to call a JavaScript function inside JSX with curly braces\n- How to use a JavaScript object inside JSX with curly braces.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I passing strings with quotes in react-learn?\n\nAssistant: To passing strings with quotes in react-learn, here's what you do:\nWhen you want to pass a string attribute to JSX, you put it in single or double quotes:\n\n```javascript\nexport default function Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n      alt=\"Gregorio Y. Zara\"\n    />\n  );\n}\n```\n\nHere, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.\n\nBut what if you want to dynamically specify the `src` or `alt` text? You could **use a value from JavaScript by replacing `\"` and `\"` with `{` and `}`**:\n\n```javascript\nexport default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using curly braces: a window into the javascript world in react-learn?\n\nAssistant: To using curly braces: a window into the javascript world in react-learn, here's what you do:\nJSX is a special way of writing JavaScript. That means it’s possible to use JavaScript inside it—with curly braces `{ }`. The example below first declares a name for the scientist, `name`, then embeds it with curly braces inside the `<h1>`:\n\n```javascript\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n```\n\nTry changing the `name`’s value from `'Gregorio Y. Zara'` to `'Hedy Lamarr'`. See how the list title changes?\n\nAny JavaScript expression will work between curly braces, including function calls like `formatDate()`: \n\n```javascript\nconst today = new Date();\n\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat(\n    'en-US',\n    { weekday: 'long' }\n  ).format(date);\n}\n\nexport default function TodoList() {\n  return (\n    <h1>To Do List for {formatDate(today)}</h1>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I where to use curly braces in react-learn?\n\nAssistant: To where to use curly braces in react-learn, here's what you do:\nYou can only use curly braces in two ways inside JSX:\n\n1. **As text** directly inside a JSX tag: `<h1>{name}'s To Do List</h1>` works, but `<{tag}>Gregorio Y. Zara's To Do List</{tag}>` will not.\n2. **As attributes** immediately following the `=` sign: `src={avatar}` will read the `avatar` variable, but `src=\"{avatar}\"` will pass the string \"{avatar}\"..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using “double curlies”: css and other objects in jsx in react-learn?\n\nAssistant: To using “double curlies”: css and other objects in jsx in react-learn, here's what you do:\nIn addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like `{ name: \"Hedy Lamarr\", inventions: 5 }`. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: `person={{ name: \"Hedy Lamarr\", inventions: 5 }}`.\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the `style` attribute:\n\n```javascript\nexport default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n```\n\nTry changing the values of `backgroundColor` and `color`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I more fun with javascript objects and curly braces in react-learn?\n\nAssistant: To more fun with javascript objects and curly braces in react-learn, here's what you do:\nYou can move several expressions into one object, and reference them in your JSX inside curly braces:\n\n```javascript\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\nNow you know almost everything about JSX:\n- JSX attributes inside quotes are passed as strings.\n- Curly braces let you bring JavaScript logic and variables into your markup.\n- They work inside the JSX tag content or immediately after `=` in attributes.\n- `{{` and `}}` is not special syntax: it’s a JavaScript object tucked inside JSX curly braces..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I try out some challenges in react-learn?\n\nAssistant: To try out some challenges in react-learn, here's what you do:\n1. Fix the mistake 2. Extract information into an object 3. Write an expression inside JSX curly braces.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for JavaScript in JSX with Curly Braces in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Passing strings with quotes**:\n\n```yaml\nexport default function Avatar() {\n  return (\n    <img\n      className=\"avatar\"\n      src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n      alt=\"Gregorio Y. Zara\"\n    />\n  );\n}\n```\n\nThis snippet shows you how to passing strings with quotes, which is an important aspect of javascript in jsx with curly braces.\n\n**Dynamically specifying src and alt text**:\n\n```yaml\nexport default function Avatar() {\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n  const description = 'Gregorio Y. Zara';\n  return (\n    <img\n      className=\"avatar\"\n      src={avatar}\n      alt={description}\n    />\n  );\n}\n```\n\nThis snippet shows you how to dynamically specifying src and alt text, which is an important aspect of javascript in jsx with curly braces.\n\n**Using curly braces: A window into the JavaScript world**:\n\n```yaml\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n```\n\nThis snippet shows you how to using curly braces: a window into the javascript world, which is an important aspect of javascript in jsx with curly braces.\n\n**Function call inside JSX**:\n\n```yaml\nconst today = new Date();\n\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat(\n    'en-US',\n    { weekday: 'long' }\n  ).format(date);\n}\n\nexport default function TodoList() {\n  return (\n    <h1>To Do List for {formatDate(today)}</h1>\n  );\n}\n```\n\nThis snippet shows you how to function call inside jsx, which is an important aspect of javascript in jsx with curly braces.\n\n**Using double curlies for CSS**:\n\n```yaml\nexport default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n```\n\nThis snippet shows you how to using double curlies for css, which is an important aspect of javascript in jsx with curly braces.\n\n**More fun with JavaScript objects and curly braces**:\n\n```yaml\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to more fun with javascript objects and curly braces, which is an important aspect of javascript in jsx with curly braces.\n\n", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "code_examples", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using JavaScript in JSX with Curly Braces in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nInline `style` properties are written in camelCase. For example, HTML `<ul style=\"background-color: black\">` would be written as `<ul style={{ backgroundColor: 'black' }}>` in your component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "title": "JavaScript in JSX with Curly Braces", "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. This page covers how to use JavaScript expressions within JSX using curly braces.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:52:29", "type": "best_practices", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-learn.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-learn.png", "algolia-search-order": "20", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "JavaScript in JSX with Curly Braces – React", "msapplication-TileColor": "#2b5797", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "ogTitle": "JavaScript in JSX with Curly Braces – React", "twitter:title": "JavaScript in JSX with Curly Braces – React", "og:url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "og:title": "JavaScript in JSX with Curly Braces – React", "scrapeId": "87b6dc25-5242-4db7-9d2a-65bfd2f18ac7", "sourceURL": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Referencing Values with Refs is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Referencing Values with Refs in react-learn.\n\n# Referencing Values with Refs\n\nLearn how to use refs in React to hold values that do not trigger re-renders.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to add a ref to your component\n- How to update a ref’s value\n- How refs are different from state\n- How to use refs safely\n\n## Adding a ref to your component\n\nYou can add a ref to your component by importing the `useRef` Hook from React:\n\n```javascript\nimport { useRef } from 'react';\n```\n\nInside your component, call the `useRef` Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value `0`:\n\n```javascript\nconst ref = useRef(0);\n```\n\n`useRef` returns an object like this:\n\n```javascript\n{\n  current: 0 // The value you passed to useRef\n}\n```\n\nYou can access the current value of that ref through the `ref.current` property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)\n\nHere, a button will increment `ref.current` on every click:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\n## Example: building a stopwatch\n\nYou can combine refs and state in a single component. For example, let’s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed “Start”, you will need to keep track of when the Start button was pressed and what the current time is. **This information is used for rendering, so you’ll keep it in state:**\n\n```javascript\nconst [startTime, setStartTime] = useState(null);\nconst [now, setNow] = useState(null);\n```\n\nWhen the user presses “Start”, you’ll use [`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval) in order to update the time every 10 milliseconds:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n\n  function handleStart() {\n    // Start counting.\n    setStartTime(Date.now());\n    setNow(Date.now());\n    setInterval(() => {\n      // Update the current time every 10ms.\n      setNow(Date.now());\n    }, 10);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n    </>\n  );\n}\n```\n\n## Differences between refs and state\n\nPerhaps you’re thinking refs seem less “strict” than state—you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you’ll want to use state. Refs are an “escape hatch” you won’t need often. Here’s how state and refs compare:\n\n| refs | state |\n| --- | --- |\n| `useRef(initialValue)` returns `{ current: initialValue }` | `useState(initialValue)` returns the current value of a state variable and a state setter function ( `[value, setValue]`) |\n| Doesn’t trigger re-render when you change it. | Triggers re-render when you change it. |\n| Mutable—you can modify and update `current`’s value outside of the rendering process. | ”Immutable”—you must use the state setting function to modify state variables to queue a re-render. |\n| You shouldn’t read (or write) the `current` value during rendering. | You can read state at any time. However, each render has its own [snapshot](https://react.dev/learn/state-as-a-snapshot) of state which does not change. |\n\n## When to use refs\n\nTypically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:\n\n- Storing [timeout IDs](https://developer.mozilla.org/docs/Web/API/setTimeout)\n- Storing and manipulating [DOM elements](https://developer.mozilla.org/docs/Web/API/Element), which we cover on [the next page](https://react.dev/learn/manipulating-the-dom-with-refs)\n- Storing other objects that aren’t necessary to calculate the JSX.\n\nIf your component needs to store some value, but it doesn’t impact the rendering logic, choose refs.\n\n## Best practices for refs\n\nFollowing these principles will make your components more predictable:\n\n- **Treat refs as an escape hatch.** Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n- **Don’t read or write `ref.current` during rendering.** If some information is needed during rendering, use [state](https://react.dev/learn/state-a-components-memory) instead. Since React doesn’t know when `ref.current` changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like `if (!ref.current) ref.current = new Thing()` which only sets the ref once during the first render.)\n\nLimitations of React state don’t apply to refs. For example, state acts like a [snapshot for every render](https://react.dev/learn/state-as-a-snapshot) and [doesn’t update synchronously.](https://react.dev/learn/queueing-a-series-of-state-updates) But when you mutate the current value of a ref, it changes immediately:\n\n```javascript\nref.current = 5;\nconsole.log(ref.current); // 5\n```\n\nThis is because **the ref itself is a regular JavaScript object,** and so it behaves like one.\n\n## Refs and the DOM\n\nYou can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a `ref` attribute in JSX, like `<div ref={myRef}>`, React will put the corresponding DOM element into `myRef.current`. Once the element is removed from the DOM, React will update `myRef.current` to be `null. You can read more about this in [Manipulating the DOM with Refs.](https://react.dev/learn/manipulating-the-dom-with-refs)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "overview", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to add a ref to your component\n- How to update a ref’s value\n- How refs are different from state\n- How to use refs safely.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I adding a ref to your component in react-learn?\n\nAssistant: To adding a ref to your component in react-learn, here's what you do:\nYou can add a ref to your component by importing the `useRef` Hook from React:\n\n```javascript\nimport { useRef } from 'react';\n```\n\nInside your component, call the `useRef` Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value `0`:\n\n```javascript\nconst ref = useRef(0);\n```\n\n`useRef` returns an object like this:\n\n```javascript\n{\n  current: 0 // The value you passed to useRef\n}\n```\n\nYou can access the current value of that ref through the `ref.current` property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)\n\nHere, a button will increment `ref.current` on every click:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I example: building a stopwatch in react-learn?\n\nAssistant: To example: building a stopwatch in react-learn, here's what you do:\nYou can combine refs and state in a single component. For example, let’s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed “Start”, you will need to keep track of when the Start button was pressed and what the current time is. **This information is used for rendering, so you’ll keep it in state:**\n\n```javascript\nconst [startTime, setStartTime] = useState(null);\nconst [now, setNow] = useState(null);\n```\n\nWhen the user presses “Start”, you’ll use [`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval) in order to update the time every 10 milliseconds:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n\n  function handleStart() {\n    // Start counting.\n    setStartTime(Date.now());\n    setNow(Date.now());\n    setInterval(() => {\n      // Update the current time every 10ms.\n      setNow(Date.now());\n    }, 10);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I differences between refs and state in react-learn?\n\nAssistant: To differences between refs and state in react-learn, here's what you do:\nPerhaps you’re thinking refs seem less “strict” than state—you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you’ll want to use state. Refs are an “escape hatch” you won’t need often. Here’s how state and refs compare:\n\n| refs | state |\n| --- | --- |\n| `useRef(initialValue)` returns `{ current: initialValue }` | `useState(initialValue)` returns the current value of a state variable and a state setter function ( `[value, setValue]`) |\n| Doesn’t trigger re-render when you change it. | Triggers re-render when you change it. |\n| Mutable—you can modify and update `current`’s value outside of the rendering process. | ”Immutable”—you must use the state setting function to modify state variables to queue a re-render. |\n| You shouldn’t read (or write) the `current` value during rendering. | You can read state at any time. However, each render has its own [snapshot](https://react.dev/learn/state-as-a-snapshot) of state which does not change. |.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I when to use refs in react-learn?\n\nAssistant: To when to use refs in react-learn, here's what you do:\nTypically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:\n\n- Storing [timeout IDs](https://developer.mozilla.org/docs/Web/API/setTimeout)\n- Storing and manipulating [DOM elements](https://developer.mozilla.org/docs/Web/API/Element), which we cover on [the next page](https://react.dev/learn/manipulating-the-dom-with-refs)\n- Storing other objects that aren’t necessary to calculate the JSX.\n\nIf your component needs to store some value, but it doesn’t impact the rendering logic, choose refs..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I best practices for refs in react-learn?\n\nAssistant: To best practices for refs in react-learn, here's what you do:\nFollowing these principles will make your components more predictable:\n\n- **Treat refs as an escape hatch.** Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n- **Don’t read or write `ref.current` during rendering.** If some information is needed during rendering, use [state](https://react.dev/learn/state-a-components-memory) instead. Since React doesn’t know when `ref.current` changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like `if (!ref.current) ref.current = new Thing()` which only sets the ref once during the first render.)\n\nLimitations of React state don’t apply to refs. For example, state acts like a [snapshot for every render](https://react.dev/learn/state-as-a-snapshot) and [doesn’t update synchronously.](https://react.dev/learn/queueing-a-series-of-state-updates) But when you mutate the current value of a ref, it changes immediately:\n\n```javascript\nref.current = 5;\nconsole.log(ref.current); // 5\n```\n\nThis is because **the ref itself is a regular JavaScript object,** and so it behaves like one..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I refs and the dom in react-learn?\n\nAssistant: To refs and the dom in react-learn, here's what you do:\nYou can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a `ref` attribute in JSX, like `<div ref={myRef}>`, React will put the corresponding DOM element into `myRef.current`. Once the element is removed from the DOM, React will update `myRef.current` to be `null. You can read more about this in [Manipulating the DOM with Refs.](https://react.dev/learn/manipulating-the-dom-with-refs).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "section_detail", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Referencing Values with Refs in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Adding a ref to your component**:\n\n```yaml\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n\n```\n\nThis snippet shows you how to adding a ref to your component, which is an important aspect of referencing values with refs.\n\n**Example: building a stopwatch**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n\n  function handleStart() {\n    setStartTime(Date.now());\n    setNow(Date.now());\n    setInterval(() => {\n      setNow(Date.now());\n    }, 10);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    <>\n      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n      <button onClick={handleStart}>\n        Start\n      </button>\n    </>\n  );\n}\n\n```\n\nThis snippet shows you how to example: building a stopwatch, which is an important aspect of referencing values with refs.\n\n**Counter button with state**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {count} times\n    </button>\n  );\n}\n\n```\n\nThis snippet shows you how to counter button with state, which is an important aspect of referencing values with refs.\n\n**Counter button with ref**:\n\n```yaml\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let countRef = useRef(0);\n\n  function handleClick() {\n    countRef.current = countRef.current + 1;\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You clicked {countRef.current} times\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to counter button with ref, which is an important aspect of referencing values with refs.\n\n", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "code_examples", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Referencing Values with Refs in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTreat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n\nDon’t read or write `ref.current` during rendering. If some information is needed during rendering, use state instead. Since React doesn’t know when `ref.current` changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like `if (!ref.current) ref.current = new Thing()` which only sets the ref once during the first render.)\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/referencing-values-with-refs", "title": "Referencing Values with Refs", "description": "Learn how to use refs in React to hold values that do not trigger re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:07:45", "type": "best_practices", "page_metadata": {"ogTitle": "Referencing Values with Refs – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/learn/referencing-values-with-refs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-learn.png", "title": "Referencing Values with Refs – React", "theme-color": "#23272f", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "43", "ogUrl": "https://react.dev/learn/referencing-values-with-refs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "Referencing Values with Refs – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-learn.png", "og:image": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "og:title": "Referencing Values with Refs – React", "fb:app_id": "623268441017527", "scrapeId": "40efa996-cf76-437b-acf6-1b46666a20a7", "sourceURL": "https://react.dev/learn/referencing-values-with-refs", "url": "https://react.dev/learn/referencing-values-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Manipulating the DOM with Refs is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Manipulating the DOM with Refs in react-learn.\n\n# Manipulating the DOM with Refs\n\nLearn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to access a DOM node managed by React with the `ref` attribute\n- How the `ref` JSX attribute relates to the `useRef` Hook\n- How to access another component’s DOM node\n- In which cases it’s safe to modify the DOM managed by React\n\n## Getting a ref to the node\n\nTo access a DOM node managed by React, first, import the `useRef` Hook:\n\n```javascript\nimport { useRef } from 'react';\n```\n\nThen, use it to declare a ref inside your component:\n\n```javascript\nconst myRef = useRef(null);\n```\n\nFinally, pass your ref as the `ref` attribute to the JSX tag for which you want to get the DOM node:\n\n```javascript\n<div ref={myRef}>\n```\n\nThe `useRef` Hook returns an object with a single property called `current`. Initially, `myRef.current` will be `null`. When React creates a DOM node for this `<div>`, React will put a reference to this node into `myRef.current`. You can then access this DOM node from your [event handlers](https://react.dev/learn/responding-to-events) and use the built-in [browser APIs](https://developer.mozilla.org/docs/Web/API/Element) defined on it.\n\n```javascript\n// You can use any browser APIs, for example:\nmyRef.current.scrollIntoView();\n```\n\n## Example: Focusing a text input\n\nIn this example, clicking the button will focus the input:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n## Example: Scrolling to an element\n\nYou can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser [`scrollIntoView()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) method on the corresponding DOM node:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n  const firstCatRef = useRef(null);\n  const secondCatRef = useRef(null);\n  const thirdCatRef = useRef(null);\n\n  function handleScrollToFirstCat() {\n    firstCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToSecondCat() {\n    secondCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToThirdCat() {\n    thirdCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={handleScrollToFirstCat}>Neo</button>\n        <button onClick={handleScrollToSecondCat}>Millie</button>\n        <button onClick={handleScrollToThirdCat}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          <li><img src=\"https://placecats.com/neo/300/200\" alt=\"Neo\" ref={firstCatRef} /></li>\n          <li><img src=\"https://placecats.com/millie/200/200\" alt=\"Millie\" ref={secondCatRef} /></li>\n          <li><img src=\"https://placecats.com/bella/199/200\" alt=\"Bella\" ref={thirdCatRef} /></li>\n        </ul>\n      </div>\n    </>\n  );\n}\n```\n\n## How to manage a list of refs using a ref callback\n\nIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don’t know how many you will have. Something like this **wouldn’t work**:\n\n```javascript\n<ul>\n  {items.map((item) => {\n    // Doesn't work!\n    const ref = useRef(null);\n    return <li ref={ref} />;\n  })}\n</ul>\n```\n\nThis is because **Hooks must only be called at the top-level of your component.** You can’t call `useRef` in a loop, in a condition, or inside a `map()` call.\n\nOne possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) to “find” the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.\n\nAnother solution is to **pass a function to the `ref` attribute.** This is called a [`ref` callback.](https://react.dev/reference/react-dom/components/common#ref-callback) React will call your ref callback with the DOM node when it’s time to set the ref, and with `null` when it’s time to clear it. This lets you maintain your own array or a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), and access any ref by its index or some kind of ID.\n\nThis example shows how you can use this approach to scroll to an arbitrary node in a long list:\n\n```javascript\nimport { useRef, useState } from \"react\";\n\nexport default function CatFriends() {\n  const itemsRef = useRef(null);\n  const [catList, setCatList] = useState(setupCatList);\n\n  function scrollToCat(cat) {\n    const map = getMap();\n    const node = map.get(cat);\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n\n  function getMap() {\n    if (!itemsRef.current) {\n      // Initialize the Map on first usage.\n      itemsRef.current = new Map();\n    }\n    return itemsRef.current;\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToCat(catList[0])}>Neo</button>\n        <button onClick={() => scrollToCat(catList[5])}>Millie</button>\n        <button onClick={() => scrollToCat(catList[9])}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat) => (\n            <li\n              key={cat}\n              ref={(node) => {\n                const map = getMap();\n                map.set(cat, node);\n                return () => {\n                  map.delete(cat);\n                };\n              }}\n            >\n              <img src={cat} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nfunction setupCatList() {\n  const catList = [];\n  for (let i = 0; i < 10; i++) {\n    catList.push(\"https://loremflickr.com/320/240/cat?lock=\" + i);\n  }\n  return catList;\n}\n```\n\n## Accessing another component’s DOM nodes\n\nRefs are an escape hatch. Manually manipulating _another_ component’s DOM nodes can make your code fragile.\n\nYou can pass refs from parent component to child components [just like any other prop](https://react.dev/learn/passing-props-to-a-component).\n\n```javascript\nimport { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nfunction MyForm() {\n  const inputRef = useRef(null);\n  return <MyInput ref={inputRef} />;\n}\n```\n\n## Exposing a subset of the API with an imperative handle\n\nIn the above example, the ref passed to `MyInput` is passed on to the original DOM input element. This lets the parent component call `focus()` on it. However, this also lets the parent component do something else—for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with [`useImperativeHandle`](https://react.dev/reference/react/useImperativeHandle):\n\n```javascript\nimport { useRef, useImperativeHandle } from \"react\";\n\nfunction MyInput({ ref }) {\n  const realInputRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    // Only expose focus and nothing else\n    focus() {\n      realInputRef.current.focus();\n    },\n  }));\n  return <input ref={realInputRef} />;\n};\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n## When React attaches the refs\n\nIn React, every update is split in [two phases](https://react.dev/learn/render-and-commit#step-3-react-commits-changes-to-the-dom):\n\n- During **render,** React calls your components to figure out what should be on the screen.\n- During **commit,** React applies changes to the DOM.\n\nIn general, you [don’t want](https://react.dev/learn/referencing-values-with-refs#best-practices-for-refs) to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so `ref.current` will be `null`. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.\n\nReact sets `ref.current` during the commit. Before updating the DOM, React sets the affected `ref.current` values to `null`. After updating the DOM, React immediately sets them to the corresponding DOM nodes.\n\n**Usually, you will access refs from event handlers.** If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.\n\n## Flushing state updates synchronously with flushSync\n\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was _just before_ the last added one:\n\n```javascript\nimport { useState, useRef } from 'react';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(initialTodos);\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    setText('');\n    setTodos([...todos, newTodo]);\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>Add</button>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n```\n\n## Best practices for DOM manipulation with refs\n\nRefs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.\n\nIf you stick to non-destructive actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to **modify** the DOM manually, you can risk conflicting with the changes React is making.\n\n## Recap\n\n- Refs are a generic concept, but most often you’ll use them to hold DOM elements.\n- You instruct React to put a DOM node into `myRef.current` by passing `<div ref={myRef}>`.\n- Usually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.\n- A component doesn’t expose its DOM nodes by default. You can opt into exposing a DOM node by using the `ref` prop.\n- Avoid changing DOM nodes managed by React.\n- If you do modify DOM nodes managed by React, modify parts that React has no reason to update.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to access a DOM node managed by React with the `ref` attribute\n- How the `ref` JSX attribute relates to the `useRef` Hook\n- How to access another component’s DOM node\n- In which cases it’s safe to modify the DOM managed by React.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I getting a ref to the node in react-learn?\n\nAssistant: To getting a ref to the node in react-learn, here's what you do:\nTo access a DOM node managed by React, first, import the `useRef` Hook:\n\n```javascript\nimport { useRef } from 'react';\n```\n\nThen, use it to declare a ref inside your component:\n\n```javascript\nconst myRef = useRef(null);\n```\n\nFinally, pass your ref as the `ref` attribute to the JSX tag for which you want to get the DOM node:\n\n```javascript\n<div ref={myRef}>\n```\n\nThe `useRef` Hook returns an object with a single property called `current`. Initially, `myRef.current` will be `null`. When React creates a DOM node for this `<div>`, React will put a reference to this node into `myRef.current`. You can then access this DOM node from your [event handlers](https://react.dev/learn/responding-to-events) and use the built-in [browser APIs](https://developer.mozilla.org/docs/Web/API/Element) defined on it.\n\n```javascript\n// You can use any browser APIs, for example:\nmyRef.current.scrollIntoView();\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I example: focusing a text input in react-learn?\n\nAssistant: To example: focusing a text input in react-learn, here's what you do:\nIn this example, clicking the button will focus the input:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I example: scrolling to an element in react-learn?\n\nAssistant: To example: scrolling to an element in react-learn, here's what you do:\nYou can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser [`scrollIntoView()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) method on the corresponding DOM node:\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n  const firstCatRef = useRef(null);\n  const secondCatRef = useRef(null);\n  const thirdCatRef = useRef(null);\n\n  function handleScrollToFirstCat() {\n    firstCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToSecondCat() {\n    secondCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  function handleScrollToThirdCat() {\n    thirdCatRef.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={handleScrollToFirstCat}>Neo</button>\n        <button onClick={handleScrollToSecondCat}>Millie</button>\n        <button onClick={handleScrollToThirdCat}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          <li><img src=\"https://placecats.com/neo/300/200\" alt=\"Neo\" ref={firstCatRef} /></li>\n          <li><img src=\"https://placecats.com/millie/200/200\" alt=\"Millie\" ref={secondCatRef} /></li>\n          <li><img src=\"https://placecats.com/bella/199/200\" alt=\"Bella\" ref={thirdCatRef} /></li>\n        </ul>\n      </div>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how to manage a list of refs using a ref callback in react-learn?\n\nAssistant: To how to manage a list of refs using a ref callback in react-learn, here's what you do:\nIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don’t know how many you will have. Something like this **wouldn’t work**:\n\n```javascript\n<ul>\n  {items.map((item) => {\n    // Doesn't work!\n    const ref = useRef(null);\n    return <li ref={ref} />;\n  })}\n</ul>\n```\n\nThis is because **Hooks must only be called at the top-level of your component.** You can’t call `useRef` in a loop, in a condition, or inside a `map()` call.\n\nOne possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) to “find” the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.\n\nAnother solution is to **pass a function to the `ref` attribute.** This is called a [`ref` callback.](https://react.dev/reference/react-dom/components/common#ref-callback) React will call your ref callback with the DOM node when it’s time to set the ref, and with `null` when it’s time to clear it. This lets you maintain your own array or a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), and access any ref by its index or some kind of ID.\n\nThis example shows how you can use this approach to scroll to an arbitrary node in a long list:\n\n```javascript\nimport { useRef, useState } from \"react\";\n\nexport default function CatFriends() {\n  const itemsRef = useRef(null);\n  const [catList, setCatList] = useState(setupCatList);\n\n  function scrollToCat(cat) {\n    const map = getMap();\n    const node = map.get(cat);\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n\n  function getMap() {\n    if (!itemsRef.current) {\n      // Initialize the Map on first usage.\n      itemsRef.current = new Map();\n    }\n    return itemsRef.current;\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToCat(catList[0])}>Neo</button>\n        <button onClick={() => scrollToCat(catList[5])}>Millie</button>\n        <button onClick={() => scrollToCat(catList[9])}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat) => (\n            <li\n              key={cat}\n              ref={(node) => {\n                const map = getMap();\n                map.set(cat, node);\n                return () => {\n                  map.delete(cat);\n                };\n              }}\n            >\n              <img src={cat} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nfunction setupCatList() {\n  const catList = [];\n  for (let i = 0; i < 10; i++) {\n    catList.push(\"https://loremflickr.com/320/240/cat?lock=\" + i);\n  }\n  return catList;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I accessing another component’s dom nodes in react-learn?\n\nAssistant: To accessing another component’s dom nodes in react-learn, here's what you do:\nRefs are an escape hatch. Manually manipulating _another_ component’s DOM nodes can make your code fragile.\n\nYou can pass refs from parent component to child components [just like any other prop](https://react.dev/learn/passing-props-to-a-component).\n\n```javascript\nimport { useRef } from 'react';\n\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n}\n\nfunction MyForm() {\n  const inputRef = useRef(null);\n  return <MyInput ref={inputRef} />;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I exposing a subset of the api with an imperative handle in react-learn?\n\nAssistant: To exposing a subset of the api with an imperative handle in react-learn, here's what you do:\nIn the above example, the ref passed to `MyInput` is passed on to the original DOM input element. This lets the parent component call `focus()` on it. However, this also lets the parent component do something else—for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with [`useImperativeHandle`](https://react.dev/reference/react/useImperativeHandle):\n\n```javascript\nimport { useRef, useImperativeHandle } from \"react\";\n\nfunction MyInput({ ref }) {\n  const realInputRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    // Only expose focus and nothing else\n    focus() {\n      realInputRef.current.focus();\n    },\n  }));\n  return <input ref={realInputRef} />;\n};\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I when react attaches the refs in react-learn?\n\nAssistant: To when react attaches the refs in react-learn, here's what you do:\nIn React, every update is split in [two phases](https://react.dev/learn/render-and-commit#step-3-react-commits-changes-to-the-dom):\n\n- During **render,** React calls your components to figure out what should be on the screen.\n- During **commit,** React applies changes to the DOM.\n\nIn general, you [don’t want](https://react.dev/learn/referencing-values-with-refs#best-practices-for-refs) to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so `ref.current` will be `null`. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.\n\nReact sets `ref.current` during the commit. Before updating the DOM, React sets the affected `ref.current` values to `null`. After updating the DOM, React immediately sets them to the corresponding DOM nodes.\n\n**Usually, you will access refs from event handlers.** If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I flushing state updates synchronously with flushsync in react-learn?\n\nAssistant: To flushing state updates synchronously with flushsync in react-learn, here's what you do:\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was _just before_ the last added one:\n\n```javascript\nimport { useState, useRef } from 'react';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(initialTodos);\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    setText('');\n    setTodos([...todos, newTodo]);\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>Add</button>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I best practices for dom manipulation with refs in react-learn?\n\nAssistant: To best practices for dom manipulation with refs in react-learn, here's what you do:\nRefs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.\n\nIf you stick to non-destructive actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to **modify** the DOM manually, you can risk conflicting with the changes React is making..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- Refs are a generic concept, but most often you’ll use them to hold DOM elements.\n- You instruct React to put a DOM node into `myRef.current` by passing `<div ref={myRef}>`.\n- Usually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.\n- A component doesn’t expose its DOM nodes by default. You can opt into exposing a DOM node by using the `ref` prop.\n- Avoid changing DOM nodes managed by React.\n- If you do modify DOM nodes managed by React, modify parts that React has no reason to update..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Manipulating the DOM with Refs in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Getting a ref to the node**:\n\n```yaml\nimport { useRef } from 'react';\n\nconst myRef = useRef(null);\n\n<div ref={myRef}>\n```\n\nThis snippet shows you how to getting a ref to the node, which is an important aspect of manipulating the dom with refs.\n\n**Example: Focusing a text input**:\n\n```yaml\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>Focus the input</button>\n    </>\n  );\n}\n\n```\n\nThis snippet shows you how to example: focusing a text input, which is an important aspect of manipulating the dom with refs.\n\n", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Manipulating the DOM with Refs in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid changing DOM nodes managed by React.\n\nUse refs for non-destructive actions like focusing and scrolling.\n\nBe cautious when modifying the DOM manually.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/manipulating-the-dom-with-refs", "title": "Manipulating the DOM with Refs", "description": "Learn how to manipulate the DOM in React using refs, including how to access DOM nodes, focus elements, and scroll to elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 03:09:40", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogTitle": "Manipulating the DOM with Refs – React", "algolia-search-order": "44", "language": "en", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-learn.png", "ogUrl": "https://react.dev/learn/manipulating-the-dom-with-refs", "ogDescription": "The library for web and native user interfaces", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "og:title": "Manipulating the DOM with Refs – React", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "Manipulating the DOM with Refs – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "title": "Manipulating the DOM with Refs – React", "ogImage": "https://react.dev/images/og-learn.png", "scrapeId": "3df8ab47-4550-4369-85b4-34b299a3b215", "sourceURL": "https://react.dev/learn/manipulating-the-dom-with-refs", "url": "https://react.dev/learn/manipulating-the-dom-with-refs", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what You Might Not Need an Effect is in react-learn?\n\nAssistant: Sure, I'd be happy to explain You Might Not Need an Effect in react-learn.\n\n# You Might Not Need an Effect\n\nThis page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- Why and how to remove unnecessary Effects from your components\n- How to cache expensive computations without Effects\n- How to reset and adjust component state without Effects\n- How to share logic between event handlers\n- Which logic should be moved to event handlers\n- How to notify parent components about changes\n\n## How to remove unnecessary Effects\n\nThere are two common cases in which you don’t need Effects:\n\n- **You don’t need Effects to transform data for rendering.** For example, let’s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will [“commit”](https://react.dev/learn/render-and-commit) these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect _also_ immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.\n- **You don’t need Effects to handle user events.** For example, let’s say you want to send an `/api/buy` POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don’t know _what_ the user did (for example, which button was clicked). This is why you’ll usually handle user events in the corresponding event handlers.\n\nYou _do_ need Effects to [synchronize](https://react.dev/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events) with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern [frameworks](https://react.dev/learn/start-a-new-react-project#production-grade-react-frameworks) provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.\n\n## Updating state based on props or state\n\nSuppose you have a component with two state variables: `firstName` and `lastName`. You want to calculate a `fullName` from them by concatenating them. Moreover, you’d like `fullName` to update whenever `firstName` or `lastName` change. Your first instinct might be to add a `fullName` state variable and update it in an Effect:\n\n```javascript\nfunction Form() {\n\n  const [firstName, setFirstName] = useState('Taylor');\n\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n\n  const [fullName, setFullName] = useState('');\n\n  useEffect(() => {\n\n    setFullName(firstName + ' ' + lastName);\n\n  }, [firstName, lastName]);\n\n  // ...\n}\n```\n\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for `fullName`, then immediately re-renders with the updated value. Remove the state variable and the Effect:\n\n```javascript\nfunction Form() {\n\n  const [firstName, setFirstName] = useState('Taylor');\n\n  const [lastName, setLastName] = useState('Swift');\n\n  // ✅ Good: calculated during rendering\n\n  const fullName = firstName + ' ' + lastName;\n\n  // ...\n}\n```\n\n**When something can be calculated from the existing props or state, [don’t put it in state.](https://react.dev/learn/choosing-the-state-structure#avoid-redundant-state) Instead, calculate it during rendering.** This makes your code faster (you avoid the extra “cascading” updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, [Thinking in React](https://react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state) explains what should go into state.\n\n## Caching expensive calculations\n\nThis component computes `visibleTodos` by taking the `todos` it receives by props and filtering them according to the `filter` prop. You might feel tempted to store the result in state and update it from an Effect:\n\n```javascript\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n\n  const [visibleTodos, setVisibleTodos] = useState([]);\n\n  useEffect(() => {\n\n    setVisibleTodos(getFilteredTodos(todos, filter));\n\n  }, [todos, filter]);\n\n  // ...\n}\n```\n\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\n\n```javascript\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // ✅ This is fine if getFilteredTodos() is not slow.\n\n  const visibleTodos = getFilteredTodos(todos, filter);\n\n  // ...\n}\n```\n\nUsually, this code is fine! But maybe `getFilteredTodos()` is slow or you have a lot of `todos`. In that case you don’t want to recalculate `getFilteredTodos()` if some unrelated state variable like `newTodo` has changed.\n\nYou can cache (or [“memoize”](https://en.wikipedia.org/wiki/Memoization)) an expensive calculation by wrapping it in a [`useMemo`](https://react.dev/reference/react/useMemo) Hook:\n\n```javascript\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  const visibleTodos = useMemo(() => {\n\n    // ✅ Does not re-run unless todos or filter change\n\n    return getFilteredTodos(todos, filter);\n\n  }, [todos, filter]);\n\n  // ...\n}\n```\n\nOr, written as a single line:\n\n```javascript\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // ✅ Does not re-run getFilteredTodos() unless todos or filter change\n\n  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);\n\n  // ...\n}\n```\n\n**This tells React that you don’t want the inner function to re-run unless either `todos` or `filter` have changed.** React will remember the return value of `getFilteredTodos()` during the initial render. During the next renders, it will check if `todos` or `filter` are different. If they’re the same as last time, `useMemo` will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\n\nThe function you wrap in [`useMemo`](https://react.dev/reference/react/useMemo) runs during rendering, so this only works for [pure calculations.](https://react.dev/learn/keeping-components-pure)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "overview", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- Why and how to remove unnecessary Effects from your components\n- How to cache expensive computations without Effects\n- How to reset and adjust component state without Effects\n- How to share logic between event handlers\n- Which logic should be moved to event handlers\n- How to notify parent components about changes.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "section_detail", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how to remove unnecessary effects in react-learn?\n\nAssistant: To how to remove unnecessary effects in react-learn, here's what you do:\nThere are two common cases in which you don’t need Effects:\n\n- **You don’t need Effects to transform data for rendering.** For example, let’s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will [“commit”](https://react.dev/learn/render-and-commit) these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect _also_ immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.\n- **You don’t need Effects to handle user events.** For example, let’s say you want to send an `/api/buy` POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don’t know _what_ the user did (for example, which button was clicked). This is why you’ll usually handle user events in the corresponding event handlers.\n\nYou _do_ need Effects to [synchronize](https://react.dev/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events) with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern [frameworks](https://react.dev/learn/start-a-new-react-project#production-grade-react-frameworks) provide more efficient built-in data fetching mechanisms than writing Effects directly in your components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "section_detail", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I updating state based on props or state in react-learn?\n\nAssistant: To updating state based on props or state in react-learn, here's what you do:\nSuppose you have a component with two state variables: `firstName` and `lastName`. You want to calculate a `fullName` from them by concatenating them. Moreover, you’d like `fullName` to update whenever `firstName` or `lastName` change. Your first instinct might be to add a `fullName` state variable and update it in an Effect:\n\n```javascript\nfunction Form() {\n\n  const [firstName, setFirstName] = useState('Taylor');\n\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n\n  const [fullName, setFullName] = useState('');\n\n  useEffect(() => {\n\n    setFullName(firstName + ' ' + lastName);\n\n  }, [firstName, lastName]);\n\n  // ...\n}\n```\n\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for `fullName`, then immediately re-renders with the updated value. Remove the state variable and the Effect:\n\n```javascript\nfunction Form() {\n\n  const [firstName, setFirstName] = useState('Taylor');\n\n  const [lastName, setLastName] = useState('Swift');\n\n  // ✅ Good: calculated during rendering\n\n  const fullName = firstName + ' ' + lastName;\n\n  // ...\n}\n```\n\n**When something can be calculated from the existing props or state, [don’t put it in state.](https://react.dev/learn/choosing-the-state-structure#avoid-redundant-state) Instead, calculate it during rendering.** This makes your code faster (you avoid the extra “cascading” updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, [Thinking in React](https://react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state) explains what should go into state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "section_detail", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I caching expensive calculations in react-learn?\n\nAssistant: To caching expensive calculations in react-learn, here's what you do:\nThis component computes `visibleTodos` by taking the `todos` it receives by props and filtering them according to the `filter` prop. You might feel tempted to store the result in state and update it from an Effect:\n\n```javascript\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n\n  const [visibleTodos, setVisibleTodos] = useState([]);\n\n  useEffect(() => {\n\n    setVisibleTodos(getFilteredTodos(todos, filter));\n\n  }, [todos, filter]);\n\n  // ...\n}\n```\n\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\n\n```javascript\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // ✅ This is fine if getFilteredTodos() is not slow.\n\n  const visibleTodos = getFilteredTodos(todos, filter);\n\n  // ...\n}\n```\n\nUsually, this code is fine! But maybe `getFilteredTodos()` is slow or you have a lot of `todos`. In that case you don’t want to recalculate `getFilteredTodos()` if some unrelated state variable like `newTodo` has changed.\n\nYou can cache (or [“memoize”](https://en.wikipedia.org/wiki/Memoization)) an expensive calculation by wrapping it in a [`useMemo`](https://react.dev/reference/react/useMemo) Hook:\n\n```javascript\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  const visibleTodos = useMemo(() => {\n\n    // ✅ Does not re-run unless todos or filter change\n\n    return getFilteredTodos(todos, filter);\n\n  }, [todos, filter]);\n\n  // ...\n}\n```\n\nOr, written as a single line:\n\n```javascript\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\n  const [newTodo, setNewTodo] = useState('');\n\n  // ✅ Does not re-run getFilteredTodos() unless todos or filter change\n\n  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);\n\n  // ...\n}\n```\n\n**This tells React that you don’t want the inner function to re-run unless either `todos` or `filter` have changed.** React will remember the return value of `getFilteredTodos()` during the initial render. During the next renders, it will check if `todos` or `filter` are different. If they’re the same as last time, `useMemo` will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\n\nThe function you wrap in [`useMemo`](https://react.dev/reference/react/useMemo) runs during rendering, so this only works for [pure calculations.](https://react.dev/learn/keeping-components-pure).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "section_detail", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for You Might Not Need an Effect in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Updating state based on props or state**:\n\n```yaml\nfunction Form() {\n\n  const [firstName, setFirstName] = useState('Taylor');\n\n  const [lastName, setLastName] = useState('Swift');\n\n  // 🔴 Avoid: redundant state and unnecessary Effect\n\n  const [fullName, setFullName] = useState('');\n\n  useEffect(() => {\n\n    setFullName(firstName + ' ' + lastName);\n\n  }, [firstName, lastName]);\n\n  // ...\n}\n```\n\nThis snippet shows you how to updating state based on props or state, which is an important aspect of you might not need an effect.\n\n", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "code_examples", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using You Might Not Need an Effect in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen something can be calculated from the existing props or state, don’t put it in state. Instead, calculate it during rendering.\n\nIf you can calculate something during render, you don’t need an Effect.\n\nTo cache expensive calculations, add useMemo instead of useEffect.\n\nTo reset the state of an entire component tree, pass a different key to it.\n\nTo reset a particular bit of state in response to a prop change, set it during rendering.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/you-might-not-need-an-effect", "title": "You Might Not Need an Effect", "description": "This page discusses when and how to avoid using Effects in React components, providing guidelines and examples for better state management and performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:11:23", "type": "best_practices", "page_metadata": {"algolia-search-order": "46", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "You Might Not Need an Effect – React", "og:title": "You Might Not Need an Effect – React", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "og:image": "https://react.dev/images/og-learn.png", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/learn/you-might-not-need-an-effect", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-learn.png", "language": "en", "title": "You Might Not Need an Effect – React", "ogDescription": "The library for web and native user interfaces", "ogTitle": "You Might Not Need an Effect – React", "og:url": "https://react.dev/learn/you-might-not-need-an-effect", "twitter:image": "https://react.dev/images/og-learn.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "0f330760-5478-424f-927a-5e6c80ba526b", "sourceURL": "https://react.dev/learn/you-might-not-need-an-effect", "url": "https://react.dev/learn/you-might-not-need-an-effect", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Rendering Lists is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Rendering Lists in react-learn.\n\n# Rendering Lists\n\nYou will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- How to render components from an array using JavaScript’s `map()`\n- How to render only specific components using JavaScript’s `filter()`\n- When and why to use React keys\n\n## Rendering data from arrays\n\nSay that you have a list of content.\n\n```sp-pre-placeholder grow-[2]\n<ul>\n  <li>Creola Katherine Johnson: mathematician</li>\n  <li>Mario José Molina-Pasquel Henríquez: chemist</li>\n  <li>Mohammad Abdus Salam: physicist</li>\n  <li>Percy Lavon Julian: chemist</li>\n  <li>Subrahmanyan Chandrasekhar: astrophysicist</li>\n</ul>\n```\n\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like `map()` and `filter()` to render lists of components from them.\n\nHere’s a short example of how to generate a list of items from an array:\n\n1. **Move** the data into an array:\n\n```sp-pre-placeholder grow-[2]\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n```\n\n2. **Map** the `people` members into a new array of JSX nodes, `listItems`:\n\n```sp-pre-placeholder grow-[2]\nconst listItems = people.map(person => <li>{person}</li>);\n```\n\n3. **Return** `listItems` from your component wrapped in a `<ul>`:\n\n```sp-pre-placeholder grow-[2]\nreturn <ul>{listItems}</ul>;\n```\n\nHere is the result:\n\n```javascript\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nexport default function List() {\n  const listItems = people.map(person => <li>{person}</li>);\n  return <ul>{listItems}</ul>;\n}\n```\n\nNotice the sandbox above displays a console error:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop.\n\nYou’ll learn how to fix this error later on this page. Before we get to that, let’s add some structure to your data.\n\n## Filtering arrays of items\n\nThis data can be structured even more.\n\n```sp-pre-placeholder grow-[2]\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n```\n\nLet’s say you want a way to only show people whose profession is `'chemist'`. You can use JavaScript’s `filter()` method to return just those people. This method takes an array of items, passes them through a “test” (a function that returns `true` or `false`), and returns a new array of only those items that passed the test (returned `true`).\n\nYou only want the items where `profession` is `'chemist'`. The “test” function for this looks like `(person) => person.profession === 'chemist'`. Here’s how to put it together:\n\n1. **Create** a new array of just “chemist” people, `chemists`, by calling `filter()` on the `people` filtering by `person.profession === 'chemist'`:\n\n```sp-pre-placeholder grow-[2]\nconst chemists = people.filter(person =>\n  person.profession === 'chemist'\n);\n```\n\n2. Now **map** over `chemists`:\n\n```sp-pre-placeholder grow-[2]\nconst listItems = chemists.map(person =>\n  <li>\n     <img\n       src={getImageUrl(person)}\n       alt={person.name}\n     />\n     <p>\n       <b>{person.name}:</b>\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     </p>\n  </li>\n);\n```\n\n3. Lastly, **return** the `listItems` from your component:\n\n```sp-pre-placeholder grow-[2]\nreturn <ul>{listItems}</ul>;\n```\n\n```javascript\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const chemists = people.filter(person => person.profession === 'chemist');\n  const listItems = chemists.map(person => (\n    <li>\n      <img src={getImageUrl(person)} alt={person.name} />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  ));\n  return <ul>{listItems}</ul>;\n}\n```\n\nNotice the sandbox above displays a console error:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop.\n\n## Keeping list items in order with `key`\n\nNotice that all the sandboxes above show an error in the console:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop.\n\nYou need to give each array item a `key` — a string or a number that uniquely identifies it among other items in that array:\n\n```sp-pre-placeholder grow-[2]\n<li key={person.id}>...</li>\n```\n\n### Note\n\nJSX elements directly inside a `map()` call always need keys!\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen `key` helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nRather than generating keys on the fly, you should include them in your data:\n\n```javascript\ndata.js\nexport const people = [{\n  id: 0, // Used in JSX as a key\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n  accomplishment: 'spaceflight calculations',\n  imageId: 'MK3eW3A'\n}, {\n  id: 1, // Used in JSX as a key\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n  accomplishment: 'discovery of Arctic ozone hole',\n  imageId: 'mynHUSa'\n}, {\n  id: 2, // Used in JSX as a key\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n  accomplishment: 'electromagnetism theory',\n  imageId: 'bE7W1ji'\n}, {\n  id: 3, // Used in JSX as a key\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n  imageId: 'IOjWm71'\n}, {\n  id: 4, // Used in JSX as a key\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n  accomplishment: 'white dwarf star mass calculations',\n  imageId: 'lrWQx8l'\n}];\n```\n\n### Pitfall\n\nYou might be tempted to use an item’s index in the array as its key. In fact, that’s what React will use if you don’t specify a `key` at all. But the order in which you render items will change over time if an item is inserted, deleted, or if the array gets reordered. Index as a key often leads to subtle and confusing bugs.\n\n## Recap\n\nOn this page you learned:\n- How to move data out of components and into data structures like arrays and objects.\n- How to generate sets of similar components with JavaScript’s `map()`.\n- How to create arrays of filtered items with JavaScript’s `filter()`.\n- Why and how to set `key` on each component in a collection so React can keep track of each of them even if their position or data changes.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- How to render components from an array using JavaScript’s `map()`\n- How to render only specific components using JavaScript’s `filter()`\n- When and why to use React keys.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rendering data from arrays in react-learn?\n\nAssistant: To rendering data from arrays in react-learn, here's what you do:\nSay that you have a list of content.\n\n```sp-pre-placeholder grow-[2]\n<ul>\n  <li>Creola Katherine Johnson: mathematician</li>\n  <li>Mario José Molina-Pasquel Henríquez: chemist</li>\n  <li>Mohammad Abdus Salam: physicist</li>\n  <li>Percy Lavon Julian: chemist</li>\n  <li>Subrahmanyan Chandrasekhar: astrophysicist</li>\n</ul>\n```\n\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like `map()` and `filter()` to render lists of components from them.\n\nHere’s a short example of how to generate a list of items from an array:\n\n1. **Move** the data into an array:\n\n```sp-pre-placeholder grow-[2]\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n```\n\n2. **Map** the `people` members into a new array of JSX nodes, `listItems`:\n\n```sp-pre-placeholder grow-[2]\nconst listItems = people.map(person => <li>{person}</li>);\n```\n\n3. **Return** `listItems` from your component wrapped in a `<ul>`:\n\n```sp-pre-placeholder grow-[2]\nreturn <ul>{listItems}</ul>;\n```\n\nHere is the result:\n\n```javascript\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nexport default function List() {\n  const listItems = people.map(person => <li>{person}</li>);\n  return <ul>{listItems}</ul>;\n}\n```\n\nNotice the sandbox above displays a console error:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop.\n\nYou’ll learn how to fix this error later on this page. Before we get to that, let’s add some structure to your data..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I filtering arrays of items in react-learn?\n\nAssistant: To filtering arrays of items in react-learn, here's what you do:\nThis data can be structured even more.\n\n```sp-pre-placeholder grow-[2]\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n```\n\nLet’s say you want a way to only show people whose profession is `'chemist'`. You can use JavaScript’s `filter()` method to return just those people. This method takes an array of items, passes them through a “test” (a function that returns `true` or `false`), and returns a new array of only those items that passed the test (returned `true`).\n\nYou only want the items where `profession` is `'chemist'`. The “test” function for this looks like `(person) => person.profession === 'chemist'`. Here’s how to put it together:\n\n1. **Create** a new array of just “chemist” people, `chemists`, by calling `filter()` on the `people` filtering by `person.profession === 'chemist'`:\n\n```sp-pre-placeholder grow-[2]\nconst chemists = people.filter(person =>\n  person.profession === 'chemist'\n);\n```\n\n2. Now **map** over `chemists`:\n\n```sp-pre-placeholder grow-[2]\nconst listItems = chemists.map(person =>\n  <li>\n     <img\n       src={getImageUrl(person)}\n       alt={person.name}\n     />\n     <p>\n       <b>{person.name}:</b>\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     </p>\n  </li>\n);\n```\n\n3. Lastly, **return** the `listItems` from your component:\n\n```sp-pre-placeholder grow-[2]\nreturn <ul>{listItems}</ul>;\n```\n\n```javascript\nimport { people } from './data.js';\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n  const chemists = people.filter(person => person.profession === 'chemist');\n  const listItems = chemists.map(person => (\n    <li>\n      <img src={getImageUrl(person)} alt={person.name} />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  ));\n  return <ul>{listItems}</ul>;\n}\n```\n\nNotice the sandbox above displays a console error:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I keeping list items in order with `key` in react-learn?\n\nAssistant: To keeping list items in order with `key` in react-learn, here's what you do:\nNotice that all the sandboxes above show an error in the console:\n\nConsole\n\nWarning: Each child in a list should have a unique “key” prop.\n\nYou need to give each array item a `key` — a string or a number that uniquely identifies it among other items in that array:\n\n```sp-pre-placeholder grow-[2]\n<li key={person.id}>...</li>\n```\n\n### Note\n\nJSX elements directly inside a `map()` call always need keys!\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen `key` helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nRather than generating keys on the fly, you should include them in your data:\n\n```javascript\ndata.js\nexport const people = [{\n  id: 0, // Used in JSX as a key\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n  accomplishment: 'spaceflight calculations',\n  imageId: 'MK3eW3A'\n}, {\n  id: 1, // Used in JSX as a key\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n  accomplishment: 'discovery of Arctic ozone hole',\n  imageId: 'mynHUSa'\n}, {\n  id: 2, // Used in JSX as a key\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n  accomplishment: 'electromagnetism theory',\n  imageId: 'bE7W1ji'\n}, {\n  id: 3, // Used in JSX as a key\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n  imageId: 'IOjWm71'\n}, {\n  id: 4, // Used in JSX as a key\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n  accomplishment: 'white dwarf star mass calculations',\n  imageId: 'lrWQx8l'\n}];\n```\n\n### Pitfall\n\nYou might be tempted to use an item’s index in the array as its key. In fact, that’s what React will use if you don’t specify a `key` at all. But the order in which you render items will change over time if an item is inserted, deleted, or if the array gets reordered. Index as a key often leads to subtle and confusing bugs..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\nOn this page you learned:\n- How to move data out of components and into data structures like arrays and objects.\n- How to generate sets of similar components with JavaScript’s `map()`.\n- How to create arrays of filtered items with JavaScript’s `filter()`.\n- Why and how to set `key` on each component in a collection so React can keep track of each of them even if their position or data changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Rendering Lists in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Rendering data from arrays**:\n\n```yaml\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nconst listItems = people.map(person => <li>{person}</li>);\n\nreturn <ul>{listItems}</ul>;\n```\n\nThis snippet shows you how to rendering data from arrays, which is an important aspect of rendering lists.\n\n**Filtering arrays of items**:\n\n```yaml\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n\nconst chemists = people.filter(person => person.profession === 'chemist');\n\nconst listItems = chemists.map(person => (\n  <li>\n    <img src={getImageUrl(person)} alt={person.name} />\n    <p>\n      <b>{person.name}:</b>\n      {' ' + person.profession + ' '}\n      known for {person.accomplishment}\n    </p>\n  </li>\n));\n\nreturn <ul>{listItems}</ul>;\n```\n\nThis snippet shows you how to filtering arrays of items, which is an important aspect of rendering lists.\n\n**Keeping list items in order with `key`**:\n\n```yaml\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n  accomplishment: 'spaceflight calculations',\n  imageId: 'MK3eW3A'\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n  accomplishment: 'discovery of Arctic ozone hole',\n  imageId: 'mynHUSa'\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n  accomplishment: 'electromagnetism theory',\n  imageId: 'bE7W1ji'\n}, {\n  id: 3,\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',\n  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n  imageId: 'IOjWm71'\n}, {\n  id: 4,\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n  accomplishment: 'white dwarf star mass calculations',\n  imageId: 'lrWQx8l'\n}];\n\n<li key={person.id}>...</li>\n```\n\nThis snippet shows you how to keeping list items in order with `key`, which is an important aspect of rendering lists.\n\n", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "code_examples", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Rendering Lists in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `map()` to render components from an array.\n\nUse `filter()` to render only specific components from an array.\n\nAlways provide a unique `key` prop for each item in a list to help React identify which items have changed, are added, or are removed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/rendering-lists", "title": "Rendering Lists", "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:15:33", "type": "best_practices", "page_metadata": {"twitter:site": "@reactjs", "ogTitle": "Rendering Lists – React", "theme-color": "#23272f", "og:title": "Rendering Lists – React", "twitter:image": "https://react.dev/images/og-learn.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "algolia-search-order": "23", "ogUrl": "https://react.dev/learn/rendering-lists", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:title": "Rendering Lists – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/learn/rendering-lists", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "Rendering Lists – React", "scrapeId": "246fd26d-b784-4167-a597-b4ef869d9bb7", "sourceURL": "https://react.dev/learn/rendering-lists", "url": "https://react.dev/learn/rendering-lists", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what React Compiler is in react-learn?\n\nAssistant: Sure, I'd be happy to explain React Compiler in react-learn.\n\n# React Compiler\n\nThis page will give you an introduction to React Compiler and how to try it out successfully.Here's a quick rundown of what this is about:\n\n## Under Construction\n\nThese docs are still a work in progress. More documentation is available in the React Compiler Working Group repo, and will be upstreamed into these docs when they are more stable.\n\n## You will learn\n\n- Getting started with the compiler\n- Installing the compiler and ESLint plugin\n- Troubleshooting\n\n## Note\n\nReact Compiler is a new compiler currently in Beta, that we’ve open sourced to get early feedback from the community. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React. The latest Beta release can be found with the `@beta` tag, and daily experimental releases with `@experimental`. React Compiler is a new compiler that we’ve open sourced to get early feedback from the community. It is a build-time only tool that automatically optimizes your React app. It works with plain JavaScript, and understands the Rules of React, so you don’t need to rewrite any code to use it. The compiler also includes an ESLint plugin that surfaces the analysis from the compiler right in your editor. **We strongly recommend everyone use the linter today.** The linter does not require that you have the compiler installed, so you can use it even if you are not ready to try out the compiler. The compiler is currently released as `beta`, and is available to try out on React 17+ apps and libraries. To install the Beta:\n\n## What does the compiler do?\n\nIn order to optimize applications, React Compiler automatically memoizes your code. You may be familiar today with memoization through APIs such as `useMemo`, `useCallback`, and `React.memo`. With these APIs you can tell React that certain parts of your application don’t need to recompute if their inputs haven’t changed, reducing work on updates. While powerful, it’s easy to forget to apply memoization or apply them incorrectly. This can lead to inefficient updates as React has to check parts of your UI that don’t have any meaningful changes. The compiler uses its knowledge of JavaScript and React’s rules to automatically memoize values or groups of values within your components and hooks. If it detects breakages of the rules, it will automatically skip over just those components or hooks, and continue safely compiling other code.\n\n## Note\n\nReact Compiler can statically detect when Rules of React are broken, and safely opt-out of optimizing just the affected components or hooks. It is not necessary for the compiler to optimize 100% of your codebase. If your codebase is already very well-memoized, you might not expect to see major performance improvements with the compiler. However, in practice memoizing the correct dependencies that cause performance issues is tricky to get right by hand.\n\n## Deep Dive\n\n\n\n## What kind of memoization does React Compiler add?\n\nThe initial release of React Compiler is primarily focused on **improving update performance** (re-rendering existing components), so it focuses on these two use cases:\n\n1. **Skipping cascading re-rendering of components**\n   - Re-rendering `<Parent />` causes many components in its component tree to re-render, even though only `<Parent />` has changed\n2. **Skipping expensive calculations from outside of React**\n   - For example, calling `expensivelyProcessAReallyLargeArrayOfObjects()` inside of your component or hook that needs that data\n\n## Optimizing Re-renders\n\nReact lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component’s state changes, React will re-render that component _and all of its children_ — unless you have applied some form of manual memoization with `useMemo()`, `useCallback()`, or `React.memo()`. For example, in the following example, `<MessageButton>` will re-render whenever `<FriendList>`’s state changes:\n\n```sp-pre-placeholder grow-[2]\nfunction FriendList({ friends }) {\n  const onlineCount = useFriendOnlineCount();\n  if (friends.length === 0) {\n    return <NoFriends />;\n  }\n  return (\n    <div>\n      <span>{onlineCount} online</span>\n      {friends.map((friend) => (\n        <FriendListCard key={friend.id} friend={friend} />\n      ))}\n      <MessageButton />\n    </div>\n  );\n}\n```\n\n[_See this example in the React Compiler Playground_]()\n\n## Expensive calculations also get memoized\n\nThe compiler can also automatically memoize for expensive calculations used during rendering:\n\n```sp-pre-placeholder grow-[2]\n// **Not** memoized by React Compiler, since this is not a component or hook\nfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }\n// Memoized by React Compiler since this is a component\nfunction TableContainer({ items }) {\n  // This function call would be memoized:\n  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);\n  // ...\n}\n```\n\n[_See this example in the React Compiler Playground_]()\n\n## Should I try out the compiler?\n\nPlease note that the compiler is still in Beta and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React. **You don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it.** However, we do appreciate trying it out in small experiments in your apps so that you can provide feedback to us to help make the compiler better.\n\n## Getting Started\n\nIn addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler.\n\n## Installing eslint-plugin-react-compiler\n\nReact Compiler also powers an ESLint plugin. The ESLint plugin can be used **independently** of the compiler, meaning you can use the ESLint plugin even if you don’t use the compiler.\n\nTerminal\n\nCopy\n\nnpm install -D eslint-plugin-react-compiler@beta\n\nThen, add it to your ESLint config:\n\n```sp-pre-placeholder grow-[2]\nimport reactCompiler from 'eslint-plugin-react-compiler'\nexport default [\n  {\n    plugins: {\n      'react-compiler': reactCompiler,\n    },\n    rules: {\n      'react-compiler/react-compiler': 'error',\n    },\n  },\n]\n```\n\nOr, in the deprecated eslintrc config format:\n\n```sp-pre-placeholder grow-[2]\nmodule.exports = {\n  plugins: [\n    'eslint-plugin-react-compiler',\n  ],\n  rules: {\n    'react-compiler/react-compiler': 'error',\n  },\n}\n```\n\nThe ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.\n\n## Rolling out the compiler to your codebase\n\n#### Existing projects\nThe compiler is designed to compile functional components and hooks that follow the Rules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.\n\nFor this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:\n\n```sp-pre-placeholder grow-[2]\nconst ReactCompilerConfig = {\n  sources: (filename) => {\n    return filename.indexOf('src/path/to/dir') !== -1;\n  },\n};\n```\n\nWhen you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app.\n\n## New projects\n\nIf you’re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior.\n\n## Using React Compiler with React 17 or 18\n\nReact Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extra `react-compiler-runtime` package which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.\n\nTerminal\n\nCopy\n\nnpm install react-compiler-runtime@beta\n\nYou should also add the correct `target` to your compiler config, where `target` is the major version of React you are targeting:\n\n```sp-pre-placeholder grow-[2]\n// babel.config.js\nconst ReactCompilerConfig = {\n  target: '18' // '17' | '18' | '19'\n};\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig],\n    ],\n  };\n};\n```\n\n## Using the compiler on libraries\n\nReact Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.\n\nBecause your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum target and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.\n\n## Usage\n\n\n\n## Babel\n\nTerminal\n\nCopy\n\nnpm install babel-plugin-react-compiler@beta\n\nThe compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.\n\nAfter installing, add it to your Babel config. Please note that it’s critical that the compiler run **first** in the pipeline:\n\n```sp-pre-placeholder grow-[2]\n// babel.config.js\nconst ReactCompilerConfig = { /* ... */ };\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!\\\n      // ...\\\n    ],\n  };\n};\n```\n\n## Vite\n\nIf you use Vite, you can add the plugin to vite-plugin-react:\n\n```sp-pre-placeholder grow-[2]\n// vite.config.js\nconst ReactCompilerConfig = { /* ... */ };\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      react({\n        babel: {\n          plugins: [\n            [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n          ],\n        },\n      }),\n    ],\n    // ...\n  };\n});\n```\n\n## Next.js\n\nPlease refer to the Next.js docs for more information.\n\n## Remix\n\nInstall `vite-plugin-babel`, and add the compiler’s Babel plugin to it:\n\nTerminal\n\nCopy\n\nnpm install vite-plugin-babel\n\n```sp-pre-placeholder grow-[2]\n// vite.config.js\nimport babel from \"vite-plugin-babel\";\nconst ReactCompilerConfig = { /* ... */ };\nexport default defineConfig({\n  plugins: [\n    remix({ /* ... */}),\n    babel({\n      filter: /\\.[jt]sx?$/,\n      babelConfig: {\n        presets: [\"@babel/preset-typescript\"], // if you use TypeScript\n        plugins: [\n          [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n        ],\n      },\n    }),\n  ],\n});\n```\n\n## Webpack\n\nA community webpack loader is now available here.\n\n## Expo\n\nPlease refer to Expo’s docs to enable and use the React Compiler in Expo apps.\n\n## Metro (React Native)\n\nReact Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions.\n\n## Rspack\n\nPlease refer to Rspack’s docs to enable and use the React Compiler in Rspack apps.\n\n## Rsbuild\n\nPlease refer to Rsbuild’s docs to enable and use the React Compiler in Rsbuild apps.\n\n## Troubleshooting\n\nTo report issues, please first create a minimal repro on the React Compiler Playground and include it in your bug report. You can open issues in the facebook/react repo.\n\n## What does the compiler assume?\n\nReact Compiler assumes that your code:\n1. Is valid, semantic JavaScript.\n2. Tests that nullable/optional values and properties are defined before accessing them (for example, by enabling strictNullChecks if using TypeScript), i.e., `if (object.nullableProperty) { object.nullableProperty.foo }` or with optional-chaining `object.nullableProperty?.foo`.\n3. Follows the Rules of React.\n\nReact Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installing eslint-plugin-react-compiler.\n\n## How do I know my components have been optimized?\n\nReact DevTools (v5.0+) and React Native DevTools have built-in support for React Compiler and will display a “Memo ✨” badge next to components that have been optimized by the compiler.\n\n## Something is not working after compilation\n\nIf you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase. **You don’t have to fix all ESLint violations straight away.** You can address them at your own pace to increase the amount of components and hooks being optimized.\n\n## Note\n\n`\"use no memo\"` is a _temporary_ escape hatch that lets you opt-out components and hooks from being compiled by the React Compiler. This directive is not meant to be long lived the same way as eg `\"use client\"` is. It is not recommended to reach for this directive unless it’s strictly necessary. Once you opt-out a component or hook, it is opted-out forever until the directive is removed. This means that even if you fix the code, the compiler will still skip over compiling it unless you remove the directive.\n\n## Other issues\n\nPlease see the provided link.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "overview", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I under construction in react-learn?\n\nAssistant: To under construction in react-learn, here's what you do:\nThese docs are still a work in progress. More documentation is available in the React Compiler Working Group repo, and will be upstreamed into these docs when they are more stable..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- Getting started with the compiler\n- Installing the compiler and ESLint plugin\n- Troubleshooting.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nReact Compiler is a new compiler currently in Beta, that we’ve open sourced to get early feedback from the community. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React. The latest Beta release can be found with the `@beta` tag, and daily experimental releases with `@experimental`. React Compiler is a new compiler that we’ve open sourced to get early feedback from the community. It is a build-time only tool that automatically optimizes your React app. It works with plain JavaScript, and understands the Rules of React, so you don’t need to rewrite any code to use it. The compiler also includes an ESLint plugin that surfaces the analysis from the compiler right in your editor. **We strongly recommend everyone use the linter today.** The linter does not require that you have the compiler installed, so you can use it even if you are not ready to try out the compiler. The compiler is currently released as `beta`, and is available to try out on React 17+ apps and libraries. To install the Beta:.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what does the compiler do? in react-learn?\n\nAssistant: To what does the compiler do? in react-learn, here's what you do:\nIn order to optimize applications, React Compiler automatically memoizes your code. You may be familiar today with memoization through APIs such as `useMemo`, `useCallback`, and `React.memo`. With these APIs you can tell React that certain parts of your application don’t need to recompute if their inputs haven’t changed, reducing work on updates. While powerful, it’s easy to forget to apply memoization or apply them incorrectly. This can lead to inefficient updates as React has to check parts of your UI that don’t have any meaningful changes. The compiler uses its knowledge of JavaScript and React’s rules to automatically memoize values or groups of values within your components and hooks. If it detects breakages of the rules, it will automatically skip over just those components or hooks, and continue safely compiling other code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\nReact Compiler can statically detect when Rules of React are broken, and safely opt-out of optimizing just the affected components or hooks. It is not necessary for the compiler to optimize 100% of your codebase. If your codebase is already very well-memoized, you might not expect to see major performance improvements with the compiler. However, in practice memoizing the correct dependencies that cause performance issues is tricky to get right by hand..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I deep dive in react-learn?\n\nAssistant: To deep dive in react-learn, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what kind of memoization does react compiler add? in react-learn?\n\nAssistant: To what kind of memoization does react compiler add? in react-learn, here's what you do:\nThe initial release of React Compiler is primarily focused on **improving update performance** (re-rendering existing components), so it focuses on these two use cases:\n\n1. **Skipping cascading re-rendering of components**\n   - Re-rendering `<Parent />` causes many components in its component tree to re-render, even though only `<Parent />` has changed\n2. **Skipping expensive calculations from outside of React**\n   - For example, calling `expensivelyProcessAReallyLargeArrayOfObjects()` inside of your component or hook that needs that data.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I optimizing re-renders in react-learn?\n\nAssistant: To optimizing re-renders in react-learn, here's what you do:\nReact lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component’s state changes, React will re-render that component _and all of its children_ — unless you have applied some form of manual memoization with `useMemo()`, `useCallback()`, or `React.memo()`. For example, in the following example, `<MessageButton>` will re-render whenever `<FriendList>`’s state changes:\n\n```sp-pre-placeholder grow-[2]\nfunction FriendList({ friends }) {\n  const onlineCount = useFriendOnlineCount();\n  if (friends.length === 0) {\n    return <NoFriends />;\n  }\n  return (\n    <div>\n      <span>{onlineCount} online</span>\n      {friends.map((friend) => (\n        <FriendListCard key={friend.id} friend={friend} />\n      ))}\n      <MessageButton />\n    </div>\n  );\n}\n```\n\n[_See this example in the React Compiler Playground_]().\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I expensive calculations also get memoized in react-learn?\n\nAssistant: To expensive calculations also get memoized in react-learn, here's what you do:\nThe compiler can also automatically memoize for expensive calculations used during rendering:\n\n```sp-pre-placeholder grow-[2]\n// **Not** memoized by React Compiler, since this is not a component or hook\nfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }\n// Memoized by React Compiler since this is a component\nfunction TableContainer({ items }) {\n  // This function call would be memoized:\n  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);\n  // ...\n}\n```\n\n[_See this example in the React Compiler Playground_]().\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I should i try out the compiler? in react-learn?\n\nAssistant: To should i try out the compiler? in react-learn, here's what you do:\nPlease note that the compiler is still in Beta and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React. **You don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it.** However, we do appreciate trying it out in small experiments in your apps so that you can provide feedback to us to help make the compiler better..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I getting started in react-learn?\n\nAssistant: To getting started in react-learn, here's what you do:\nIn addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I installing eslint-plugin-react-compiler in react-learn?\n\nAssistant: To installing eslint-plugin-react-compiler in react-learn, here's what you do:\nReact Compiler also powers an ESLint plugin. The ESLint plugin can be used **independently** of the compiler, meaning you can use the ESLint plugin even if you don’t use the compiler.\n\nTerminal\n\nCopy\n\nnpm install -D eslint-plugin-react-compiler@beta\n\nThen, add it to your ESLint config:\n\n```sp-pre-placeholder grow-[2]\nimport reactCompiler from 'eslint-plugin-react-compiler'\nexport default [\n  {\n    plugins: {\n      'react-compiler': reactCompiler,\n    },\n    rules: {\n      'react-compiler/react-compiler': 'error',\n    },\n  },\n]\n```\n\nOr, in the deprecated eslintrc config format:\n\n```sp-pre-placeholder grow-[2]\nmodule.exports = {\n  plugins: [\n    'eslint-plugin-react-compiler',\n  ],\n  rules: {\n    'react-compiler/react-compiler': 'error',\n  },\n}\n```\n\nThe ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rolling out the compiler to your codebase in react-learn?\n\nAssistant: To rolling out the compiler to your codebase in react-learn, here's what you do:\n#### Existing projects\nThe compiler is designed to compile functional components and hooks that follow the Rules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.\n\nFor this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:\n\n```sp-pre-placeholder grow-[2]\nconst ReactCompilerConfig = {\n  sources: (filename) => {\n    return filename.indexOf('src/path/to/dir') !== -1;\n  },\n};\n```\n\nWhen you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I new projects in react-learn?\n\nAssistant: To new projects in react-learn, here's what you do:\nIf you’re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using react compiler with react 17 or 18 in react-learn?\n\nAssistant: To using react compiler with react 17 or 18 in react-learn, here's what you do:\nReact Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extra `react-compiler-runtime` package which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.\n\nTerminal\n\nCopy\n\nnpm install react-compiler-runtime@beta\n\nYou should also add the correct `target` to your compiler config, where `target` is the major version of React you are targeting:\n\n```sp-pre-placeholder grow-[2]\n// babel.config.js\nconst ReactCompilerConfig = {\n  target: '18' // '17' | '18' | '19'\n};\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig],\n    ],\n  };\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I using the compiler on libraries in react-learn?\n\nAssistant: To using the compiler on libraries in react-learn, here's what you do:\nReact Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.\n\nBecause your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum target and add `react-compiler-runtime` as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I usage in react-learn?\n\nAssistant: To usage in react-learn, here's what you do:\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I babel in react-learn?\n\nAssistant: To babel in react-learn, here's what you do:\nTerminal\n\nCopy\n\nnpm install babel-plugin-react-compiler@beta\n\nThe compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.\n\nAfter installing, add it to your Babel config. Please note that it’s critical that the compiler run **first** in the pipeline:\n\n```sp-pre-placeholder grow-[2]\n// babel.config.js\nconst ReactCompilerConfig = { /* ... */ };\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!\\\n      // ...\\\n    ],\n  };\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I vite in react-learn?\n\nAssistant: To vite in react-learn, here's what you do:\nIf you use Vite, you can add the plugin to vite-plugin-react:\n\n```sp-pre-placeholder grow-[2]\n// vite.config.js\nconst ReactCompilerConfig = { /* ... */ };\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      react({\n        babel: {\n          plugins: [\n            [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n          ],\n        },\n      }),\n    ],\n    // ...\n  };\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I next.js in react-learn?\n\nAssistant: To next.js in react-learn, here's what you do:\nPlease refer to the Next.js docs for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I remix in react-learn?\n\nAssistant: To remix in react-learn, here's what you do:\nInstall `vite-plugin-babel`, and add the compiler’s Babel plugin to it:\n\nTerminal\n\nCopy\n\nnpm install vite-plugin-babel\n\n```sp-pre-placeholder grow-[2]\n// vite.config.js\nimport babel from \"vite-plugin-babel\";\nconst ReactCompilerConfig = { /* ... */ };\nexport default defineConfig({\n  plugins: [\n    remix({ /* ... */}),\n    babel({\n      filter: /\\.[jt]sx?$/,\n      babelConfig: {\n        presets: [\"@babel/preset-typescript\"], // if you use TypeScript\n        plugins: [\n          [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n        ],\n      },\n    }),\n  ],\n});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I webpack in react-learn?\n\nAssistant: To webpack in react-learn, here's what you do:\nA community webpack loader is now available here..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I expo in react-learn?\n\nAssistant: To expo in react-learn, here's what you do:\nPlease refer to Expo’s docs to enable and use the React Compiler in Expo apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I metro (react native) in react-learn?\n\nAssistant: To metro (react native) in react-learn, here's what you do:\nReact Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rspack in react-learn?\n\nAssistant: To rspack in react-learn, here's what you do:\nPlease refer to Rspack’s docs to enable and use the React Compiler in Rspack apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I rsbuild in react-learn?\n\nAssistant: To rsbuild in react-learn, here's what you do:\nPlease refer to Rsbuild’s docs to enable and use the React Compiler in Rsbuild apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I troubleshooting in react-learn?\n\nAssistant: To troubleshooting in react-learn, here's what you do:\nTo report issues, please first create a minimal repro on the React Compiler Playground and include it in your bug report. You can open issues in the facebook/react repo..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I what does the compiler assume? in react-learn?\n\nAssistant: To what does the compiler assume? in react-learn, here's what you do:\nReact Compiler assumes that your code:\n1. Is valid, semantic JavaScript.\n2. Tests that nullable/optional values and properties are defined before accessing them (for example, by enabling strictNullChecks if using TypeScript), i.e., `if (object.nullableProperty) { object.nullableProperty.foo }` or with optional-chaining `object.nullableProperty?.foo`.\n3. Follows the Rules of React.\n\nReact Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installing eslint-plugin-react-compiler..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I how do i know my components have been optimized? in react-learn?\n\nAssistant: To how do i know my components have been optimized? in react-learn, here's what you do:\nReact DevTools (v5.0+) and React Native DevTools have built-in support for React Compiler and will display a “Memo ✨” badge next to components that have been optimized by the compiler..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I something is not working after compilation in react-learn?\n\nAssistant: To something is not working after compilation in react-learn, here's what you do:\nIf you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase. **You don’t have to fix all ESLint violations straight away.** You can address them at your own pace to increase the amount of components and hooks being optimized..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I note in react-learn?\n\nAssistant: To note in react-learn, here's what you do:\n`\"use no memo\"` is a _temporary_ escape hatch that lets you opt-out components and hooks from being compiled by the React Compiler. This directive is not meant to be long lived the same way as eg `\"use client\"` is. It is not recommended to reach for this directive unless it’s strictly necessary. Once you opt-out a component or hook, it is opted-out forever until the directive is removed. This means that even if you fix the code, the compiler will still skip over compiling it unless you remove the directive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I other issues in react-learn?\n\nAssistant: To other issues in react-learn, here's what you do:\nPlease see the provided link..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for React Compiler in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installing the Beta**:\n\n```yaml\nnpm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta\n```\n\nThis snippet shows you how to installing the beta, which is an important aspect of react compiler.\n\n**Installing eslint-plugin-react-compiler**:\n\n```yaml\nnpm install -D eslint-plugin-react-compiler@beta\n```\n\nThis snippet shows you how to installing eslint-plugin-react-compiler, which is an important aspect of react compiler.\n\n**Configuring ESLint**:\n\n```yaml\nimport reactCompiler from 'eslint-plugin-react-compiler'\nexport default [\n  {\n    plugins: {\n      'react-compiler': reactCompiler,\n    },\n    rules: {\n      'react-compiler/react-compiler': 'error',\n    },\n  },\n]\n```\n\nThis snippet shows you how to configuring eslint, which is an important aspect of react compiler.\n\n**Configuring ESLint (deprecated format)**:\n\n```yaml\nmodule.exports = {\n  plugins: [\n    'eslint-plugin-react-compiler',\n  ],\n  rules: {\n    'react-compiler/react-compiler': 'error',\n  },\n}\n```\n\nThis snippet shows you how to configuring eslint (deprecated format), which is an important aspect of react compiler.\n\n", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using React Compiler in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe strongly recommend everyone use the linter today.\n\nYou don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it.\n\nYou don’t have to fix all ESLint violations straight away. You can address them at your own pace to increase the amount of components and hooks being optimized.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/react-compiler", "title": "React Compiler", "description": "This page will give you an introduction to React Compiler and how to try it out successfully.", "has_code_examples": true, "has_best_practices": true, "section_count": 32, "timestamp": "2025-03-01 03:22:03", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "title": "React Compiler – React", "og:title": "React Compiler – React", "language": "en", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-learn.png", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-learn.png", "og:url": "https://react.dev/learn/react-compiler", "algolia-search-order": "14", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "twitter:title": "React Compiler – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "ogTitle": "React Compiler – React", "ogUrl": "https://react.dev/learn/react-compiler", "msapplication-TileColor": "#2b5797", "scrapeId": "4ee058fe-15c9-4917-93fc-24dcc29f0dcb", "sourceURL": "https://react.dev/learn/react-compiler", "url": "https://react.dev/learn/react-compiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you explain what Choosing the State Structure is in react-learn?\n\nAssistant: Sure, I'd be happy to explain Choosing the State Structure in react-learn.\n\n# Choosing the State Structure\n\nStructuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.Here's a quick rundown of what this is about:\n\n## You will learn\n\n- When to use a single vs multiple state variables\n- What to avoid when organizing state\n- How to fix common issues with the state structure\n\n## Principles for structuring state\n\nWhen you write a component that holds some state, you’ll have to make choices about how many state variables to use and what the shape of their data should be. While it’s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\n\n1. **Group related state.** If you always update two or more state variables at the same time, consider merging them into a single state variable.\n2. **Avoid contradictions in state.** When the state is structured in a way that several pieces of state may contradict and “disagree” with each other, you leave room for mistakes. Try to avoid this.\n3. **Avoid redundant state.** If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.\n4. **Avoid duplication in state.** When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.\n5. **Avoid deeply nested state.** Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\n\nThe goal behind these principles is to _make state easy to update without introducing mistakes_. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to [“normalize” the database structure](https://docs.microsoft.com/en-us/office/troubleshoot/access/database-normalization-description) to reduce the chance of bugs. To paraphrase Albert Einstein, **“Make your state as simple as it can be—but no simpler.”**\n\n## Group related state\n\nYou might sometimes be unsure between using a single or multiple state variables.\n\nShould you do this?\n\n```javascript\nconst [x, setX] = useState(0);\nconst [y, setY] = useState(0);\n```\n\nOr this?\n\n```javascript\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\nTechnically, you can use either of these approaches. But **if some two state variables always change together, it might be a good idea to unify them into a single state variable.** Then you won’t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\n## Avoid contradictions in state\n\nHere is a hotel feedback form with `isSending` and `isSent` state variables:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setIsSending(true);\n    await sendMessage(text);\n    setIsSending(false);\n    setIsSent(true);\n  }\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>;\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button disabled={isSending} type=\"submit\">\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}\n```\n\n## Avoid redundant state\n\nIf you can calculate some information from the component’s props or its existing state variables during rendering, you **should not** put that information into that component’s state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [fullName, setFullName] = useState('');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n    setFullName(e.target.value + ' ' + lastName);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n    setFullName(firstName + ' ' + e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}\n```\n\n## Avoid duplication in state\n\nThis menu list component lets you choose a single travel snack out of several:\n\n```javascript\nimport { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedItem, setSelectedItem] = useState(items[0]);\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            {item.title}\n            {' '}\n            <button onClick={() => {\n              setSelectedItem(item);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}\n```\n\n## Avoid deeply nested state\n\nImagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:\n\n```javascript\nexport const initialTravelPlan = {\n  id: 0,\n  title: '(Root)',\n  childPlaces: [{\n    id: 1,\n    title: 'Earth',\n    childPlaces: [{\n      id: 2,\n      title: 'Africa',\n      childPlaces: [{\n        id: 3,\n        title: 'Botswana',\n        childPlaces: []\n      }, {\n        id: 4,\n        title: 'Egypt',\n        childPlaces: []\n      }, {\n        id: 5,\n        title: 'Kenya',\n        childPlaces: []\n      }, {\n        id: 6,\n        title: 'Madagascar',\n        childPlaces: []\n      }, {\n        id: 7,\n        title: 'Morocco',\n        childPlaces: []\n      }, {\n        id: 8,\n        title: 'Nigeria',\n        childPlaces: []\n      }, {\n        id: 9,\n        title: 'South Africa',\n        childPlaces: []\n      }]\n    }, {\n      id: 10,\n      title: 'Americas',\n      childPlaces: [{\n        id: 11,\n        title: 'Argentina',\n        childPlaces: []\n      }, {\n        id: 12,\n        title: 'Brazil',\n        childPlaces: []\n      }, {\n        id: 13,\n        title: 'Barbados',\n        childPlaces: []\n      }, {\n        id: 14,\n        title: 'Canada',\n        childPlaces: []\n      }, {\n        id: 15,\n        title: 'Jamaica',\n        childPlaces: []\n      }, {\n        id: 16,\n        title: 'Mexico',\n        childPlaces: []\n      }, {\n        id: 17,\n        title: 'Trinidad and Tobago',\n        childPlaces: []\n      }, {\n        id: 18,\n        title: 'Venezuela',\n        childPlaces: []\n      }]\n    }, {\n      id: 19,\n      title: 'Asia',\n      childPlaces: [{\n        id: 20,\n        title: 'China',\n        childPlaces: []\n      }, {\n        id: 21,\n        title: 'India',\n        childPlaces: []\n      }, {\n        id: 22,\n        title: 'Singapore',\n        childPlaces: []\n      }, {\n        id: 23,\n        title: 'South Korea',\n        childPlaces: []\n      }, {\n        id: 24,\n        title: 'Thailand',\n        childPlaces: []\n      }, {\n        id: 25,\n        title: 'Vietnam',\n        childPlaces: []\n      }]\n    }, {\n      id: 26,\n      title: 'Europe',\n      childPlaces: [{\n        id: 27,\n        title: 'Croatia',\n        childPlaces: [],\n      }, {\n        id: 28,\n        title: 'France',\n        childPlaces: [],\n      }, {\n        id: 29,\n        title: 'Germany',\n        childPlaces: [],\n      }, {\n        id: 30,\n        title: 'Italy',\n        childPlaces: [],\n      }, {\n        id: 31,\n        title: 'Portugal',\n        childPlaces: [],\n      }, {\n        id: 32,\n        title: 'Spain',\n        childPlaces: [],\n      }, {\n        id: 33,\n        title: 'Turkey',\n        childPlaces: [],\n      }]\n    }, {\n      id: 34,\n      title: 'Oceania',\n      childPlaces: [{\n        id: 35,\n        title: 'Australia',\n        childPlaces: [],\n      }, {\n        id: 36,\n        title: 'Bora Bora (French Polynesia)',\n        childPlaces: [],\n      }, {\n        id: 37,\n        title: 'Easter Island (Chile)',\n        childPlaces: [],\n      }, {\n        id: 38,\n        title: 'Fiji',\n        childPlaces: [],\n      }, {\n        id: 39,\n        title: 'Hawaii (the USA)',\n        childPlaces: [],\n      }, {\n        id: 40,\n        title: 'New Zealand',\n        childPlaces: [],\n      }, {\n        id: 41,\n        title: 'Vanuatu',\n        childPlaces: [],\n      }]\n    }]\n  }, {\n    id: 42,\n    title: 'Moon',\n    childPlaces: [{\n      id: 43,\n      title: 'Rheita',\n      childPlaces: []\n    }, {\n      id: 44,\n      title: 'Piccolomini',\n      childPlaces: []\n    }, {\n      id: 45,\n      title: 'Tycho',\n      childPlaces: []\n    }]\n  }, {\n    id: 46,\n    title: 'Mars',\n    childPlaces: [{\n      id: 47,\n      title: 'Corn Town',\n      childPlaces: []\n    }, {\n      id: 48,\n      title: 'Green Hill',\n      childPlaces: []\n    }]\n  }]\n};\n```\n\n## Recap\n\n- If two state variables always update together, consider merging them into one.\n- Choose your state variables carefully to avoid creating “impossible” states.\n- Structure your state in a way that reduces the chances that you’ll make a mistake updating it.\n- Avoid redundant and duplicate state so that you don’t need to keep it in sync.\n- Don’t put props _into_ state unless you specifically want to prevent updates.\n- For UI patterns like selection, keep ID or index in state instead of the object itself.\n- If updating deeply nested state is complicated, try flattening it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "overview", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I you will learn in react-learn?\n\nAssistant: To you will learn in react-learn, here's what you do:\n- When to use a single vs multiple state variables\n- What to avoid when organizing state\n- How to fix common issues with the state structure.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I principles for structuring state in react-learn?\n\nAssistant: To principles for structuring state in react-learn, here's what you do:\nWhen you write a component that holds some state, you’ll have to make choices about how many state variables to use and what the shape of their data should be. While it’s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\n\n1. **Group related state.** If you always update two or more state variables at the same time, consider merging them into a single state variable.\n2. **Avoid contradictions in state.** When the state is structured in a way that several pieces of state may contradict and “disagree” with each other, you leave room for mistakes. Try to avoid this.\n3. **Avoid redundant state.** If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.\n4. **Avoid duplication in state.** When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.\n5. **Avoid deeply nested state.** Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\n\nThe goal behind these principles is to _make state easy to update without introducing mistakes_. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to [“normalize” the database structure](https://docs.microsoft.com/en-us/office/troubleshoot/access/database-normalization-description) to reduce the chance of bugs. To paraphrase Albert Einstein, **“Make your state as simple as it can be—but no simpler.”**.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I group related state in react-learn?\n\nAssistant: To group related state in react-learn, here's what you do:\nYou might sometimes be unsure between using a single or multiple state variables.\n\nShould you do this?\n\n```javascript\nconst [x, setX] = useState(0);\nconst [y, setY] = useState(0);\n```\n\nOr this?\n\n```javascript\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n```\n\nTechnically, you can use either of these approaches. But **if some two state variables always change together, it might be a good idea to unify them into a single state variable.** Then you won’t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I avoid contradictions in state in react-learn?\n\nAssistant: To avoid contradictions in state in react-learn, here's what you do:\nHere is a hotel feedback form with `isSending` and `isSent` state variables:\n\n```javascript\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n  const [text, setText] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [isSent, setIsSent] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setIsSending(true);\n    await sendMessage(text);\n    setIsSending(false);\n    setIsSent(true);\n  }\n\n  if (isSent) {\n    return <h1>Thanks for feedback!</h1>;\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>How was your stay at The Prancing Pony?</p>\n      <textarea\n        disabled={isSending}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <br />\n      <button disabled={isSending} type=\"submit\">\n        Send\n      </button>\n      {isSending && <p>Sending...</p>}\n    </form>\n  );\n}\n\n// Pretend to send a message.\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I avoid redundant state in react-learn?\n\nAssistant: To avoid redundant state in react-learn, here's what you do:\nIf you can calculate some information from the component’s props or its existing state variables during rendering, you **should not** put that information into that component’s state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n```javascript\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [fullName, setFullName] = useState('');\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n    setFullName(e.target.value + ' ' + lastName);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n    setFullName(firstName + ' ' + e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let’s check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I avoid duplication in state in react-learn?\n\nAssistant: To avoid duplication in state in react-learn, here's what you do:\nThis menu list component lets you choose a single travel snack out of several:\n\n```javascript\nimport { useState } from 'react';\n\nconst initialItems = [\n  { title: 'pretzels', id: 0 },\n  { title: 'crispy seaweed', id: 1 },\n  { title: 'granola bar', id: 2 },\n];\n\nexport default function Menu() {\n  const [items, setItems] = useState(initialItems);\n  const [selectedItem, setSelectedItem] = useState(items[0]);\n\n  return (\n    <>\n      <h2>What's your travel snack?</h2>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            {item.title}\n            {' '}\n            <button onClick={() => {\n              setSelectedItem(item);\n            }}>Choose</button>\n          </li>\n        ))}\n      </ul>\n      <p>You picked {selectedItem.title}.</p>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I avoid deeply nested state in react-learn?\n\nAssistant: To avoid deeply nested state in react-learn, here's what you do:\nImagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:\n\n```javascript\nexport const initialTravelPlan = {\n  id: 0,\n  title: '(Root)',\n  childPlaces: [{\n    id: 1,\n    title: 'Earth',\n    childPlaces: [{\n      id: 2,\n      title: 'Africa',\n      childPlaces: [{\n        id: 3,\n        title: 'Botswana',\n        childPlaces: []\n      }, {\n        id: 4,\n        title: 'Egypt',\n        childPlaces: []\n      }, {\n        id: 5,\n        title: 'Kenya',\n        childPlaces: []\n      }, {\n        id: 6,\n        title: 'Madagascar',\n        childPlaces: []\n      }, {\n        id: 7,\n        title: 'Morocco',\n        childPlaces: []\n      }, {\n        id: 8,\n        title: 'Nigeria',\n        childPlaces: []\n      }, {\n        id: 9,\n        title: 'South Africa',\n        childPlaces: []\n      }]\n    }, {\n      id: 10,\n      title: 'Americas',\n      childPlaces: [{\n        id: 11,\n        title: 'Argentina',\n        childPlaces: []\n      }, {\n        id: 12,\n        title: 'Brazil',\n        childPlaces: []\n      }, {\n        id: 13,\n        title: 'Barbados',\n        childPlaces: []\n      }, {\n        id: 14,\n        title: 'Canada',\n        childPlaces: []\n      }, {\n        id: 15,\n        title: 'Jamaica',\n        childPlaces: []\n      }, {\n        id: 16,\n        title: 'Mexico',\n        childPlaces: []\n      }, {\n        id: 17,\n        title: 'Trinidad and Tobago',\n        childPlaces: []\n      }, {\n        id: 18,\n        title: 'Venezuela',\n        childPlaces: []\n      }]\n    }, {\n      id: 19,\n      title: 'Asia',\n      childPlaces: [{\n        id: 20,\n        title: 'China',\n        childPlaces: []\n      }, {\n        id: 21,\n        title: 'India',\n        childPlaces: []\n      }, {\n        id: 22,\n        title: 'Singapore',\n        childPlaces: []\n      }, {\n        id: 23,\n        title: 'South Korea',\n        childPlaces: []\n      }, {\n        id: 24,\n        title: 'Thailand',\n        childPlaces: []\n      }, {\n        id: 25,\n        title: 'Vietnam',\n        childPlaces: []\n      }]\n    }, {\n      id: 26,\n      title: 'Europe',\n      childPlaces: [{\n        id: 27,\n        title: 'Croatia',\n        childPlaces: [],\n      }, {\n        id: 28,\n        title: 'France',\n        childPlaces: [],\n      }, {\n        id: 29,\n        title: 'Germany',\n        childPlaces: [],\n      }, {\n        id: 30,\n        title: 'Italy',\n        childPlaces: [],\n      }, {\n        id: 31,\n        title: 'Portugal',\n        childPlaces: [],\n      }, {\n        id: 32,\n        title: 'Spain',\n        childPlaces: [],\n      }, {\n        id: 33,\n        title: 'Turkey',\n        childPlaces: [],\n      }]\n    }, {\n      id: 34,\n      title: 'Oceania',\n      childPlaces: [{\n        id: 35,\n        title: 'Australia',\n        childPlaces: [],\n      }, {\n        id: 36,\n        title: 'Bora Bora (French Polynesia)',\n        childPlaces: [],\n      }, {\n        id: 37,\n        title: 'Easter Island (Chile)',\n        childPlaces: [],\n      }, {\n        id: 38,\n        title: 'Fiji',\n        childPlaces: [],\n      }, {\n        id: 39,\n        title: 'Hawaii (the USA)',\n        childPlaces: [],\n      }, {\n        id: 40,\n        title: 'New Zealand',\n        childPlaces: [],\n      }, {\n        id: 41,\n        title: 'Vanuatu',\n        childPlaces: [],\n      }]\n    }]\n  }, {\n    id: 42,\n    title: 'Moon',\n    childPlaces: [{\n      id: 43,\n      title: 'Rheita',\n      childPlaces: []\n    }, {\n      id: 44,\n      title: 'Piccolomini',\n      childPlaces: []\n    }, {\n      id: 45,\n      title: 'Tycho',\n      childPlaces: []\n    }]\n  }, {\n    id: 46,\n    title: 'Mars',\n    childPlaces: [{\n      id: 47,\n      title: 'Corn Town',\n      childPlaces: []\n    }, {\n      id: 48,\n      title: 'Green Hill',\n      childPlaces: []\n    }]\n  }]\n};\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: How do I recap in react-learn?\n\nAssistant: To recap in react-learn, here's what you do:\n- If two state variables always update together, consider merging them into one.\n- Choose your state variables carefully to avoid creating “impossible” states.\n- Structure your state in a way that reduces the chances that you’ll make a mistake updating it.\n- Avoid redundant and duplicate state so that you don’t need to keep it in sync.\n- Don’t put props _into_ state unless you specifically want to prevent updates.\n- For UI patterns like selection, keep ID or index in state instead of the object itself.\n- If updating deeply nested state is complicated, try flattening it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "section_detail", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: Can you give me some code examples for Choosing the State Structure in react-learn?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**MovingDot Component**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  return (\n    <div\n      onPointerMove={e => {\n        setPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }}\n      style={{\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n      }}>\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        left: -10,\n        top: -10,\n        width: 20,\n        height: 20,\n      }} />\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to movingdot component, which is an important aspect of choosing the state structure.\n\n", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "code_examples", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
{"text": "System: You are a helpful react-learn expert.\n\nUser: What are some tips for using Choosing the State Structure in react-learn effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGroup related state to avoid multiple state variables that change together.\n\nAvoid contradictions in state to prevent impossible states.\n\nAvoid redundant state by calculating values from props or existing state during rendering.\n\nAvoid duplication in state to keep data in sync and reduce complexity.\n\nAvoid deeply nested state to simplify updates and management.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/learn/choosing-the-state-structure", "title": "Choosing the State Structure", "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:27:05", "type": "best_practices", "page_metadata": {"og:title": "Choosing the State Structure – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "title": "Choosing the State Structure – React", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1.0"], "algolia-search-order": "36", "ogTitle": "Choosing the State Structure – React", "twitter:title": "Choosing the State Structure – React", "msapplication-TileColor": "#2b5797", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-learn.png", "twitter:image": "https://react.dev/images/og-learn.png", "og:type": "website", "ogImage": "https://react.dev/images/og-learn.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogUrl": "https://react.dev/learn/choosing-the-state-structure", "og:url": "https://react.dev/learn/choosing-the-state-structure", "twitter:creator": "@reactjs", "scrapeId": "2a2078ce-a861-4562-ae7d-7e6b4536f987", "sourceURL": "https://react.dev/learn/choosing-the-state-structure", "url": "https://react.dev/learn/choosing-the-state-structure", "statusCode": 200}}}
